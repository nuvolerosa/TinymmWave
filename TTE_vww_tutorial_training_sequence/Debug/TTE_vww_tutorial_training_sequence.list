
TTE_vww_tutorial_training_sequence.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018130  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003668  08018300  08018300  00028300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000f4  0801b968  0801b968  0002b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000188  0801ba5c  0801ba5c  0002ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000010  0801bbe4  0801bbe4  0002bbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0801bbf4  0801bbf4  0002bbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000009e0  20000000  0801bbfc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00032688  200009e0  0801c5dc  000309e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000a00  20033068  0801c5dc  00033068  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002eff4  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000057a4  00000000  00000000  0005fa04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017c0  00000000  00000000  000651a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015e8  00000000  00000000  00066968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000edd7  00000000  00000000  00067f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a0a3  00000000  00000000  00076d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00080dca  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008984  00000000  00000000  00080e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000003c  00000000  00000000  000897cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  00089808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e0 	.word	0x200009e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080182e8 	.word	0x080182e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e4 	.word	0x200009e4
 800020c:	080182e8 	.word	0x080182e8

08000210 <d_make_comp>:
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	1e4c      	subs	r4, r1, #1
 8000214:	4605      	mov	r5, r0
 8000216:	2c4e      	cmp	r4, #78	; 0x4e
 8000218:	d83f      	bhi.n	800029a <d_make_comp+0x8a>
 800021a:	e8df f004 	tbb	[pc, r4]
 800021e:	3b3b      	.short	0x3b3b
 8000220:	3e3e3b3b 	.word	0x3e3e3b3b
 8000224:	28283e3e 	.word	0x28283e3e
 8000228:	2828283b 	.word	0x2828283b
 800022c:	28282828 	.word	0x28282828
 8000230:	28282828 	.word	0x28282828
 8000234:	29293e28 	.word	0x29293e28
 8000238:	29292929 	.word	0x29292929
 800023c:	283b2929 	.word	0x283b2929
 8000240:	28282828 	.word	0x28282828
 8000244:	3c29283e 	.word	0x3c29283e
 8000248:	293b3e3b 	.word	0x293b3e3b
 800024c:	3e3e3c29 	.word	0x3e3e3c29
 8000250:	3b282828 	.word	0x3b282828
 8000254:	3b3b3b3b 	.word	0x3b3b3b3b
 8000258:	283b3b28 	.word	0x283b3b28
 800025c:	283e3e3b 	.word	0x283e3e3b
 8000260:	3e3e2828 	.word	0x3e3e2828
 8000264:	2828283e 	.word	0x2828283e
 8000268:	293b293b 	.word	0x293b293b
 800026c:	29          	.byte	0x29
 800026d:	00          	.byte	0x00
 800026e:	b1a2      	cbz	r2, 800029a <d_make_comp+0x8a>
 8000270:	e9d5 4005 	ldrd	r4, r0, [r5, #20]
 8000274:	4284      	cmp	r4, r0
 8000276:	da10      	bge.n	800029a <d_make_comp+0x8a>
 8000278:	692f      	ldr	r7, [r5, #16]
 800027a:	0126      	lsls	r6, r4, #4
 800027c:	19b8      	adds	r0, r7, r6
 800027e:	3401      	adds	r4, #1
 8000280:	f04f 0c00 	mov.w	ip, #0
 8000284:	f8c0 c004 	str.w	ip, [r0, #4]
 8000288:	616c      	str	r4, [r5, #20]
 800028a:	55b9      	strb	r1, [r7, r6]
 800028c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8000290:	bcf0      	pop	{r4, r5, r6, r7}
 8000292:	4770      	bx	lr
 8000294:	b10a      	cbz	r2, 800029a <d_make_comp+0x8a>
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1ea      	bne.n	8000270 <d_make_comp+0x60>
 800029a:	2000      	movs	r0, #0
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
 800029e:	4770      	bx	lr

080002a0 <d_ref_qualifier>:
 80002a0:	b410      	push	{r4}
 80002a2:	68c3      	ldr	r3, [r0, #12]
 80002a4:	781c      	ldrb	r4, [r3, #0]
 80002a6:	2c52      	cmp	r4, #82	; 0x52
 80002a8:	460a      	mov	r2, r1
 80002aa:	d00f      	beq.n	80002cc <d_ref_qualifier+0x2c>
 80002ac:	2c4f      	cmp	r4, #79	; 0x4f
 80002ae:	d003      	beq.n	80002b8 <d_ref_qualifier+0x18>
 80002b0:	4608      	mov	r0, r1
 80002b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ba:	3103      	adds	r1, #3
 80002bc:	6301      	str	r1, [r0, #48]	; 0x30
 80002be:	2120      	movs	r1, #32
 80002c0:	3301      	adds	r3, #1
 80002c2:	60c3      	str	r3, [r0, #12]
 80002c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002c8:	2300      	movs	r3, #0
 80002ca:	e7a1      	b.n	8000210 <d_make_comp>
 80002cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80002ce:	3102      	adds	r1, #2
 80002d0:	6301      	str	r1, [r0, #48]	; 0x30
 80002d2:	211f      	movs	r1, #31
 80002d4:	e7f4      	b.n	80002c0 <d_ref_qualifier+0x20>
 80002d6:	bf00      	nop

080002d8 <d_count_templates_scopes>:
 80002d8:	2a00      	cmp	r2, #0
 80002da:	d04e      	beq.n	800037a <d_count_templates_scopes+0xa2>
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4605      	mov	r5, r0
 80002e0:	460e      	mov	r6, r1
 80002e2:	4614      	mov	r4, r2
 80002e4:	7823      	ldrb	r3, [r4, #0]
 80002e6:	3b01      	subs	r3, #1
 80002e8:	2b4e      	cmp	r3, #78	; 0x4e
 80002ea:	d82c      	bhi.n	8000346 <d_count_templates_scopes+0x6e>
 80002ec:	e8df f003 	tbb	[pc, r3]
 80002f0:	40373737 	.word	0x40373737
 80002f4:	28282b2b 	.word	0x28282b2b
 80002f8:	37373737 	.word	0x37373737
 80002fc:	37373737 	.word	0x37373737
 8000300:	37373737 	.word	0x37373737
 8000304:	2b373737 	.word	0x2b373737
 8000308:	37373737 	.word	0x37373737
 800030c:	37373737 	.word	0x37373737
 8000310:	30303737 	.word	0x30303737
 8000314:	372b3737 	.word	0x372b3737
 8000318:	2c373737 	.word	0x2c373737
 800031c:	37373737 	.word	0x37373737
 8000320:	3737282b 	.word	0x3737282b
 8000324:	37373737 	.word	0x37373737
 8000328:	37373737 	.word	0x37373737
 800032c:	2b373737 	.word	0x2b373737
 8000330:	2c2c372b 	.word	0x2c2c372b
 8000334:	372b2c2c 	.word	0x372b2c2c
 8000338:	37373737 	.word	0x37373737
 800033c:	3737      	.short	0x3737
 800033e:	37          	.byte	0x37
 800033f:	00          	.byte	0x00
 8000340:	68e4      	ldr	r4, [r4, #12]
 8000342:	2c00      	cmp	r4, #0
 8000344:	d1ce      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	68a4      	ldr	r4, [r4, #8]
 800034a:	2c00      	cmp	r4, #0
 800034c:	d1ca      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 800034e:	e7fa      	b.n	8000346 <d_count_templates_scopes+0x6e>
 8000350:	68a2      	ldr	r2, [r4, #8]
 8000352:	7813      	ldrb	r3, [r2, #0]
 8000354:	2b05      	cmp	r3, #5
 8000356:	d103      	bne.n	8000360 <d_count_templates_scopes+0x88>
 8000358:	6833      	ldr	r3, [r6, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	6033      	str	r3, [r6, #0]
 800035e:	68a2      	ldr	r2, [r4, #8]
 8000360:	4631      	mov	r1, r6
 8000362:	4628      	mov	r0, r5
 8000364:	f7ff ffb8 	bl	80002d8 <d_count_templates_scopes>
 8000368:	68e4      	ldr	r4, [r4, #12]
 800036a:	2c00      	cmp	r4, #0
 800036c:	d1ba      	bne.n	80002e4 <d_count_templates_scopes+0xc>
 800036e:	e7ea      	b.n	8000346 <d_count_templates_scopes+0x6e>
 8000370:	682b      	ldr	r3, [r5, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	602b      	str	r3, [r5, #0]
 8000376:	68a2      	ldr	r2, [r4, #8]
 8000378:	e7f2      	b.n	8000360 <d_count_templates_scopes+0x88>
 800037a:	4770      	bx	lr

0800037c <d_append_buffer>:
 800037c:	b39a      	cbz	r2, 80003e6 <d_append_buffer+0x6a>
 800037e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000382:	188e      	adds	r6, r1, r2
 8000384:	4604      	mov	r4, r0
 8000386:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800038a:	3e01      	subs	r6, #1
 800038c:	1e4d      	subs	r5, r1, #1
 800038e:	2700      	movs	r7, #0
 8000390:	e016      	b.n	80003c0 <d_append_buffer+0x44>
 8000392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000396:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800039a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800039e:	4798      	blx	r3
 80003a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80003a4:	2200      	movs	r2, #0
 80003a6:	3301      	adds	r3, #1
 80003a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80003ac:	42b5      	cmp	r5, r6
 80003ae:	f04f 0301 	mov.w	r3, #1
 80003b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003b6:	f804 8002 	strb.w	r8, [r4, r2]
 80003ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003be:	d010      	beq.n	80003e2 <d_append_buffer+0x66>
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	4619      	mov	r1, r3
 80003c4:	4620      	mov	r0, r4
 80003c6:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80003ca:	d0e2      	beq.n	8000392 <d_append_buffer+0x16>
 80003cc:	461a      	mov	r2, r3
 80003ce:	42b5      	cmp	r5, r6
 80003d0:	f103 0301 	add.w	r3, r3, #1
 80003d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80003d8:	f804 8002 	strb.w	r8, [r4, r2]
 80003dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80003e0:	d1ee      	bne.n	80003c0 <d_append_buffer+0x44>
 80003e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003e6:	4770      	bx	lr

080003e8 <is_fnqual_component_type>:
 80003e8:	f1a0 031c 	sub.w	r3, r0, #28
 80003ec:	2b04      	cmp	r3, #4
 80003ee:	d907      	bls.n	8000400 <is_fnqual_component_type+0x18>
 80003f0:	284c      	cmp	r0, #76	; 0x4c
 80003f2:	d005      	beq.n	8000400 <is_fnqual_component_type+0x18>
 80003f4:	384e      	subs	r0, #78	; 0x4e
 80003f6:	2801      	cmp	r0, #1
 80003f8:	bf8c      	ite	hi
 80003fa:	2000      	movhi	r0, #0
 80003fc:	2001      	movls	r0, #1
 80003fe:	4770      	bx	lr
 8000400:	2001      	movs	r0, #1
 8000402:	4770      	bx	lr

08000404 <d_number.isra.1>:
 8000404:	b470      	push	{r4, r5, r6}
 8000406:	6802      	ldr	r2, [r0, #0]
 8000408:	7811      	ldrb	r1, [r2, #0]
 800040a:	296e      	cmp	r1, #110	; 0x6e
 800040c:	d018      	beq.n	8000440 <d_number.isra.1+0x3c>
 800040e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000412:	2b09      	cmp	r3, #9
 8000414:	d81e      	bhi.n	8000454 <d_number.isra.1+0x50>
 8000416:	2600      	movs	r6, #0
 8000418:	2300      	movs	r3, #0
 800041a:	3201      	adds	r2, #1
 800041c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000420:	6002      	str	r2, [r0, #0]
 8000422:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000426:	7811      	ldrb	r1, [r2, #0]
 8000428:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800042c:	2d09      	cmp	r5, #9
 800042e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000432:	d9f2      	bls.n	800041a <d_number.isra.1+0x16>
 8000434:	b10e      	cbz	r6, 800043a <d_number.isra.1+0x36>
 8000436:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 800043a:	4618      	mov	r0, r3
 800043c:	bc70      	pop	{r4, r5, r6}
 800043e:	4770      	bx	lr
 8000440:	1c53      	adds	r3, r2, #1
 8000442:	6003      	str	r3, [r0, #0]
 8000444:	7851      	ldrb	r1, [r2, #1]
 8000446:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800044a:	2a09      	cmp	r2, #9
 800044c:	d802      	bhi.n	8000454 <d_number.isra.1+0x50>
 800044e:	461a      	mov	r2, r3
 8000450:	2601      	movs	r6, #1
 8000452:	e7e1      	b.n	8000418 <d_number.isra.1+0x14>
 8000454:	2300      	movs	r3, #0
 8000456:	4618      	mov	r0, r3
 8000458:	bc70      	pop	{r4, r5, r6}
 800045a:	4770      	bx	lr

0800045c <d_number_component>:
 800045c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8000460:	4293      	cmp	r3, r2
 8000462:	b570      	push	{r4, r5, r6, lr}
 8000464:	da0e      	bge.n	8000484 <d_number_component+0x28>
 8000466:	6901      	ldr	r1, [r0, #16]
 8000468:	011a      	lsls	r2, r3, #4
 800046a:	188c      	adds	r4, r1, r2
 800046c:	3301      	adds	r3, #1
 800046e:	2600      	movs	r6, #0
 8000470:	2541      	movs	r5, #65	; 0x41
 8000472:	6066      	str	r6, [r4, #4]
 8000474:	300c      	adds	r0, #12
 8000476:	6083      	str	r3, [r0, #8]
 8000478:	548d      	strb	r5, [r1, r2]
 800047a:	f7ff ffc3 	bl	8000404 <d_number.isra.1>
 800047e:	60a0      	str	r0, [r4, #8]
 8000480:	4620      	mov	r0, r4
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	2400      	movs	r4, #0
 8000486:	4620      	mov	r0, r4
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	bf00      	nop

0800048c <d_compact_number>:
 800048c:	b510      	push	{r4, lr}
 800048e:	68c3      	ldr	r3, [r0, #12]
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	2a5f      	cmp	r2, #95	; 0x5f
 8000494:	4604      	mov	r4, r0
 8000496:	d00d      	beq.n	80004b4 <d_compact_number+0x28>
 8000498:	2a6e      	cmp	r2, #110	; 0x6e
 800049a:	d00d      	beq.n	80004b8 <d_compact_number+0x2c>
 800049c:	300c      	adds	r0, #12
 800049e:	f7ff ffb1 	bl	8000404 <d_number.isra.1>
 80004a2:	3001      	adds	r0, #1
 80004a4:	d408      	bmi.n	80004b8 <d_compact_number+0x2c>
 80004a6:	68e3      	ldr	r3, [r4, #12]
 80004a8:	781a      	ldrb	r2, [r3, #0]
 80004aa:	2a5f      	cmp	r2, #95	; 0x5f
 80004ac:	d104      	bne.n	80004b8 <d_compact_number+0x2c>
 80004ae:	3301      	adds	r3, #1
 80004b0:	60e3      	str	r3, [r4, #12]
 80004b2:	bd10      	pop	{r4, pc}
 80004b4:	2000      	movs	r0, #0
 80004b6:	e7fa      	b.n	80004ae <d_compact_number+0x22>
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	bf00      	nop

080004c0 <d_template_param>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	68c3      	ldr	r3, [r0, #12]
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	2a54      	cmp	r2, #84	; 0x54
 80004c8:	d119      	bne.n	80004fe <d_template_param+0x3e>
 80004ca:	3301      	adds	r3, #1
 80004cc:	60c3      	str	r3, [r0, #12]
 80004ce:	4604      	mov	r4, r0
 80004d0:	f7ff ffdc 	bl	800048c <d_compact_number>
 80004d4:	1e05      	subs	r5, r0, #0
 80004d6:	db12      	blt.n	80004fe <d_template_param+0x3e>
 80004d8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80004dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004de:	428b      	cmp	r3, r1
 80004e0:	f102 0201 	add.w	r2, r2, #1
 80004e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80004e6:	da0a      	bge.n	80004fe <d_template_param+0x3e>
 80004e8:	6921      	ldr	r1, [r4, #16]
 80004ea:	011a      	lsls	r2, r3, #4
 80004ec:	1888      	adds	r0, r1, r2
 80004ee:	3301      	adds	r3, #1
 80004f0:	2700      	movs	r7, #0
 80004f2:	2605      	movs	r6, #5
 80004f4:	6047      	str	r7, [r0, #4]
 80004f6:	6163      	str	r3, [r4, #20]
 80004f8:	548e      	strb	r6, [r1, r2]
 80004fa:	6085      	str	r5, [r0, #8]
 80004fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004fe:	2000      	movs	r0, #0
 8000500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000502:	bf00      	nop

08000504 <d_source_name>:
 8000504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000508:	4604      	mov	r4, r0
 800050a:	300c      	adds	r0, #12
 800050c:	f7ff ff7a 	bl	8000404 <d_number.isra.1>
 8000510:	1e07      	subs	r7, r0, #0
 8000512:	dd49      	ble.n	80005a8 <d_source_name+0xa4>
 8000514:	68e5      	ldr	r5, [r4, #12]
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	1b5b      	subs	r3, r3, r5
 800051a:	429f      	cmp	r7, r3
 800051c:	dc42      	bgt.n	80005a4 <d_source_name+0xa0>
 800051e:	68a2      	ldr	r2, [r4, #8]
 8000520:	19eb      	adds	r3, r5, r7
 8000522:	0752      	lsls	r2, r2, #29
 8000524:	60e3      	str	r3, [r4, #12]
 8000526:	d504      	bpl.n	8000532 <d_source_name+0x2e>
 8000528:	5dea      	ldrb	r2, [r5, r7]
 800052a:	2a24      	cmp	r2, #36	; 0x24
 800052c:	bf04      	itt	eq
 800052e:	3301      	addeq	r3, #1
 8000530:	60e3      	streq	r3, [r4, #12]
 8000532:	2f09      	cmp	r7, #9
 8000534:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
 8000538:	dc10      	bgt.n	800055c <d_source_name+0x58>
 800053a:	45b0      	cmp	r8, r6
 800053c:	dd32      	ble.n	80005a4 <d_source_name+0xa0>
 800053e:	6921      	ldr	r1, [r4, #16]
 8000540:	0132      	lsls	r2, r6, #4
 8000542:	1888      	adds	r0, r1, r2
 8000544:	3601      	adds	r6, #1
 8000546:	2300      	movs	r3, #0
 8000548:	6043      	str	r3, [r0, #4]
 800054a:	6166      	str	r6, [r4, #20]
 800054c:	b355      	cbz	r5, 80005a4 <d_source_name+0xa0>
 800054e:	6043      	str	r3, [r0, #4]
 8000550:	548b      	strb	r3, [r1, r2]
 8000552:	e9c0 5702 	strd	r5, r7, [r0, #8]
 8000556:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800055c:	2208      	movs	r2, #8
 800055e:	4914      	ldr	r1, [pc, #80]	; (80005b0 <d_source_name+0xac>)
 8000560:	4628      	mov	r0, r5
 8000562:	f014 fae5 	bl	8014b30 <memcmp>
 8000566:	2800      	cmp	r0, #0
 8000568:	d1e7      	bne.n	800053a <d_source_name+0x36>
 800056a:	7a2b      	ldrb	r3, [r5, #8]
 800056c:	2b2e      	cmp	r3, #46	; 0x2e
 800056e:	d003      	beq.n	8000578 <d_source_name+0x74>
 8000570:	2b5f      	cmp	r3, #95	; 0x5f
 8000572:	d001      	beq.n	8000578 <d_source_name+0x74>
 8000574:	2b24      	cmp	r3, #36	; 0x24
 8000576:	d1e0      	bne.n	800053a <d_source_name+0x36>
 8000578:	7a6b      	ldrb	r3, [r5, #9]
 800057a:	2b4e      	cmp	r3, #78	; 0x4e
 800057c:	d1dd      	bne.n	800053a <d_source_name+0x36>
 800057e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000580:	3316      	adds	r3, #22
 8000582:	1bdf      	subs	r7, r3, r7
 8000584:	45b0      	cmp	r8, r6
 8000586:	6327      	str	r7, [r4, #48]	; 0x30
 8000588:	dd0c      	ble.n	80005a4 <d_source_name+0xa0>
 800058a:	6922      	ldr	r2, [r4, #16]
 800058c:	4d09      	ldr	r5, [pc, #36]	; (80005b4 <d_source_name+0xb0>)
 800058e:	0133      	lsls	r3, r6, #4
 8000590:	18d0      	adds	r0, r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	3601      	adds	r6, #1
 8000596:	6166      	str	r6, [r4, #20]
 8000598:	6041      	str	r1, [r0, #4]
 800059a:	54d1      	strb	r1, [r2, r3]
 800059c:	2315      	movs	r3, #21
 800059e:	e9c0 5302 	strd	r5, r3, [r0, #8]
 80005a2:	e7d8      	b.n	8000556 <d_source_name+0x52>
 80005a4:	2000      	movs	r0, #0
 80005a6:	e7d6      	b.n	8000556 <d_source_name+0x52>
 80005a8:	2000      	movs	r0, #0
 80005aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ae:	bf00      	nop
 80005b0:	0801ae90 	.word	0x0801ae90
 80005b4:	0801ae9c 	.word	0x0801ae9c

080005b8 <d_abi_tags>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	68c3      	ldr	r3, [r0, #12]
 80005bc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	2a42      	cmp	r2, #66	; 0x42
 80005c2:	4604      	mov	r4, r0
 80005c4:	460d      	mov	r5, r1
 80005c6:	d10f      	bne.n	80005e8 <d_abi_tags+0x30>
 80005c8:	3301      	adds	r3, #1
 80005ca:	60e3      	str	r3, [r4, #12]
 80005cc:	4620      	mov	r0, r4
 80005ce:	f7ff ff99 	bl	8000504 <d_source_name>
 80005d2:	462a      	mov	r2, r5
 80005d4:	4603      	mov	r3, r0
 80005d6:	214b      	movs	r1, #75	; 0x4b
 80005d8:	4620      	mov	r0, r4
 80005da:	f7ff fe19 	bl	8000210 <d_make_comp>
 80005de:	68e3      	ldr	r3, [r4, #12]
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	2a42      	cmp	r2, #66	; 0x42
 80005e4:	4605      	mov	r5, r0
 80005e6:	d0ef      	beq.n	80005c8 <d_abi_tags+0x10>
 80005e8:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005ea:	4628      	mov	r0, r5
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
 80005ee:	bf00      	nop

080005f0 <d_substitution>:
 80005f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005f4:	4605      	mov	r5, r0
 80005f6:	68c0      	ldr	r0, [r0, #12]
 80005f8:	7803      	ldrb	r3, [r0, #0]
 80005fa:	2b53      	cmp	r3, #83	; 0x53
 80005fc:	d131      	bne.n	8000662 <d_substitution+0x72>
 80005fe:	1c43      	adds	r3, r0, #1
 8000600:	60eb      	str	r3, [r5, #12]
 8000602:	7842      	ldrb	r2, [r0, #1]
 8000604:	b3a2      	cbz	r2, 8000670 <d_substitution+0x80>
 8000606:	1c83      	adds	r3, r0, #2
 8000608:	60eb      	str	r3, [r5, #12]
 800060a:	7842      	ldrb	r2, [r0, #1]
 800060c:	2a5f      	cmp	r2, #95	; 0x5f
 800060e:	f000 8089 	beq.w	8000724 <d_substitution+0x134>
 8000612:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000616:	b2e3      	uxtb	r3, r4
 8000618:	2b09      	cmp	r3, #9
 800061a:	d825      	bhi.n	8000668 <d_substitution+0x78>
 800061c:	2100      	movs	r1, #0
 800061e:	e00e      	b.n	800063e <d_substitution+0x4e>
 8000620:	3b30      	subs	r3, #48	; 0x30
 8000622:	4299      	cmp	r1, r3
 8000624:	d81d      	bhi.n	8000662 <d_substitution+0x72>
 8000626:	68e9      	ldr	r1, [r5, #12]
 8000628:	780a      	ldrb	r2, [r1, #0]
 800062a:	1c48      	adds	r0, r1, #1
 800062c:	b122      	cbz	r2, 8000638 <d_substitution+0x48>
 800062e:	60e8      	str	r0, [r5, #12]
 8000630:	780a      	ldrb	r2, [r1, #0]
 8000632:	2a5f      	cmp	r2, #95	; 0x5f
 8000634:	f000 8082 	beq.w	800073c <d_substitution+0x14c>
 8000638:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800063c:	4619      	mov	r1, r3
 800063e:	b2e4      	uxtb	r4, r4
 8000640:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000644:	2c09      	cmp	r4, #9
 8000646:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 800064a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800064e:	d9e7      	bls.n	8000620 <d_substitution+0x30>
 8000650:	2819      	cmp	r0, #25
 8000652:	d806      	bhi.n	8000662 <d_substitution+0x72>
 8000654:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800065c:	3b37      	subs	r3, #55	; 0x37
 800065e:	4299      	cmp	r1, r3
 8000660:	d9e1      	bls.n	8000626 <d_substitution+0x36>
 8000662:	2000      	movs	r0, #0
 8000664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000668:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800066c:	2b19      	cmp	r3, #25
 800066e:	d9d5      	bls.n	800061c <d_substitution+0x2c>
 8000670:	68ab      	ldr	r3, [r5, #8]
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2401      	movne	r4, #1
 800067c:	2400      	moveq	r4, #0
 800067e:	d101      	bne.n	8000684 <d_substitution+0x94>
 8000680:	2900      	cmp	r1, #0
 8000682:	d15d      	bne.n	8000740 <d_substitution+0x150>
 8000684:	4b35      	ldr	r3, [pc, #212]	; (800075c <d_substitution+0x16c>)
 8000686:	2174      	movs	r1, #116	; 0x74
 8000688:	4291      	cmp	r1, r2
 800068a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800068e:	d005      	beq.n	800069c <d_substitution+0xac>
 8000690:	331c      	adds	r3, #28
 8000692:	4283      	cmp	r3, r0
 8000694:	d2e5      	bcs.n	8000662 <d_substitution+0x72>
 8000696:	7819      	ldrb	r1, [r3, #0]
 8000698:	4291      	cmp	r1, r2
 800069a:	d1f9      	bne.n	8000690 <d_substitution+0xa0>
 800069c:	6958      	ldr	r0, [r3, #20]
 800069e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
 80006a2:	b1a8      	cbz	r0, 80006d0 <d_substitution+0xe0>
 80006a4:	428a      	cmp	r2, r1
 80006a6:	da57      	bge.n	8000758 <d_substitution+0x168>
 80006a8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80006ac:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80006b0:	0117      	lsls	r7, r2, #4
 80006b2:	eb0c 0607 	add.w	r6, ip, r7
 80006b6:	3201      	adds	r2, #1
 80006b8:	f04f 0900 	mov.w	r9, #0
 80006bc:	f04f 0818 	mov.w	r8, #24
 80006c0:	f8c6 9004 	str.w	r9, [r6, #4]
 80006c4:	616a      	str	r2, [r5, #20]
 80006c6:	f80c 8007 	strb.w	r8, [ip, r7]
 80006ca:	e9c6 0e02 	strd	r0, lr, [r6, #8]
 80006ce:	62ee      	str	r6, [r5, #44]	; 0x2c
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d13c      	bne.n	800074e <d_substitution+0x15e>
 80006d4:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
 80006d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006da:	4291      	cmp	r1, r2
 80006dc:	4423      	add	r3, r4
 80006de:	632b      	str	r3, [r5, #48]	; 0x30
 80006e0:	dd38      	ble.n	8000754 <d_substitution+0x164>
 80006e2:	6929      	ldr	r1, [r5, #16]
 80006e4:	0113      	lsls	r3, r2, #4
 80006e6:	18c8      	adds	r0, r1, r3
 80006e8:	3201      	adds	r2, #1
 80006ea:	f04f 0c00 	mov.w	ip, #0
 80006ee:	2718      	movs	r7, #24
 80006f0:	f8c0 c004 	str.w	ip, [r0, #4]
 80006f4:	616a      	str	r2, [r5, #20]
 80006f6:	54cf      	strb	r7, [r1, r3]
 80006f8:	e9c0 6402 	strd	r6, r4, [r0, #8]
 80006fc:	68eb      	ldr	r3, [r5, #12]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b42      	cmp	r3, #66	; 0x42
 8000702:	d1af      	bne.n	8000664 <d_substitution+0x74>
 8000704:	4601      	mov	r1, r0
 8000706:	4628      	mov	r0, r5
 8000708:	f7ff ff56 	bl	80005b8 <d_abi_tags>
 800070c:	2800      	cmp	r0, #0
 800070e:	d0a8      	beq.n	8000662 <d_substitution+0x72>
 8000710:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 8000714:	4293      	cmp	r3, r2
 8000716:	daa5      	bge.n	8000664 <d_substitution+0x74>
 8000718:	69e9      	ldr	r1, [r5, #28]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000720:	622a      	str	r2, [r5, #32]
 8000722:	e79f      	b.n	8000664 <d_substitution+0x74>
 8000724:	2300      	movs	r3, #0
 8000726:	6a2a      	ldr	r2, [r5, #32]
 8000728:	429a      	cmp	r2, r3
 800072a:	d99a      	bls.n	8000662 <d_substitution+0x72>
 800072c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800072e:	69e9      	ldr	r1, [r5, #28]
 8000730:	3201      	adds	r2, #1
 8000732:	62aa      	str	r2, [r5, #40]	; 0x28
 8000734:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800073c:	3301      	adds	r3, #1
 800073e:	e7f2      	b.n	8000726 <d_substitution+0x136>
 8000740:	68eb      	ldr	r3, [r5, #12]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3b43      	subs	r3, #67	; 0x43
 8000746:	2b01      	cmp	r3, #1
 8000748:	bf98      	it	ls
 800074a:	460c      	movls	r4, r1
 800074c:	e79a      	b.n	8000684 <d_substitution+0x94>
 800074e:	e9d3 6403 	ldrd	r6, r4, [r3, #12]
 8000752:	e7c1      	b.n	80006d8 <d_substitution+0xe8>
 8000754:	2000      	movs	r0, #0
 8000756:	e7d1      	b.n	80006fc <d_substitution+0x10c>
 8000758:	2600      	movs	r6, #0
 800075a:	e7b8      	b.n	80006ce <d_substitution+0xde>
 800075c:	08018330 	.word	0x08018330

08000760 <d_discriminator>:
 8000760:	68c3      	ldr	r3, [r0, #12]
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	2a5f      	cmp	r2, #95	; 0x5f
 8000766:	d001      	beq.n	800076c <d_discriminator+0xc>
 8000768:	2001      	movs	r0, #1
 800076a:	4770      	bx	lr
 800076c:	b510      	push	{r4, lr}
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4604      	mov	r4, r0
 8000772:	f840 2f0c 	str.w	r2, [r0, #12]!
 8000776:	785a      	ldrb	r2, [r3, #1]
 8000778:	2a5f      	cmp	r2, #95	; 0x5f
 800077a:	d004      	beq.n	8000786 <d_discriminator+0x26>
 800077c:	f7ff fe42 	bl	8000404 <d_number.isra.1>
 8000780:	43c0      	mvns	r0, r0
 8000782:	0fc0      	lsrs	r0, r0, #31
 8000784:	bd10      	pop	{r4, pc}
 8000786:	3302      	adds	r3, #2
 8000788:	60e3      	str	r3, [r4, #12]
 800078a:	f7ff fe3b 	bl	8000404 <d_number.isra.1>
 800078e:	2800      	cmp	r0, #0
 8000790:	db05      	blt.n	800079e <d_discriminator+0x3e>
 8000792:	2809      	cmp	r0, #9
 8000794:	dd07      	ble.n	80007a6 <d_discriminator+0x46>
 8000796:	68e3      	ldr	r3, [r4, #12]
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	2a5f      	cmp	r2, #95	; 0x5f
 800079c:	d001      	beq.n	80007a2 <d_discriminator+0x42>
 800079e:	2000      	movs	r0, #0
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	3301      	adds	r3, #1
 80007a4:	60e3      	str	r3, [r4, #12]
 80007a6:	2001      	movs	r0, #1
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop

080007ac <d_index_template_argument.part.9>:
 80007ac:	b170      	cbz	r0, 80007cc <d_index_template_argument.part.9+0x20>
 80007ae:	7803      	ldrb	r3, [r0, #0]
 80007b0:	2b2f      	cmp	r3, #47	; 0x2f
 80007b2:	d10f      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	dc04      	bgt.n	80007c2 <d_index_template_argument.part.9+0x16>
 80007b8:	e009      	b.n	80007ce <d_index_template_argument.part.9+0x22>
 80007ba:	7803      	ldrb	r3, [r0, #0]
 80007bc:	2b2f      	cmp	r3, #47	; 0x2f
 80007be:	d109      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007c0:	b131      	cbz	r1, 80007d0 <d_index_template_argument.part.9+0x24>
 80007c2:	68c0      	ldr	r0, [r0, #12]
 80007c4:	3901      	subs	r1, #1
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1f7      	bne.n	80007ba <d_index_template_argument.part.9+0xe>
 80007ca:	4770      	bx	lr
 80007cc:	4770      	bx	lr
 80007ce:	d101      	bne.n	80007d4 <d_index_template_argument.part.9+0x28>
 80007d0:	6880      	ldr	r0, [r0, #8]
 80007d2:	4770      	bx	lr
 80007d4:	2000      	movs	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <d_lookup_template_argument.isra.10>:
 80007d8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007dc:	b133      	cbz	r3, 80007ec <d_lookup_template_argument.isra.10+0x14>
 80007de:	6809      	ldr	r1, [r1, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2900      	cmp	r1, #0
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	db04      	blt.n	80007f2 <d_lookup_template_argument.isra.10+0x1a>
 80007e8:	4618      	mov	r0, r3
 80007ea:	e7df      	b.n	80007ac <d_index_template_argument.part.9>
 80007ec:	2201      	movs	r2, #1
 80007ee:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007f2:	4618      	mov	r0, r3
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <d_find_pack>:
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d042      	beq.n	8000882 <d_find_pack+0x8a>
 80007fc:	b538      	push	{r3, r4, r5, lr}
 80007fe:	4605      	mov	r5, r0
 8000800:	460c      	mov	r4, r1
 8000802:	7823      	ldrb	r3, [r4, #0]
 8000804:	2b4b      	cmp	r3, #75	; 0x4b
 8000806:	d827      	bhi.n	8000858 <d_find_pack+0x60>
 8000808:	e8df f003 	tbb	[pc, r3]
 800080c:	2626262e 	.word	0x2626262e
 8000810:	2b2e3026 	.word	0x2b2e3026
 8000814:	2626262b 	.word	0x2626262b
 8000818:	26262626 	.word	0x26262626
 800081c:	26262626 	.word	0x26262626
 8000820:	26262626 	.word	0x26262626
 8000824:	2626262e 	.word	0x2626262e
 8000828:	26262626 	.word	0x26262626
 800082c:	26262626 	.word	0x26262626
 8000830:	2e262626 	.word	0x2e262626
 8000834:	26262626 	.word	0x26262626
 8000838:	2626262e 	.word	0x2626262e
 800083c:	262b2e26 	.word	0x262b2e26
 8000840:	26262626 	.word	0x26262626
 8000844:	26262626 	.word	0x26262626
 8000848:	26262626 	.word	0x26262626
 800084c:	26262e2e 	.word	0x26262e2e
 8000850:	2e2e2e26 	.word	0x2e2e2e26
 8000854:	2e2e2626 	.word	0x2e2e2626
 8000858:	68a1      	ldr	r1, [r4, #8]
 800085a:	4628      	mov	r0, r5
 800085c:	f7ff ffcc 	bl	80007f8 <d_find_pack>
 8000860:	b918      	cbnz	r0, 800086a <d_find_pack+0x72>
 8000862:	68e4      	ldr	r4, [r4, #12]
 8000864:	2c00      	cmp	r4, #0
 8000866:	d1cc      	bne.n	8000802 <d_find_pack+0xa>
 8000868:	2000      	movs	r0, #0
 800086a:	bd38      	pop	{r3, r4, r5, pc}
 800086c:	f104 0108 	add.w	r1, r4, #8
 8000870:	4628      	mov	r0, r5
 8000872:	f7ff ffb1 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8000876:	2800      	cmp	r0, #0
 8000878:	d0f6      	beq.n	8000868 <d_find_pack+0x70>
 800087a:	7803      	ldrb	r3, [r0, #0]
 800087c:	2b2f      	cmp	r3, #47	; 0x2f
 800087e:	d1f3      	bne.n	8000868 <d_find_pack+0x70>
 8000880:	bd38      	pop	{r3, r4, r5, pc}
 8000882:	2000      	movs	r0, #0
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <d_growable_string_callback_adapter>:
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088c:	4614      	mov	r4, r2
 800088e:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
 8000892:	6852      	ldr	r2, [r2, #4]
 8000894:	1c4b      	adds	r3, r1, #1
 8000896:	4413      	add	r3, r2
 8000898:	42ab      	cmp	r3, r5
 800089a:	b082      	sub	sp, #8
 800089c:	460e      	mov	r6, r1
 800089e:	4680      	mov	r8, r0
 80008a0:	d814      	bhi.n	80008cc <d_growable_string_callback_adapter+0x44>
 80008a2:	b117      	cbz	r7, 80008aa <d_growable_string_callback_adapter+0x22>
 80008a4:	b002      	add	sp, #8
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008aa:	e9d4 0300 	ldrd	r0, r3, [r4]
 80008ae:	4632      	mov	r2, r6
 80008b0:	4641      	mov	r1, r8
 80008b2:	4418      	add	r0, r3
 80008b4:	f014 f94b 	bl	8014b4e <memcpy>
 80008b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80008bc:	4433      	add	r3, r6
 80008be:	549f      	strb	r7, [r3, r2]
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	441e      	add	r6, r3
 80008c4:	6066      	str	r6, [r4, #4]
 80008c6:	b002      	add	sp, #8
 80008c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008cc:	2f00      	cmp	r7, #0
 80008ce:	d1e9      	bne.n	80008a4 <d_growable_string_callback_adapter+0x1c>
 80008d0:	b91d      	cbnz	r5, 80008da <d_growable_string_callback_adapter+0x52>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	f04f 0502 	mov.w	r5, #2
 80008d8:	d902      	bls.n	80008e0 <d_growable_string_callback_adapter+0x58>
 80008da:	006d      	lsls	r5, r5, #1
 80008dc:	42ab      	cmp	r3, r5
 80008de:	d8fc      	bhi.n	80008da <d_growable_string_callback_adapter+0x52>
 80008e0:	4629      	mov	r1, r5
 80008e2:	6820      	ldr	r0, [r4, #0]
 80008e4:	f014 f9a0 	bl	8014c28 <realloc>
 80008e8:	b128      	cbz	r0, 80008f6 <d_growable_string_callback_adapter+0x6e>
 80008ea:	68e7      	ldr	r7, [r4, #12]
 80008ec:	6020      	str	r0, [r4, #0]
 80008ee:	60a5      	str	r5, [r4, #8]
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d1d7      	bne.n	80008a4 <d_growable_string_callback_adapter+0x1c>
 80008f4:	e7d9      	b.n	80008aa <d_growable_string_callback_adapter+0x22>
 80008f6:	9001      	str	r0, [sp, #4]
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	f013 fedb 	bl	80146b4 <free>
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	e9c4 3300 	strd	r3, r3, [r4]
 8000906:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800090a:	e7cb      	b.n	80008a4 <d_growable_string_callback_adapter+0x1c>

0800090c <d_call_offset>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4604      	mov	r4, r0
 8000910:	b929      	cbnz	r1, 800091e <d_call_offset+0x12>
 8000912:	68c3      	ldr	r3, [r0, #12]
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	b132      	cbz	r2, 8000926 <d_call_offset+0x1a>
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	60c2      	str	r2, [r0, #12]
 800091c:	7819      	ldrb	r1, [r3, #0]
 800091e:	2968      	cmp	r1, #104	; 0x68
 8000920:	d012      	beq.n	8000948 <d_call_offset+0x3c>
 8000922:	2976      	cmp	r1, #118	; 0x76
 8000924:	d001      	beq.n	800092a <d_call_offset+0x1e>
 8000926:	2000      	movs	r0, #0
 8000928:	bd38      	pop	{r3, r4, r5, pc}
 800092a:	f104 050c 	add.w	r5, r4, #12
 800092e:	4628      	mov	r0, r5
 8000930:	f7ff fd68 	bl	8000404 <d_number.isra.1>
 8000934:	68e3      	ldr	r3, [r4, #12]
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	2a5f      	cmp	r2, #95	; 0x5f
 800093a:	d1f4      	bne.n	8000926 <d_call_offset+0x1a>
 800093c:	3301      	adds	r3, #1
 800093e:	60e3      	str	r3, [r4, #12]
 8000940:	4628      	mov	r0, r5
 8000942:	f7ff fd5f 	bl	8000404 <d_number.isra.1>
 8000946:	e003      	b.n	8000950 <d_call_offset+0x44>
 8000948:	f104 000c 	add.w	r0, r4, #12
 800094c:	f7ff fd5a 	bl	8000404 <d_number.isra.1>
 8000950:	68e3      	ldr	r3, [r4, #12]
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	2a5f      	cmp	r2, #95	; 0x5f
 8000956:	d1e6      	bne.n	8000926 <d_call_offset+0x1a>
 8000958:	3301      	adds	r3, #1
 800095a:	60e3      	str	r3, [r4, #12]
 800095c:	2001      	movs	r0, #1
 800095e:	bd38      	pop	{r3, r4, r5, pc}

08000960 <d_append_num>:
 8000960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000964:	b088      	sub	sp, #32
 8000966:	460a      	mov	r2, r1
 8000968:	4604      	mov	r4, r0
 800096a:	491c      	ldr	r1, [pc, #112]	; (80009dc <d_append_num+0x7c>)
 800096c:	a801      	add	r0, sp, #4
 800096e:	f014 fb61 	bl	8015034 <sprintf>
 8000972:	a801      	add	r0, sp, #4
 8000974:	f006 fa16 	bl	8006da4 <strlen>
 8000978:	b368      	cbz	r0, 80009d6 <d_append_num+0x76>
 800097a:	ad01      	add	r5, sp, #4
 800097c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8000980:	182e      	adds	r6, r5, r0
 8000982:	2700      	movs	r7, #0
 8000984:	e016      	b.n	80009b4 <d_append_num+0x54>
 8000986:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800098a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800098e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8000992:	4798      	blx	r3
 8000994:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000998:	2200      	movs	r2, #0
 800099a:	3301      	adds	r3, #1
 800099c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009a0:	42ae      	cmp	r6, r5
 80009a2:	f04f 0301 	mov.w	r3, #1
 80009a6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009aa:	f804 8002 	strb.w	r8, [r4, r2]
 80009ae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009b2:	d010      	beq.n	80009d6 <d_append_num+0x76>
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	4619      	mov	r1, r3
 80009b8:	4620      	mov	r0, r4
 80009ba:	f815 8b01 	ldrb.w	r8, [r5], #1
 80009be:	d0e2      	beq.n	8000986 <d_append_num+0x26>
 80009c0:	461a      	mov	r2, r3
 80009c2:	42ae      	cmp	r6, r5
 80009c4:	f103 0301 	add.w	r3, r3, #1
 80009c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80009cc:	f804 8002 	strb.w	r8, [r4, r2]
 80009d0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80009d4:	d1ee      	bne.n	80009b4 <d_append_num+0x54>
 80009d6:	b008      	add	sp, #32
 80009d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009dc:	0801aeb4 	.word	0x0801aeb4

080009e0 <d_exprlist>:
 80009e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e4:	68c3      	ldr	r3, [r0, #12]
 80009e6:	781d      	ldrb	r5, [r3, #0]
 80009e8:	b083      	sub	sp, #12
 80009ea:	2200      	movs	r2, #0
 80009ec:	428d      	cmp	r5, r1
 80009ee:	4604      	mov	r4, r0
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	f000 8199 	beq.w	8000d28 <d_exprlist+0x348>
 80009f6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8000eb8 <d_exprlist+0x4d8>
 80009fa:	4688      	mov	r8, r1
 80009fc:	af01      	add	r7, sp, #4
 80009fe:	2501      	movs	r5, #1
 8000a00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8000a02:	6365      	str	r5, [r4, #52]	; 0x34
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	2a4c      	cmp	r2, #76	; 0x4c
 8000a08:	d05c      	beq.n	8000ac4 <d_exprlist+0xe4>
 8000a0a:	2a54      	cmp	r2, #84	; 0x54
 8000a0c:	d066      	beq.n	8000adc <d_exprlist+0xfc>
 8000a0e:	2a73      	cmp	r2, #115	; 0x73
 8000a10:	d045      	beq.n	8000a9e <d_exprlist+0xbe>
 8000a12:	2a66      	cmp	r2, #102	; 0x66
 8000a14:	d11c      	bne.n	8000a50 <d_exprlist+0x70>
 8000a16:	785a      	ldrb	r2, [r3, #1]
 8000a18:	2a70      	cmp	r2, #112	; 0x70
 8000a1a:	f000 8087 	beq.w	8000b2c <d_exprlist+0x14c>
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f001 fa70 	bl	8001f04 <d_operator_name>
 8000a24:	4605      	mov	r5, r0
 8000a26:	2800      	cmp	r0, #0
 8000a28:	f000 818c 	beq.w	8000d44 <d_exprlist+0x364>
 8000a2c:	7803      	ldrb	r3, [r0, #0]
 8000a2e:	2b31      	cmp	r3, #49	; 0x31
 8000a30:	f000 8098 	beq.w	8000b64 <d_exprlist+0x184>
 8000a34:	2b32      	cmp	r3, #50	; 0x32
 8000a36:	d056      	beq.n	8000ae6 <d_exprlist+0x106>
 8000a38:	2b33      	cmp	r3, #51	; 0x33
 8000a3a:	d171      	bne.n	8000b20 <d_exprlist+0x140>
 8000a3c:	68e3      	ldr	r3, [r4, #12]
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	2a5f      	cmp	r2, #95	; 0x5f
 8000a42:	f000 81da 	beq.w	8000dfa <d_exprlist+0x41a>
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 fa38 	bl	8000ebc <d_expression_1>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	e0c1      	b.n	8000bd4 <d_exprlist+0x1f4>
 8000a50:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a54:	2909      	cmp	r1, #9
 8000a56:	f200 80e7 	bhi.w	8000c28 <d_exprlist+0x248>
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f001 fbfe 	bl	800225c <d_unqualified_name>
 8000a60:	4605      	mov	r5, r0
 8000a62:	2800      	cmp	r0, #0
 8000a64:	f000 816e 	beq.w	8000d44 <d_exprlist+0x364>
 8000a68:	68e3      	ldr	r3, [r4, #12]
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	2a49      	cmp	r2, #73	; 0x49
 8000a6e:	f000 80b8 	beq.w	8000be2 <d_exprlist+0x202>
 8000a72:	6366      	str	r6, [r4, #52]	; 0x34
 8000a74:	462a      	mov	r2, r5
 8000a76:	2300      	movs	r3, #0
 8000a78:	212e      	movs	r1, #46	; 0x2e
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff fbc8 	bl	8000210 <d_make_comp>
 8000a80:	6038      	str	r0, [r7, #0]
 8000a82:	b330      	cbz	r0, 8000ad2 <d_exprlist+0xf2>
 8000a84:	68e3      	ldr	r3, [r4, #12]
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	4542      	cmp	r2, r8
 8000a8a:	f100 070c 	add.w	r7, r0, #12
 8000a8e:	d1b6      	bne.n	80009fe <d_exprlist+0x1e>
 8000a90:	3301      	adds	r3, #1
 8000a92:	9d01      	ldr	r5, [sp, #4]
 8000a94:	60e3      	str	r3, [r4, #12]
 8000a96:	4628      	mov	r0, r5
 8000a98:	b003      	add	sp, #12
 8000a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a9e:	785a      	ldrb	r2, [r3, #1]
 8000aa0:	2a72      	cmp	r2, #114	; 0x72
 8000aa2:	f000 80ab 	beq.w	8000bfc <d_exprlist+0x21c>
 8000aa6:	2a70      	cmp	r2, #112	; 0x70
 8000aa8:	d1b9      	bne.n	8000a1e <d_exprlist+0x3e>
 8000aaa:	3302      	adds	r3, #2
 8000aac:	60e3      	str	r3, [r4, #12]
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f000 fa04 	bl	8000ebc <d_expression_1>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	214a      	movs	r1, #74	; 0x4a
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fba8 	bl	8000210 <d_make_comp>
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	e003      	b.n	8000acc <d_exprlist+0xec>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f002 f813 	bl	8002af0 <d_expr_primary>
 8000aca:	4605      	mov	r5, r0
 8000acc:	6366      	str	r6, [r4, #52]	; 0x34
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d1d0      	bne.n	8000a74 <d_exprlist+0x94>
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000adc:	4620      	mov	r0, r4
 8000ade:	f7ff fcef 	bl	80004c0 <d_template_param>
 8000ae2:	4605      	mov	r5, r0
 8000ae4:	e7f2      	b.n	8000acc <d_exprlist+0xec>
 8000ae6:	6883      	ldr	r3, [r0, #8]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d819      	bhi.n	8000b20 <d_exprlist+0x140>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <d_exprlist+0x114>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000c87 	.word	0x08000c87
 8000af8:	08000a47 	.word	0x08000a47
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b21 	.word	0x08000b21
 8000b04:	2a74      	cmp	r2, #116	; 0x74
 8000b06:	d18a      	bne.n	8000a1e <d_exprlist+0x3e>
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	2b6c      	cmp	r3, #108	; 0x6c
 8000b0c:	d187      	bne.n	8000a1e <d_exprlist+0x3e>
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f000 fdfe 	bl	8001710 <d_type>
 8000b14:	68e3      	ldr	r3, [r4, #12]
 8000b16:	785a      	ldrb	r2, [r3, #1]
 8000b18:	4605      	mov	r5, r0
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8123 	bne.w	8000d66 <d_exprlist+0x386>
 8000b20:	2500      	movs	r5, #0
 8000b22:	4628      	mov	r0, r5
 8000b24:	6366      	str	r6, [r4, #52]	; 0x34
 8000b26:	b003      	add	sp, #12
 8000b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2c:	1c9a      	adds	r2, r3, #2
 8000b2e:	60e2      	str	r2, [r4, #12]
 8000b30:	789a      	ldrb	r2, [r3, #2]
 8000b32:	2a54      	cmp	r2, #84	; 0x54
 8000b34:	f040 8082 	bne.w	8000c3c <d_exprlist+0x25c>
 8000b38:	3303      	adds	r3, #3
 8000b3a:	60e3      	str	r3, [r4, #12]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	daec      	bge.n	8000b20 <d_exprlist+0x140>
 8000b46:	6921      	ldr	r1, [r4, #16]
 8000b48:	011a      	lsls	r2, r3, #4
 8000b4a:	188d      	adds	r5, r1, r2
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	f04f 0e00 	mov.w	lr, #0
 8000b52:	f04f 0c06 	mov.w	ip, #6
 8000b56:	f8c5 e004 	str.w	lr, [r5, #4]
 8000b5a:	6163      	str	r3, [r4, #20]
 8000b5c:	f801 c002 	strb.w	ip, [r1, r2]
 8000b60:	60a8      	str	r0, [r5, #8]
 8000b62:	e786      	b.n	8000a72 <d_exprlist+0x92>
 8000b64:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8000b68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b6a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b6e:	f8db a000 	ldr.w	sl, [fp]
 8000b72:	3a02      	subs	r2, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	6323      	str	r3, [r4, #48]	; 0x30
 8000b78:	4650      	mov	r0, sl
 8000b7a:	4649      	mov	r1, r9
 8000b7c:	f006 f908 	bl	8006d90 <strcmp>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	f000 80e4 	beq.w	8000d4e <d_exprlist+0x36e>
 8000b86:	f8db b00c 	ldr.w	fp, [fp, #12]
 8000b8a:	f1bb 0f03 	cmp.w	fp, #3
 8000b8e:	d8c7      	bhi.n	8000b20 <d_exprlist+0x140>
 8000b90:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8000b94:	00040079 	.word	0x00040079
 8000b98:	008100f7 	.word	0x008100f7
 8000b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000ba0:	2b70      	cmp	r3, #112	; 0x70
 8000ba2:	d065      	beq.n	8000c70 <d_exprlist+0x290>
 8000ba4:	2b6d      	cmp	r3, #109	; 0x6d
 8000ba6:	d063      	beq.n	8000c70 <d_exprlist+0x290>
 8000ba8:	f04f 0b00 	mov.w	fp, #0
 8000bac:	4650      	mov	r0, sl
 8000bae:	49bd      	ldr	r1, [pc, #756]	; (8000ea4 <d_exprlist+0x4c4>)
 8000bb0:	f006 f8ee 	bl	8006d90 <strcmp>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	f040 80c0 	bne.w	8000d3a <d_exprlist+0x35a>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 fb90 	bl	80012e0 <d_template_args_1>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f1bb 0f00 	cmp.w	fp, #0
 8000bc6:	d005      	beq.n	8000bd4 <d_exprlist+0x1f4>
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2138      	movs	r1, #56	; 0x38
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f7ff fb1f 	bl	8000210 <d_make_comp>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	2136      	movs	r1, #54	; 0x36
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f7ff fb19 	bl	8000210 <d_make_comp>
 8000bde:	4605      	mov	r5, r0
 8000be0:	e774      	b.n	8000acc <d_exprlist+0xec>
 8000be2:	3301      	adds	r3, #1
 8000be4:	60e3      	str	r3, [r4, #12]
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 fb7a 	bl	80012e0 <d_template_args_1>
 8000bec:	462a      	mov	r2, r5
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fb0c 	bl	8000210 <d_make_comp>
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	e767      	b.n	8000acc <d_exprlist+0xec>
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	60e3      	str	r3, [r4, #12]
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fd85 	bl	8001710 <d_type>
 8000c06:	4682      	mov	sl, r0
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f001 fb27 	bl	800225c <d_unqualified_name>
 8000c0e:	68e3      	ldr	r3, [r4, #12]
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	2a49      	cmp	r2, #73	; 0x49
 8000c14:	4683      	mov	fp, r0
 8000c16:	d01e      	beq.n	8000c56 <d_exprlist+0x276>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4652      	mov	r2, sl
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff faf6 	bl	8000210 <d_make_comp>
 8000c24:	4605      	mov	r5, r0
 8000c26:	e751      	b.n	8000acc <d_exprlist+0xec>
 8000c28:	2a6f      	cmp	r2, #111	; 0x6f
 8000c2a:	f040 8094 	bne.w	8000d56 <d_exprlist+0x376>
 8000c2e:	785a      	ldrb	r2, [r3, #1]
 8000c30:	2a6e      	cmp	r2, #110	; 0x6e
 8000c32:	f47f aef4 	bne.w	8000a1e <d_exprlist+0x3e>
 8000c36:	3302      	adds	r3, #2
 8000c38:	60e3      	str	r3, [r4, #12]
 8000c3a:	e70e      	b.n	8000a5a <d_exprlist+0x7a>
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f7ff fc25 	bl	800048c <d_compact_number>
 8000c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000c46:	4298      	cmp	r0, r3
 8000c48:	f43f af6a 	beq.w	8000b20 <d_exprlist+0x140>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	f43f af67 	beq.w	8000b20 <d_exprlist+0x140>
 8000c52:	3001      	adds	r0, #1
 8000c54:	e773      	b.n	8000b3e <d_exprlist+0x15e>
 8000c56:	3301      	adds	r3, #1
 8000c58:	60e3      	str	r3, [r4, #12]
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 fb40 	bl	80012e0 <d_template_args_1>
 8000c60:	465a      	mov	r2, fp
 8000c62:	4603      	mov	r3, r0
 8000c64:	2104      	movs	r1, #4
 8000c66:	4620      	mov	r0, r4
 8000c68:	f7ff fad2 	bl	8000210 <d_make_comp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	e7d4      	b.n	8000c1a <d_exprlist+0x23a>
 8000c70:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d197      	bne.n	8000ba8 <d_exprlist+0x1c8>
 8000c78:	68e3      	ldr	r3, [r4, #12]
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	2a5f      	cmp	r2, #95	; 0x5f
 8000c7e:	d195      	bne.n	8000bac <d_exprlist+0x1cc>
 8000c80:	3301      	adds	r3, #1
 8000c82:	60e3      	str	r3, [r4, #12]
 8000c84:	e790      	b.n	8000ba8 <d_exprlist+0x1c8>
 8000c86:	462a      	mov	r2, r5
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2135      	movs	r1, #53	; 0x35
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fabf 	bl	8000210 <d_make_comp>
 8000c92:	4605      	mov	r5, r0
 8000c94:	e71a      	b.n	8000acc <d_exprlist+0xec>
 8000c96:	f1ba 0f00 	cmp.w	sl, #0
 8000c9a:	f43f af41 	beq.w	8000b20 <d_exprlist+0x140>
 8000c9e:	4982      	ldr	r1, [pc, #520]	; (8000ea8 <d_exprlist+0x4c8>)
 8000ca0:	4650      	mov	r0, sl
 8000ca2:	f006 f875 	bl	8006d90 <strcmp>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	f000 80c7 	beq.w	8000e3a <d_exprlist+0x45a>
 8000cac:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb0:	2b66      	cmp	r3, #102	; 0x66
 8000cb2:	f000 80ed 	beq.w	8000e90 <d_exprlist+0x4b0>
 8000cb6:	2b6e      	cmp	r3, #110	; 0x6e
 8000cb8:	f47f af32 	bne.w	8000b20 <d_exprlist+0x140>
 8000cbc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cc0:	2b77      	cmp	r3, #119	; 0x77
 8000cc2:	d002      	beq.n	8000cca <d_exprlist+0x2ea>
 8000cc4:	2b61      	cmp	r3, #97	; 0x61
 8000cc6:	f47f af2b 	bne.w	8000b20 <d_exprlist+0x140>
 8000cca:	215f      	movs	r1, #95	; 0x5f
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fe87 	bl	80009e0 <d_exprlist>
 8000cd2:	4682      	mov	sl, r0
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f000 fd1b 	bl	8001710 <d_type>
 8000cda:	68e3      	ldr	r3, [r4, #12]
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2a45      	cmp	r2, #69	; 0x45
 8000ce0:	4683      	mov	fp, r0
 8000ce2:	f000 8086 	beq.w	8000df2 <d_exprlist+0x412>
 8000ce6:	2a70      	cmp	r2, #112	; 0x70
 8000ce8:	f000 80c6 	beq.w	8000e78 <d_exprlist+0x498>
 8000cec:	2a69      	cmp	r2, #105	; 0x69
 8000cee:	f47f af17 	bne.w	8000b20 <d_exprlist+0x140>
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	2b6c      	cmp	r3, #108	; 0x6c
 8000cf6:	f47f af13 	bne.w	8000b20 <d_exprlist+0x140>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f000 f8de 	bl	8000ebc <d_expression_1>
 8000d00:	4603      	mov	r3, r0
 8000d02:	465a      	mov	r2, fp
 8000d04:	213b      	movs	r1, #59	; 0x3b
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fa82 	bl	8000210 <d_make_comp>
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	4603      	mov	r3, r0
 8000d10:	213a      	movs	r1, #58	; 0x3a
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff fa7c 	bl	8000210 <d_make_comp>
 8000d18:	462a      	mov	r2, r5
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2139      	movs	r1, #57	; 0x39
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fa76 	bl	8000210 <d_make_comp>
 8000d24:	4605      	mov	r5, r0
 8000d26:	e6d1      	b.n	8000acc <d_exprlist+0xec>
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60c3      	str	r3, [r0, #12]
 8000d2c:	212e      	movs	r1, #46	; 0x2e
 8000d2e:	4613      	mov	r3, r2
 8000d30:	b003      	add	sp, #12
 8000d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d36:	f7ff ba6b 	b.w	8000210 <d_make_comp>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f8be 	bl	8000ebc <d_expression_1>
 8000d40:	4603      	mov	r3, r0
 8000d42:	e73e      	b.n	8000bc2 <d_exprlist+0x1e2>
 8000d44:	4628      	mov	r0, r5
 8000d46:	6366      	str	r6, [r4, #52]	; 0x34
 8000d48:	b003      	add	sp, #12
 8000d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f000 fcde 	bl	8001710 <d_type>
 8000d54:	e73d      	b.n	8000bd2 <d_exprlist+0x1f2>
 8000d56:	2a69      	cmp	r2, #105	; 0x69
 8000d58:	f47f aed4 	bne.w	8000b04 <d_exprlist+0x124>
 8000d5c:	785a      	ldrb	r2, [r3, #1]
 8000d5e:	2a6c      	cmp	r2, #108	; 0x6c
 8000d60:	f47f ae5d 	bne.w	8000a1e <d_exprlist+0x3e>
 8000d64:	2500      	movs	r5, #0
 8000d66:	3302      	adds	r3, #2
 8000d68:	60e3      	str	r3, [r4, #12]
 8000d6a:	2145      	movs	r1, #69	; 0x45
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff fe37 	bl	80009e0 <d_exprlist>
 8000d72:	462a      	mov	r2, r5
 8000d74:	4603      	mov	r3, r0
 8000d76:	2130      	movs	r1, #48	; 0x30
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fa49 	bl	8000210 <d_make_comp>
 8000d7e:	4605      	mov	r5, r0
 8000d80:	e6a4      	b.n	8000acc <d_exprlist+0xec>
 8000d82:	f1ba 0f00 	cmp.w	sl, #0
 8000d86:	f43f aecb 	beq.w	8000b20 <d_exprlist+0x140>
 8000d8a:	68ab      	ldr	r3, [r5, #8]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	785a      	ldrb	r2, [r3, #1]
 8000d90:	2a63      	cmp	r2, #99	; 0x63
 8000d92:	d03a      	beq.n	8000e0a <d_exprlist+0x42a>
 8000d94:	f89a 3000 	ldrb.w	r3, [sl]
 8000d98:	2b66      	cmp	r3, #102	; 0x66
 8000d9a:	d149      	bne.n	8000e30 <d_exprlist+0x450>
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f001 f8b1 	bl	8001f04 <d_operator_name>
 8000da2:	4683      	mov	fp, r0
 8000da4:	4941      	ldr	r1, [pc, #260]	; (8000eac <d_exprlist+0x4cc>)
 8000da6:	4650      	mov	r0, sl
 8000da8:	f005 fff2 	bl	8006d90 <strcmp>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d039      	beq.n	8000e24 <d_exprlist+0x444>
 8000db0:	493f      	ldr	r1, [pc, #252]	; (8000eb0 <d_exprlist+0x4d0>)
 8000db2:	4650      	mov	r0, sl
 8000db4:	f005 ffec 	bl	8006d90 <strcmp>
 8000db8:	b128      	cbz	r0, 8000dc6 <d_exprlist+0x3e6>
 8000dba:	4650      	mov	r0, sl
 8000dbc:	493d      	ldr	r1, [pc, #244]	; (8000eb4 <d_exprlist+0x4d4>)
 8000dbe:	f005 ffe7 	bl	8006d90 <strcmp>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d168      	bne.n	8000e98 <d_exprlist+0x4b8>
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f001 fa48 	bl	800225c <d_unqualified_name>
 8000dcc:	68e3      	ldr	r3, [r4, #12]
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	2a49      	cmp	r2, #73	; 0x49
 8000dd2:	4682      	mov	sl, r0
 8000dd4:	d043      	beq.n	8000e5e <d_exprlist+0x47e>
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	465a      	mov	r2, fp
 8000dda:	2138      	movs	r1, #56	; 0x38
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff fa17 	bl	8000210 <d_make_comp>
 8000de2:	462a      	mov	r2, r5
 8000de4:	4603      	mov	r3, r0
 8000de6:	2137      	movs	r1, #55	; 0x37
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff fa11 	bl	8000210 <d_make_comp>
 8000dee:	4605      	mov	r5, r0
 8000df0:	e66c      	b.n	8000acc <d_exprlist+0xec>
 8000df2:	3301      	adds	r3, #1
 8000df4:	60e3      	str	r3, [r4, #12]
 8000df6:	2300      	movs	r3, #0
 8000df8:	e783      	b.n	8000d02 <d_exprlist+0x322>
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60e3      	str	r3, [r4, #12]
 8000dfe:	2145      	movs	r1, #69	; 0x45
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fded 	bl	80009e0 <d_exprlist>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e6e4      	b.n	8000bd4 <d_exprlist+0x1f4>
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000e10:	2a01      	cmp	r2, #1
 8000e12:	d902      	bls.n	8000e1a <d_exprlist+0x43a>
 8000e14:	3b72      	subs	r3, #114	; 0x72
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d8bc      	bhi.n	8000d94 <d_exprlist+0x3b4>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 fc78 	bl	8001710 <d_type>
 8000e20:	4683      	mov	fp, r0
 8000e22:	e7bf      	b.n	8000da4 <d_exprlist+0x3c4>
 8000e24:	2145      	movs	r1, #69	; 0x45
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff fdda 	bl	80009e0 <d_exprlist>
 8000e2c:	4682      	mov	sl, r0
 8000e2e:	e7d2      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000e30:	4620      	mov	r0, r4
 8000e32:	f000 f843 	bl	8000ebc <d_expression_1>
 8000e36:	4683      	mov	fp, r0
 8000e38:	e7b4      	b.n	8000da4 <d_exprlist+0x3c4>
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f000 f83e 	bl	8000ebc <d_expression_1>
 8000e40:	4682      	mov	sl, r0
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 f83a 	bl	8000ebc <d_expression_1>
 8000e48:	4683      	mov	fp, r0
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 f836 	bl	8000ebc <d_expression_1>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2800      	cmp	r0, #0
 8000e54:	f47f af55 	bne.w	8000d02 <d_exprlist+0x322>
 8000e58:	6366      	str	r6, [r4, #52]	; 0x34
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	e61b      	b.n	8000a96 <d_exprlist+0xb6>
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60e3      	str	r3, [r4, #12]
 8000e62:	4620      	mov	r0, r4
 8000e64:	f000 fa3c 	bl	80012e0 <d_template_args_1>
 8000e68:	4652      	mov	r2, sl
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ce 	bl	8000210 <d_make_comp>
 8000e74:	4682      	mov	sl, r0
 8000e76:	e7ae      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000e78:	785a      	ldrb	r2, [r3, #1]
 8000e7a:	2a69      	cmp	r2, #105	; 0x69
 8000e7c:	f47f ae50 	bne.w	8000b20 <d_exprlist+0x140>
 8000e80:	3302      	adds	r3, #2
 8000e82:	60e3      	str	r3, [r4, #12]
 8000e84:	2145      	movs	r1, #69	; 0x45
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff fdaa 	bl	80009e0 <d_exprlist>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e738      	b.n	8000d02 <d_exprlist+0x322>
 8000e90:	4620      	mov	r0, r4
 8000e92:	f001 f837 	bl	8001f04 <d_operator_name>
 8000e96:	e7d3      	b.n	8000e40 <d_exprlist+0x460>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 f80f 	bl	8000ebc <d_expression_1>
 8000e9e:	4682      	mov	sl, r0
 8000ea0:	e799      	b.n	8000dd6 <d_exprlist+0x3f6>
 8000ea2:	bf00      	nop
 8000ea4:	0801aeb8 	.word	0x0801aeb8
 8000ea8:	0801aec8 	.word	0x0801aec8
 8000eac:	0801aebc 	.word	0x0801aebc
 8000eb0:	0801aec0 	.word	0x0801aec0
 8000eb4:	0801aec4 	.word	0x0801aec4
 8000eb8:	0801b3d4 	.word	0x0801b3d4

08000ebc <d_expression_1>:
 8000ebc:	68c1      	ldr	r1, [r0, #12]
 8000ebe:	780b      	ldrb	r3, [r1, #0]
 8000ec0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec2:	d067      	beq.n	8000f94 <d_expression_1+0xd8>
 8000ec4:	2b54      	cmp	r3, #84	; 0x54
 8000ec6:	d067      	beq.n	8000f98 <d_expression_1+0xdc>
 8000ec8:	2b73      	cmp	r3, #115	; 0x73
 8000eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ece:	4604      	mov	r4, r0
 8000ed0:	d01c      	beq.n	8000f0c <d_expression_1+0x50>
 8000ed2:	2b66      	cmp	r3, #102	; 0x66
 8000ed4:	d13d      	bne.n	8000f52 <d_expression_1+0x96>
 8000ed6:	784b      	ldrb	r3, [r1, #1]
 8000ed8:	2b70      	cmp	r3, #112	; 0x70
 8000eda:	d11d      	bne.n	8000f18 <d_expression_1+0x5c>
 8000edc:	1c8b      	adds	r3, r1, #2
 8000ede:	60c3      	str	r3, [r0, #12]
 8000ee0:	788b      	ldrb	r3, [r1, #2]
 8000ee2:	2b54      	cmp	r3, #84	; 0x54
 8000ee4:	f040 809a 	bne.w	800101c <d_expression_1+0x160>
 8000ee8:	3103      	adds	r1, #3
 8000eea:	60c1      	str	r1, [r0, #12]
 8000eec:	2000      	movs	r0, #0
 8000eee:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	da4a      	bge.n	8000f8c <d_expression_1+0xd0>
 8000ef6:	6921      	ldr	r1, [r4, #16]
 8000ef8:	011a      	lsls	r2, r3, #4
 8000efa:	188d      	adds	r5, r1, r2
 8000efc:	3301      	adds	r3, #1
 8000efe:	2700      	movs	r7, #0
 8000f00:	2606      	movs	r6, #6
 8000f02:	606f      	str	r7, [r5, #4]
 8000f04:	6163      	str	r3, [r4, #20]
 8000f06:	548e      	strb	r6, [r1, r2]
 8000f08:	60a8      	str	r0, [r5, #8]
 8000f0a:	e02f      	b.n	8000f6c <d_expression_1+0xb0>
 8000f0c:	784b      	ldrb	r3, [r1, #1]
 8000f0e:	2b72      	cmp	r3, #114	; 0x72
 8000f10:	d06e      	beq.n	8000ff0 <d_expression_1+0x134>
 8000f12:	2b70      	cmp	r3, #112	; 0x70
 8000f14:	f000 8160 	beq.w	80011d8 <d_expression_1+0x31c>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f000 fff3 	bl	8001f04 <d_operator_name>
 8000f1e:	4605      	mov	r5, r0
 8000f20:	b3a0      	cbz	r0, 8000f8c <d_expression_1+0xd0>
 8000f22:	7803      	ldrb	r3, [r0, #0]
 8000f24:	2b31      	cmp	r3, #49	; 0x31
 8000f26:	d039      	beq.n	8000f9c <d_expression_1+0xe0>
 8000f28:	2b32      	cmp	r3, #50	; 0x32
 8000f2a:	f000 8127 	beq.w	800117c <d_expression_1+0x2c0>
 8000f2e:	2b33      	cmp	r3, #51	; 0x33
 8000f30:	d12c      	bne.n	8000f8c <d_expression_1+0xd0>
 8000f32:	68e3      	ldr	r3, [r4, #12]
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	2a5f      	cmp	r2, #95	; 0x5f
 8000f38:	f000 8176 	beq.w	8001228 <d_expression_1+0x36c>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff ffbd 	bl	8000ebc <d_expression_1>
 8000f42:	4603      	mov	r3, r0
 8000f44:	462a      	mov	r2, r5
 8000f46:	4620      	mov	r0, r4
 8000f48:	2136      	movs	r1, #54	; 0x36
 8000f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	f7ff b95f 	b.w	8000210 <d_make_comp>
 8000f52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f56:	2a09      	cmp	r2, #9
 8000f58:	d841      	bhi.n	8000fde <d_expression_1+0x122>
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f001 f97e 	bl	800225c <d_unqualified_name>
 8000f60:	4605      	mov	r5, r0
 8000f62:	b198      	cbz	r0, 8000f8c <d_expression_1+0xd0>
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	2a49      	cmp	r2, #73	; 0x49
 8000f6a:	d02b      	beq.n	8000fc4 <d_expression_1+0x108>
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f72:	2b74      	cmp	r3, #116	; 0x74
 8000f74:	d1d0      	bne.n	8000f18 <d_expression_1+0x5c>
 8000f76:	784b      	ldrb	r3, [r1, #1]
 8000f78:	2b6c      	cmp	r3, #108	; 0x6c
 8000f7a:	d1cd      	bne.n	8000f18 <d_expression_1+0x5c>
 8000f7c:	f000 fbc8 	bl	8001710 <d_type>
 8000f80:	68e1      	ldr	r1, [r4, #12]
 8000f82:	784b      	ldrb	r3, [r1, #1]
 8000f84:	4605      	mov	r5, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8190 	bne.w	80012ac <d_expression_1+0x3f0>
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	4628      	mov	r0, r5
 8000f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f94:	f001 bdac 	b.w	8002af0 <d_expr_primary>
 8000f98:	f7ff ba92 	b.w	80004c0 <d_template_param>
 8000f9c:	6887      	ldr	r7, [r0, #8]
 8000f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	683e      	ldr	r6, [r7, #0]
 8000fa4:	49c8      	ldr	r1, [pc, #800]	; (80012c8 <d_expression_1+0x40c>)
 8000fa6:	3a02      	subs	r2, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	6323      	str	r3, [r4, #48]	; 0x30
 8000fac:	4630      	mov	r0, r6
 8000fae:	f005 feef 	bl	8006d90 <strcmp>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d05b      	beq.n	800106e <d_expression_1+0x1b2>
 8000fb6:	68ff      	ldr	r7, [r7, #12]
 8000fb8:	2f03      	cmp	r7, #3
 8000fba:	d8e7      	bhi.n	8000f8c <d_expression_1+0xd0>
 8000fbc:	e8df f007 	tbb	[pc, r7]
 8000fc0:	64a7385c 	.word	0x64a7385c
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60e3      	str	r3, [r4, #12]
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f000 f989 	bl	80012e0 <d_template_args_1>
 8000fce:	462a      	mov	r2, r5
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fda:	f7ff b919 	b.w	8000210 <d_make_comp>
 8000fde:	2b6f      	cmp	r3, #111	; 0x6f
 8000fe0:	f040 815c 	bne.w	800129c <d_expression_1+0x3e0>
 8000fe4:	784b      	ldrb	r3, [r1, #1]
 8000fe6:	2b6e      	cmp	r3, #110	; 0x6e
 8000fe8:	d196      	bne.n	8000f18 <d_expression_1+0x5c>
 8000fea:	3102      	adds	r1, #2
 8000fec:	60c1      	str	r1, [r0, #12]
 8000fee:	e7b4      	b.n	8000f5a <d_expression_1+0x9e>
 8000ff0:	3102      	adds	r1, #2
 8000ff2:	60c1      	str	r1, [r0, #12]
 8000ff4:	f000 fb8c 	bl	8001710 <d_type>
 8000ff8:	4605      	mov	r5, r0
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f001 f92e 	bl	800225c <d_unqualified_name>
 8001000:	68e3      	ldr	r3, [r4, #12]
 8001002:	7819      	ldrb	r1, [r3, #0]
 8001004:	2949      	cmp	r1, #73	; 0x49
 8001006:	4606      	mov	r6, r0
 8001008:	f000 80d9 	beq.w	80011be <d_expression_1+0x302>
 800100c:	4603      	mov	r3, r0
 800100e:	462a      	mov	r2, r5
 8001010:	4620      	mov	r0, r4
 8001012:	2101      	movs	r1, #1
 8001014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001018:	f7ff b8fa 	b.w	8000210 <d_make_comp>
 800101c:	f7ff fa36 	bl	800048c <d_compact_number>
 8001020:	43c3      	mvns	r3, r0
 8001022:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8001026:	bf18      	it	ne
 8001028:	3001      	addne	r0, #1
 800102a:	f47f af60 	bne.w	8000eee <d_expression_1+0x32>
 800102e:	e7ad      	b.n	8000f8c <d_expression_1+0xd0>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d083      	beq.n	8000f3c <d_expression_1+0x80>
 8001034:	7833      	ldrb	r3, [r6, #0]
 8001036:	2b70      	cmp	r3, #112	; 0x70
 8001038:	f000 80b0 	beq.w	800119c <d_expression_1+0x2e0>
 800103c:	2b6d      	cmp	r3, #109	; 0x6d
 800103e:	f000 80ad 	beq.w	800119c <d_expression_1+0x2e0>
 8001042:	2700      	movs	r7, #0
 8001044:	4630      	mov	r0, r6
 8001046:	49a1      	ldr	r1, [pc, #644]	; (80012cc <d_expression_1+0x410>)
 8001048:	f005 fea2 	bl	8006d90 <strcmp>
 800104c:	2800      	cmp	r0, #0
 800104e:	f040 80b1 	bne.w	80011b4 <d_expression_1+0x2f8>
 8001052:	4620      	mov	r0, r4
 8001054:	f000 f944 	bl	80012e0 <d_template_args_1>
 8001058:	4603      	mov	r3, r0
 800105a:	2f00      	cmp	r7, #0
 800105c:	f43f af72 	beq.w	8000f44 <d_expression_1+0x88>
 8001060:	461a      	mov	r2, r3
 8001062:	2138      	movs	r1, #56	; 0x38
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff f8d3 	bl	8000210 <d_make_comp>
 800106a:	4603      	mov	r3, r0
 800106c:	e76a      	b.n	8000f44 <d_expression_1+0x88>
 800106e:	4620      	mov	r0, r4
 8001070:	f000 fb4e 	bl	8001710 <d_type>
 8001074:	4603      	mov	r3, r0
 8001076:	e765      	b.n	8000f44 <d_expression_1+0x88>
 8001078:	462a      	mov	r2, r5
 800107a:	4620      	mov	r0, r4
 800107c:	2300      	movs	r3, #0
 800107e:	2135      	movs	r1, #53	; 0x35
 8001080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001084:	f7ff b8c4 	b.w	8000210 <d_make_comp>
 8001088:	4991      	ldr	r1, [pc, #580]	; (80012d0 <d_expression_1+0x414>)
 800108a:	4630      	mov	r0, r6
 800108c:	f005 fe80 	bl	8006d90 <strcmp>
 8001090:	2800      	cmp	r0, #0
 8001092:	f000 80d1 	beq.w	8001238 <d_expression_1+0x37c>
 8001096:	7833      	ldrb	r3, [r6, #0]
 8001098:	2b66      	cmp	r3, #102	; 0x66
 800109a:	f000 80f6 	beq.w	800128a <d_expression_1+0x3ce>
 800109e:	2b6e      	cmp	r3, #110	; 0x6e
 80010a0:	f47f af74 	bne.w	8000f8c <d_expression_1+0xd0>
 80010a4:	7873      	ldrb	r3, [r6, #1]
 80010a6:	2b77      	cmp	r3, #119	; 0x77
 80010a8:	d002      	beq.n	80010b0 <d_expression_1+0x1f4>
 80010aa:	2b61      	cmp	r3, #97	; 0x61
 80010ac:	f47f af6e 	bne.w	8000f8c <d_expression_1+0xd0>
 80010b0:	215f      	movs	r1, #95	; 0x5f
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fc94 	bl	80009e0 <d_exprlist>
 80010b8:	4606      	mov	r6, r0
 80010ba:	4620      	mov	r0, r4
 80010bc:	f000 fb28 	bl	8001710 <d_type>
 80010c0:	68e3      	ldr	r3, [r4, #12]
 80010c2:	7819      	ldrb	r1, [r3, #0]
 80010c4:	2945      	cmp	r1, #69	; 0x45
 80010c6:	4607      	mov	r7, r0
 80010c8:	f000 80aa 	beq.w	8001220 <d_expression_1+0x364>
 80010cc:	2970      	cmp	r1, #112	; 0x70
 80010ce:	f000 80d0 	beq.w	8001272 <d_expression_1+0x3b6>
 80010d2:	2969      	cmp	r1, #105	; 0x69
 80010d4:	f47f af5a 	bne.w	8000f8c <d_expression_1+0xd0>
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	2b6c      	cmp	r3, #108	; 0x6c
 80010dc:	f47f af56 	bne.w	8000f8c <d_expression_1+0xd0>
 80010e0:	4620      	mov	r0, r4
 80010e2:	f7ff feeb 	bl	8000ebc <d_expression_1>
 80010e6:	4603      	mov	r3, r0
 80010e8:	463a      	mov	r2, r7
 80010ea:	213b      	movs	r1, #59	; 0x3b
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff f88f 	bl	8000210 <d_make_comp>
 80010f2:	4632      	mov	r2, r6
 80010f4:	4603      	mov	r3, r0
 80010f6:	213a      	movs	r1, #58	; 0x3a
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff f889 	bl	8000210 <d_make_comp>
 80010fe:	462a      	mov	r2, r5
 8001100:	4603      	mov	r3, r0
 8001102:	2139      	movs	r1, #57	; 0x39
 8001104:	4620      	mov	r0, r4
 8001106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800110a:	f7ff b881 	b.w	8000210 <d_make_comp>
 800110e:	2e00      	cmp	r6, #0
 8001110:	f43f af3c 	beq.w	8000f8c <d_expression_1+0xd0>
 8001114:	68ab      	ldr	r3, [r5, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	785a      	ldrb	r2, [r3, #1]
 800111a:	2a63      	cmp	r2, #99	; 0x63
 800111c:	d068      	beq.n	80011f0 <d_expression_1+0x334>
 800111e:	7833      	ldrb	r3, [r6, #0]
 8001120:	2b66      	cmp	r3, #102	; 0x66
 8001122:	d178      	bne.n	8001216 <d_expression_1+0x35a>
 8001124:	4620      	mov	r0, r4
 8001126:	f000 feed 	bl	8001f04 <d_operator_name>
 800112a:	4607      	mov	r7, r0
 800112c:	4969      	ldr	r1, [pc, #420]	; (80012d4 <d_expression_1+0x418>)
 800112e:	4630      	mov	r0, r6
 8001130:	f005 fe2e 	bl	8006d90 <strcmp>
 8001134:	2800      	cmp	r0, #0
 8001136:	d068      	beq.n	800120a <d_expression_1+0x34e>
 8001138:	4967      	ldr	r1, [pc, #412]	; (80012d8 <d_expression_1+0x41c>)
 800113a:	4630      	mov	r0, r6
 800113c:	f005 fe28 	bl	8006d90 <strcmp>
 8001140:	b130      	cbz	r0, 8001150 <d_expression_1+0x294>
 8001142:	4630      	mov	r0, r6
 8001144:	4965      	ldr	r1, [pc, #404]	; (80012dc <d_expression_1+0x420>)
 8001146:	f005 fe23 	bl	8006d90 <strcmp>
 800114a:	2800      	cmp	r0, #0
 800114c:	f040 80a1 	bne.w	8001292 <d_expression_1+0x3d6>
 8001150:	4620      	mov	r0, r4
 8001152:	f001 f883 	bl	800225c <d_unqualified_name>
 8001156:	68e3      	ldr	r3, [r4, #12]
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	2a49      	cmp	r2, #73	; 0x49
 800115c:	4606      	mov	r6, r0
 800115e:	d07b      	beq.n	8001258 <d_expression_1+0x39c>
 8001160:	4633      	mov	r3, r6
 8001162:	463a      	mov	r2, r7
 8001164:	2138      	movs	r1, #56	; 0x38
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff f852 	bl	8000210 <d_make_comp>
 800116c:	462a      	mov	r2, r5
 800116e:	4603      	mov	r3, r0
 8001170:	2137      	movs	r1, #55	; 0x37
 8001172:	4620      	mov	r0, r4
 8001174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001178:	f7ff b84a 	b.w	8000210 <d_make_comp>
 800117c:	6883      	ldr	r3, [r0, #8]
 800117e:	2b03      	cmp	r3, #3
 8001180:	f63f af04 	bhi.w	8000f8c <d_expression_1+0xd0>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <d_expression_1+0x2d0>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	08001079 	.word	0x08001079
 8001190:	08000f3d 	.word	0x08000f3d
 8001194:	08000f8d 	.word	0x08000f8d
 8001198:	08000f8d 	.word	0x08000f8d
 800119c:	7872      	ldrb	r2, [r6, #1]
 800119e:	429a      	cmp	r2, r3
 80011a0:	f47f af4f 	bne.w	8001042 <d_expression_1+0x186>
 80011a4:	68e3      	ldr	r3, [r4, #12]
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	2a5f      	cmp	r2, #95	; 0x5f
 80011aa:	f47f af4b 	bne.w	8001044 <d_expression_1+0x188>
 80011ae:	3301      	adds	r3, #1
 80011b0:	60e3      	str	r3, [r4, #12]
 80011b2:	e746      	b.n	8001042 <d_expression_1+0x186>
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fe81 	bl	8000ebc <d_expression_1>
 80011ba:	4603      	mov	r3, r0
 80011bc:	e74d      	b.n	800105a <d_expression_1+0x19e>
 80011be:	3301      	adds	r3, #1
 80011c0:	60e3      	str	r3, [r4, #12]
 80011c2:	4620      	mov	r0, r4
 80011c4:	f000 f88c 	bl	80012e0 <d_template_args_1>
 80011c8:	4632      	mov	r2, r6
 80011ca:	4603      	mov	r3, r0
 80011cc:	2104      	movs	r1, #4
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff f81e 	bl	8000210 <d_make_comp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	e71a      	b.n	800100e <d_expression_1+0x152>
 80011d8:	3102      	adds	r1, #2
 80011da:	60e1      	str	r1, [r4, #12]
 80011dc:	f7ff fe6e 	bl	8000ebc <d_expression_1>
 80011e0:	2300      	movs	r3, #0
 80011e2:	4602      	mov	r2, r0
 80011e4:	214a      	movs	r1, #74	; 0x4a
 80011e6:	4620      	mov	r0, r4
 80011e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011ec:	f7ff b810 	b.w	8000210 <d_make_comp>
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80011f6:	2a01      	cmp	r2, #1
 80011f8:	d902      	bls.n	8001200 <d_expression_1+0x344>
 80011fa:	3b72      	subs	r3, #114	; 0x72
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d88e      	bhi.n	800111e <d_expression_1+0x262>
 8001200:	4620      	mov	r0, r4
 8001202:	f000 fa85 	bl	8001710 <d_type>
 8001206:	4607      	mov	r7, r0
 8001208:	e790      	b.n	800112c <d_expression_1+0x270>
 800120a:	2145      	movs	r1, #69	; 0x45
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff fbe7 	bl	80009e0 <d_exprlist>
 8001212:	4606      	mov	r6, r0
 8001214:	e7a4      	b.n	8001160 <d_expression_1+0x2a4>
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff fe50 	bl	8000ebc <d_expression_1>
 800121c:	4607      	mov	r7, r0
 800121e:	e785      	b.n	800112c <d_expression_1+0x270>
 8001220:	3301      	adds	r3, #1
 8001222:	60e3      	str	r3, [r4, #12]
 8001224:	2300      	movs	r3, #0
 8001226:	e75f      	b.n	80010e8 <d_expression_1+0x22c>
 8001228:	3301      	adds	r3, #1
 800122a:	60e3      	str	r3, [r4, #12]
 800122c:	2145      	movs	r1, #69	; 0x45
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff fbd6 	bl	80009e0 <d_exprlist>
 8001234:	4603      	mov	r3, r0
 8001236:	e685      	b.n	8000f44 <d_expression_1+0x88>
 8001238:	4620      	mov	r0, r4
 800123a:	f7ff fe3f 	bl	8000ebc <d_expression_1>
 800123e:	4606      	mov	r6, r0
 8001240:	4620      	mov	r0, r4
 8001242:	f7ff fe3b 	bl	8000ebc <d_expression_1>
 8001246:	4607      	mov	r7, r0
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff fe37 	bl	8000ebc <d_expression_1>
 800124e:	4603      	mov	r3, r0
 8001250:	2800      	cmp	r0, #0
 8001252:	f47f af49 	bne.w	80010e8 <d_expression_1+0x22c>
 8001256:	e699      	b.n	8000f8c <d_expression_1+0xd0>
 8001258:	3301      	adds	r3, #1
 800125a:	60e3      	str	r3, [r4, #12]
 800125c:	4620      	mov	r0, r4
 800125e:	f000 f83f 	bl	80012e0 <d_template_args_1>
 8001262:	4632      	mov	r2, r6
 8001264:	4603      	mov	r3, r0
 8001266:	2104      	movs	r1, #4
 8001268:	4620      	mov	r0, r4
 800126a:	f7fe ffd1 	bl	8000210 <d_make_comp>
 800126e:	4606      	mov	r6, r0
 8001270:	e776      	b.n	8001160 <d_expression_1+0x2a4>
 8001272:	785a      	ldrb	r2, [r3, #1]
 8001274:	2a69      	cmp	r2, #105	; 0x69
 8001276:	f47f ae89 	bne.w	8000f8c <d_expression_1+0xd0>
 800127a:	3302      	adds	r3, #2
 800127c:	60e3      	str	r3, [r4, #12]
 800127e:	2145      	movs	r1, #69	; 0x45
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fbad 	bl	80009e0 <d_exprlist>
 8001286:	4603      	mov	r3, r0
 8001288:	e72e      	b.n	80010e8 <d_expression_1+0x22c>
 800128a:	4620      	mov	r0, r4
 800128c:	f000 fe3a 	bl	8001f04 <d_operator_name>
 8001290:	e7d5      	b.n	800123e <d_expression_1+0x382>
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff fe12 	bl	8000ebc <d_expression_1>
 8001298:	4606      	mov	r6, r0
 800129a:	e761      	b.n	8001160 <d_expression_1+0x2a4>
 800129c:	2b69      	cmp	r3, #105	; 0x69
 800129e:	f47f ae68 	bne.w	8000f72 <d_expression_1+0xb6>
 80012a2:	784b      	ldrb	r3, [r1, #1]
 80012a4:	2b6c      	cmp	r3, #108	; 0x6c
 80012a6:	f47f ae37 	bne.w	8000f18 <d_expression_1+0x5c>
 80012aa:	2500      	movs	r5, #0
 80012ac:	3102      	adds	r1, #2
 80012ae:	60e1      	str	r1, [r4, #12]
 80012b0:	4620      	mov	r0, r4
 80012b2:	2145      	movs	r1, #69	; 0x45
 80012b4:	f7ff fb94 	bl	80009e0 <d_exprlist>
 80012b8:	462a      	mov	r2, r5
 80012ba:	4603      	mov	r3, r0
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	4620      	mov	r0, r4
 80012c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	f7fe bfa4 	b.w	8000210 <d_make_comp>
 80012c8:	0801b3d4 	.word	0x0801b3d4
 80012cc:	0801aeb8 	.word	0x0801aeb8
 80012d0:	0801aec8 	.word	0x0801aec8
 80012d4:	0801aebc 	.word	0x0801aebc
 80012d8:	0801aec0 	.word	0x0801aec0
 80012dc:	0801aec4 	.word	0x0801aec4

080012e0 <d_template_args_1>:
 80012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e4:	68c2      	ldr	r2, [r0, #12]
 80012e6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80012e8:	7813      	ldrb	r3, [r2, #0]
 80012ea:	2b45      	cmp	r3, #69	; 0x45
 80012ec:	b082      	sub	sp, #8
 80012ee:	4604      	mov	r4, r0
 80012f0:	d04e      	beq.n	8001390 <d_template_args_1+0xb0>
 80012f2:	ad02      	add	r5, sp, #8
 80012f4:	2100      	movs	r1, #0
 80012f6:	f845 1d04 	str.w	r1, [r5, #-4]!
 80012fa:	2601      	movs	r6, #1
 80012fc:	3b49      	subs	r3, #73	; 0x49
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	d83d      	bhi.n	800137e <d_template_args_1+0x9e>
 8001302:	e8df f003 	tbb	[pc, r3]
 8001306:	3737      	.short	0x3737
 8001308:	3c3c323c 	.word	0x3c3c323c
 800130c:	3c3c3c3c 	.word	0x3c3c3c3c
 8001310:	3c3c3c3c 	.word	0x3c3c3c3c
 8001314:	083c      	.short	0x083c
 8001316:	3201      	adds	r2, #1
 8001318:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 800131c:	60e2      	str	r2, [r4, #12]
 800131e:	6366      	str	r6, [r4, #52]	; 0x34
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fdcb 	bl	8000ebc <d_expression_1>
 8001326:	68e3      	ldr	r3, [r4, #12]
 8001328:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	2a45      	cmp	r2, #69	; 0x45
 8001330:	4684      	mov	ip, r0
 8001332:	f103 0301 	add.w	r3, r3, #1
 8001336:	d127      	bne.n	8001388 <d_template_args_1+0xa8>
 8001338:	60e3      	str	r3, [r4, #12]
 800133a:	2300      	movs	r3, #0
 800133c:	212f      	movs	r1, #47	; 0x2f
 800133e:	4662      	mov	r2, ip
 8001340:	4620      	mov	r0, r4
 8001342:	f1bc 0f00 	cmp.w	ip, #0
 8001346:	d01f      	beq.n	8001388 <d_template_args_1+0xa8>
 8001348:	f7fe ff62 	bl	8000210 <d_make_comp>
 800134c:	6028      	str	r0, [r5, #0]
 800134e:	f100 050c 	add.w	r5, r0, #12
 8001352:	b1c8      	cbz	r0, 8001388 <d_template_args_1+0xa8>
 8001354:	68e2      	ldr	r2, [r4, #12]
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	2b45      	cmp	r3, #69	; 0x45
 800135a:	d1cf      	bne.n	80012fc <d_template_args_1+0x1c>
 800135c:	9801      	ldr	r0, [sp, #4]
 800135e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001360:	3201      	adds	r2, #1
 8001362:	60e2      	str	r2, [r4, #12]
 8001364:	b002      	add	sp, #8
 8001366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136a:	4620      	mov	r0, r4
 800136c:	f001 fbc0 	bl	8002af0 <d_expr_primary>
 8001370:	4684      	mov	ip, r0
 8001372:	e7e2      	b.n	800133a <d_template_args_1+0x5a>
 8001374:	4620      	mov	r0, r4
 8001376:	f000 f815 	bl	80013a4 <d_template_args>
 800137a:	4684      	mov	ip, r0
 800137c:	e7dd      	b.n	800133a <d_template_args_1+0x5a>
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f9c6 	bl	8001710 <d_type>
 8001384:	4684      	mov	ip, r0
 8001386:	e7d8      	b.n	800133a <d_template_args_1+0x5a>
 8001388:	2000      	movs	r0, #0
 800138a:	b002      	add	sp, #8
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001390:	3201      	adds	r2, #1
 8001392:	2300      	movs	r3, #0
 8001394:	60c2      	str	r2, [r0, #12]
 8001396:	212f      	movs	r1, #47	; 0x2f
 8001398:	461a      	mov	r2, r3
 800139a:	b002      	add	sp, #8
 800139c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013a0:	f7fe bf36 	b.w	8000210 <d_make_comp>

080013a4 <d_template_args>:
 80013a4:	68c3      	ldr	r3, [r0, #12]
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	3a49      	subs	r2, #73	; 0x49
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d802      	bhi.n	80013b4 <d_template_args+0x10>
 80013ae:	3301      	adds	r3, #1
 80013b0:	60c3      	str	r3, [r0, #12]
 80013b2:	e795      	b.n	80012e0 <d_template_args_1>
 80013b4:	2000      	movs	r0, #0
 80013b6:	4770      	bx	lr

080013b8 <d_name>:
 80013b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013bc:	68c2      	ldr	r2, [r0, #12]
 80013be:	7813      	ldrb	r3, [r2, #0]
 80013c0:	3b4e      	subs	r3, #78	; 0x4e
 80013c2:	b083      	sub	sp, #12
 80013c4:	4604      	mov	r4, r0
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d846      	bhi.n	8001458 <d_name+0xa0>
 80013ca:	e8df f003 	tbb	[pc, r3]
 80013ce:	4567      	.short	0x4567
 80013d0:	0e454545 	.word	0x0e454545
 80013d4:	45450745 	.word	0x45450745
 80013d8:	4545      	.short	0x4545
 80013da:	a4          	.byte	0xa4
 80013db:	00          	.byte	0x00
 80013dc:	f000 ff3e 	bl	800225c <d_unqualified_name>
 80013e0:	4605      	mov	r5, r0
 80013e2:	4628      	mov	r0, r5
 80013e4:	b003      	add	sp, #12
 80013e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ea:	7853      	ldrb	r3, [r2, #1]
 80013ec:	2b74      	cmp	r3, #116	; 0x74
 80013ee:	f040 80d7 	bne.w	80015a0 <d_name+0x1e8>
 80013f2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80013f6:	3202      	adds	r2, #2
 80013f8:	428b      	cmp	r3, r1
 80013fa:	60c2      	str	r2, [r0, #12]
 80013fc:	f280 8127 	bge.w	800164e <d_name+0x296>
 8001400:	6901      	ldr	r1, [r0, #16]
 8001402:	48c0      	ldr	r0, [pc, #768]	; (8001704 <d_name+0x34c>)
 8001404:	011a      	lsls	r2, r3, #4
 8001406:	188d      	adds	r5, r1, r2
 8001408:	3301      	adds	r3, #1
 800140a:	6163      	str	r3, [r4, #20]
 800140c:	2300      	movs	r3, #0
 800140e:	606b      	str	r3, [r5, #4]
 8001410:	548b      	strb	r3, [r1, r2]
 8001412:	2303      	movs	r3, #3
 8001414:	e9c5 0302 	strd	r0, r3, [r5, #8]
 8001418:	4620      	mov	r0, r4
 800141a:	f000 ff1f 	bl	800225c <d_unqualified_name>
 800141e:	462a      	mov	r2, r5
 8001420:	4603      	mov	r3, r0
 8001422:	2101      	movs	r1, #1
 8001424:	4620      	mov	r0, r4
 8001426:	f7fe fef3 	bl	8000210 <d_make_comp>
 800142a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800142c:	68e2      	ldr	r2, [r4, #12]
 800142e:	3303      	adds	r3, #3
 8001430:	6323      	str	r3, [r4, #48]	; 0x30
 8001432:	7813      	ldrb	r3, [r2, #0]
 8001434:	2b49      	cmp	r3, #73	; 0x49
 8001436:	4605      	mov	r5, r0
 8001438:	d1d3      	bne.n	80013e2 <d_name+0x2a>
 800143a:	2800      	cmp	r0, #0
 800143c:	f000 80ba 	beq.w	80015b4 <d_name+0x1fc>
 8001440:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001444:	4293      	cmp	r3, r2
 8001446:	f280 80b5 	bge.w	80015b4 <d_name+0x1fc>
 800144a:	69e1      	ldr	r1, [r4, #28]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001452:	6222      	str	r2, [r4, #32]
 8001454:	4620      	mov	r0, r4
 8001456:	e014      	b.n	8001482 <d_name+0xca>
 8001458:	f000 ff00 	bl	800225c <d_unqualified_name>
 800145c:	68e3      	ldr	r3, [r4, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b49      	cmp	r3, #73	; 0x49
 8001462:	4605      	mov	r5, r0
 8001464:	d1bd      	bne.n	80013e2 <d_name+0x2a>
 8001466:	2800      	cmp	r0, #0
 8001468:	f000 80a4 	beq.w	80015b4 <d_name+0x1fc>
 800146c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8001470:	4293      	cmp	r3, r2
 8001472:	f280 809f 	bge.w	80015b4 <d_name+0x1fc>
 8001476:	69e1      	ldr	r1, [r4, #28]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800147e:	4620      	mov	r0, r4
 8001480:	6222      	str	r2, [r4, #32]
 8001482:	f7ff ff8f 	bl	80013a4 <d_template_args>
 8001486:	462a      	mov	r2, r5
 8001488:	4603      	mov	r3, r0
 800148a:	2104      	movs	r1, #4
 800148c:	4620      	mov	r0, r4
 800148e:	f7fe febf 	bl	8000210 <d_make_comp>
 8001492:	4605      	mov	r5, r0
 8001494:	4628      	mov	r0, r5
 8001496:	b003      	add	sp, #12
 8001498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800149c:	3201      	adds	r2, #1
 800149e:	60c2      	str	r2, [r0, #12]
 80014a0:	a901      	add	r1, sp, #4
 80014a2:	2201      	movs	r2, #1
 80014a4:	f000 fde6 	bl	8002074 <d_cv_qualifiers>
 80014a8:	4680      	mov	r8, r0
 80014aa:	2800      	cmp	r0, #0
 80014ac:	f000 8082 	beq.w	80015b4 <d_name+0x1fc>
 80014b0:	2100      	movs	r1, #0
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7fe fef4 	bl	80002a0 <d_ref_qualifier>
 80014b8:	68e2      	ldr	r2, [r4, #12]
 80014ba:	4e93      	ldr	r6, [pc, #588]	; (8001708 <d_name+0x350>)
 80014bc:	7815      	ldrb	r5, [r2, #0]
 80014be:	4681      	mov	r9, r0
 80014c0:	2700      	movs	r7, #0
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	f000 80b3 	beq.w	800162e <d_name+0x276>
 80014c8:	2d44      	cmp	r5, #68	; 0x44
 80014ca:	f000 8096 	beq.w	80015fa <d_name+0x242>
 80014ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b1c      	cmp	r3, #28
 80014d6:	d96f      	bls.n	80015b8 <d_name+0x200>
 80014d8:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b19      	cmp	r3, #25
 80014e0:	d96e      	bls.n	80015c0 <d_name+0x208>
 80014e2:	2d55      	cmp	r5, #85	; 0x55
 80014e4:	f000 80a1 	beq.w	800162a <d_name+0x272>
 80014e8:	2d53      	cmp	r5, #83	; 0x53
 80014ea:	f000 80b2 	beq.w	8001652 <d_name+0x29a>
 80014ee:	2d49      	cmp	r5, #73	; 0x49
 80014f0:	f000 80a4 	beq.w	800163c <d_name+0x284>
 80014f4:	2d54      	cmp	r5, #84	; 0x54
 80014f6:	f000 80e6 	beq.w	80016c6 <d_name+0x30e>
 80014fa:	2d45      	cmp	r5, #69	; 0x45
 80014fc:	f000 80e9 	beq.w	80016d2 <d_name+0x31a>
 8001500:	2d4d      	cmp	r5, #77	; 0x4d
 8001502:	f040 8094 	bne.w	800162e <d_name+0x276>
 8001506:	2f00      	cmp	r7, #0
 8001508:	f000 8091 	beq.w	800162e <d_name+0x276>
 800150c:	1c53      	adds	r3, r2, #1
 800150e:	60e3      	str	r3, [r4, #12]
 8001510:	7855      	ldrb	r5, [r2, #1]
 8001512:	461a      	mov	r2, r3
 8001514:	e7d5      	b.n	80014c2 <d_name+0x10a>
 8001516:	3201      	adds	r2, #1
 8001518:	60c2      	str	r2, [r0, #12]
 800151a:	2100      	movs	r1, #0
 800151c:	f001 f83a 	bl	8002594 <d_encoding>
 8001520:	68e3      	ldr	r3, [r4, #12]
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	2a45      	cmp	r2, #69	; 0x45
 8001526:	4606      	mov	r6, r0
 8001528:	d144      	bne.n	80015b4 <d_name+0x1fc>
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60e2      	str	r2, [r4, #12]
 800152e:	785a      	ldrb	r2, [r3, #1]
 8001530:	2a73      	cmp	r2, #115	; 0x73
 8001532:	f000 80b0 	beq.w	8001696 <d_name+0x2de>
 8001536:	2a64      	cmp	r2, #100	; 0x64
 8001538:	f000 8095 	beq.w	8001666 <d_name+0x2ae>
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff ff3b 	bl	80013b8 <d_name>
 8001542:	4605      	mov	r5, r0
 8001544:	b308      	cbz	r0, 800158a <d_name+0x1d2>
 8001546:	7803      	ldrb	r3, [r0, #0]
 8001548:	2b45      	cmp	r3, #69	; 0x45
 800154a:	d01e      	beq.n	800158a <d_name+0x1d2>
 800154c:	2b47      	cmp	r3, #71	; 0x47
 800154e:	d01c      	beq.n	800158a <d_name+0x1d2>
 8001550:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff f903 	bl	8000760 <d_discriminator>
 800155a:	b358      	cbz	r0, 80015b4 <d_name+0x1fc>
 800155c:	1c7b      	adds	r3, r7, #1
 800155e:	d014      	beq.n	800158a <d_name+0x1d2>
 8001560:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001564:	4293      	cmp	r3, r2
 8001566:	f280 8094 	bge.w	8001692 <d_name+0x2da>
 800156a:	6920      	ldr	r0, [r4, #16]
 800156c:	0119      	lsls	r1, r3, #4
 800156e:	1842      	adds	r2, r0, r1
 8001570:	3301      	adds	r3, #1
 8001572:	f04f 0e00 	mov.w	lr, #0
 8001576:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800157a:	f8c2 e004 	str.w	lr, [r2, #4]
 800157e:	6163      	str	r3, [r4, #20]
 8001580:	f800 c001 	strb.w	ip, [r0, r1]
 8001584:	e9c2 5702 	strd	r5, r7, [r2, #8]
 8001588:	4615      	mov	r5, r2
 800158a:	462b      	mov	r3, r5
 800158c:	4632      	mov	r2, r6
 800158e:	4620      	mov	r0, r4
 8001590:	2102      	movs	r1, #2
 8001592:	f7fe fe3d 	bl	8000210 <d_make_comp>
 8001596:	4605      	mov	r5, r0
 8001598:	4628      	mov	r0, r5
 800159a:	b003      	add	sp, #12
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	2100      	movs	r1, #0
 80015a2:	f7ff f825 	bl	80005f0 <d_substitution>
 80015a6:	68e3      	ldr	r3, [r4, #12]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b49      	cmp	r3, #73	; 0x49
 80015ac:	4605      	mov	r5, r0
 80015ae:	f47f af18 	bne.w	80013e2 <d_name+0x2a>
 80015b2:	e74f      	b.n	8001454 <d_name+0x9c>
 80015b4:	2500      	movs	r5, #0
 80015b6:	e714      	b.n	80013e2 <d_name+0x2a>
 80015b8:	fa26 f303 	lsr.w	r3, r6, r3
 80015bc:	07d9      	lsls	r1, r3, #31
 80015be:	d58b      	bpl.n	80014d8 <d_name+0x120>
 80015c0:	4620      	mov	r0, r4
 80015c2:	f000 fe4b 	bl	800225c <d_unqualified_name>
 80015c6:	b35f      	cbz	r7, 8001620 <d_name+0x268>
 80015c8:	2101      	movs	r1, #1
 80015ca:	4603      	mov	r3, r0
 80015cc:	463a      	mov	r2, r7
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7fe fe1e 	bl	8000210 <d_make_comp>
 80015d4:	4607      	mov	r7, r0
 80015d6:	68e2      	ldr	r2, [r4, #12]
 80015d8:	2d53      	cmp	r5, #83	; 0x53
 80015da:	7813      	ldrb	r3, [r2, #0]
 80015dc:	d01e      	beq.n	800161c <d_name+0x264>
 80015de:	2b45      	cmp	r3, #69	; 0x45
 80015e0:	d01a      	beq.n	8001618 <d_name+0x260>
 80015e2:	b327      	cbz	r7, 800162e <d_name+0x276>
 80015e4:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 80015e8:	428b      	cmp	r3, r1
 80015ea:	da20      	bge.n	800162e <d_name+0x276>
 80015ec:	69e1      	ldr	r1, [r4, #28]
 80015ee:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 80015f2:	3301      	adds	r3, #1
 80015f4:	6223      	str	r3, [r4, #32]
 80015f6:	7815      	ldrb	r5, [r2, #0]
 80015f8:	e763      	b.n	80014c2 <d_name+0x10a>
 80015fa:	7853      	ldrb	r3, [r2, #1]
 80015fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001600:	2b54      	cmp	r3, #84	; 0x54
 8001602:	4620      	mov	r0, r4
 8001604:	d00e      	beq.n	8001624 <d_name+0x26c>
 8001606:	f000 fe29 	bl	800225c <d_unqualified_name>
 800160a:	2f00      	cmp	r7, #0
 800160c:	d1dc      	bne.n	80015c8 <d_name+0x210>
 800160e:	68e2      	ldr	r2, [r4, #12]
 8001610:	7813      	ldrb	r3, [r2, #0]
 8001612:	2b45      	cmp	r3, #69	; 0x45
 8001614:	4607      	mov	r7, r0
 8001616:	d1e4      	bne.n	80015e2 <d_name+0x22a>
 8001618:	461d      	mov	r5, r3
 800161a:	e758      	b.n	80014ce <d_name+0x116>
 800161c:	461d      	mov	r5, r3
 800161e:	e750      	b.n	80014c2 <d_name+0x10a>
 8001620:	4607      	mov	r7, r0
 8001622:	e7d8      	b.n	80015d6 <d_name+0x21e>
 8001624:	f000 f874 	bl	8001710 <d_type>
 8001628:	e7ef      	b.n	800160a <d_name+0x252>
 800162a:	4620      	mov	r0, r4
 800162c:	e7eb      	b.n	8001606 <d_name+0x24e>
 800162e:	2500      	movs	r5, #0
 8001630:	4628      	mov	r0, r5
 8001632:	f8c8 5000 	str.w	r5, [r8]
 8001636:	b003      	add	sp, #12
 8001638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800163c:	2f00      	cmp	r7, #0
 800163e:	d0f6      	beq.n	800162e <d_name+0x276>
 8001640:	3201      	adds	r2, #1
 8001642:	60e2      	str	r2, [r4, #12]
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fe4b 	bl	80012e0 <d_template_args_1>
 800164a:	2104      	movs	r1, #4
 800164c:	e7bd      	b.n	80015ca <d_name+0x212>
 800164e:	2500      	movs	r5, #0
 8001650:	e6e2      	b.n	8001418 <d_name+0x60>
 8001652:	2101      	movs	r1, #1
 8001654:	4620      	mov	r0, r4
 8001656:	f7fe ffcb 	bl	80005f0 <d_substitution>
 800165a:	2f00      	cmp	r7, #0
 800165c:	d1b4      	bne.n	80015c8 <d_name+0x210>
 800165e:	68e2      	ldr	r2, [r4, #12]
 8001660:	4607      	mov	r7, r0
 8001662:	7815      	ldrb	r5, [r2, #0]
 8001664:	e72d      	b.n	80014c2 <d_name+0x10a>
 8001666:	3302      	adds	r3, #2
 8001668:	60e3      	str	r3, [r4, #12]
 800166a:	4620      	mov	r0, r4
 800166c:	f7fe ff0e 	bl	800048c <d_compact_number>
 8001670:	1e07      	subs	r7, r0, #0
 8001672:	db9f      	blt.n	80015b4 <d_name+0x1fc>
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fe9f 	bl	80013b8 <d_name>
 800167a:	4605      	mov	r5, r0
 800167c:	2800      	cmp	r0, #0
 800167e:	f43f af6f 	beq.w	8001560 <d_name+0x1a8>
 8001682:	7803      	ldrb	r3, [r0, #0]
 8001684:	2b45      	cmp	r3, #69	; 0x45
 8001686:	f43f af69 	beq.w	800155c <d_name+0x1a4>
 800168a:	2b47      	cmp	r3, #71	; 0x47
 800168c:	f43f af66 	beq.w	800155c <d_name+0x1a4>
 8001690:	e760      	b.n	8001554 <d_name+0x19c>
 8001692:	2500      	movs	r5, #0
 8001694:	e779      	b.n	800158a <d_name+0x1d2>
 8001696:	3302      	adds	r3, #2
 8001698:	60e3      	str	r3, [r4, #12]
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff f860 	bl	8000760 <d_discriminator>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d087      	beq.n	80015b4 <d_name+0x1fc>
 80016a4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	da10      	bge.n	80016ce <d_name+0x316>
 80016ac:	6920      	ldr	r0, [r4, #16]
 80016ae:	4d17      	ldr	r5, [pc, #92]	; (800170c <d_name+0x354>)
 80016b0:	0111      	lsls	r1, r2, #4
 80016b2:	1843      	adds	r3, r0, r1
 80016b4:	3201      	adds	r2, #1
 80016b6:	6162      	str	r2, [r4, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	5442      	strb	r2, [r0, r1]
 80016be:	220e      	movs	r2, #14
 80016c0:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80016c4:	e762      	b.n	800158c <d_name+0x1d4>
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7fe fefa 	bl	80004c0 <d_template_param>
 80016cc:	e79d      	b.n	800160a <d_name+0x252>
 80016ce:	2300      	movs	r3, #0
 80016d0:	e75c      	b.n	800158c <d_name+0x1d4>
 80016d2:	f8c8 7000 	str.w	r7, [r8]
 80016d6:	2f00      	cmp	r7, #0
 80016d8:	f43f af6c 	beq.w	80015b4 <d_name+0x1fc>
 80016dc:	f1b9 0f00 	cmp.w	r9, #0
 80016e0:	d004      	beq.n	80016ec <d_name+0x334>
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	f8c9 3008 	str.w	r3, [r9, #8]
 80016e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	2b45      	cmp	r3, #69	; 0x45
 80016f0:	f47f af60 	bne.w	80015b4 <d_name+0x1fc>
 80016f4:	9d01      	ldr	r5, [sp, #4]
 80016f6:	3201      	adds	r2, #1
 80016f8:	4628      	mov	r0, r5
 80016fa:	60e2      	str	r2, [r4, #12]
 80016fc:	b003      	add	sp, #12
 80016fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001702:	bf00      	nop
 8001704:	0801aedc 	.word	0x0801aedc
 8001708:	100803ff 	.word	0x100803ff
 800170c:	0801aecc 	.word	0x0801aecc

08001710 <d_type>:
 8001710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001714:	68c2      	ldr	r2, [r0, #12]
 8001716:	7813      	ldrb	r3, [r2, #0]
 8001718:	2b72      	cmp	r3, #114	; 0x72
 800171a:	b083      	sub	sp, #12
 800171c:	4604      	mov	r4, r0
 800171e:	d05f      	beq.n	80017e0 <d_type+0xd0>
 8001720:	2b56      	cmp	r3, #86	; 0x56
 8001722:	d05d      	beq.n	80017e0 <d_type+0xd0>
 8001724:	2b4b      	cmp	r3, #75	; 0x4b
 8001726:	d05b      	beq.n	80017e0 <d_type+0xd0>
 8001728:	2b44      	cmp	r3, #68	; 0x44
 800172a:	d051      	beq.n	80017d0 <d_type+0xc0>
 800172c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001730:	294a      	cmp	r1, #74	; 0x4a
 8001732:	f200 809e 	bhi.w	8001872 <d_type+0x162>
 8001736:	e8df f011 	tbh	[pc, r1, lsl #1]
 800173a:	0111      	.short	0x0111
 800173c:	01110111 	.word	0x01110111
 8001740:	01110111 	.word	0x01110111
 8001744:	01110111 	.word	0x01110111
 8001748:	01110111 	.word	0x01110111
 800174c:	009c0111 	.word	0x009c0111
 8001750:	009c009c 	.word	0x009c009c
 8001754:	009c009c 	.word	0x009c009c
 8001758:	009c009c 	.word	0x009c009c
 800175c:	009c021e 	.word	0x009c021e
 8001760:	009c013b 	.word	0x009c013b
 8001764:	0135009c 	.word	0x0135009c
 8001768:	009c0149 	.word	0x009c0149
 800176c:	009c009c 	.word	0x009c009c
 8001770:	009c009c 	.word	0x009c009c
 8001774:	01110206 	.word	0x01110206
 8001778:	01650157 	.word	0x01650157
 800177c:	0173009c 	.word	0x0173009c
 8001780:	01a50181 	.word	0x01a50181
 8001784:	009c01cc 	.word	0x009c01cc
 8001788:	009c009c 	.word	0x009c009c
 800178c:	0111009c 	.word	0x0111009c
 8001790:	009c009c 	.word	0x009c009c
 8001794:	009c009c 	.word	0x009c009c
 8001798:	009c009c 	.word	0x009c009c
 800179c:	01e401e4 	.word	0x01e401e4
 80017a0:	01e401e4 	.word	0x01e401e4
 80017a4:	01e401e4 	.word	0x01e401e4
 80017a8:	01e401e4 	.word	0x01e401e4
 80017ac:	01e401e4 	.word	0x01e401e4
 80017b0:	01e4009c 	.word	0x01e4009c
 80017b4:	01e401e4 	.word	0x01e401e4
 80017b8:	009c01e4 	.word	0x009c01e4
 80017bc:	009c009c 	.word	0x009c009c
 80017c0:	01e401e4 	.word	0x01e401e4
 80017c4:	01e40127 	.word	0x01e40127
 80017c8:	01e401e4 	.word	0x01e401e4
 80017cc:	01e401e4 	.word	0x01e401e4
 80017d0:	7853      	ldrb	r3, [r2, #1]
 80017d2:	f003 01df 	and.w	r1, r3, #223	; 0xdf
 80017d6:	294f      	cmp	r1, #79	; 0x4f
 80017d8:	d002      	beq.n	80017e0 <d_type+0xd0>
 80017da:	3b77      	subs	r3, #119	; 0x77
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d84d      	bhi.n	800187c <d_type+0x16c>
 80017e0:	2200      	movs	r2, #0
 80017e2:	a901      	add	r1, sp, #4
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 fc45 	bl	8002074 <d_cv_qualifiers>
 80017ea:	4605      	mov	r5, r0
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d040      	beq.n	8001872 <d_type+0x162>
 80017f0:	68e3      	ldr	r3, [r4, #12]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b46      	cmp	r3, #70	; 0x46
 80017f6:	4620      	mov	r0, r4
 80017f8:	d119      	bne.n	800182e <d_type+0x11e>
 80017fa:	f000 fd0f 	bl	800221c <d_function_type>
 80017fe:	6028      	str	r0, [r5, #0]
 8001800:	2800      	cmp	r0, #0
 8001802:	d036      	beq.n	8001872 <d_type+0x162>
 8001804:	7803      	ldrb	r3, [r0, #0]
 8001806:	9a01      	ldr	r2, [sp, #4]
 8001808:	3b1f      	subs	r3, #31
 800180a:	2b01      	cmp	r3, #1
 800180c:	d913      	bls.n	8001836 <d_type+0x126>
 800180e:	2a00      	cmp	r2, #0
 8001810:	d02f      	beq.n	8001872 <d_type+0x162>
 8001812:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001816:	428b      	cmp	r3, r1
 8001818:	da2b      	bge.n	8001872 <d_type+0x162>
 800181a:	69e0      	ldr	r0, [r4, #28]
 800181c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	9d01      	ldr	r5, [sp, #4]
 8001824:	6221      	str	r1, [r4, #32]
 8001826:	4628      	mov	r0, r5
 8001828:	b003      	add	sp, #12
 800182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800182e:	f7ff ff6f 	bl	8001710 <d_type>
 8001832:	6028      	str	r0, [r5, #0]
 8001834:	e7e4      	b.n	8001800 <d_type+0xf0>
 8001836:	6883      	ldr	r3, [r0, #8]
 8001838:	6082      	str	r2, [r0, #8]
 800183a:	682a      	ldr	r2, [r5, #0]
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	602b      	str	r3, [r5, #0]
 8001840:	9a01      	ldr	r2, [sp, #4]
 8001842:	e7e4      	b.n	800180e <d_type+0xfe>
 8001844:	2301      	movs	r3, #1
 8001846:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001848:	6343      	str	r3, [r0, #52]	; 0x34
 800184a:	f7ff fb37 	bl	8000ebc <d_expression_1>
 800184e:	6365      	str	r5, [r4, #52]	; 0x34
 8001850:	4602      	mov	r2, r0
 8001852:	2300      	movs	r3, #0
 8001854:	2142      	movs	r1, #66	; 0x42
 8001856:	4620      	mov	r0, r4
 8001858:	f7fe fcda 	bl	8000210 <d_make_comp>
 800185c:	4605      	mov	r5, r0
 800185e:	9001      	str	r0, [sp, #4]
 8001860:	b138      	cbz	r0, 8001872 <d_type+0x162>
 8001862:	68e3      	ldr	r3, [r4, #12]
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	b122      	cbz	r2, 8001872 <d_type+0x162>
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60e2      	str	r2, [r4, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b45      	cmp	r3, #69	; 0x45
 8001870:	d07b      	beq.n	800196a <d_type+0x25a>
 8001872:	2500      	movs	r5, #0
 8001874:	4628      	mov	r0, r5
 8001876:	b003      	add	sp, #12
 8001878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800187c:	1c53      	adds	r3, r2, #1
 800187e:	60c3      	str	r3, [r0, #12]
 8001880:	7853      	ldrb	r3, [r2, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f5      	beq.n	8001872 <d_type+0x162>
 8001886:	1c93      	adds	r3, r2, #2
 8001888:	60c3      	str	r3, [r0, #12]
 800188a:	7853      	ldrb	r3, [r2, #1]
 800188c:	3b46      	subs	r3, #70	; 0x46
 800188e:	2b30      	cmp	r3, #48	; 0x30
 8001890:	d8ef      	bhi.n	8001872 <d_type+0x162>
 8001892:	a101      	add	r1, pc, #4	; (adr r1, 8001898 <d_type+0x188>)
 8001894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001898:	08001d55 	.word	0x08001d55
 800189c:	08001873 	.word	0x08001873
 80018a0:	08001873 	.word	0x08001873
 80018a4:	08001873 	.word	0x08001873
 80018a8:	08001873 	.word	0x08001873
 80018ac:	08001873 	.word	0x08001873
 80018b0:	08001873 	.word	0x08001873
 80018b4:	08001873 	.word	0x08001873
 80018b8:	08001873 	.word	0x08001873
 80018bc:	08001873 	.word	0x08001873
 80018c0:	08001873 	.word	0x08001873
 80018c4:	08001873 	.word	0x08001873
 80018c8:	08001873 	.word	0x08001873
 80018cc:	08001873 	.word	0x08001873
 80018d0:	08001845 	.word	0x08001845
 80018d4:	08001873 	.word	0x08001873
 80018d8:	08001873 	.word	0x08001873
 80018dc:	08001873 	.word	0x08001873
 80018e0:	08001873 	.word	0x08001873
 80018e4:	08001873 	.word	0x08001873
 80018e8:	08001873 	.word	0x08001873
 80018ec:	08001873 	.word	0x08001873
 80018f0:	08001873 	.word	0x08001873
 80018f4:	08001873 	.word	0x08001873
 80018f8:	08001873 	.word	0x08001873
 80018fc:	08001873 	.word	0x08001873
 8001900:	08001873 	.word	0x08001873
 8001904:	08001d31 	.word	0x08001d31
 8001908:	08001873 	.word	0x08001873
 800190c:	08001d0d 	.word	0x08001d0d
 8001910:	08001ce5 	.word	0x08001ce5
 8001914:	08001cbd 	.word	0x08001cbd
 8001918:	08001c95 	.word	0x08001c95
 800191c:	08001873 	.word	0x08001873
 8001920:	08001c6d 	.word	0x08001c6d
 8001924:	08001e09 	.word	0x08001e09
 8001928:	08001873 	.word	0x08001873
 800192c:	08001873 	.word	0x08001873
 8001930:	08001873 	.word	0x08001873
 8001934:	08001873 	.word	0x08001873
 8001938:	08001dbd 	.word	0x08001dbd
 800193c:	08001873 	.word	0x08001873
 8001940:	08001c57 	.word	0x08001c57
 8001944:	08001873 	.word	0x08001873
 8001948:	08001873 	.word	0x08001873
 800194c:	08001c2f 	.word	0x08001c2f
 8001950:	08001845 	.word	0x08001845
 8001954:	08001873 	.word	0x08001873
 8001958:	08001bf5 	.word	0x08001bf5
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fd2b 	bl	80013b8 <d_name>
 8001962:	4605      	mov	r5, r0
 8001964:	9001      	str	r0, [sp, #4]
 8001966:	2d00      	cmp	r5, #0
 8001968:	d083      	beq.n	8001872 <d_type+0x162>
 800196a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800196e:	4293      	cmp	r3, r2
 8001970:	f6bf af7f 	bge.w	8001872 <d_type+0x162>
 8001974:	69e1      	ldr	r1, [r4, #28]
 8001976:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800197a:	9d01      	ldr	r5, [sp, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	4628      	mov	r0, r5
 8001980:	6222      	str	r2, [r4, #32]
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001988:	3201      	adds	r2, #1
 800198a:	60e2      	str	r2, [r4, #12]
 800198c:	4620      	mov	r0, r4
 800198e:	f7fe fdb9 	bl	8000504 <d_source_name>
 8001992:	2300      	movs	r3, #0
 8001994:	4602      	mov	r2, r0
 8001996:	2128      	movs	r1, #40	; 0x28
 8001998:	4620      	mov	r0, r4
 800199a:	f7fe fc39 	bl	8000210 <d_make_comp>
 800199e:	4605      	mov	r5, r0
 80019a0:	9001      	str	r0, [sp, #4]
 80019a2:	e7e0      	b.n	8001966 <d_type+0x256>
 80019a4:	4620      	mov	r0, r4
 80019a6:	f000 fc39 	bl	800221c <d_function_type>
 80019aa:	4605      	mov	r5, r0
 80019ac:	9001      	str	r0, [sp, #4]
 80019ae:	e7da      	b.n	8001966 <d_type+0x256>
 80019b0:	3201      	adds	r2, #1
 80019b2:	60e2      	str	r2, [r4, #12]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff feab 	bl	8001710 <d_type>
 80019ba:	2300      	movs	r3, #0
 80019bc:	4602      	mov	r2, r0
 80019be:	2125      	movs	r1, #37	; 0x25
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7fe fc25 	bl	8000210 <d_make_comp>
 80019c6:	4605      	mov	r5, r0
 80019c8:	9001      	str	r0, [sp, #4]
 80019ca:	e7cc      	b.n	8001966 <d_type+0x256>
 80019cc:	3201      	adds	r2, #1
 80019ce:	60e2      	str	r2, [r4, #12]
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff fe9d 	bl	8001710 <d_type>
 80019d6:	2300      	movs	r3, #0
 80019d8:	4602      	mov	r2, r0
 80019da:	2126      	movs	r1, #38	; 0x26
 80019dc:	4620      	mov	r0, r4
 80019de:	f7fe fc17 	bl	8000210 <d_make_comp>
 80019e2:	4605      	mov	r5, r0
 80019e4:	9001      	str	r0, [sp, #4]
 80019e6:	e7be      	b.n	8001966 <d_type+0x256>
 80019e8:	3201      	adds	r2, #1
 80019ea:	60e2      	str	r2, [r4, #12]
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fe8f 	bl	8001710 <d_type>
 80019f2:	2300      	movs	r3, #0
 80019f4:	4602      	mov	r2, r0
 80019f6:	2124      	movs	r1, #36	; 0x24
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7fe fc09 	bl	8000210 <d_make_comp>
 80019fe:	4605      	mov	r5, r0
 8001a00:	9001      	str	r0, [sp, #4]
 8001a02:	e7b0      	b.n	8001966 <d_type+0x256>
 8001a04:	3201      	adds	r2, #1
 8001a06:	60e2      	str	r2, [r4, #12]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff fe81 	bl	8001710 <d_type>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4602      	mov	r2, r0
 8001a12:	2122      	movs	r1, #34	; 0x22
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7fe fbfb 	bl	8000210 <d_make_comp>
 8001a1a:	4605      	mov	r5, r0
 8001a1c:	9001      	str	r0, [sp, #4]
 8001a1e:	e7a2      	b.n	8001966 <d_type+0x256>
 8001a20:	3201      	adds	r2, #1
 8001a22:	60e2      	str	r2, [r4, #12]
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe73 	bl	8001710 <d_type>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	2123      	movs	r1, #35	; 0x23
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fbed 	bl	8000210 <d_make_comp>
 8001a36:	4605      	mov	r5, r0
 8001a38:	9001      	str	r0, [sp, #4]
 8001a3a:	e794      	b.n	8001966 <d_type+0x256>
 8001a3c:	7853      	ldrb	r3, [r2, #1]
 8001a3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a42:	2a09      	cmp	r2, #9
 8001a44:	d905      	bls.n	8001a52 <d_type+0x342>
 8001a46:	2b5f      	cmp	r3, #95	; 0x5f
 8001a48:	d003      	beq.n	8001a52 <d_type+0x342>
 8001a4a:	3b41      	subs	r3, #65	; 0x41
 8001a4c:	2b19      	cmp	r3, #25
 8001a4e:	f200 820f 	bhi.w	8001e70 <d_type+0x760>
 8001a52:	2100      	movs	r1, #0
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fdcb 	bl	80005f0 <d_substitution>
 8001a5a:	68e3      	ldr	r3, [r4, #12]
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	2a49      	cmp	r2, #73	; 0x49
 8001a62:	4605      	mov	r5, r0
 8001a64:	f47f aedf 	bne.w	8001826 <d_type+0x116>
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60e3      	str	r3, [r4, #12]
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f7ff fc37 	bl	80012e0 <d_template_args_1>
 8001a72:	4603      	mov	r3, r0
 8001a74:	462a      	mov	r2, r5
 8001a76:	2104      	movs	r1, #4
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fbc9 	bl	8000210 <d_make_comp>
 8001a7e:	4605      	mov	r5, r0
 8001a80:	9001      	str	r0, [sp, #4]
 8001a82:	e770      	b.n	8001966 <d_type+0x256>
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7fe fd1b 	bl	80004c0 <d_template_param>
 8001a8a:	68e6      	ldr	r6, [r4, #12]
 8001a8c:	9001      	str	r0, [sp, #4]
 8001a8e:	7833      	ldrb	r3, [r6, #0]
 8001a90:	2b49      	cmp	r3, #73	; 0x49
 8001a92:	4605      	mov	r5, r0
 8001a94:	f47f af67 	bne.w	8001966 <d_type+0x256>
 8001a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 81f5 	bne.w	8001e8a <d_type+0x77a>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	f43f aee6 	beq.w	8001872 <d_type+0x162>
 8001aa6:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8001aaa:	428a      	cmp	r2, r1
 8001aac:	f6bf aee1 	bge.w	8001872 <d_type+0x162>
 8001ab0:	69e1      	ldr	r1, [r4, #28]
 8001ab2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	6222      	str	r2, [r4, #32]
 8001aba:	7831      	ldrb	r1, [r6, #0]
 8001abc:	9d01      	ldr	r5, [sp, #4]
 8001abe:	3949      	subs	r1, #73	; 0x49
 8001ac0:	2901      	cmp	r1, #1
 8001ac2:	d8d7      	bhi.n	8001a74 <d_type+0x364>
 8001ac4:	3601      	adds	r6, #1
 8001ac6:	60e6      	str	r6, [r4, #12]
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fc09 	bl	80012e0 <d_template_args_1>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	e7d0      	b.n	8001a74 <d_type+0x364>
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	60e2      	str	r2, [r4, #12]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7fe fd14 	bl	8000504 <d_source_name>
 8001adc:	68e3      	ldr	r3, [r4, #12]
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	2a49      	cmp	r2, #73	; 0x49
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	f000 81a8 	beq.w	8001e3a <d_type+0x72a>
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fe10 	bl	8001710 <d_type>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	4602      	mov	r2, r0
 8001af4:	2121      	movs	r1, #33	; 0x21
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7fe fb8a 	bl	8000210 <d_make_comp>
 8001afc:	4605      	mov	r5, r0
 8001afe:	9001      	str	r0, [sp, #4]
 8001b00:	e731      	b.n	8001966 <d_type+0x256>
 8001b02:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8001b06:	3b61      	subs	r3, #97	; 0x61
 8001b08:	4db6      	ldr	r5, [pc, #728]	; (8001de4 <d_type+0x6d4>)
 8001b0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b0e:	4281      	cmp	r1, r0
 8001b10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001b14:	f280 818b 	bge.w	8001e2e <d_type+0x71e>
 8001b18:	6858      	ldr	r0, [r3, #4]
 8001b1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001b1c:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8001b20:	010f      	lsls	r7, r1, #4
 8001b22:	eb0c 0507 	add.w	r5, ip, r7
 8001b26:	4406      	add	r6, r0
 8001b28:	4630      	mov	r0, r6
 8001b2a:	3201      	adds	r2, #1
 8001b2c:	3101      	adds	r1, #1
 8001b2e:	f04f 0e00 	mov.w	lr, #0
 8001b32:	2627      	movs	r6, #39	; 0x27
 8001b34:	f8c5 e004 	str.w	lr, [r5, #4]
 8001b38:	6161      	str	r1, [r4, #20]
 8001b3a:	f80c 6007 	strb.w	r6, [ip, r7]
 8001b3e:	60ab      	str	r3, [r5, #8]
 8001b40:	60e2      	str	r2, [r4, #12]
 8001b42:	6320      	str	r0, [r4, #48]	; 0x30
 8001b44:	e66f      	b.n	8001826 <d_type+0x116>
 8001b46:	3201      	adds	r2, #1
 8001b48:	60e2      	str	r2, [r4, #12]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff fde0 	bl	8001710 <d_type>
 8001b50:	4605      	mov	r5, r0
 8001b52:	2800      	cmp	r0, #0
 8001b54:	f43f ae8d 	beq.w	8001872 <d_type+0x162>
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff fdd9 	bl	8001710 <d_type>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2800      	cmp	r0, #0
 8001b62:	f43f ae86 	beq.w	8001872 <d_type+0x162>
 8001b66:	462a      	mov	r2, r5
 8001b68:	212b      	movs	r1, #43	; 0x2b
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7fe fb50 	bl	8000210 <d_make_comp>
 8001b70:	4605      	mov	r5, r0
 8001b72:	9001      	str	r0, [sp, #4]
 8001b74:	e6f7      	b.n	8001966 <d_type+0x256>
 8001b76:	1c55      	adds	r5, r2, #1
 8001b78:	60e5      	str	r5, [r4, #12]
 8001b7a:	7853      	ldrb	r3, [r2, #1]
 8001b7c:	2b5f      	cmp	r3, #95	; 0x5f
 8001b7e:	f000 815a 	beq.w	8001e36 <d_type+0x726>
 8001b82:	3b30      	subs	r3, #48	; 0x30
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	f200 8165 	bhi.w	8001e54 <d_type+0x744>
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	e000      	b.n	8001b90 <d_type+0x480>
 8001b8e:	4608      	mov	r0, r1
 8001b90:	1c41      	adds	r1, r0, #1
 8001b92:	60e1      	str	r1, [r4, #12]
 8001b94:	7843      	ldrb	r3, [r0, #1]
 8001b96:	3b30      	subs	r3, #48	; 0x30
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d9f8      	bls.n	8001b8e <d_type+0x47e>
 8001b9c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	eba1 0705 	sub.w	r7, r1, r5
 8001ba6:	f6bf ae64 	bge.w	8001872 <d_type+0x162>
 8001baa:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001bae:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8001bb2:	eb0e 060c 	add.w	r6, lr, ip
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6072      	str	r2, [r6, #4]
 8001bbc:	6163      	str	r3, [r4, #20]
 8001bbe:	2f00      	cmp	r7, #0
 8001bc0:	f43f ae57 	beq.w	8001872 <d_type+0x162>
 8001bc4:	6072      	str	r2, [r6, #4]
 8001bc6:	f80e 200c 	strb.w	r2, [lr, ip]
 8001bca:	e9c6 5702 	strd	r5, r7, [r6, #8]
 8001bce:	7843      	ldrb	r3, [r0, #1]
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	2b5f      	cmp	r3, #95	; 0x5f
 8001bd4:	f47f ae4d 	bne.w	8001872 <d_type+0x162>
 8001bd8:	3501      	adds	r5, #1
 8001bda:	60e5      	str	r5, [r4, #12]
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff fd97 	bl	8001710 <d_type>
 8001be2:	4632      	mov	r2, r6
 8001be4:	4603      	mov	r3, r0
 8001be6:	212a      	movs	r1, #42	; 0x2a
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7fe fb11 	bl	8000210 <d_make_comp>
 8001bee:	4605      	mov	r5, r0
 8001bf0:	9001      	str	r0, [sp, #4]
 8001bf2:	e6b8      	b.n	8001966 <d_type+0x256>
 8001bf4:	7893      	ldrb	r3, [r2, #2]
 8001bf6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bf8:	f000 8178 	beq.w	8001eec <d_type+0x7dc>
 8001bfc:	f7fe fc2e 	bl	800045c <d_number_component>
 8001c00:	4605      	mov	r5, r0
 8001c02:	2d00      	cmp	r5, #0
 8001c04:	f43f ae35 	beq.w	8001872 <d_type+0x162>
 8001c08:	68e3      	ldr	r3, [r4, #12]
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	2a5f      	cmp	r2, #95	; 0x5f
 8001c0e:	f47f ae30 	bne.w	8001872 <d_type+0x162>
 8001c12:	3301      	adds	r3, #1
 8001c14:	60e3      	str	r3, [r4, #12]
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff fd7a 	bl	8001710 <d_type>
 8001c1c:	462a      	mov	r2, r5
 8001c1e:	4603      	mov	r3, r0
 8001c20:	212d      	movs	r1, #45	; 0x2d
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe faf4 	bl	8000210 <d_make_comp>
 8001c28:	4605      	mov	r5, r0
 8001c2a:	9001      	str	r0, [sp, #4]
 8001c2c:	e69b      	b.n	8001966 <d_type+0x256>
 8001c2e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f280 80fb 	bge.w	8001e2e <d_type+0x71e>
 8001c38:	6900      	ldr	r0, [r0, #16]
 8001c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c3c:	0119      	lsls	r1, r3, #4
 8001c3e:	1845      	adds	r5, r0, r1
 8001c40:	3301      	adds	r3, #1
 8001c42:	2600      	movs	r6, #0
 8001c44:	606e      	str	r6, [r5, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	6163      	str	r3, [r4, #20]
 8001c4a:	2627      	movs	r6, #39	; 0x27
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <d_type+0x6d8>)
 8001c4e:	5446      	strb	r6, [r0, r1]
 8001c50:	60ab      	str	r3, [r5, #8]
 8001c52:	6322      	str	r2, [r4, #48]	; 0x30
 8001c54:	e5e7      	b.n	8001826 <d_type+0x116>
 8001c56:	f7ff fd5b 	bl	8001710 <d_type>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	214a      	movs	r1, #74	; 0x4a
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7fe fad5 	bl	8000210 <d_make_comp>
 8001c66:	4605      	mov	r5, r0
 8001c68:	9001      	str	r0, [sp, #4]
 8001c6a:	e67c      	b.n	8001966 <d_type+0x256>
 8001c6c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f280 80dc 	bge.w	8001e2e <d_type+0x71e>
 8001c76:	6900      	ldr	r0, [r0, #16]
 8001c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c7a:	0119      	lsls	r1, r3, #4
 8001c7c:	1845      	adds	r5, r0, r1
 8001c7e:	3301      	adds	r3, #1
 8001c80:	2600      	movs	r6, #0
 8001c82:	606e      	str	r6, [r5, #4]
 8001c84:	3204      	adds	r2, #4
 8001c86:	6163      	str	r3, [r4, #20]
 8001c88:	2627      	movs	r6, #39	; 0x27
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <d_type+0x6dc>)
 8001c8c:	5446      	strb	r6, [r0, r1]
 8001c8e:	60ab      	str	r3, [r5, #8]
 8001c90:	6322      	str	r2, [r4, #48]	; 0x30
 8001c92:	e5c8      	b.n	8001826 <d_type+0x116>
 8001c94:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f280 80c8 	bge.w	8001e2e <d_type+0x71e>
 8001c9e:	6900      	ldr	r0, [r0, #16]
 8001ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ca2:	0119      	lsls	r1, r3, #4
 8001ca4:	1845      	adds	r5, r0, r1
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	2600      	movs	r6, #0
 8001caa:	606e      	str	r6, [r5, #4]
 8001cac:	3209      	adds	r2, #9
 8001cae:	6163      	str	r3, [r4, #20]
 8001cb0:	2627      	movs	r6, #39	; 0x27
 8001cb2:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <d_type+0x6e0>)
 8001cb4:	5446      	strb	r6, [r0, r1]
 8001cb6:	60ab      	str	r3, [r5, #8]
 8001cb8:	6322      	str	r2, [r4, #48]	; 0x30
 8001cba:	e5b4      	b.n	8001826 <d_type+0x116>
 8001cbc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f280 80b4 	bge.w	8001e2e <d_type+0x71e>
 8001cc6:	6900      	ldr	r0, [r0, #16]
 8001cc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cca:	0119      	lsls	r1, r3, #4
 8001ccc:	1845      	adds	r5, r0, r1
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	606e      	str	r6, [r5, #4]
 8001cd4:	320a      	adds	r2, #10
 8001cd6:	6163      	str	r3, [r4, #20]
 8001cd8:	2627      	movs	r6, #39	; 0x27
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <d_type+0x6e4>)
 8001cdc:	5446      	strb	r6, [r0, r1]
 8001cde:	60ab      	str	r3, [r5, #8]
 8001ce0:	6322      	str	r2, [r4, #48]	; 0x30
 8001ce2:	e5a0      	b.n	8001826 <d_type+0x116>
 8001ce4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f280 80a0 	bge.w	8001e2e <d_type+0x71e>
 8001cee:	6900      	ldr	r0, [r0, #16]
 8001cf0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cf2:	0119      	lsls	r1, r3, #4
 8001cf4:	1845      	adds	r5, r0, r1
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	606e      	str	r6, [r5, #4]
 8001cfc:	3209      	adds	r2, #9
 8001cfe:	6163      	str	r3, [r4, #20]
 8001d00:	2627      	movs	r6, #39	; 0x27
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <d_type+0x6e8>)
 8001d04:	5446      	strb	r6, [r0, r1]
 8001d06:	60ab      	str	r3, [r5, #8]
 8001d08:	6322      	str	r2, [r4, #48]	; 0x30
 8001d0a:	e58c      	b.n	8001826 <d_type+0x116>
 8001d0c:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f6bf adae 	bge.w	8001872 <d_type+0x162>
 8001d16:	6901      	ldr	r1, [r0, #16]
 8001d18:	4e38      	ldr	r6, [pc, #224]	; (8001dfc <d_type+0x6ec>)
 8001d1a:	011a      	lsls	r2, r3, #4
 8001d1c:	188d      	adds	r5, r1, r2
 8001d1e:	3301      	adds	r3, #1
 8001d20:	6143      	str	r3, [r0, #20]
 8001d22:	2300      	movs	r3, #0
 8001d24:	200e      	movs	r0, #14
 8001d26:	606b      	str	r3, [r5, #4]
 8001d28:	548b      	strb	r3, [r1, r2]
 8001d2a:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d2e:	e57a      	b.n	8001826 <d_type+0x116>
 8001d30:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f6bf ad9c 	bge.w	8001872 <d_type+0x162>
 8001d3a:	6901      	ldr	r1, [r0, #16]
 8001d3c:	4e30      	ldr	r6, [pc, #192]	; (8001e00 <d_type+0x6f0>)
 8001d3e:	011a      	lsls	r2, r3, #4
 8001d40:	188d      	adds	r5, r1, r2
 8001d42:	3301      	adds	r3, #1
 8001d44:	6143      	str	r3, [r0, #20]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2004      	movs	r0, #4
 8001d4a:	606b      	str	r3, [r5, #4]
 8001d4c:	548b      	strb	r3, [r1, r2]
 8001d4e:	e9c5 6002 	strd	r6, r0, [r5, #8]
 8001d52:	e568      	b.n	8001826 <d_type+0x116>
 8001d54:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	f280 80af 	bge.w	8001ebc <d_type+0x7ac>
 8001d5e:	6905      	ldr	r5, [r0, #16]
 8001d60:	0118      	lsls	r0, r3, #4
 8001d62:	1829      	adds	r1, r5, r0
 8001d64:	3301      	adds	r3, #1
 8001d66:	2700      	movs	r7, #0
 8001d68:	262c      	movs	r6, #44	; 0x2c
 8001d6a:	604f      	str	r7, [r1, #4]
 8001d6c:	9101      	str	r1, [sp, #4]
 8001d6e:	6163      	str	r3, [r4, #20]
 8001d70:	542e      	strb	r6, [r5, r0]
 8001d72:	7893      	ldrb	r3, [r2, #2]
 8001d74:	3b30      	subs	r3, #48	; 0x30
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	463b      	movhi	r3, r7
 8001d80:	818b      	strh	r3, [r1, #12]
 8001d82:	f240 80ae 	bls.w	8001ee2 <d_type+0x7d2>
 8001d86:	4620      	mov	r0, r4
 8001d88:	9d01      	ldr	r5, [sp, #4]
 8001d8a:	f7ff fcc1 	bl	8001710 <d_type>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	60a8      	str	r0, [r5, #8]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f ad6c 	beq.w	8001872 <d_type+0x162>
 8001d9a:	f104 000c 	add.w	r0, r4, #12
 8001d9e:	f7fe fb31 	bl	8000404 <d_number.isra.1>
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	b113      	cbz	r3, 8001dae <d_type+0x69e>
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	60e3      	str	r3, [r4, #12]
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	9d01      	ldr	r5, [sp, #4]
 8001db0:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
 8001db4:	4253      	negs	r3, r2
 8001db6:	4153      	adcs	r3, r2
 8001db8:	81eb      	strh	r3, [r5, #14]
 8001dba:	e534      	b.n	8001826 <d_type+0x116>
 8001dbc:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	da34      	bge.n	8001e2e <d_type+0x71e>
 8001dc4:	6900      	ldr	r0, [r0, #16]
 8001dc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dc8:	0119      	lsls	r1, r3, #4
 8001dca:	1845      	adds	r5, r0, r1
 8001dcc:	3301      	adds	r3, #1
 8001dce:	2600      	movs	r6, #0
 8001dd0:	606e      	str	r6, [r5, #4]
 8001dd2:	3211      	adds	r2, #17
 8001dd4:	6163      	str	r3, [r4, #20]
 8001dd6:	2627      	movs	r6, #39	; 0x27
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <d_type+0x6f4>)
 8001dda:	5446      	strb	r6, [r0, r1]
 8001ddc:	60ab      	str	r3, [r5, #8]
 8001dde:	6322      	str	r2, [r4, #48]	; 0x30
 8001de0:	e521      	b.n	8001826 <d_type+0x116>
 8001de2:	bf00      	nop
 8001de4:	080183f4 	.word	0x080183f4
 8001de8:	0801864c 	.word	0x0801864c
 8001dec:	08018638 	.word	0x08018638
 8001df0:	080185fc 	.word	0x080185fc
 8001df4:	08018624 	.word	0x08018624
 8001df8:	08018610 	.word	0x08018610
 8001dfc:	0801aee8 	.word	0x0801aee8
 8001e00:	0801aee0 	.word	0x0801aee0
 8001e04:	08018674 	.word	0x08018674
 8001e08:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	da0e      	bge.n	8001e2e <d_type+0x71e>
 8001e10:	6900      	ldr	r0, [r0, #16]
 8001e12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e14:	0119      	lsls	r1, r3, #4
 8001e16:	1845      	adds	r5, r0, r1
 8001e18:	3301      	adds	r3, #1
 8001e1a:	2600      	movs	r6, #0
 8001e1c:	606e      	str	r6, [r5, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	6163      	str	r3, [r4, #20]
 8001e22:	2627      	movs	r6, #39	; 0x27
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <d_type+0x7f0>)
 8001e26:	5446      	strb	r6, [r0, r1]
 8001e28:	60ab      	str	r3, [r5, #8]
 8001e2a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e2c:	e4fb      	b.n	8001826 <d_type+0x116>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	deff      	udf	#255	; 0xff
 8001e36:	2600      	movs	r6, #0
 8001e38:	e6ce      	b.n	8001bd8 <d_type+0x4c8>
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60e3      	str	r3, [r4, #12]
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff fa4e 	bl	80012e0 <d_template_args_1>
 8001e44:	462a      	mov	r2, r5
 8001e46:	4603      	mov	r3, r0
 8001e48:	2104      	movs	r1, #4
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe f9e0 	bl	8000210 <d_make_comp>
 8001e50:	9001      	str	r0, [sp, #4]
 8001e52:	e64a      	b.n	8001aea <d_type+0x3da>
 8001e54:	2301      	movs	r3, #1
 8001e56:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001e58:	6363      	str	r3, [r4, #52]	; 0x34
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff f82e 	bl	8000ebc <d_expression_1>
 8001e60:	6365      	str	r5, [r4, #52]	; 0x34
 8001e62:	4606      	mov	r6, r0
 8001e64:	2800      	cmp	r0, #0
 8001e66:	f43f ad04 	beq.w	8001872 <d_type+0x162>
 8001e6a:	68e5      	ldr	r5, [r4, #12]
 8001e6c:	782b      	ldrb	r3, [r5, #0]
 8001e6e:	e6b0      	b.n	8001bd2 <d_type+0x4c2>
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff faa1 	bl	80013b8 <d_name>
 8001e76:	4605      	mov	r5, r0
 8001e78:	9001      	str	r0, [sp, #4]
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	f43f acf9 	beq.w	8001872 <d_type+0x162>
 8001e80:	7803      	ldrb	r3, [r0, #0]
 8001e82:	2b18      	cmp	r3, #24
 8001e84:	f47f ad71 	bne.w	800196a <d_type+0x25a>
 8001e88:	e4cd      	b.n	8001826 <d_type+0x116>
 8001e8a:	1c73      	adds	r3, r6, #1
 8001e8c:	60e3      	str	r3, [r4, #12]
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e94:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e98:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e9c:	f7ff fa20 	bl	80012e0 <d_template_args_1>
 8001ea0:	68e2      	ldr	r2, [r4, #12]
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	2a49      	cmp	r2, #73	; 0x49
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	d00b      	beq.n	8001ec2 <d_type+0x7b2>
 8001eaa:	6325      	str	r5, [r4, #48]	; 0x30
 8001eac:	60e6      	str	r6, [r4, #12]
 8001eae:	f8c4 9014 	str.w	r9, [r4, #20]
 8001eb2:	f8c4 8020 	str.w	r8, [r4, #32]
 8001eb6:	62a7      	str	r7, [r4, #40]	; 0x28
 8001eb8:	9d01      	ldr	r5, [sp, #4]
 8001eba:	e554      	b.n	8001966 <d_type+0x256>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	701b      	strb	r3, [r3, #0]
 8001ec0:	deff      	udf	#255	; 0xff
 8001ec2:	9901      	ldr	r1, [sp, #4]
 8001ec4:	2900      	cmp	r1, #0
 8001ec6:	f43f acd4 	beq.w	8001872 <d_type+0x162>
 8001eca:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	f6bf accf 	bge.w	8001872 <d_type+0x162>
 8001ed4:	69e0      	ldr	r0, [r4, #28]
 8001ed6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8001eda:	3201      	adds	r2, #1
 8001edc:	6222      	str	r2, [r4, #32]
 8001ede:	9a01      	ldr	r2, [sp, #4]
 8001ee0:	e5c9      	b.n	8001a76 <d_type+0x366>
 8001ee2:	f104 000c 	add.w	r0, r4, #12
 8001ee6:	f7fe fa8d 	bl	8000404 <d_number.isra.1>
 8001eea:	e74c      	b.n	8001d86 <d_type+0x676>
 8001eec:	3203      	adds	r2, #3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001ef2:	60c2      	str	r2, [r0, #12]
 8001ef4:	6343      	str	r3, [r0, #52]	; 0x34
 8001ef6:	f7fe ffe1 	bl	8000ebc <d_expression_1>
 8001efa:	6366      	str	r6, [r4, #52]	; 0x34
 8001efc:	4605      	mov	r5, r0
 8001efe:	e680      	b.n	8001c02 <d_type+0x4f2>
 8001f00:	08018660 	.word	0x08018660

08001f04 <d_operator_name>:
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f06:	68c3      	ldr	r3, [r0, #12]
 8001f08:	781e      	ldrb	r6, [r3, #0]
 8001f0a:	4686      	mov	lr, r0
 8001f0c:	b336      	cbz	r6, 8001f5c <d_operator_name+0x58>
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	60c2      	str	r2, [r0, #12]
 8001f12:	785a      	ldrb	r2, [r3, #1]
 8001f14:	781e      	ldrb	r6, [r3, #0]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d04a      	beq.n	8001fb0 <d_operator_name+0xac>
 8001f1a:	1c9a      	adds	r2, r3, #2
 8001f1c:	60c2      	str	r2, [r0, #12]
 8001f1e:	2e76      	cmp	r6, #118	; 0x76
 8001f20:	4604      	mov	r4, r0
 8001f22:	f893 c001 	ldrb.w	ip, [r3, #1]
 8001f26:	d145      	bne.n	8001fb4 <d_operator_name+0xb0>
 8001f28:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
 8001f2c:	b2eb      	uxtb	r3, r5
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d815      	bhi.n	8001f5e <d_operator_name+0x5a>
 8001f32:	f7fe fae7 	bl	8000504 <d_source_name>
 8001f36:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8001f3a:	428b      	cmp	r3, r1
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	da21      	bge.n	8001f84 <d_operator_name+0x80>
 8001f40:	6926      	ldr	r6, [r4, #16]
 8001f42:	0119      	lsls	r1, r3, #4
 8001f44:	1870      	adds	r0, r6, r1
 8001f46:	3301      	adds	r3, #1
 8001f48:	2700      	movs	r7, #0
 8001f4a:	6047      	str	r7, [r0, #4]
 8001f4c:	6163      	str	r3, [r4, #20]
 8001f4e:	b1ca      	cbz	r2, 8001f84 <d_operator_name+0x80>
 8001f50:	2332      	movs	r3, #50	; 0x32
 8001f52:	6047      	str	r7, [r0, #4]
 8001f54:	5473      	strb	r3, [r6, r1]
 8001f56:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8001f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5c:	46b4      	mov	ip, r6
 8001f5e:	4c23      	ldr	r4, [pc, #140]	; (8001fec <d_operator_name+0xe8>)
 8001f60:	2043      	movs	r0, #67	; 0x43
 8001f62:	2200      	movs	r2, #0
 8001f64:	1a83      	subs	r3, r0, r2
 8001f66:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f6a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f6e:	0119      	lsls	r1, r3, #4
 8001f70:	1867      	adds	r7, r4, r1
 8001f72:	5861      	ldr	r1, [r4, r1]
 8001f74:	780d      	ldrb	r5, [r1, #0]
 8001f76:	42b5      	cmp	r5, r6
 8001f78:	d006      	beq.n	8001f88 <d_operator_name+0x84>
 8001f7a:	bf94      	ite	ls
 8001f7c:	1c5a      	addls	r2, r3, #1
 8001f7e:	4618      	movhi	r0, r3
 8001f80:	4282      	cmp	r2, r0
 8001f82:	d1ef      	bne.n	8001f64 <d_operator_name+0x60>
 8001f84:	2000      	movs	r0, #0
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	7849      	ldrb	r1, [r1, #1]
 8001f8a:	4561      	cmp	r1, ip
 8001f8c:	d1f5      	bne.n	8001f7a <d_operator_name+0x76>
 8001f8e:	e9de 3205 	ldrd	r3, r2, [lr, #20]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	daf6      	bge.n	8001f84 <d_operator_name+0x80>
 8001f96:	f8de 1010 	ldr.w	r1, [lr, #16]
 8001f9a:	011a      	lsls	r2, r3, #4
 8001f9c:	1888      	adds	r0, r1, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	2431      	movs	r4, #49	; 0x31
 8001fa4:	6045      	str	r5, [r0, #4]
 8001fa6:	f8ce 3014 	str.w	r3, [lr, #20]
 8001faa:	548c      	strb	r4, [r1, r2]
 8001fac:	6087      	str	r7, [r0, #8]
 8001fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb0:	4694      	mov	ip, r2
 8001fb2:	e7d4      	b.n	8001f5e <d_operator_name+0x5a>
 8001fb4:	2e63      	cmp	r6, #99	; 0x63
 8001fb6:	d1d2      	bne.n	8001f5e <d_operator_name+0x5a>
 8001fb8:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
 8001fbc:	d1cf      	bne.n	8001f5e <d_operator_name+0x5a>
 8001fbe:	e9d0 350d 	ldrd	r3, r5, [r0, #52]	; 0x34
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	6383      	str	r3, [r0, #56]	; 0x38
 8001fca:	f7ff fba1 	bl	8001710 <d_type>
 8001fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	b92b      	cbnz	r3, 8001fe0 <d_operator_name+0xdc>
 8001fd4:	2133      	movs	r1, #51	; 0x33
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7fe f91a 	bl	8000210 <d_make_comp>
 8001fdc:	63a5      	str	r5, [r4, #56]	; 0x38
 8001fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2134      	movs	r1, #52	; 0x34
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7fe f913 	bl	8000210 <d_make_comp>
 8001fea:	e7f7      	b.n	8001fdc <d_operator_name+0xd8>
 8001fec:	08018688 	.word	0x08018688

08001ff0 <d_parmlist>:
 8001ff0:	b530      	push	{r4, r5, lr}
 8001ff2:	68c2      	ldr	r2, [r0, #12]
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d036      	beq.n	800206e <d_parmlist+0x7e>
 8002000:	2b45      	cmp	r3, #69	; 0x45
 8002002:	d034      	beq.n	800206e <d_parmlist+0x7e>
 8002004:	2b2e      	cmp	r3, #46	; 0x2e
 8002006:	d032      	beq.n	800206e <d_parmlist+0x7e>
 8002008:	4604      	mov	r4, r0
 800200a:	ad01      	add	r5, sp, #4
 800200c:	e015      	b.n	800203a <d_parmlist+0x4a>
 800200e:	2b4f      	cmp	r3, #79	; 0x4f
 8002010:	d016      	beq.n	8002040 <d_parmlist+0x50>
 8002012:	f7ff fb7d 	bl	8001710 <d_type>
 8002016:	2300      	movs	r3, #0
 8002018:	4602      	mov	r2, r0
 800201a:	212e      	movs	r1, #46	; 0x2e
 800201c:	b338      	cbz	r0, 800206e <d_parmlist+0x7e>
 800201e:	4620      	mov	r0, r4
 8002020:	f7fe f8f6 	bl	8000210 <d_make_comp>
 8002024:	6028      	str	r0, [r5, #0]
 8002026:	b310      	cbz	r0, 800206e <d_parmlist+0x7e>
 8002028:	68e2      	ldr	r2, [r4, #12]
 800202a:	7813      	ldrb	r3, [r2, #0]
 800202c:	f100 050c 	add.w	r5, r0, #12
 8002030:	b14b      	cbz	r3, 8002046 <d_parmlist+0x56>
 8002032:	2b45      	cmp	r3, #69	; 0x45
 8002034:	d007      	beq.n	8002046 <d_parmlist+0x56>
 8002036:	2b2e      	cmp	r3, #46	; 0x2e
 8002038:	d005      	beq.n	8002046 <d_parmlist+0x56>
 800203a:	2b52      	cmp	r3, #82	; 0x52
 800203c:	4620      	mov	r0, r4
 800203e:	d1e6      	bne.n	800200e <d_parmlist+0x1e>
 8002040:	7853      	ldrb	r3, [r2, #1]
 8002042:	2b45      	cmp	r3, #69	; 0x45
 8002044:	d1e5      	bne.n	8002012 <d_parmlist+0x22>
 8002046:	9801      	ldr	r0, [sp, #4]
 8002048:	b188      	cbz	r0, 800206e <d_parmlist+0x7e>
 800204a:	68c3      	ldr	r3, [r0, #12]
 800204c:	b10b      	cbz	r3, 8002052 <d_parmlist+0x62>
 800204e:	b003      	add	sp, #12
 8002050:	bd30      	pop	{r4, r5, pc}
 8002052:	6882      	ldr	r2, [r0, #8]
 8002054:	7811      	ldrb	r1, [r2, #0]
 8002056:	2927      	cmp	r1, #39	; 0x27
 8002058:	d1f9      	bne.n	800204e <d_parmlist+0x5e>
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	7c11      	ldrb	r1, [r2, #16]
 800205e:	2909      	cmp	r1, #9
 8002060:	d1f5      	bne.n	800204e <d_parmlist+0x5e>
 8002062:	6851      	ldr	r1, [r2, #4]
 8002064:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002066:	1a52      	subs	r2, r2, r1
 8002068:	6322      	str	r2, [r4, #48]	; 0x30
 800206a:	6083      	str	r3, [r0, #8]
 800206c:	e7ef      	b.n	800204e <d_parmlist+0x5e>
 800206e:	2000      	movs	r0, #0
 8002070:	b003      	add	sp, #12
 8002072:	bd30      	pop	{r4, r5, pc}

08002074 <d_cv_qualifiers>:
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	4689      	mov	r9, r1
 800207a:	b083      	sub	sp, #12
 800207c:	68c1      	ldr	r1, [r0, #12]
 800207e:	1e13      	subs	r3, r2, #0
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	4604      	mov	r4, r0
 8002084:	780b      	ldrb	r3, [r1, #0]
 8002086:	bf15      	itete	ne
 8002088:	f04f 081e 	movne.w	r8, #30
 800208c:	f04f 081b 	moveq.w	r8, #27
 8002090:	271d      	movne	r7, #29
 8002092:	271a      	moveq	r7, #26
 8002094:	bf14      	ite	ne
 8002096:	261c      	movne	r6, #28
 8002098:	2619      	moveq	r6, #25
 800209a:	464d      	mov	r5, r9
 800209c:	f04f 0a01 	mov.w	sl, #1
 80020a0:	e01c      	b.n	80020dc <d_cv_qualifiers+0x68>
 80020a2:	2b56      	cmp	r3, #86	; 0x56
 80020a4:	d03f      	beq.n	8002126 <d_cv_qualifiers+0xb2>
 80020a6:	2b4b      	cmp	r3, #75	; 0x4b
 80020a8:	d043      	beq.n	8002132 <d_cv_qualifiers+0xbe>
 80020aa:	784b      	ldrb	r3, [r1, #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d035      	beq.n	800211c <d_cv_qualifiers+0xa8>
 80020b0:	1c8b      	adds	r3, r1, #2
 80020b2:	60e3      	str	r3, [r4, #12]
 80020b4:	784b      	ldrb	r3, [r1, #1]
 80020b6:	2b78      	cmp	r3, #120	; 0x78
 80020b8:	d041      	beq.n	800213e <d_cv_qualifiers+0xca>
 80020ba:	2b6f      	cmp	r3, #111	; 0x6f
 80020bc:	d145      	bne.n	800214a <d_cv_qualifiers+0xd6>
 80020be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020c0:	3309      	adds	r3, #9
 80020c2:	6323      	str	r3, [r4, #48]	; 0x30
 80020c4:	214e      	movs	r1, #78	; 0x4e
 80020c6:	2300      	movs	r3, #0
 80020c8:	2200      	movs	r2, #0
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe f8a0 	bl	8000210 <d_make_comp>
 80020d0:	6028      	str	r0, [r5, #0]
 80020d2:	b318      	cbz	r0, 800211c <d_cv_qualifiers+0xa8>
 80020d4:	68e1      	ldr	r1, [r4, #12]
 80020d6:	780b      	ldrb	r3, [r1, #0]
 80020d8:	f100 0508 	add.w	r5, r0, #8
 80020dc:	2b72      	cmp	r3, #114	; 0x72
 80020de:	d00d      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e0:	2b56      	cmp	r3, #86	; 0x56
 80020e2:	d00b      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e4:	2b4b      	cmp	r3, #75	; 0x4b
 80020e6:	d009      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020e8:	2b44      	cmp	r3, #68	; 0x44
 80020ea:	d146      	bne.n	800217a <d_cv_qualifiers+0x106>
 80020ec:	784a      	ldrb	r2, [r1, #1]
 80020ee:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 80020f2:	284f      	cmp	r0, #79	; 0x4f
 80020f4:	d002      	beq.n	80020fc <d_cv_qualifiers+0x88>
 80020f6:	3a77      	subs	r2, #119	; 0x77
 80020f8:	2a01      	cmp	r2, #1
 80020fa:	d83e      	bhi.n	800217a <d_cv_qualifiers+0x106>
 80020fc:	1c4a      	adds	r2, r1, #1
 80020fe:	2b72      	cmp	r3, #114	; 0x72
 8002100:	60e2      	str	r2, [r4, #12]
 8002102:	d1ce      	bne.n	80020a2 <d_cv_qualifiers+0x2e>
 8002104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002106:	3309      	adds	r3, #9
 8002108:	6323      	str	r3, [r4, #48]	; 0x30
 800210a:	4631      	mov	r1, r6
 800210c:	2300      	movs	r3, #0
 800210e:	2200      	movs	r2, #0
 8002110:	4620      	mov	r0, r4
 8002112:	f7fe f87d 	bl	8000210 <d_make_comp>
 8002116:	6028      	str	r0, [r5, #0]
 8002118:	2800      	cmp	r0, #0
 800211a:	d1db      	bne.n	80020d4 <d_cv_qualifiers+0x60>
 800211c:	2500      	movs	r5, #0
 800211e:	4628      	mov	r0, r5
 8002120:	b003      	add	sp, #12
 8002122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002126:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002128:	3309      	adds	r3, #9
 800212a:	6323      	str	r3, [r4, #48]	; 0x30
 800212c:	4639      	mov	r1, r7
 800212e:	2300      	movs	r3, #0
 8002130:	e7ca      	b.n	80020c8 <d_cv_qualifiers+0x54>
 8002132:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002134:	3306      	adds	r3, #6
 8002136:	6323      	str	r3, [r4, #48]	; 0x30
 8002138:	4641      	mov	r1, r8
 800213a:	2300      	movs	r3, #0
 800213c:	e7c4      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800213e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002140:	3311      	adds	r3, #17
 8002142:	6323      	str	r3, [r4, #48]	; 0x30
 8002144:	214c      	movs	r1, #76	; 0x4c
 8002146:	2300      	movs	r3, #0
 8002148:	e7be      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800214a:	2b4f      	cmp	r3, #79	; 0x4f
 800214c:	d132      	bne.n	80021b4 <d_cv_qualifiers+0x140>
 800214e:	e9d4 3b0c 	ldrd	r3, fp, [r4, #48]	; 0x30
 8002152:	3309      	adds	r3, #9
 8002154:	6323      	str	r3, [r4, #48]	; 0x30
 8002156:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
 800215a:	4620      	mov	r0, r4
 800215c:	f7fe feae 	bl	8000ebc <d_expression_1>
 8002160:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8002164:	4603      	mov	r3, r0
 8002166:	2800      	cmp	r0, #0
 8002168:	d0d8      	beq.n	800211c <d_cv_qualifiers+0xa8>
 800216a:	68e2      	ldr	r2, [r4, #12]
 800216c:	7811      	ldrb	r1, [r2, #0]
 800216e:	2945      	cmp	r1, #69	; 0x45
 8002170:	d1d4      	bne.n	800211c <d_cv_qualifiers+0xa8>
 8002172:	3201      	adds	r2, #1
 8002174:	60e2      	str	r2, [r4, #12]
 8002176:	214e      	movs	r1, #78	; 0x4e
 8002178:	e7a6      	b.n	80020c8 <d_cv_qualifiers+0x54>
 800217a:	9a01      	ldr	r2, [sp, #4]
 800217c:	2a00      	cmp	r2, #0
 800217e:	d1ce      	bne.n	800211e <d_cv_qualifiers+0xaa>
 8002180:	2b46      	cmp	r3, #70	; 0x46
 8002182:	d1cc      	bne.n	800211e <d_cv_qualifiers+0xaa>
 8002184:	454d      	cmp	r5, r9
 8002186:	d0ca      	beq.n	800211e <d_cv_qualifiers+0xaa>
 8002188:	241d      	movs	r4, #29
 800218a:	201e      	movs	r0, #30
 800218c:	211c      	movs	r1, #28
 800218e:	e008      	b.n	80021a2 <d_cv_qualifiers+0x12e>
 8002190:	2a1b      	cmp	r2, #27
 8002192:	d00d      	beq.n	80021b0 <d_cv_qualifiers+0x13c>
 8002194:	2a19      	cmp	r2, #25
 8002196:	d100      	bne.n	800219a <d_cv_qualifiers+0x126>
 8002198:	7019      	strb	r1, [r3, #0]
 800219a:	f103 0908 	add.w	r9, r3, #8
 800219e:	454d      	cmp	r5, r9
 80021a0:	d0bd      	beq.n	800211e <d_cv_qualifiers+0xaa>
 80021a2:	f8d9 3000 	ldr.w	r3, [r9]
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	2a1a      	cmp	r2, #26
 80021aa:	d1f1      	bne.n	8002190 <d_cv_qualifiers+0x11c>
 80021ac:	701c      	strb	r4, [r3, #0]
 80021ae:	e7f4      	b.n	800219a <d_cv_qualifiers+0x126>
 80021b0:	7018      	strb	r0, [r3, #0]
 80021b2:	e7f2      	b.n	800219a <d_cv_qualifiers+0x126>
 80021b4:	2b77      	cmp	r3, #119	; 0x77
 80021b6:	d1b1      	bne.n	800211c <d_cv_qualifiers+0xa8>
 80021b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ba:	3306      	adds	r3, #6
 80021bc:	6323      	str	r3, [r4, #48]	; 0x30
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff ff16 	bl	8001ff0 <d_parmlist>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d0a8      	beq.n	800211c <d_cv_qualifiers+0xa8>
 80021ca:	68e2      	ldr	r2, [r4, #12]
 80021cc:	7811      	ldrb	r1, [r2, #0]
 80021ce:	2945      	cmp	r1, #69	; 0x45
 80021d0:	d1a4      	bne.n	800211c <d_cv_qualifiers+0xa8>
 80021d2:	3201      	adds	r2, #1
 80021d4:	60e2      	str	r2, [r4, #12]
 80021d6:	214f      	movs	r1, #79	; 0x4f
 80021d8:	e776      	b.n	80020c8 <d_cv_qualifiers+0x54>
 80021da:	bf00      	nop

080021dc <d_bare_function_type>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	68c3      	ldr	r3, [r0, #12]
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	2a4a      	cmp	r2, #74	; 0x4a
 80021e4:	4604      	mov	r4, r0
 80021e6:	d013      	beq.n	8002210 <d_bare_function_type+0x34>
 80021e8:	b181      	cbz	r1, 800220c <d_bare_function_type+0x30>
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff fa90 	bl	8001710 <d_type>
 80021f0:	4605      	mov	r5, r0
 80021f2:	b180      	cbz	r0, 8002216 <d_bare_function_type+0x3a>
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fefb 	bl	8001ff0 <d_parmlist>
 80021fa:	b160      	cbz	r0, 8002216 <d_bare_function_type+0x3a>
 80021fc:	4603      	mov	r3, r0
 80021fe:	462a      	mov	r2, r5
 8002200:	4620      	mov	r0, r4
 8002202:	2129      	movs	r1, #41	; 0x29
 8002204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002208:	f7fe b802 	b.w	8000210 <d_make_comp>
 800220c:	460d      	mov	r5, r1
 800220e:	e7f1      	b.n	80021f4 <d_bare_function_type+0x18>
 8002210:	3301      	adds	r3, #1
 8002212:	60c3      	str	r3, [r0, #12]
 8002214:	e7e9      	b.n	80021ea <d_bare_function_type+0xe>
 8002216:	2000      	movs	r0, #0
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	bf00      	nop

0800221c <d_function_type>:
 800221c:	68c3      	ldr	r3, [r0, #12]
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	2a46      	cmp	r2, #70	; 0x46
 8002222:	d118      	bne.n	8002256 <d_function_type+0x3a>
 8002224:	b510      	push	{r4, lr}
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60c2      	str	r2, [r0, #12]
 800222a:	785a      	ldrb	r2, [r3, #1]
 800222c:	2a59      	cmp	r2, #89	; 0x59
 800222e:	bf04      	itt	eq
 8002230:	3302      	addeq	r3, #2
 8002232:	60c3      	streq	r3, [r0, #12]
 8002234:	2101      	movs	r1, #1
 8002236:	4604      	mov	r4, r0
 8002238:	f7ff ffd0 	bl	80021dc <d_bare_function_type>
 800223c:	4601      	mov	r1, r0
 800223e:	4620      	mov	r0, r4
 8002240:	f7fe f82e 	bl	80002a0 <d_ref_qualifier>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	2a45      	cmp	r2, #69	; 0x45
 800224a:	d102      	bne.n	8002252 <d_function_type+0x36>
 800224c:	3301      	adds	r3, #1
 800224e:	60e3      	str	r3, [r4, #12]
 8002250:	bd10      	pop	{r4, pc}
 8002252:	2000      	movs	r0, #0
 8002254:	bd10      	pop	{r4, pc}
 8002256:	2000      	movs	r0, #0
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <d_unqualified_name>:
 800225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002260:	68c1      	ldr	r1, [r0, #12]
 8002262:	780b      	ldrb	r3, [r1, #0]
 8002264:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002268:	2a09      	cmp	r2, #9
 800226a:	4604      	mov	r4, r0
 800226c:	d93c      	bls.n	80022e8 <d_unqualified_name+0x8c>
 800226e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002272:	2a19      	cmp	r2, #25
 8002274:	d922      	bls.n	80022bc <d_unqualified_name+0x60>
 8002276:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800227a:	2a01      	cmp	r2, #1
 800227c:	d969      	bls.n	8002352 <d_unqualified_name+0xf6>
 800227e:	2b4c      	cmp	r3, #76	; 0x4c
 8002280:	d056      	beq.n	8002330 <d_unqualified_name+0xd4>
 8002282:	2b55      	cmp	r3, #85	; 0x55
 8002284:	d15f      	bne.n	8002346 <d_unqualified_name+0xea>
 8002286:	784b      	ldrb	r3, [r1, #1]
 8002288:	2b6c      	cmp	r3, #108	; 0x6c
 800228a:	f000 80e5 	beq.w	8002458 <d_unqualified_name+0x1fc>
 800228e:	2b74      	cmp	r3, #116	; 0x74
 8002290:	d159      	bne.n	8002346 <d_unqualified_name+0xea>
 8002292:	1c4b      	adds	r3, r1, #1
 8002294:	60c3      	str	r3, [r0, #12]
 8002296:	784b      	ldrb	r3, [r1, #1]
 8002298:	2b74      	cmp	r3, #116	; 0x74
 800229a:	d158      	bne.n	800234e <d_unqualified_name+0xf2>
 800229c:	3102      	adds	r1, #2
 800229e:	60c1      	str	r1, [r0, #12]
 80022a0:	f7fe f8f4 	bl	800048c <d_compact_number>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f2c0 8155 	blt.w	8002554 <d_unqualified_name+0x2f8>
 80022aa:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	68e7      	ldr	r7, [r4, #12]
 80022b2:	f2c0 80f3 	blt.w	800249c <d_unqualified_name+0x240>
 80022b6:	783b      	ldrb	r3, [r7, #0]
 80022b8:	2500      	movs	r5, #0
 80022ba:	e010      	b.n	80022de <d_unqualified_name+0x82>
 80022bc:	2b6f      	cmp	r3, #111	; 0x6f
 80022be:	d104      	bne.n	80022ca <d_unqualified_name+0x6e>
 80022c0:	784b      	ldrb	r3, [r1, #1]
 80022c2:	2b6e      	cmp	r3, #110	; 0x6e
 80022c4:	bf04      	itt	eq
 80022c6:	3102      	addeq	r1, #2
 80022c8:	60c1      	streq	r1, [r0, #12]
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fe1a 	bl	8001f04 <d_operator_name>
 80022d0:	4605      	mov	r5, r0
 80022d2:	b110      	cbz	r0, 80022da <d_unqualified_name+0x7e>
 80022d4:	7803      	ldrb	r3, [r0, #0]
 80022d6:	2b31      	cmp	r3, #49	; 0x31
 80022d8:	d013      	beq.n	8002302 <d_unqualified_name+0xa6>
 80022da:	68e3      	ldr	r3, [r4, #12]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b42      	cmp	r3, #66	; 0x42
 80022e0:	d009      	beq.n	80022f6 <d_unqualified_name+0x9a>
 80022e2:	4628      	mov	r0, r5
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e8:	f7fe f90c 	bl	8000504 <d_source_name>
 80022ec:	68e3      	ldr	r3, [r4, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b42      	cmp	r3, #66	; 0x42
 80022f2:	4605      	mov	r5, r0
 80022f4:	d1f5      	bne.n	80022e2 <d_unqualified_name+0x86>
 80022f6:	4629      	mov	r1, r5
 80022f8:	4620      	mov	r0, r4
 80022fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022fe:	f7fe b95b 	b.w	80005b8 <d_abi_tags>
 8002302:	6882      	ldr	r2, [r0, #8]
 8002304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002306:	6896      	ldr	r6, [r2, #8]
 8002308:	6810      	ldr	r0, [r2, #0]
 800230a:	49a1      	ldr	r1, [pc, #644]	; (8002590 <d_unqualified_name+0x334>)
 800230c:	3307      	adds	r3, #7
 800230e:	4433      	add	r3, r6
 8002310:	6323      	str	r3, [r4, #48]	; 0x30
 8002312:	f004 fd3d 	bl	8006d90 <strcmp>
 8002316:	2800      	cmp	r0, #0
 8002318:	d1df      	bne.n	80022da <d_unqualified_name+0x7e>
 800231a:	4620      	mov	r0, r4
 800231c:	f7fe f8f2 	bl	8000504 <d_source_name>
 8002320:	462a      	mov	r2, r5
 8002322:	4603      	mov	r3, r0
 8002324:	2136      	movs	r1, #54	; 0x36
 8002326:	4620      	mov	r0, r4
 8002328:	f7fd ff72 	bl	8000210 <d_make_comp>
 800232c:	4605      	mov	r5, r0
 800232e:	e7d4      	b.n	80022da <d_unqualified_name+0x7e>
 8002330:	3101      	adds	r1, #1
 8002332:	60c1      	str	r1, [r0, #12]
 8002334:	f7fe f8e6 	bl	8000504 <d_source_name>
 8002338:	4605      	mov	r5, r0
 800233a:	b120      	cbz	r0, 8002346 <d_unqualified_name+0xea>
 800233c:	4620      	mov	r0, r4
 800233e:	f7fe fa0f 	bl	8000760 <d_discriminator>
 8002342:	2800      	cmp	r0, #0
 8002344:	d1c9      	bne.n	80022da <d_unqualified_name+0x7e>
 8002346:	2500      	movs	r5, #0
 8002348:	4628      	mov	r0, r5
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234e:	2500      	movs	r5, #0
 8002350:	e7c5      	b.n	80022de <d_unqualified_name+0x82>
 8002352:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002354:	b132      	cbz	r2, 8002364 <d_unqualified_name+0x108>
 8002356:	7810      	ldrb	r0, [r2, #0]
 8002358:	b9e0      	cbnz	r0, 8002394 <d_unqualified_name+0x138>
 800235a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800235c:	68d0      	ldr	r0, [r2, #12]
 800235e:	4403      	add	r3, r0
 8002360:	6323      	str	r3, [r4, #48]	; 0x30
 8002362:	780b      	ldrb	r3, [r1, #0]
 8002364:	2b43      	cmp	r3, #67	; 0x43
 8002366:	d018      	beq.n	800239a <d_unqualified_name+0x13e>
 8002368:	2b44      	cmp	r3, #68	; 0x44
 800236a:	d1f0      	bne.n	800234e <d_unqualified_name+0xf2>
 800236c:	784b      	ldrb	r3, [r1, #1]
 800236e:	3b30      	subs	r3, #48	; 0x30
 8002370:	2b05      	cmp	r3, #5
 8002372:	d8e8      	bhi.n	8002346 <d_unqualified_name+0xea>
 8002374:	a001      	add	r0, pc, #4	; (adr r0, 800237c <d_unqualified_name+0x120>)
 8002376:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023ed 	.word	0x080023ed
 8002380:	080023b7 	.word	0x080023b7
 8002384:	080023ff 	.word	0x080023ff
 8002388:	08002347 	.word	0x08002347
 800238c:	080023f9 	.word	0x080023f9
 8002390:	080023f3 	.word	0x080023f3
 8002394:	2818      	cmp	r0, #24
 8002396:	d1e5      	bne.n	8002364 <d_unqualified_name+0x108>
 8002398:	e7df      	b.n	800235a <d_unqualified_name+0xfe>
 800239a:	784b      	ldrb	r3, [r1, #1]
 800239c:	2b49      	cmp	r3, #73	; 0x49
 800239e:	f000 80b0 	beq.w	8002502 <d_unqualified_name+0x2a6>
 80023a2:	3b31      	subs	r3, #49	; 0x31
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d8ce      	bhi.n	8002346 <d_unqualified_name+0xea>
 80023a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023ac:	005100ed 	.word	0x005100ed
 80023b0:	0047004c 	.word	0x0047004c
 80023b4:	002c      	.short	0x002c
 80023b6:	f04f 0c02 	mov.w	ip, #2
 80023ba:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023be:	1c8d      	adds	r5, r1, #2
 80023c0:	4283      	cmp	r3, r0
 80023c2:	60e5      	str	r5, [r4, #12]
 80023c4:	f280 80d0 	bge.w	8002568 <d_unqualified_name+0x30c>
 80023c8:	6926      	ldr	r6, [r4, #16]
 80023ca:	0118      	lsls	r0, r3, #4
 80023cc:	1835      	adds	r5, r6, r0
 80023ce:	3301      	adds	r3, #1
 80023d0:	2700      	movs	r7, #0
 80023d2:	606f      	str	r7, [r5, #4]
 80023d4:	6163      	str	r3, [r4, #20]
 80023d6:	2a00      	cmp	r2, #0
 80023d8:	f000 80cf 	beq.w	800257a <d_unqualified_name+0x31e>
 80023dc:	2308      	movs	r3, #8
 80023de:	606f      	str	r7, [r5, #4]
 80023e0:	5433      	strb	r3, [r6, r0]
 80023e2:	f885 c008 	strb.w	ip, [r5, #8]
 80023e6:	60ea      	str	r2, [r5, #12]
 80023e8:	788b      	ldrb	r3, [r1, #2]
 80023ea:	e778      	b.n	80022de <d_unqualified_name+0x82>
 80023ec:	f04f 0c01 	mov.w	ip, #1
 80023f0:	e7e3      	b.n	80023ba <d_unqualified_name+0x15e>
 80023f2:	f04f 0c05 	mov.w	ip, #5
 80023f6:	e7e0      	b.n	80023ba <d_unqualified_name+0x15e>
 80023f8:	f04f 0c04 	mov.w	ip, #4
 80023fc:	e7dd      	b.n	80023ba <d_unqualified_name+0x15e>
 80023fe:	f04f 0c03 	mov.w	ip, #3
 8002402:	e7da      	b.n	80023ba <d_unqualified_name+0x15e>
 8002404:	3102      	adds	r1, #2
 8002406:	60e1      	str	r1, [r4, #12]
 8002408:	f04f 0805 	mov.w	r8, #5
 800240c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002410:	4283      	cmp	r3, r0
 8002412:	f280 80ac 	bge.w	800256e <d_unqualified_name+0x312>
 8002416:	6926      	ldr	r6, [r4, #16]
 8002418:	0118      	lsls	r0, r3, #4
 800241a:	1835      	adds	r5, r6, r0
 800241c:	3301      	adds	r3, #1
 800241e:	2700      	movs	r7, #0
 8002420:	606f      	str	r7, [r5, #4]
 8002422:	6163      	str	r3, [r4, #20]
 8002424:	2a00      	cmp	r2, #0
 8002426:	f000 80ab 	beq.w	8002580 <d_unqualified_name+0x324>
 800242a:	2307      	movs	r3, #7
 800242c:	606f      	str	r7, [r5, #4]
 800242e:	5433      	strb	r3, [r6, r0]
 8002430:	f885 8008 	strb.w	r8, [r5, #8]
 8002434:	60ea      	str	r2, [r5, #12]
 8002436:	780b      	ldrb	r3, [r1, #0]
 8002438:	e751      	b.n	80022de <d_unqualified_name+0x82>
 800243a:	3102      	adds	r1, #2
 800243c:	60e1      	str	r1, [r4, #12]
 800243e:	f04f 0804 	mov.w	r8, #4
 8002442:	e7e3      	b.n	800240c <d_unqualified_name+0x1b0>
 8002444:	3102      	adds	r1, #2
 8002446:	60e1      	str	r1, [r4, #12]
 8002448:	f04f 0803 	mov.w	r8, #3
 800244c:	e7de      	b.n	800240c <d_unqualified_name+0x1b0>
 800244e:	3102      	adds	r1, #2
 8002450:	60e1      	str	r1, [r4, #12]
 8002452:	f04f 0802 	mov.w	r8, #2
 8002456:	e7d9      	b.n	800240c <d_unqualified_name+0x1b0>
 8002458:	1c4b      	adds	r3, r1, #1
 800245a:	60c3      	str	r3, [r0, #12]
 800245c:	784b      	ldrb	r3, [r1, #1]
 800245e:	2b6c      	cmp	r3, #108	; 0x6c
 8002460:	f47f af75 	bne.w	800234e <d_unqualified_name+0xf2>
 8002464:	3102      	adds	r1, #2
 8002466:	60c1      	str	r1, [r0, #12]
 8002468:	f7ff fdc2 	bl	8001ff0 <d_parmlist>
 800246c:	4606      	mov	r6, r0
 800246e:	2800      	cmp	r0, #0
 8002470:	d070      	beq.n	8002554 <d_unqualified_name+0x2f8>
 8002472:	68e2      	ldr	r2, [r4, #12]
 8002474:	7813      	ldrb	r3, [r2, #0]
 8002476:	2b45      	cmp	r3, #69	; 0x45
 8002478:	f47f af69 	bne.w	800234e <d_unqualified_name+0xf2>
 800247c:	3201      	adds	r2, #1
 800247e:	60e2      	str	r2, [r4, #12]
 8002480:	4620      	mov	r0, r4
 8002482:	f7fe f803 	bl	800048c <d_compact_number>
 8002486:	f1b0 0e00 	subs.w	lr, r0, #0
 800248a:	db63      	blt.n	8002554 <d_unqualified_name+0x2f8>
 800248c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002490:	4293      	cmp	r3, r2
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	db1b      	blt.n	80024ce <d_unqualified_name+0x272>
 8002496:	7803      	ldrb	r3, [r0, #0]
 8002498:	2500      	movs	r5, #0
 800249a:	e720      	b.n	80022de <d_unqualified_name+0x82>
 800249c:	6926      	ldr	r6, [r4, #16]
 800249e:	6a22      	ldr	r2, [r4, #32]
 80024a0:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 80024a4:	0119      	lsls	r1, r3, #4
 80024a6:	1875      	adds	r5, r6, r1
 80024a8:	3301      	adds	r3, #1
 80024aa:	f04f 0c00 	mov.w	ip, #0
 80024ae:	f8c5 c004 	str.w	ip, [r5, #4]
 80024b2:	4572      	cmp	r2, lr
 80024b4:	6163      	str	r3, [r4, #20]
 80024b6:	f04f 0347 	mov.w	r3, #71	; 0x47
 80024ba:	5473      	strb	r3, [r6, r1]
 80024bc:	60a8      	str	r0, [r5, #8]
 80024be:	da4d      	bge.n	800255c <d_unqualified_name+0x300>
 80024c0:	69e3      	ldr	r3, [r4, #28]
 80024c2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024c6:	3201      	adds	r2, #1
 80024c8:	6222      	str	r2, [r4, #32]
 80024ca:	783b      	ldrb	r3, [r7, #0]
 80024cc:	e707      	b.n	80022de <d_unqualified_name+0x82>
 80024ce:	6927      	ldr	r7, [r4, #16]
 80024d0:	6a22      	ldr	r2, [r4, #32]
 80024d2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80024d6:	0119      	lsls	r1, r3, #4
 80024d8:	187d      	adds	r5, r7, r1
 80024da:	3301      	adds	r3, #1
 80024dc:	f04f 0c00 	mov.w	ip, #0
 80024e0:	f8c5 c004 	str.w	ip, [r5, #4]
 80024e4:	4542      	cmp	r2, r8
 80024e6:	6163      	str	r3, [r4, #20]
 80024e8:	f04f 0345 	mov.w	r3, #69	; 0x45
 80024ec:	547b      	strb	r3, [r7, r1]
 80024ee:	e9c5 6e02 	strd	r6, lr, [r5, #8]
 80024f2:	da36      	bge.n	8002562 <d_unqualified_name+0x306>
 80024f4:	69e3      	ldr	r3, [r4, #28]
 80024f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80024fa:	3201      	adds	r2, #1
 80024fc:	6222      	str	r2, [r4, #32]
 80024fe:	7803      	ldrb	r3, [r0, #0]
 8002500:	e6ed      	b.n	80022de <d_unqualified_name+0x82>
 8002502:	1c4b      	adds	r3, r1, #1
 8002504:	60e3      	str	r3, [r4, #12]
 8002506:	788b      	ldrb	r3, [r1, #2]
 8002508:	3b31      	subs	r3, #49	; 0x31
 800250a:	2b04      	cmp	r3, #4
 800250c:	d832      	bhi.n	8002574 <d_unqualified_name+0x318>
 800250e:	e8df f003 	tbb	[pc, r3]
 8002512:	1c03      	.short	0x1c03
 8002514:	1217      	.short	0x1217
 8002516:	0d          	.byte	0x0d
 8002517:	00          	.byte	0x00
 8002518:	3103      	adds	r1, #3
 800251a:	60e1      	str	r1, [r4, #12]
 800251c:	f04f 0801 	mov.w	r8, #1
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff f8f5 	bl	8001710 <d_type>
 8002526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002528:	68e1      	ldr	r1, [r4, #12]
 800252a:	e76f      	b.n	800240c <d_unqualified_name+0x1b0>
 800252c:	3103      	adds	r1, #3
 800252e:	60e1      	str	r1, [r4, #12]
 8002530:	f04f 0805 	mov.w	r8, #5
 8002534:	e7f4      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002536:	3103      	adds	r1, #3
 8002538:	60e1      	str	r1, [r4, #12]
 800253a:	f04f 0804 	mov.w	r8, #4
 800253e:	e7ef      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002540:	3103      	adds	r1, #3
 8002542:	60e1      	str	r1, [r4, #12]
 8002544:	f04f 0803 	mov.w	r8, #3
 8002548:	e7ea      	b.n	8002520 <d_unqualified_name+0x2c4>
 800254a:	3103      	adds	r1, #3
 800254c:	60e1      	str	r1, [r4, #12]
 800254e:	f04f 0802 	mov.w	r8, #2
 8002552:	e7e5      	b.n	8002520 <d_unqualified_name+0x2c4>
 8002554:	68e3      	ldr	r3, [r4, #12]
 8002556:	2500      	movs	r5, #0
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	e6c0      	b.n	80022de <d_unqualified_name+0x82>
 800255c:	783b      	ldrb	r3, [r7, #0]
 800255e:	4665      	mov	r5, ip
 8002560:	e6bd      	b.n	80022de <d_unqualified_name+0x82>
 8002562:	7803      	ldrb	r3, [r0, #0]
 8002564:	4665      	mov	r5, ip
 8002566:	e6ba      	b.n	80022de <d_unqualified_name+0x82>
 8002568:	788b      	ldrb	r3, [r1, #2]
 800256a:	2500      	movs	r5, #0
 800256c:	e6b7      	b.n	80022de <d_unqualified_name+0x82>
 800256e:	780b      	ldrb	r3, [r1, #0]
 8002570:	2500      	movs	r5, #0
 8002572:	e6b4      	b.n	80022de <d_unqualified_name+0x82>
 8002574:	784b      	ldrb	r3, [r1, #1]
 8002576:	2500      	movs	r5, #0
 8002578:	e6b1      	b.n	80022de <d_unqualified_name+0x82>
 800257a:	788b      	ldrb	r3, [r1, #2]
 800257c:	4615      	mov	r5, r2
 800257e:	e6ae      	b.n	80022de <d_unqualified_name+0x82>
 8002580:	780b      	ldrb	r3, [r1, #0]
 8002582:	4615      	mov	r5, r2
 8002584:	e6ab      	b.n	80022de <d_unqualified_name+0x82>
 8002586:	3102      	adds	r1, #2
 8002588:	60e1      	str	r1, [r4, #12]
 800258a:	f04f 0801 	mov.w	r8, #1
 800258e:	e73d      	b.n	800240c <d_unqualified_name+0x1b0>
 8002590:	0801aef8 	.word	0x0801aef8

08002594 <d_encoding>:
 8002594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002598:	68c3      	ldr	r3, [r0, #12]
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	2a47      	cmp	r2, #71	; 0x47
 800259e:	4604      	mov	r4, r0
 80025a0:	d019      	beq.n	80025d6 <d_encoding+0x42>
 80025a2:	2a54      	cmp	r2, #84	; 0x54
 80025a4:	d017      	beq.n	80025d6 <d_encoding+0x42>
 80025a6:	460e      	mov	r6, r1
 80025a8:	f7fe ff06 	bl	80013b8 <d_name>
 80025ac:	4605      	mov	r5, r0
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d07d      	beq.n	80026ae <d_encoding+0x11a>
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d057      	beq.n	8002666 <d_encoding+0xd2>
 80025b6:	68a3      	ldr	r3, [r4, #8]
 80025b8:	07db      	lsls	r3, r3, #31
 80025ba:	d454      	bmi.n	8002666 <d_encoding+0xd2>
 80025bc:	e000      	b.n	80025c0 <d_encoding+0x2c>
 80025be:	68ad      	ldr	r5, [r5, #8]
 80025c0:	782b      	ldrb	r3, [r5, #0]
 80025c2:	f1a3 021c 	sub.w	r2, r3, #28
 80025c6:	2a04      	cmp	r2, #4
 80025c8:	d9f9      	bls.n	80025be <d_encoding+0x2a>
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	f000 8186 	beq.w	80028dc <d_encoding+0x348>
 80025d0:	4628      	mov	r0, r5
 80025d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80025d8:	f101 0214 	add.w	r2, r1, #20
 80025dc:	6322      	str	r2, [r4, #48]	; 0x30
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	2a54      	cmp	r2, #84	; 0x54
 80025e2:	d068      	beq.n	80026b6 <d_encoding+0x122>
 80025e4:	2a47      	cmp	r2, #71	; 0x47
 80025e6:	d162      	bne.n	80026ae <d_encoding+0x11a>
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	60e2      	str	r2, [r4, #12]
 80025ec:	785a      	ldrb	r2, [r3, #1]
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d05d      	beq.n	80026ae <d_encoding+0x11a>
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	60e2      	str	r2, [r4, #12]
 80025f6:	785a      	ldrb	r2, [r3, #1]
 80025f8:	3a41      	subs	r2, #65	; 0x41
 80025fa:	2a31      	cmp	r2, #49	; 0x31
 80025fc:	d857      	bhi.n	80026ae <d_encoding+0x11a>
 80025fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002602:	013e      	.short	0x013e
 8002604:	00560056 	.word	0x00560056
 8002608:	00560056 	.word	0x00560056
 800260c:	00560056 	.word	0x00560056
 8002610:	00560056 	.word	0x00560056
 8002614:	00560056 	.word	0x00560056
 8002618:	00560056 	.word	0x00560056
 800261c:	00560056 	.word	0x00560056
 8002620:	00560056 	.word	0x00560056
 8002624:	0056014a 	.word	0x0056014a
 8002628:	00560159 	.word	0x00560159
 800262c:	005600e0 	.word	0x005600e0
 8002630:	00560056 	.word	0x00560056
 8002634:	00560056 	.word	0x00560056
 8002638:	00560056 	.word	0x00560056
 800263c:	00560056 	.word	0x00560056
 8002640:	00560056 	.word	0x00560056
 8002644:	00560056 	.word	0x00560056
 8002648:	00560056 	.word	0x00560056
 800264c:	00560056 	.word	0x00560056
 8002650:	00560056 	.word	0x00560056
 8002654:	00560056 	.word	0x00560056
 8002658:	00560056 	.word	0x00560056
 800265c:	00560056 	.word	0x00560056
 8002660:	00560056 	.word	0x00560056
 8002664:	00eb      	.short	0x00eb
 8002666:	68e3      	ldr	r3, [r4, #12]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0b0      	beq.n	80025d0 <d_encoding+0x3c>
 800266e:	2b45      	cmp	r3, #69	; 0x45
 8002670:	d0ae      	beq.n	80025d0 <d_encoding+0x3c>
 8002672:	4629      	mov	r1, r5
 8002674:	780b      	ldrb	r3, [r1, #0]
 8002676:	2b20      	cmp	r3, #32
 8002678:	f200 8218 	bhi.w	8002aac <d_encoding+0x518>
 800267c:	2b1c      	cmp	r3, #28
 800267e:	f080 821e 	bcs.w	8002abe <d_encoding+0x52a>
 8002682:	2b04      	cmp	r3, #4
 8002684:	f040 8091 	bne.w	80027aa <d_encoding+0x216>
 8002688:	688a      	ldr	r2, [r1, #8]
 800268a:	b16a      	cbz	r2, 80026a8 <d_encoding+0x114>
 800268c:	7813      	ldrb	r3, [r2, #0]
 800268e:	2b08      	cmp	r3, #8
 8002690:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8002694:	f200 8086 	bhi.w	80027a4 <d_encoding+0x210>
 8002698:	2b07      	cmp	r3, #7
 800269a:	f080 8086 	bcs.w	80027aa <d_encoding+0x216>
 800269e:	2901      	cmp	r1, #1
 80026a0:	d802      	bhi.n	80026a8 <d_encoding+0x114>
 80026a2:	68d2      	ldr	r2, [r2, #12]
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d1f1      	bne.n	800268c <d_encoding+0xf8>
 80026a8:	2101      	movs	r1, #1
 80026aa:	e07f      	b.n	80027ac <d_encoding+0x218>
 80026ac:	60e7      	str	r7, [r4, #12]
 80026ae:	2500      	movs	r5, #0
 80026b0:	4628      	mov	r0, r5
 80026b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60e2      	str	r2, [r4, #12]
 80026ba:	785a      	ldrb	r2, [r3, #1]
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d0f6      	beq.n	80026ae <d_encoding+0x11a>
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	60e2      	str	r2, [r4, #12]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	3b43      	subs	r3, #67	; 0x43
 80026c8:	2b33      	cmp	r3, #51	; 0x33
 80026ca:	d8f0      	bhi.n	80026ae <d_encoding+0x11a>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <d_encoding+0x140>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002a29 	.word	0x08002a29
 80026d8:	080026af 	.word	0x080026af
 80026dc:	080026af 	.word	0x080026af
 80026e0:	08002a13 	.word	0x08002a13
 80026e4:	080026af 	.word	0x080026af
 80026e8:	080029fd 	.word	0x080029fd
 80026ec:	080029e7 	.word	0x080029e7
 80026f0:	080029d1 	.word	0x080029d1
 80026f4:	080026af 	.word	0x080026af
 80026f8:	080026af 	.word	0x080026af
 80026fc:	080026af 	.word	0x080026af
 8002700:	080026af 	.word	0x080026af
 8002704:	080026af 	.word	0x080026af
 8002708:	080026af 	.word	0x080026af
 800270c:	080026af 	.word	0x080026af
 8002710:	080026af 	.word	0x080026af
 8002714:	080029bb 	.word	0x080029bb
 8002718:	080029a1 	.word	0x080029a1
 800271c:	080026af 	.word	0x080026af
 8002720:	08002987 	.word	0x08002987
 8002724:	08002971 	.word	0x08002971
 8002728:	080026af 	.word	0x080026af
 800272c:	080026af 	.word	0x080026af
 8002730:	080026af 	.word	0x080026af
 8002734:	080026af 	.word	0x080026af
 8002738:	080026af 	.word	0x080026af
 800273c:	080026af 	.word	0x080026af
 8002740:	080026af 	.word	0x080026af
 8002744:	080026af 	.word	0x080026af
 8002748:	080026af 	.word	0x080026af
 800274c:	080026af 	.word	0x080026af
 8002750:	080026af 	.word	0x080026af
 8002754:	0800293d 	.word	0x0800293d
 8002758:	080026af 	.word	0x080026af
 800275c:	080026af 	.word	0x080026af
 8002760:	080026af 	.word	0x080026af
 8002764:	080026af 	.word	0x080026af
 8002768:	08002917 	.word	0x08002917
 800276c:	080026af 	.word	0x080026af
 8002770:	080026af 	.word	0x080026af
 8002774:	080026af 	.word	0x080026af
 8002778:	080026af 	.word	0x080026af
 800277c:	080026af 	.word	0x080026af
 8002780:	080026af 	.word	0x080026af
 8002784:	080026af 	.word	0x080026af
 8002788:	080026af 	.word	0x080026af
 800278c:	080026af 	.word	0x080026af
 8002790:	080026af 	.word	0x080026af
 8002794:	080026af 	.word	0x080026af
 8002798:	080026af 	.word	0x080026af
 800279c:	080026af 	.word	0x080026af
 80027a0:	080028f1 	.word	0x080028f1
 80027a4:	2b34      	cmp	r3, #52	; 0x34
 80027a6:	f47f af7f 	bne.w	80026a8 <d_encoding+0x114>
 80027aa:	2100      	movs	r1, #0
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fd15 	bl	80021dc <d_bare_function_type>
 80027b2:	462a      	mov	r2, r5
 80027b4:	4603      	mov	r3, r0
 80027b6:	2103      	movs	r1, #3
 80027b8:	4620      	mov	r0, r4
 80027ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027be:	f7fd bd27 	b.w	8000210 <d_make_comp>
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fe fdf8 	bl	80013b8 <d_name>
 80027c8:	2300      	movs	r3, #0
 80027ca:	4602      	mov	r2, r0
 80027cc:	2113      	movs	r1, #19
 80027ce:	4620      	mov	r0, r4
 80027d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d4:	f7fd bd1c 	b.w	8000210 <d_make_comp>
 80027d8:	f104 000c 	add.w	r0, r4, #12
 80027dc:	f7fd fe12 	bl	8000404 <d_number.isra.1>
 80027e0:	2801      	cmp	r0, #1
 80027e2:	f77f af64 	ble.w	80026ae <d_encoding+0x11a>
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	2a00      	cmp	r2, #0
 80027ec:	f43f af5f 	beq.w	80026ae <d_encoding+0x11a>
 80027f0:	1c5f      	adds	r7, r3, #1
 80027f2:	60e7      	str	r7, [r4, #12]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b5f      	cmp	r3, #95	; 0x5f
 80027f8:	f47f af59 	bne.w	80026ae <d_encoding+0x11a>
 80027fc:	2200      	movs	r2, #0
 80027fe:	1e45      	subs	r5, r0, #1
 8002800:	4690      	mov	r8, r2
 8002802:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002806:	783b      	ldrb	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f43f af50 	beq.w	80026ae <d_encoding+0x11a>
 800280e:	2b24      	cmp	r3, #36	; 0x24
 8002810:	f040 812a 	bne.w	8002a68 <d_encoding+0x4d4>
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b53      	cmp	r3, #83	; 0x53
 8002818:	f000 8156 	beq.w	8002ac8 <d_encoding+0x534>
 800281c:	2b5f      	cmp	r3, #95	; 0x5f
 800281e:	f000 8155 	beq.w	8002acc <d_encoding+0x538>
 8002822:	2b24      	cmp	r3, #36	; 0x24
 8002824:	f47f af43 	bne.w	80026ae <d_encoding+0x11a>
 8002828:	4619      	mov	r1, r3
 800282a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800282e:	68e7      	ldr	r7, [r4, #12]
 8002830:	4298      	cmp	r0, r3
 8002832:	f107 0702 	add.w	r7, r7, #2
 8002836:	f6bf af39 	bge.w	80026ac <d_encoding+0x118>
 800283a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800283e:	0106      	lsls	r6, r0, #4
 8002840:	eb0c 0306 	add.w	r3, ip, r6
 8002844:	3001      	adds	r0, #1
 8002846:	f8c3 8004 	str.w	r8, [r3, #4]
 800284a:	3d02      	subs	r5, #2
 800284c:	6160      	str	r0, [r4, #20]
 800284e:	f80c 9006 	strb.w	r9, [ip, r6]
 8002852:	6099      	str	r1, [r3, #8]
 8002854:	60e7      	str	r7, [r4, #12]
 8002856:	2a00      	cmp	r2, #0
 8002858:	f000 8126 	beq.w	8002aa8 <d_encoding+0x514>
 800285c:	213f      	movs	r1, #63	; 0x3f
 800285e:	4620      	mov	r0, r4
 8002860:	f7fd fcd6 	bl	8000210 <d_make_comp>
 8002864:	4602      	mov	r2, r0
 8002866:	2800      	cmp	r0, #0
 8002868:	f43f af21 	beq.w	80026ae <d_encoding+0x11a>
 800286c:	2d00      	cmp	r5, #0
 800286e:	dcca      	bgt.n	8002806 <d_encoding+0x272>
 8002870:	4620      	mov	r0, r4
 8002872:	2300      	movs	r3, #0
 8002874:	213e      	movs	r1, #62	; 0x3e
 8002876:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	f7fd bcc9 	b.w	8000210 <d_make_comp>
 800287e:	2100      	movs	r1, #0
 8002880:	4620      	mov	r0, r4
 8002882:	f7ff fe87 	bl	8002594 <d_encoding>
 8002886:	2300      	movs	r3, #0
 8002888:	4602      	mov	r2, r0
 800288a:	2117      	movs	r1, #23
 800288c:	4620      	mov	r0, r4
 800288e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002892:	f7fd bcbd 	b.w	8000210 <d_make_comp>
 8002896:	4620      	mov	r0, r4
 8002898:	f7fe fd8e 	bl	80013b8 <d_name>
 800289c:	4605      	mov	r5, r0
 800289e:	4620      	mov	r0, r4
 80028a0:	f7fd fddc 	bl	800045c <d_number_component>
 80028a4:	462a      	mov	r2, r5
 80028a6:	4603      	mov	r3, r0
 80028a8:	2116      	movs	r1, #22
 80028aa:	4620      	mov	r0, r4
 80028ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	f7fd bcae 	b.w	8000210 <d_make_comp>
 80028b4:	789a      	ldrb	r2, [r3, #2]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4620      	mov	r0, r4
 80028ba:	b12a      	cbz	r2, 80028c8 <d_encoding+0x334>
 80028bc:	1cda      	adds	r2, r3, #3
 80028be:	60e2      	str	r2, [r4, #12]
 80028c0:	789b      	ldrb	r3, [r3, #2]
 80028c2:	2b6e      	cmp	r3, #110	; 0x6e
 80028c4:	f000 8109 	beq.w	8002ada <d_encoding+0x546>
 80028c8:	f7ff fe64 	bl	8002594 <d_encoding>
 80028cc:	2300      	movs	r3, #0
 80028ce:	4602      	mov	r2, r0
 80028d0:	2148      	movs	r1, #72	; 0x48
 80028d2:	4620      	mov	r0, r4
 80028d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	f7fd bc9a 	b.w	8000210 <d_make_comp>
 80028dc:	68ea      	ldr	r2, [r5, #12]
 80028de:	e000      	b.n	80028e2 <d_encoding+0x34e>
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	7810      	ldrb	r0, [r2, #0]
 80028e4:	f7fd fd80 	bl	80003e8 <is_fnqual_component_type>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d1f9      	bne.n	80028e0 <d_encoding+0x34c>
 80028ec:	60ea      	str	r2, [r5, #12]
 80028ee:	e66f      	b.n	80025d0 <d_encoding+0x3c>
 80028f0:	2176      	movs	r1, #118	; 0x76
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7fe f80a 	bl	800090c <d_call_offset>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f43f aed8 	beq.w	80026ae <d_encoding+0x11a>
 80028fe:	2100      	movs	r1, #0
 8002900:	4620      	mov	r0, r4
 8002902:	f7ff fe47 	bl	8002594 <d_encoding>
 8002906:	2300      	movs	r3, #0
 8002908:	4602      	mov	r2, r0
 800290a:	2110      	movs	r1, #16
 800290c:	4620      	mov	r0, r4
 800290e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002912:	f7fd bc7d 	b.w	8000210 <d_make_comp>
 8002916:	2168      	movs	r1, #104	; 0x68
 8002918:	4620      	mov	r0, r4
 800291a:	f7fd fff7 	bl	800090c <d_call_offset>
 800291e:	2800      	cmp	r0, #0
 8002920:	f43f aec5 	beq.w	80026ae <d_encoding+0x11a>
 8002924:	2100      	movs	r1, #0
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff fe34 	bl	8002594 <d_encoding>
 800292c:	2300      	movs	r3, #0
 800292e:	4602      	mov	r2, r0
 8002930:	210f      	movs	r1, #15
 8002932:	4620      	mov	r0, r4
 8002934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	f7fd bc6a 	b.w	8000210 <d_make_comp>
 800293c:	2100      	movs	r1, #0
 800293e:	4620      	mov	r0, r4
 8002940:	f7fd ffe4 	bl	800090c <d_call_offset>
 8002944:	2800      	cmp	r0, #0
 8002946:	f43f aeb2 	beq.w	80026ae <d_encoding+0x11a>
 800294a:	2100      	movs	r1, #0
 800294c:	4620      	mov	r0, r4
 800294e:	f7fd ffdd 	bl	800090c <d_call_offset>
 8002952:	2800      	cmp	r0, #0
 8002954:	f43f aeab 	beq.w	80026ae <d_encoding+0x11a>
 8002958:	2100      	movs	r1, #0
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fe1a 	bl	8002594 <d_encoding>
 8002960:	2300      	movs	r3, #0
 8002962:	4602      	mov	r2, r0
 8002964:	2111      	movs	r1, #17
 8002966:	4620      	mov	r0, r4
 8002968:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800296c:	f7fd bc50 	b.w	8000210 <d_make_comp>
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe fd21 	bl	80013b8 <d_name>
 8002976:	2300      	movs	r3, #0
 8002978:	4602      	mov	r2, r0
 800297a:	2115      	movs	r1, #21
 800297c:	4620      	mov	r0, r4
 800297e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002982:	f7fd bc45 	b.w	8000210 <d_make_comp>
 8002986:	310f      	adds	r1, #15
 8002988:	6321      	str	r1, [r4, #48]	; 0x30
 800298a:	4620      	mov	r0, r4
 800298c:	f7fe fec0 	bl	8001710 <d_type>
 8002990:	2300      	movs	r3, #0
 8002992:	4602      	mov	r2, r0
 8002994:	2109      	movs	r1, #9
 8002996:	4620      	mov	r0, r4
 8002998:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	f7fd bc38 	b.w	8000210 <d_make_comp>
 80029a0:	310a      	adds	r1, #10
 80029a2:	6321      	str	r1, [r4, #48]	; 0x30
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7fe feb3 	bl	8001710 <d_type>
 80029aa:	2300      	movs	r3, #0
 80029ac:	4602      	mov	r2, r0
 80029ae:	210a      	movs	r1, #10
 80029b0:	4620      	mov	r0, r4
 80029b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b6:	f7fd bc2b 	b.w	8000210 <d_make_comp>
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7fe fea8 	bl	8001710 <d_type>
 80029c0:	2300      	movs	r3, #0
 80029c2:	4602      	mov	r2, r0
 80029c4:	210d      	movs	r1, #13
 80029c6:	4620      	mov	r0, r4
 80029c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	f7fd bc20 	b.w	8000210 <d_make_comp>
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe fe9d 	bl	8001710 <d_type>
 80029d6:	2300      	movs	r3, #0
 80029d8:	4602      	mov	r2, r0
 80029da:	2112      	movs	r1, #18
 80029dc:	4620      	mov	r0, r4
 80029de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e2:	f7fd bc15 	b.w	8000210 <d_make_comp>
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe fe92 	bl	8001710 <d_type>
 80029ec:	2300      	movs	r3, #0
 80029ee:	4602      	mov	r2, r0
 80029f0:	210c      	movs	r1, #12
 80029f2:	4620      	mov	r0, r4
 80029f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f8:	f7fd bc0a 	b.w	8000210 <d_make_comp>
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fe fcdb 	bl	80013b8 <d_name>
 8002a02:	2300      	movs	r3, #0
 8002a04:	4602      	mov	r2, r0
 8002a06:	2114      	movs	r1, #20
 8002a08:	4620      	mov	r0, r4
 8002a0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0e:	f7fd bbff 	b.w	8000210 <d_make_comp>
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7fe fe7c 	bl	8001710 <d_type>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	210e      	movs	r1, #14
 8002a1e:	4620      	mov	r0, r4
 8002a20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a24:	f7fd bbf4 	b.w	8000210 <d_make_comp>
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7fe fe71 	bl	8001710 <d_type>
 8002a2e:	4605      	mov	r5, r0
 8002a30:	f104 000c 	add.w	r0, r4, #12
 8002a34:	f7fd fce6 	bl	8000404 <d_number.isra.1>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f6ff ae38 	blt.w	80026ae <d_encoding+0x11a>
 8002a3e:	68e3      	ldr	r3, [r4, #12]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	2a5f      	cmp	r2, #95	; 0x5f
 8002a44:	f47f ae33 	bne.w	80026ae <d_encoding+0x11a>
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60e3      	str	r3, [r4, #12]
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe fe5f 	bl	8001710 <d_type>
 8002a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a54:	1d59      	adds	r1, r3, #5
 8002a56:	6321      	str	r1, [r4, #48]	; 0x30
 8002a58:	4602      	mov	r2, r0
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	210b      	movs	r1, #11
 8002a60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	f7fd bbd4 	b.w	8000210 <d_make_comp>
 8002a68:	463e      	mov	r6, r7
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	e004      	b.n	8002a78 <d_encoding+0x4e4>
 8002a6e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8002a72:	b123      	cbz	r3, 8002a7e <d_encoding+0x4ea>
 8002a74:	2b24      	cmp	r3, #36	; 0x24
 8002a76:	d002      	beq.n	8002a7e <d_encoding+0x4ea>
 8002a78:	3101      	adds	r1, #1
 8002a7a:	42a9      	cmp	r1, r5
 8002a7c:	dbf7      	blt.n	8002a6e <d_encoding+0x4da>
 8002a7e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002a82:	4283      	cmp	r3, r0
 8002a84:	da24      	bge.n	8002ad0 <d_encoding+0x53c>
 8002a86:	e9d4 c603 	ldrd	ip, r6, [r4, #12]
 8002a8a:	0118      	lsls	r0, r3, #4
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6163      	str	r3, [r4, #20]
 8002a90:	1833      	adds	r3, r6, r0
 8002a92:	1a6d      	subs	r5, r5, r1
 8002a94:	f8c3 8004 	str.w	r8, [r3, #4]
 8002a98:	f806 8000 	strb.w	r8, [r6, r0]
 8002a9c:	609f      	str	r7, [r3, #8]
 8002a9e:	eb0c 0701 	add.w	r7, ip, r1
 8002aa2:	60d9      	str	r1, [r3, #12]
 8002aa4:	60e7      	str	r7, [r4, #12]
 8002aa6:	e6d6      	b.n	8002856 <d_encoding+0x2c2>
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	e6df      	b.n	800286c <d_encoding+0x2d8>
 8002aac:	2b4c      	cmp	r3, #76	; 0x4c
 8002aae:	f1a3 024e 	sub.w	r2, r3, #78	; 0x4e
 8002ab2:	d004      	beq.n	8002abe <d_encoding+0x52a>
 8002ab4:	f4ff ae79 	bcc.w	80027aa <d_encoding+0x216>
 8002ab8:	2a01      	cmp	r2, #1
 8002aba:	f63f ae76 	bhi.w	80027aa <d_encoding+0x216>
 8002abe:	6889      	ldr	r1, [r1, #8]
 8002ac0:	2900      	cmp	r1, #0
 8002ac2:	f47f add7 	bne.w	8002674 <d_encoding+0xe0>
 8002ac6:	e671      	b.n	80027ac <d_encoding+0x218>
 8002ac8:	212f      	movs	r1, #47	; 0x2f
 8002aca:	e6ae      	b.n	800282a <d_encoding+0x296>
 8002acc:	212e      	movs	r1, #46	; 0x2e
 8002ace:	e6ac      	b.n	800282a <d_encoding+0x296>
 8002ad0:	68e3      	ldr	r3, [r4, #12]
 8002ad2:	440b      	add	r3, r1
 8002ad4:	60e3      	str	r3, [r4, #12]
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	e57a      	b.n	80025d0 <d_encoding+0x3c>
 8002ada:	f7ff fd5b 	bl	8002594 <d_encoding>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	2149      	movs	r1, #73	; 0x49
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aea:	f7fd bb91 	b.w	8000210 <d_make_comp>
 8002aee:	bf00      	nop

08002af0 <d_expr_primary>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	68c2      	ldr	r2, [r0, #12]
 8002af4:	7813      	ldrb	r3, [r2, #0]
 8002af6:	2b4c      	cmp	r3, #76	; 0x4c
 8002af8:	d144      	bne.n	8002b84 <d_expr_primary+0x94>
 8002afa:	1c53      	adds	r3, r2, #1
 8002afc:	60c3      	str	r3, [r0, #12]
 8002afe:	7851      	ldrb	r1, [r2, #1]
 8002b00:	295f      	cmp	r1, #95	; 0x5f
 8002b02:	4604      	mov	r4, r0
 8002b04:	d040      	beq.n	8002b88 <d_expr_primary+0x98>
 8002b06:	295a      	cmp	r1, #90	; 0x5a
 8002b08:	d10c      	bne.n	8002b24 <d_expr_primary+0x34>
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60e3      	str	r3, [r4, #12]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fd3f 	bl	8002594 <d_encoding>
 8002b16:	68e3      	ldr	r3, [r4, #12]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	2a45      	cmp	r2, #69	; 0x45
 8002b1c:	d132      	bne.n	8002b84 <d_expr_primary+0x94>
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60e3      	str	r3, [r4, #12]
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b24:	f7fe fdf4 	bl	8001710 <d_type>
 8002b28:	b360      	cbz	r0, 8002b84 <d_expr_primary+0x94>
 8002b2a:	7803      	ldrb	r3, [r0, #0]
 8002b2c:	2b27      	cmp	r3, #39	; 0x27
 8002b2e:	d032      	beq.n	8002b96 <d_expr_primary+0xa6>
 8002b30:	68e6      	ldr	r6, [r4, #12]
 8002b32:	7833      	ldrb	r3, [r6, #0]
 8002b34:	2b6e      	cmp	r3, #110	; 0x6e
 8002b36:	d037      	beq.n	8002ba8 <d_expr_primary+0xb8>
 8002b38:	213c      	movs	r1, #60	; 0x3c
 8002b3a:	2b45      	cmp	r3, #69	; 0x45
 8002b3c:	d040      	beq.n	8002bc0 <d_expr_primary+0xd0>
 8002b3e:	b30b      	cbz	r3, 8002b84 <d_expr_primary+0x94>
 8002b40:	4633      	mov	r3, r6
 8002b42:	e000      	b.n	8002b46 <d_expr_primary+0x56>
 8002b44:	b1f5      	cbz	r5, 8002b84 <d_expr_primary+0x94>
 8002b46:	3301      	adds	r3, #1
 8002b48:	60e3      	str	r3, [r4, #12]
 8002b4a:	781d      	ldrb	r5, [r3, #0]
 8002b4c:	2d45      	cmp	r5, #69	; 0x45
 8002b4e:	d1f9      	bne.n	8002b44 <d_expr_primary+0x54>
 8002b50:	1b9d      	subs	r5, r3, r6
 8002b52:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	da0b      	bge.n	8002b72 <d_expr_primary+0x82>
 8002b5a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002b5e:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8002b62:	eb0e 030c 	add.w	r3, lr, ip
 8002b66:	3201      	adds	r2, #1
 8002b68:	2700      	movs	r7, #0
 8002b6a:	605f      	str	r7, [r3, #4]
 8002b6c:	6162      	str	r2, [r4, #20]
 8002b6e:	b106      	cbz	r6, 8002b72 <d_expr_primary+0x82>
 8002b70:	bb05      	cbnz	r5, 8002bb4 <d_expr_primary+0xc4>
 8002b72:	2300      	movs	r3, #0
 8002b74:	4602      	mov	r2, r0
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fd fb4a 	bl	8000210 <d_make_comp>
 8002b7c:	68e3      	ldr	r3, [r4, #12]
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	2a45      	cmp	r2, #69	; 0x45
 8002b82:	d0cc      	beq.n	8002b1e <d_expr_primary+0x2e>
 8002b84:	2000      	movs	r0, #0
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b88:	1c93      	adds	r3, r2, #2
 8002b8a:	60c3      	str	r3, [r0, #12]
 8002b8c:	7892      	ldrb	r2, [r2, #2]
 8002b8e:	2a5a      	cmp	r2, #90	; 0x5a
 8002b90:	d0bb      	beq.n	8002b0a <d_expr_primary+0x1a>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7c1      	b.n	8002b1a <d_expr_primary+0x2a>
 8002b96:	6883      	ldr	r3, [r0, #8]
 8002b98:	7c1a      	ldrb	r2, [r3, #16]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d0c8      	beq.n	8002b30 <d_expr_primary+0x40>
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ba6:	e7c3      	b.n	8002b30 <d_expr_primary+0x40>
 8002ba8:	1c72      	adds	r2, r6, #1
 8002baa:	60e2      	str	r2, [r4, #12]
 8002bac:	7873      	ldrb	r3, [r6, #1]
 8002bae:	213d      	movs	r1, #61	; 0x3d
 8002bb0:	4616      	mov	r6, r2
 8002bb2:	e7c2      	b.n	8002b3a <d_expr_primary+0x4a>
 8002bb4:	605f      	str	r7, [r3, #4]
 8002bb6:	f80e 700c 	strb.w	r7, [lr, ip]
 8002bba:	e9c3 6502 	strd	r6, r5, [r3, #8]
 8002bbe:	e7d9      	b.n	8002b74 <d_expr_primary+0x84>
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	e7c6      	b.n	8002b52 <d_expr_primary+0x62>

08002bc4 <d_print_comp>:
 8002bc4:	b112      	cbz	r2, 8002bcc <d_print_comp+0x8>
 8002bc6:	6853      	ldr	r3, [r2, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	dd03      	ble.n	8002bd4 <d_print_comp+0x10>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8002bd2:	4770      	bx	lr
 8002bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd8:	4615      	mov	r5, r2
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	606a      	str	r2, [r5, #4]
 8002bde:	b099      	sub	sp, #100	; 0x64
 8002be0:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 8002be4:	9504      	str	r5, [sp, #16]
 8002be6:	460e      	mov	r6, r1
 8002be8:	ab04      	add	r3, sp, #16
 8002bea:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
 8002bee:	9105      	str	r1, [sp, #20]
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 8002bf6:	2f00      	cmp	r7, #0
 8002bf8:	f040 80d7 	bne.w	8002daa <d_print_comp+0x1e6>
 8002bfc:	7828      	ldrb	r0, [r5, #0]
 8002bfe:	284f      	cmp	r0, #79	; 0x4f
 8002c00:	f201 82ef 	bhi.w	80041e2 <d_print_comp+0x161e>
 8002c04:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c08:	0ab80a87 	.word	0x0ab80a87
 8002c0c:	0a4f0ab8 	.word	0x0a4f0ab8
 8002c10:	079407c6 	.word	0x079407c6
 8002c14:	075e0767 	.word	0x075e0767
 8002c18:	070f0737 	.word	0x070f0737
 8002c1c:	06bf06e7 	.word	0x06bf06e7
 8002c20:	066f0697 	.word	0x066f0697
 8002c24:	061f0647 	.word	0x061f0647
 8002c28:	091f0947 	.word	0x091f0947
 8002c2c:	08cf08f7 	.word	0x08cf08f7
 8002c30:	087f08a7 	.word	0x087f08a7
 8002c34:	082f0857 	.word	0x082f0857
 8002c38:	09bf09d6 	.word	0x09bf09d6
 8002c3c:	09bf09bf 	.word	0x09bf09bf
 8002c40:	09990999 	.word	0x09990999
 8002c44:	09990999 	.word	0x09990999
 8002c48:	09990999 	.word	0x09990999
 8002c4c:	096f0999 	.word	0x096f0999
 8002c50:	0999096f 	.word	0x0999096f
 8002c54:	0a1d0999 	.word	0x0a1d0999
 8002c58:	06060a14 	.word	0x06060a14
 8002c5c:	05720592 	.word	0x05720592
 8002c60:	0572051b 	.word	0x0572051b
 8002c64:	04d304d3 	.word	0x04d304d3
 8002c68:	045c0488 	.word	0x045c0488
 8002c6c:	0aed0434 	.word	0x0aed0434
 8002c70:	0404040c 	.word	0x0404040c
 8002c74:	039c03b0 	.word	0x039c03b0
 8002c78:	038d0397 	.word	0x038d0397
 8002c7c:	03880388 	.word	0x03880388
 8002c80:	03330333 	.word	0x03330333
 8002c84:	02fe030b 	.word	0x02fe030b
 8002c88:	02aa02dc 	.word	0x02aa02dc
 8002c8c:	025a0282 	.word	0x025a0282
 8002c90:	01f80232 	.word	0x01f80232
 8002c94:	01d00aed 	.word	0x01d00aed
 8002c98:	015301a8 	.word	0x015301a8
 8002c9c:	017b0105 	.word	0x017b0105
 8002ca0:	00d80999 	.word	0x00d80999
 8002ca4:	09990999 	.word	0x09990999
 8002ca8:	68aa      	ldr	r2, [r5, #8]
 8002caa:	6893      	ldr	r3, [r2, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	7859      	ldrb	r1, [r3, #1]
 8002cb0:	2963      	cmp	r1, #99	; 0x63
 8002cb2:	d109      	bne.n	8002cc8 <d_print_comp+0x104>
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8002cba:	2901      	cmp	r1, #1
 8002cbc:	f242 8319 	bls.w	80052f2 <d_print_comp+0x272e>
 8002cc0:	3b72      	subs	r3, #114	; 0x72
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f242 8315 	bls.w	80052f2 <d_print_comp+0x272e>
 8002cc8:	f105 030c 	add.w	r3, r5, #12
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f003 fcd2 	bl	8006678 <d_maybe_print_fold_expression.isra.20>
 8002cd4:	4680      	mov	r8, r0
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	f042 8400 	bne.w	80054dc <d_print_comp+0x2918>
 8002cdc:	68ab      	ldr	r3, [r5, #8]
 8002cde:	781a      	ldrb	r2, [r3, #0]
 8002ce0:	2a31      	cmp	r2, #49	; 0x31
 8002ce2:	f002 8592 	beq.w	800580a <d_print_comp+0x2c46>
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	49d7      	ldr	r1, [pc, #860]	; (8003048 <d_print_comp+0x484>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f004 f850 	bl	8006d90 <strcmp>
 8002cf0:	68eb      	ldr	r3, [r5, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	b918      	cbnz	r0, 8002cfe <d_print_comp+0x13a>
 8002cf6:	7813      	ldrb	r3, [r2, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	f002 85d4 	beq.w	80058a6 <d_print_comp+0x2ce2>
 8002cfe:	4631      	mov	r1, r6
 8002d00:	4620      	mov	r0, r4
 8002d02:	f003 fc67 	bl	80065d4 <d_print_subexpr>
 8002d06:	68af      	ldr	r7, [r5, #8]
 8002d08:	49d0      	ldr	r1, [pc, #832]	; (800304c <d_print_comp+0x488>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f8d3 8000 	ldr.w	r8, [r3]
 8002d10:	4640      	mov	r0, r8
 8002d12:	f004 f83d 	bl	8006d90 <strcmp>
 8002d16:	4681      	mov	r9, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f042 83d0 	bne.w	80054be <d_print_comp+0x28fa>
 8002d1e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d22:	2fff      	cmp	r7, #255	; 0xff
 8002d24:	d110      	bne.n	8002d48 <d_print_comp+0x184>
 8002d26:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d34:	4620      	mov	r0, r4
 8002d36:	4798      	blx	r3
 8002d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d3c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8002d40:	3301      	adds	r3, #1
 8002d42:	464f      	mov	r7, r9
 8002d44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d48:	1c7a      	adds	r2, r7, #1
 8002d4a:	235b      	movs	r3, #91	; 0x5b
 8002d4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d50:	55e3      	strb	r3, [r4, r7]
 8002d52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d56:	68eb      	ldr	r3, [r5, #12]
 8002d58:	4631      	mov	r1, r6
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ff31 	bl	8002bc4 <d_print_comp>
 8002d62:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8002d66:	2fff      	cmp	r7, #255	; 0xff
 8002d68:	d111      	bne.n	8002d8e <d_print_comp+0x1ca>
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d72:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4798      	blx	r3
 8002d7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d82:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8002d86:	3301      	adds	r3, #1
 8002d88:	4637      	mov	r7, r6
 8002d8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d8e:	235d      	movs	r3, #93	; 0x5d
 8002d90:	1c7a      	adds	r2, r7, #1
 8002d92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d96:	55e3      	strb	r3, [r4, r7]
 8002d98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d9c:	68ab      	ldr	r3, [r5, #8]
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	2a31      	cmp	r2, #49	; 0x31
 8002da2:	f002 83ad 	beq.w	8005500 <d_print_comp+0x293c>
 8002da6:	9905      	ldr	r1, [sp, #20]
 8002da8:	686a      	ldr	r2, [r5, #4]
 8002daa:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8002dae:	3a01      	subs	r2, #1
 8002db0:	606a      	str	r2, [r5, #4]
 8002db2:	b019      	add	sp, #100	; 0x64
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db8:	4fa5      	ldr	r7, [pc, #660]	; (8003050 <d_print_comp+0x48c>)
 8002dba:	68aa      	ldr	r2, [r5, #8]
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff00 	bl	8002bc4 <d_print_comp>
 8002dc4:	f107 0808 	add.w	r8, r7, #8
 8002dc8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	e016      	b.n	8002e00 <d_print_comp+0x23c>
 8002dd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002dde:	4798      	blx	r3
 8002de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002de4:	3301      	adds	r3, #1
 8002de6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dea:	2200      	movs	r2, #0
 8002dec:	2301      	movs	r3, #1
 8002dee:	45b8      	cmp	r8, r7
 8002df0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002df4:	f804 a002 	strb.w	sl, [r4, r2]
 8002df8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002dfc:	f001 82f9 	beq.w	80043f2 <d_print_comp+0x182e>
 8002e00:	2bff      	cmp	r3, #255	; 0xff
 8002e02:	4619      	mov	r1, r3
 8002e04:	4620      	mov	r0, r4
 8002e06:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002e0a:	d0e2      	beq.n	8002dd2 <d_print_comp+0x20e>
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	e7ed      	b.n	8002dee <d_print_comp+0x22a>
 8002e12:	68a9      	ldr	r1, [r5, #8]
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7fd fcef 	bl	80007f8 <d_find_pack>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	f002 81e1 	beq.w	80051e2 <d_print_comp+0x261e>
 8002e20:	2300      	movs	r3, #0
 8002e22:	7802      	ldrb	r2, [r0, #0]
 8002e24:	2a2f      	cmp	r2, #47	; 0x2f
 8002e26:	f041 85df 	bne.w	80049e8 <d_print_comp+0x1e24>
 8002e2a:	6882      	ldr	r2, [r0, #8]
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	f001 85db 	beq.w	80049e8 <d_print_comp+0x1e24>
 8002e32:	68c0      	ldr	r0, [r0, #12]
 8002e34:	3301      	adds	r3, #1
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d1f3      	bne.n	8002e22 <d_print_comp+0x25e>
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68ab      	ldr	r3, [r5, #8]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	1e4a      	subs	r2, r1, #1
 8002e42:	9202      	str	r2, [sp, #8]
 8002e44:	f04f 0a00 	mov.w	sl, #0
 8002e48:	4689      	mov	r9, r1
 8002e4a:	9503      	str	r5, [sp, #12]
 8002e4c:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8002e50:	9a01      	ldr	r2, [sp, #4]
 8002e52:	4631      	mov	r1, r6
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7ff feb5 	bl	8002bc4 <d_print_comp>
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	429f      	cmp	r7, r3
 8002e5e:	f281 81c6 	bge.w	80041ee <d_print_comp+0x162a>
 8002e62:	4d7c      	ldr	r5, [pc, #496]	; (8003054 <d_print_comp+0x490>)
 8002e64:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002e68:	f105 0802 	add.w	r8, r5, #2
 8002e6c:	e016      	b.n	8002e9c <d_print_comp+0x2d8>
 8002e6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e76:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8002e7a:	4798      	blx	r3
 8002e7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e80:	3301      	adds	r3, #1
 8002e82:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e86:	2200      	movs	r2, #0
 8002e88:	2301      	movs	r3, #1
 8002e8a:	45a8      	cmp	r8, r5
 8002e8c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002e90:	f804 b002 	strb.w	fp, [r4, r2]
 8002e94:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8002e98:	f001 81a9 	beq.w	80041ee <d_print_comp+0x162a>
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f815 bb01 	ldrb.w	fp, [r5], #1
 8002ea6:	d0e2      	beq.n	8002e6e <d_print_comp+0x2aa>
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	e7ed      	b.n	8002e8a <d_print_comp+0x2c6>
 8002eae:	4f6a      	ldr	r7, [pc, #424]	; (8003058 <d_print_comp+0x494>)
 8002eb0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002eb4:	f107 081a 	add.w	r8, r7, #26
 8002eb8:	f04f 0900 	mov.w	r9, #0
 8002ebc:	e016      	b.n	8002eec <d_print_comp+0x328>
 8002ebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ec6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eca:	4798      	blx	r3
 8002ecc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	45b8      	cmp	r8, r7
 8002edc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002ee0:	f804 a002 	strb.w	sl, [r4, r2]
 8002ee4:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002ee8:	f001 82f1 	beq.w	80044ce <d_print_comp+0x190a>
 8002eec:	2bff      	cmp	r3, #255	; 0xff
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002ef6:	d0e2      	beq.n	8002ebe <d_print_comp+0x2fa>
 8002ef8:	461a      	mov	r2, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	e7ed      	b.n	8002eda <d_print_comp+0x316>
 8002efe:	4f57      	ldr	r7, [pc, #348]	; (800305c <d_print_comp+0x498>)
 8002f00:	68aa      	ldr	r2, [r5, #8]
 8002f02:	4631      	mov	r1, r6
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff fe5d 	bl	8002bc4 <d_print_comp>
 8002f0a:	f107 0805 	add.w	r8, r7, #5
 8002f0e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f12:	f04f 0900 	mov.w	r9, #0
 8002f16:	e016      	b.n	8002f46 <d_print_comp+0x382>
 8002f18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f24:	4798      	blx	r3
 8002f26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f30:	2200      	movs	r2, #0
 8002f32:	2301      	movs	r3, #1
 8002f34:	45b8      	cmp	r8, r7
 8002f36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f3a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f3e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f42:	f001 827c 	beq.w	800443e <d_print_comp+0x187a>
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f817 ab01 	ldrb.w	sl, [r7], #1
 8002f50:	d0e2      	beq.n	8002f18 <d_print_comp+0x354>
 8002f52:	461a      	mov	r2, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	e7ed      	b.n	8002f34 <d_print_comp+0x370>
 8002f58:	4f41      	ldr	r7, [pc, #260]	; (8003060 <d_print_comp+0x49c>)
 8002f5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002f5e:	f107 0816 	add.w	r8, r7, #22
 8002f62:	f04f 0900 	mov.w	r9, #0
 8002f66:	e016      	b.n	8002f96 <d_print_comp+0x3d2>
 8002f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f70:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f74:	4798      	blx	r3
 8002f76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f80:	2200      	movs	r2, #0
 8002f82:	2301      	movs	r3, #1
 8002f84:	45b8      	cmp	r8, r7
 8002f86:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002f8a:	f804 a002 	strb.w	sl, [r4, r2]
 8002f8e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8002f92:	f001 81f4 	beq.w	800437e <d_print_comp+0x17ba>
 8002f96:	2bff      	cmp	r3, #255	; 0xff
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8002fa0:	d0e2      	beq.n	8002f68 <d_print_comp+0x3a4>
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	e7ed      	b.n	8002f84 <d_print_comp+0x3c0>
 8002fa8:	4e2e      	ldr	r6, [pc, #184]	; (8003064 <d_print_comp+0x4a0>)
 8002faa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002fae:	f106 070e 	add.w	r7, r6, #14
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	e016      	b.n	8002fe6 <d_print_comp+0x422>
 8002fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fc0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fc4:	4798      	blx	r3
 8002fc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	42b7      	cmp	r7, r6
 8002fd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002fda:	f804 9002 	strb.w	r9, [r4, r2]
 8002fde:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8002fe2:	f001 81d5 	beq.w	8004390 <d_print_comp+0x17cc>
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4620      	mov	r0, r4
 8002fec:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8002ff0:	d0e2      	beq.n	8002fb8 <d_print_comp+0x3f4>
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	e7ed      	b.n	8002fd4 <d_print_comp+0x410>
 8002ff8:	4f1b      	ldr	r7, [pc, #108]	; (8003068 <d_print_comp+0x4a4>)
 8002ffa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002ffe:	f107 0808 	add.w	r8, r7, #8
 8003002:	f04f 0900 	mov.w	r9, #0
 8003006:	e016      	b.n	8003036 <d_print_comp+0x472>
 8003008:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800300c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003010:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003014:	4798      	blx	r3
 8003016:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800301a:	3301      	adds	r3, #1
 800301c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003020:	2200      	movs	r2, #0
 8003022:	2301      	movs	r3, #1
 8003024:	45b8      	cmp	r8, r7
 8003026:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800302a:	f804 a002 	strb.w	sl, [r4, r2]
 800302e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003032:	f001 8114 	beq.w	800425e <d_print_comp+0x169a>
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	4619      	mov	r1, r3
 800303a:	4620      	mov	r0, r4
 800303c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003040:	d0e2      	beq.n	8003008 <d_print_comp+0x444>
 8003042:	461a      	mov	r2, r3
 8003044:	3301      	adds	r3, #1
 8003046:	e7ed      	b.n	8003024 <d_print_comp+0x460>
 8003048:	0801aebc 	.word	0x0801aebc
 800304c:	0801b0bc 	.word	0x0801b0bc
 8003050:	0801b177 	.word	0x0801b177
 8003054:	0801b090 	.word	0x0801b090
 8003058:	0801b05b 	.word	0x0801b05b
 800305c:	0801aefc 	.word	0x0801aefc
 8003060:	0801b05f 	.word	0x0801b05f
 8003064:	0801b167 	.word	0x0801b167
 8003068:	0801b157 	.word	0x0801b157
 800306c:	4fb9      	ldr	r7, [pc, #740]	; (8003354 <d_print_comp+0x790>)
 800306e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003072:	f107 081c 	add.w	r8, r7, #28
 8003076:	f04f 0900 	mov.w	r9, #0
 800307a:	e016      	b.n	80030aa <d_print_comp+0x4e6>
 800307c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003080:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003084:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003088:	4798      	blx	r3
 800308a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800308e:	3301      	adds	r3, #1
 8003090:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003094:	2200      	movs	r2, #0
 8003096:	2301      	movs	r3, #1
 8003098:	45b8      	cmp	r8, r7
 800309a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800309e:	f804 a002 	strb.w	sl, [r4, r2]
 80030a2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030a6:	f001 810f 	beq.w	80042c8 <d_print_comp+0x1704>
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	4619      	mov	r1, r3
 80030ae:	4620      	mov	r0, r4
 80030b0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80030b4:	d0e2      	beq.n	800307c <d_print_comp+0x4b8>
 80030b6:	461a      	mov	r2, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	e7ed      	b.n	8003098 <d_print_comp+0x4d4>
 80030bc:	4fa6      	ldr	r7, [pc, #664]	; (8003358 <d_print_comp+0x794>)
 80030be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80030c2:	f107 081d 	add.w	r8, r7, #29
 80030c6:	f04f 0900 	mov.w	r9, #0
 80030ca:	e016      	b.n	80030fa <d_print_comp+0x536>
 80030cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030d4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030d8:	4798      	blx	r3
 80030da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030de:	3301      	adds	r3, #1
 80030e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030e4:	2200      	movs	r2, #0
 80030e6:	2301      	movs	r3, #1
 80030e8:	4547      	cmp	r7, r8
 80030ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80030ee:	f804 a002 	strb.w	sl, [r4, r2]
 80030f2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80030f6:	f001 8083 	beq.w	8004200 <d_print_comp+0x163c>
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	4619      	mov	r1, r3
 80030fe:	4620      	mov	r0, r4
 8003100:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003104:	d0e2      	beq.n	80030cc <d_print_comp+0x508>
 8003106:	461a      	mov	r2, r3
 8003108:	3301      	adds	r3, #1
 800310a:	e7ed      	b.n	80030e8 <d_print_comp+0x524>
 800310c:	4f93      	ldr	r7, [pc, #588]	; (800335c <d_print_comp+0x798>)
 800310e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003112:	f107 080a 	add.w	r8, r7, #10
 8003116:	f04f 0900 	mov.w	r9, #0
 800311a:	e016      	b.n	800314a <d_print_comp+0x586>
 800311c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003120:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003124:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003128:	4798      	blx	r3
 800312a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800312e:	3301      	adds	r3, #1
 8003130:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003134:	2200      	movs	r2, #0
 8003136:	2301      	movs	r3, #1
 8003138:	45b8      	cmp	r8, r7
 800313a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800313e:	f804 a002 	strb.w	sl, [r4, r2]
 8003142:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003146:	f001 8064 	beq.w	8004212 <d_print_comp+0x164e>
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	4619      	mov	r1, r3
 800314e:	4620      	mov	r0, r4
 8003150:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003154:	d0e2      	beq.n	800311c <d_print_comp+0x558>
 8003156:	461a      	mov	r2, r3
 8003158:	3301      	adds	r3, #1
 800315a:	e7ed      	b.n	8003138 <d_print_comp+0x574>
 800315c:	a808      	add	r0, sp, #32
 800315e:	68aa      	ldr	r2, [r5, #8]
 8003160:	497f      	ldr	r1, [pc, #508]	; (8003360 <d_print_comp+0x79c>)
 8003162:	f011 ff67 	bl	8015034 <sprintf>
 8003166:	a808      	add	r0, sp, #32
 8003168:	f003 fe1c 	bl	8006da4 <strlen>
 800316c:	2800      	cmp	r0, #0
 800316e:	f001 81b7 	beq.w	80044e0 <d_print_comp+0x191c>
 8003172:	ae08      	add	r6, sp, #32
 8003174:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003178:	1837      	adds	r7, r6, r0
 800317a:	f04f 0800 	mov.w	r8, #0
 800317e:	e016      	b.n	80031ae <d_print_comp+0x5ea>
 8003180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003184:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003188:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800318c:	4798      	blx	r3
 800318e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003192:	3301      	adds	r3, #1
 8003194:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003198:	2200      	movs	r2, #0
 800319a:	2301      	movs	r3, #1
 800319c:	42be      	cmp	r6, r7
 800319e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031a2:	f804 9002 	strb.w	r9, [r4, r2]
 80031a6:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80031aa:	f001 8199 	beq.w	80044e0 <d_print_comp+0x191c>
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	4619      	mov	r1, r3
 80031b2:	4620      	mov	r0, r4
 80031b4:	f816 9b01 	ldrb.w	r9, [r6], #1
 80031b8:	d0e2      	beq.n	8003180 <d_print_comp+0x5bc>
 80031ba:	461a      	mov	r2, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	e7ed      	b.n	800319c <d_print_comp+0x5d8>
 80031c0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80031c4:	f895 8008 	ldrb.w	r8, [r5, #8]
 80031c8:	2fff      	cmp	r7, #255	; 0xff
 80031ca:	d111      	bne.n	80031f0 <d_print_comp+0x62c>
 80031cc:	2600      	movs	r6, #0
 80031ce:	4639      	mov	r1, r7
 80031d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031d4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80031d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031dc:	4620      	mov	r0, r4
 80031de:	4798      	blx	r3
 80031e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80031e4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80031e8:	3301      	adds	r3, #1
 80031ea:	4637      	mov	r7, r6
 80031ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80031f0:	1c7b      	adds	r3, r7, #1
 80031f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031f6:	f804 8007 	strb.w	r8, [r4, r7]
 80031fa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80031fe:	686a      	ldr	r2, [r5, #4]
 8003200:	9905      	ldr	r1, [sp, #20]
 8003202:	e5d2      	b.n	8002daa <d_print_comp+0x1e6>
 8003204:	68aa      	ldr	r2, [r5, #8]
 8003206:	4631      	mov	r1, r6
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff fcdb 	bl	8002bc4 <d_print_comp>
 800320e:	4631      	mov	r1, r6
 8003210:	68ea      	ldr	r2, [r5, #12]
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff fcd6 	bl	8002bc4 <d_print_comp>
 8003218:	9905      	ldr	r1, [sp, #20]
 800321a:	686a      	ldr	r2, [r5, #4]
 800321c:	e5c5      	b.n	8002daa <d_print_comp+0x1e6>
 800321e:	4f51      	ldr	r7, [pc, #324]	; (8003364 <d_print_comp+0x7a0>)
 8003220:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003224:	f107 080e 	add.w	r8, r7, #14
 8003228:	f04f 0900 	mov.w	r9, #0
 800322c:	e016      	b.n	800325c <d_print_comp+0x698>
 800322e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003232:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003236:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800323a:	4798      	blx	r3
 800323c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003240:	3301      	adds	r3, #1
 8003242:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003246:	2200      	movs	r2, #0
 8003248:	2301      	movs	r3, #1
 800324a:	45b8      	cmp	r8, r7
 800324c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003250:	f804 a002 	strb.w	sl, [r4, r2]
 8003254:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003258:	f001 8146 	beq.w	80044e8 <d_print_comp+0x1924>
 800325c:	2bff      	cmp	r3, #255	; 0xff
 800325e:	4619      	mov	r1, r3
 8003260:	4620      	mov	r0, r4
 8003262:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003266:	d0e2      	beq.n	800322e <d_print_comp+0x66a>
 8003268:	461a      	mov	r2, r3
 800326a:	3301      	adds	r3, #1
 800326c:	e7ed      	b.n	800324a <d_print_comp+0x686>
 800326e:	68ab      	ldr	r3, [r5, #8]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	2a27      	cmp	r2, #39	; 0x27
 8003274:	f001 8572 	beq.w	8004d5c <d_print_comp+0x2198>
 8003278:	f04f 0800 	mov.w	r8, #0
 800327c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003280:	2fff      	cmp	r7, #255	; 0xff
 8003282:	d112      	bne.n	80032aa <d_print_comp+0x6e6>
 8003284:	f04f 0900 	mov.w	r9, #0
 8003288:	4639      	mov	r1, r7
 800328a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800328e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003292:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003296:	4620      	mov	r0, r4
 8003298:	4798      	blx	r3
 800329a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800329e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80032a2:	3301      	adds	r3, #1
 80032a4:	464f      	mov	r7, r9
 80032a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032aa:	2328      	movs	r3, #40	; 0x28
 80032ac:	1c7a      	adds	r2, r7, #1
 80032ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80032b2:	55e3      	strb	r3, [r4, r7]
 80032b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032b8:	68aa      	ldr	r2, [r5, #8]
 80032ba:	4631      	mov	r1, r6
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fc81 	bl	8002bc4 <d_print_comp>
 80032c2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	f041 85b8 	bne.w	8004e3c <d_print_comp+0x2278>
 80032cc:	2200      	movs	r2, #0
 80032ce:	4619      	mov	r1, r3
 80032d0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80032d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032dc:	4620      	mov	r0, r4
 80032de:	4798      	blx	r3
 80032e0:	2329      	movs	r3, #41	; 0x29
 80032e2:	7023      	strb	r3, [r4, #0]
 80032e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80032e8:	782a      	ldrb	r2, [r5, #0]
 80032ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ee:	2101      	movs	r1, #1
 80032f0:	3301      	adds	r3, #1
 80032f2:	2a3d      	cmp	r2, #61	; 0x3d
 80032f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032fc:	f001 85bb 	beq.w	8004e76 <d_print_comp+0x22b2>
 8003300:	f1b8 0f08 	cmp.w	r8, #8
 8003304:	f001 8556 	beq.w	8004db4 <d_print_comp+0x21f0>
 8003308:	4631      	mov	r1, r6
 800330a:	68ea      	ldr	r2, [r5, #12]
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fc59 	bl	8002bc4 <d_print_comp>
 8003312:	9905      	ldr	r1, [sp, #20]
 8003314:	686a      	ldr	r2, [r5, #4]
 8003316:	e548      	b.n	8002daa <d_print_comp+0x1e6>
 8003318:	2301      	movs	r3, #1
 800331a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800331e:	686a      	ldr	r2, [r5, #4]
 8003320:	e543      	b.n	8002daa <d_print_comp+0x1e6>
 8003322:	68eb      	ldr	r3, [r5, #12]
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	2a3a      	cmp	r2, #58	; 0x3a
 8003328:	f001 8405 	beq.w	8004b36 <d_print_comp+0x1f72>
 800332c:	2301      	movs	r3, #1
 800332e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003332:	686a      	ldr	r2, [r5, #4]
 8003334:	e539      	b.n	8002daa <d_print_comp+0x1e6>
 8003336:	2301      	movs	r3, #1
 8003338:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800333c:	686a      	ldr	r2, [r5, #4]
 800333e:	e534      	b.n	8002daa <d_print_comp+0x1e6>
 8003340:	68eb      	ldr	r3, [r5, #12]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b38      	cmp	r3, #56	; 0x38
 8003346:	f43f acaf 	beq.w	8002ca8 <d_print_comp+0xe4>
 800334a:	2301      	movs	r3, #1
 800334c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003350:	686a      	ldr	r2, [r5, #4]
 8003352:	e52a      	b.n	8002daa <d_print_comp+0x1e6>
 8003354:	0801b137 	.word	0x0801b137
 8003358:	0801b117 	.word	0x0801b117
 800335c:	0801b0f8 	.word	0x0801b0f8
 8003360:	0801aeb4 	.word	0x0801aeb4
 8003364:	0801b0e7 	.word	0x0801b0e7
 8003368:	e9d5 9802 	ldrd	r9, r8, [r5, #8]
 800336c:	f899 3000 	ldrb.w	r3, [r9]
 8003370:	2b31      	cmp	r3, #49	; 0x31
 8003372:	f001 843a 	beq.w	8004bea <d_print_comp+0x2026>
 8003376:	2b33      	cmp	r3, #51	; 0x33
 8003378:	f042 8192 	bne.w	80056a0 <d_print_comp+0x2adc>
 800337c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003380:	2fff      	cmp	r7, #255	; 0xff
 8003382:	d112      	bne.n	80033aa <d_print_comp+0x7e6>
 8003384:	f04f 0a00 	mov.w	sl, #0
 8003388:	4639      	mov	r1, r7
 800338a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800338e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003392:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003396:	4620      	mov	r0, r4
 8003398:	4798      	blx	r3
 800339a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800339e:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80033a2:	3301      	adds	r3, #1
 80033a4:	4657      	mov	r7, sl
 80033a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033aa:	1c7a      	adds	r2, r7, #1
 80033ac:	2328      	movs	r3, #40	; 0x28
 80033ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033b2:	55e3      	strb	r3, [r4, r7]
 80033b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033b8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80033bc:	4631      	mov	r1, r6
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff fc00 	bl	8002bc4 <d_print_comp>
 80033c4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80033c8:	2fff      	cmp	r7, #255	; 0xff
 80033ca:	d112      	bne.n	80033f2 <d_print_comp+0x82e>
 80033cc:	f04f 0900 	mov.w	r9, #0
 80033d0:	4639      	mov	r1, r7
 80033d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80033da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033de:	4620      	mov	r0, r4
 80033e0:	4798      	blx	r3
 80033e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033e6:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80033ea:	3301      	adds	r3, #1
 80033ec:	464f      	mov	r7, r9
 80033ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80033f2:	2329      	movs	r3, #41	; 0x29
 80033f4:	1c7a      	adds	r2, r7, #1
 80033f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033fa:	55e3      	strb	r3, [r4, r7]
 80033fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003400:	4642      	mov	r2, r8
 8003402:	4631      	mov	r1, r6
 8003404:	4620      	mov	r0, r4
 8003406:	f003 f8e5 	bl	80065d4 <d_print_subexpr>
 800340a:	9905      	ldr	r1, [sp, #20]
 800340c:	686a      	ldr	r2, [r5, #4]
 800340e:	e4cc      	b.n	8002daa <d_print_comp+0x1e6>
 8003410:	4631      	mov	r1, r6
 8003412:	68aa      	ldr	r2, [r5, #8]
 8003414:	4620      	mov	r0, r4
 8003416:	f003 f89d 	bl	8006554 <d_print_expr_op>
 800341a:	9905      	ldr	r1, [sp, #20]
 800341c:	686a      	ldr	r2, [r5, #4]
 800341e:	e4c4      	b.n	8002daa <d_print_comp+0x1e6>
 8003420:	4fd2      	ldr	r7, [pc, #840]	; (800376c <d_print_comp+0xba8>)
 8003422:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003426:	f107 0809 	add.w	r8, r7, #9
 800342a:	f04f 0900 	mov.w	r9, #0
 800342e:	e016      	b.n	800345e <d_print_comp+0x89a>
 8003430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003434:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003438:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800343c:	4798      	blx	r3
 800343e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003442:	3301      	adds	r3, #1
 8003444:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003448:	2200      	movs	r2, #0
 800344a:	2301      	movs	r3, #1
 800344c:	45b8      	cmp	r8, r7
 800344e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003452:	f804 a002 	strb.w	sl, [r4, r2]
 8003456:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800345a:	f001 8057 	beq.w	800450c <d_print_comp+0x1948>
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	4619      	mov	r1, r3
 8003462:	4620      	mov	r0, r4
 8003464:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003468:	d0e2      	beq.n	8003430 <d_print_comp+0x86c>
 800346a:	461a      	mov	r2, r3
 800346c:	3301      	adds	r3, #1
 800346e:	e7ed      	b.n	800344c <d_print_comp+0x888>
 8003470:	4fbe      	ldr	r7, [pc, #760]	; (800376c <d_print_comp+0xba8>)
 8003472:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003476:	f107 0809 	add.w	r8, r7, #9
 800347a:	f04f 0900 	mov.w	r9, #0
 800347e:	e016      	b.n	80034ae <d_print_comp+0x8ea>
 8003480:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003488:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800348c:	4798      	blx	r3
 800348e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003492:	3301      	adds	r3, #1
 8003494:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003498:	2200      	movs	r2, #0
 800349a:	2301      	movs	r3, #1
 800349c:	45b8      	cmp	r8, r7
 800349e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034a2:	f804 a002 	strb.w	sl, [r4, r2]
 80034a6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80034aa:	f001 8026 	beq.w	80044fa <d_print_comp+0x1936>
 80034ae:	2bff      	cmp	r3, #255	; 0xff
 80034b0:	4619      	mov	r1, r3
 80034b2:	4620      	mov	r0, r4
 80034b4:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80034b8:	d0e2      	beq.n	8003480 <d_print_comp+0x8bc>
 80034ba:	461a      	mov	r2, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	e7ed      	b.n	800349c <d_print_comp+0x8d8>
 80034c0:	f8d5 a008 	ldr.w	sl, [r5, #8]
 80034c4:	4eaa      	ldr	r6, [pc, #680]	; (8003770 <d_print_comp+0xbac>)
 80034c6:	f8da 7008 	ldr.w	r7, [sl, #8]
 80034ca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80034ce:	f106 0808 	add.w	r8, r6, #8
 80034d2:	f04f 0900 	mov.w	r9, #0
 80034d6:	e016      	b.n	8003506 <d_print_comp+0x942>
 80034d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034e4:	4798      	blx	r3
 80034e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ea:	3301      	adds	r3, #1
 80034ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034f0:	2200      	movs	r2, #0
 80034f2:	2301      	movs	r3, #1
 80034f4:	4546      	cmp	r6, r8
 80034f6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034fa:	f804 b002 	strb.w	fp, [r4, r2]
 80034fe:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 8003502:	f001 8021 	beq.w	8004548 <d_print_comp+0x1984>
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	4619      	mov	r1, r3
 800350a:	4620      	mov	r0, r4
 800350c:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 8003510:	d0e2      	beq.n	80034d8 <d_print_comp+0x914>
 8003512:	461a      	mov	r2, r3
 8003514:	3301      	adds	r3, #1
 8003516:	e7ed      	b.n	80034f4 <d_print_comp+0x930>
 8003518:	e9d5 2802 	ldrd	r2, r8, [r5, #8]
 800351c:	b11a      	cbz	r2, 8003526 <d_print_comp+0x962>
 800351e:	4631      	mov	r1, r6
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff fb4f 	bl	8002bc4 <d_print_comp>
 8003526:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800352a:	2fff      	cmp	r7, #255	; 0xff
 800352c:	d112      	bne.n	8003554 <d_print_comp+0x990>
 800352e:	f04f 0900 	mov.w	r9, #0
 8003532:	4639      	mov	r1, r7
 8003534:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003538:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800353c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003540:	4620      	mov	r0, r4
 8003542:	4798      	blx	r3
 8003544:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003548:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800354c:	3301      	adds	r3, #1
 800354e:	464f      	mov	r7, r9
 8003550:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003554:	1c78      	adds	r0, r7, #1
 8003556:	237b      	movs	r3, #123	; 0x7b
 8003558:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800355c:	4642      	mov	r2, r8
 800355e:	55e3      	strb	r3, [r4, r7]
 8003560:	4631      	mov	r1, r6
 8003562:	4620      	mov	r0, r4
 8003564:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003568:	f7ff fb2c 	bl	8002bc4 <d_print_comp>
 800356c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003570:	2fff      	cmp	r7, #255	; 0xff
 8003572:	d111      	bne.n	8003598 <d_print_comp+0x9d4>
 8003574:	2600      	movs	r6, #0
 8003576:	4639      	mov	r1, r7
 8003578:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800357c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003580:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003584:	4620      	mov	r0, r4
 8003586:	4798      	blx	r3
 8003588:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800358c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003590:	3301      	adds	r3, #1
 8003592:	4637      	mov	r7, r6
 8003594:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003598:	1c7a      	adds	r2, r7, #1
 800359a:	237d      	movs	r3, #125	; 0x7d
 800359c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035a0:	55e3      	strb	r3, [r4, r7]
 80035a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80035a6:	686a      	ldr	r2, [r5, #4]
 80035a8:	9905      	ldr	r1, [sp, #20]
 80035aa:	f7ff bbfe 	b.w	8002daa <d_print_comp+0x1e6>
 80035ae:	68aa      	ldr	r2, [r5, #8]
 80035b0:	b11a      	cbz	r2, 80035ba <d_print_comp+0x9f6>
 80035b2:	4631      	mov	r1, r6
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff fb05 	bl	8002bc4 <d_print_comp>
 80035ba:	68eb      	ldr	r3, [r5, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f001 853d 	beq.w	800503c <d_print_comp+0x2478>
 80035c2:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80035c6:	2ffd      	cmp	r7, #253	; 0xfd
 80035c8:	d912      	bls.n	80035f0 <d_print_comp+0xa2c>
 80035ca:	f04f 0800 	mov.w	r8, #0
 80035ce:	f804 8007 	strb.w	r8, [r4, r7]
 80035d2:	4639      	mov	r1, r7
 80035d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035dc:	4620      	mov	r0, r4
 80035de:	4798      	blx	r3
 80035e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80035e8:	3301      	adds	r3, #1
 80035ea:	4647      	mov	r7, r8
 80035ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035f0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800377c <d_print_comp+0xbb8>
 80035f4:	f04f 0a00 	mov.w	sl, #0
 80035f8:	f108 0b02 	add.w	fp, r8, #2
 80035fc:	e016      	b.n	800362c <d_print_comp+0xa68>
 80035fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003602:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003606:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800360a:	4798      	blx	r3
 800360c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003610:	3301      	adds	r3, #1
 8003612:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003616:	2701      	movs	r7, #1
 8003618:	2300      	movs	r3, #0
 800361a:	45c3      	cmp	fp, r8
 800361c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8003620:	f804 9003 	strb.w	r9, [r4, r3]
 8003624:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8003628:	f001 80cf 	beq.w	80047ca <d_print_comp+0x1c06>
 800362c:	2fff      	cmp	r7, #255	; 0xff
 800362e:	4639      	mov	r1, r7
 8003630:	4620      	mov	r0, r4
 8003632:	f818 9b01 	ldrb.w	r9, [r8], #1
 8003636:	d0e2      	beq.n	80035fe <d_print_comp+0xa3a>
 8003638:	463b      	mov	r3, r7
 800363a:	3701      	adds	r7, #1
 800363c:	e7ed      	b.n	800361a <d_print_comp+0xa56>
 800363e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f041 84a0 	bne.w	8004f88 <d_print_comp+0x23c4>
 8003648:	68aa      	ldr	r2, [r5, #8]
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <d_print_comp+0xbb0>)
 800364c:	6891      	ldr	r1, [r2, #8]
 800364e:	4299      	cmp	r1, r3
 8003650:	d020      	beq.n	8003694 <d_print_comp+0xad0>
 8003652:	4631      	mov	r1, r6
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fab5 	bl	8002bc4 <d_print_comp>
 800365a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800365e:	2fff      	cmp	r7, #255	; 0xff
 8003660:	d111      	bne.n	8003686 <d_print_comp+0xac2>
 8003662:	2600      	movs	r6, #0
 8003664:	4639      	mov	r1, r7
 8003666:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800366a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800366e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003672:	4620      	mov	r0, r4
 8003674:	4798      	blx	r3
 8003676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800367a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800367e:	3301      	adds	r3, #1
 8003680:	4637      	mov	r7, r6
 8003682:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003686:	2320      	movs	r3, #32
 8003688:	1c7a      	adds	r2, r7, #1
 800368a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800368e:	55e3      	strb	r3, [r4, r7]
 8003690:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003694:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8003698:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800369c:	2a00      	cmp	r2, #0
 800369e:	f001 80a6 	beq.w	80047ee <d_print_comp+0x1c2a>
 80036a2:	4e35      	ldr	r6, [pc, #212]	; (8003778 <d_print_comp+0xbb4>)
 80036a4:	f04f 0800 	mov.w	r8, #0
 80036a8:	f106 0906 	add.w	r9, r6, #6
 80036ac:	e015      	b.n	80036da <d_print_comp+0xb16>
 80036ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80036ba:	4798      	blx	r3
 80036bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80036c0:	3301      	adds	r3, #1
 80036c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80036c6:	2200      	movs	r2, #0
 80036c8:	2301      	movs	r3, #1
 80036ca:	45b1      	cmp	r9, r6
 80036cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80036d0:	54a7      	strb	r7, [r4, r2]
 80036d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80036d6:	f001 8183 	beq.w	80049e0 <d_print_comp+0x1e1c>
 80036da:	2bff      	cmp	r3, #255	; 0xff
 80036dc:	4619      	mov	r1, r3
 80036de:	4620      	mov	r0, r4
 80036e0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80036e4:	d0e3      	beq.n	80036ae <d_print_comp+0xaea>
 80036e6:	461a      	mov	r2, r3
 80036e8:	3301      	adds	r3, #1
 80036ea:	e7ee      	b.n	80036ca <d_print_comp+0xb06>
 80036ec:	ab18      	add	r3, sp, #96	; 0x60
 80036ee:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80036f2:	f843 2d40 	str.w	r2, [r3, #-64]!
 80036f6:	2000      	movs	r0, #0
 80036f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80036fc:	900a      	str	r0, [sp, #40]	; 0x28
 80036fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003702:	68ea      	ldr	r2, [r5, #12]
 8003704:	930b      	str	r3, [sp, #44]	; 0x2c
 8003706:	4631      	mov	r1, r6
 8003708:	4620      	mov	r0, r4
 800370a:	9509      	str	r5, [sp, #36]	; 0x24
 800370c:	f7ff fa5a 	bl	8002bc4 <d_print_comp>
 8003710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003712:	b923      	cbnz	r3, 800371e <d_print_comp+0xb5a>
 8003714:	4631      	mov	r1, r6
 8003716:	462a      	mov	r2, r5
 8003718:	4620      	mov	r0, r4
 800371a:	f002 f8e9 	bl	80058f0 <d_print_mod>
 800371e:	9b08      	ldr	r3, [sp, #32]
 8003720:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003724:	9905      	ldr	r1, [sp, #20]
 8003726:	686a      	ldr	r2, [r5, #4]
 8003728:	f7ff bb3f 	b.w	8002daa <d_print_comp+0x1e6>
 800372c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8003730:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003734:	f849 cd40 	str.w	ip, [r9, #-64]!
 8003738:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800373c:	f8cd c004 	str.w	ip, [sp, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	4667      	mov	r7, ip
 8003744:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003748:	9509      	str	r5, [sp, #36]	; 0x24
 800374a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800374e:	2f00      	cmp	r7, #0
 8003750:	f001 852f 	beq.w	80051b2 <d_print_comp+0x25ee>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	3b19      	subs	r3, #25
 800375a:	2b02      	cmp	r3, #2
 800375c:	f201 8529 	bhi.w	80051b2 <d_print_comp+0x25ee>
 8003760:	4623      	mov	r3, r4
 8003762:	f04f 0801 	mov.w	r8, #1
 8003766:	464c      	mov	r4, r9
 8003768:	469c      	mov	ip, r3
 800376a:	e00e      	b.n	800378a <d_print_comp+0xbc6>
 800376c:	0801b09f 	.word	0x0801b09f
 8003770:	0801b093 	.word	0x0801b093
 8003774:	08018494 	.word	0x08018494
 8003778:	0801b080 	.word	0x0801b080
 800377c:	0801b090 	.word	0x0801b090
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	3b19      	subs	r3, #25
 8003786:	2b02      	cmp	r3, #2
 8003788:	d81d      	bhi.n	80037c6 <d_print_comp+0xc02>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 8003790:	aa18      	add	r2, sp, #96	; 0x60
 8003792:	eb02 0b0e 	add.w	fp, r2, lr
 8003796:	b99b      	cbnz	r3, 80037c0 <d_print_comp+0xbfc>
 8003798:	f1b8 0f03 	cmp.w	r8, #3
 800379c:	f201 8517 	bhi.w	80051ce <d_print_comp+0x260a>
 80037a0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80037a4:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80037a8:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80037ac:	f84b 4c40 	str.w	r4, [fp, #-64]
 80037b0:	2301      	movs	r3, #1
 80037b2:	eb09 040e 	add.w	r4, r9, lr
 80037b6:	f8cc 4114 	str.w	r4, [ip, #276]	; 0x114
 80037ba:	f108 0801 	add.w	r8, r8, #1
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	683f      	ldr	r7, [r7, #0]
 80037c2:	2f00      	cmp	r7, #0
 80037c4:	d1dc      	bne.n	8003780 <d_print_comp+0xbbc>
 80037c6:	68ea      	ldr	r2, [r5, #12]
 80037c8:	4631      	mov	r1, r6
 80037ca:	4660      	mov	r0, ip
 80037cc:	4664      	mov	r4, ip
 80037ce:	f7ff f9f9 	bl	8002bc4 <d_print_comp>
 80037d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d4:	9a01      	ldr	r2, [sp, #4]
 80037d6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80037da:	b9bb      	cbnz	r3, 800380c <d_print_comp+0xc48>
 80037dc:	f1b8 0f01 	cmp.w	r8, #1
 80037e0:	d00c      	beq.n	80037fc <d_print_comp+0xc38>
 80037e2:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 80037e6:	af0c      	add	r7, sp, #48	; 0x30
 80037e8:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80037ec:	4631      	mov	r1, r6
 80037ee:	f1a8 0810 	sub.w	r8, r8, #16
 80037f2:	4620      	mov	r0, r4
 80037f4:	f002 f87c 	bl	80058f0 <d_print_mod>
 80037f8:	4547      	cmp	r7, r8
 80037fa:	d1f5      	bne.n	80037e8 <d_print_comp+0xc24>
 80037fc:	4631      	mov	r1, r6
 80037fe:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003802:	f105 0208 	add.w	r2, r5, #8
 8003806:	4620      	mov	r0, r4
 8003808:	f002 fdca 	bl	80063a0 <d_print_array_type.isra.14>
 800380c:	9905      	ldr	r1, [sp, #20]
 800380e:	686a      	ldr	r2, [r5, #4]
 8003810:	f7ff bacb 	b.w	8002daa <d_print_comp+0x1e6>
 8003814:	06b2      	lsls	r2, r6, #26
 8003816:	f026 0860 	bic.w	r8, r6, #96	; 0x60
 800381a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800381e:	f101 825a 	bmi.w	8004cd6 <d_print_comp+0x2112>
 8003822:	68aa      	ldr	r2, [r5, #8]
 8003824:	b11a      	cbz	r2, 800382e <d_print_comp+0xc6a>
 8003826:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 800382a:	f001 85c3 	beq.w	80053b4 <d_print_comp+0x27f0>
 800382e:	4641      	mov	r1, r8
 8003830:	f105 020c 	add.w	r2, r5, #12
 8003834:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003838:	4620      	mov	r0, r4
 800383a:	f002 fb87 	bl	8005f4c <d_print_function_type.isra.15>
 800383e:	9905      	ldr	r1, [sp, #20]
 8003840:	686a      	ldr	r2, [r5, #4]
 8003842:	f7ff bab2 	b.w	8002daa <d_print_comp+0x1e6>
 8003846:	4fcb      	ldr	r7, [pc, #812]	; (8003b74 <d_print_comp+0xfb0>)
 8003848:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800384c:	f107 0815 	add.w	r8, r7, #21
 8003850:	f04f 0900 	mov.w	r9, #0
 8003854:	e016      	b.n	8003884 <d_print_comp+0xcc0>
 8003856:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800385a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800385e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003862:	4798      	blx	r3
 8003864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003868:	3301      	adds	r3, #1
 800386a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800386e:	2200      	movs	r2, #0
 8003870:	2301      	movs	r3, #1
 8003872:	45b8      	cmp	r8, r7
 8003874:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003878:	f804 a002 	strb.w	sl, [r4, r2]
 800387c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003880:	f000 8789 	beq.w	8004796 <d_print_comp+0x1bd2>
 8003884:	2bff      	cmp	r3, #255	; 0xff
 8003886:	4619      	mov	r1, r3
 8003888:	4620      	mov	r0, r4
 800388a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800388e:	d0e2      	beq.n	8003856 <d_print_comp+0xc92>
 8003890:	461a      	mov	r2, r3
 8003892:	3301      	adds	r3, #1
 8003894:	e7ed      	b.n	8003872 <d_print_comp+0xcae>
 8003896:	4fb8      	ldr	r7, [pc, #736]	; (8003b78 <d_print_comp+0xfb4>)
 8003898:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800389c:	f107 0810 	add.w	r8, r7, #16
 80038a0:	f04f 0900 	mov.w	r9, #0
 80038a4:	e016      	b.n	80038d4 <d_print_comp+0xd10>
 80038a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80038b2:	4798      	blx	r3
 80038b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80038b8:	3301      	adds	r3, #1
 80038ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80038be:	2200      	movs	r2, #0
 80038c0:	2301      	movs	r3, #1
 80038c2:	45b8      	cmp	r8, r7
 80038c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038c8:	f804 a002 	strb.w	sl, [r4, r2]
 80038cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80038d0:	f000 876a 	beq.w	80047a8 <d_print_comp+0x1be4>
 80038d4:	2bff      	cmp	r3, #255	; 0xff
 80038d6:	4619      	mov	r1, r3
 80038d8:	4620      	mov	r0, r4
 80038da:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80038de:	d0e2      	beq.n	80038a6 <d_print_comp+0xce2>
 80038e0:	461a      	mov	r2, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	e7ed      	b.n	80038c2 <d_print_comp+0xcfe>
 80038e6:	4fa5      	ldr	r7, [pc, #660]	; (8003b7c <d_print_comp+0xfb8>)
 80038e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80038ec:	f107 0812 	add.w	r8, r7, #18
 80038f0:	f04f 0900 	mov.w	r9, #0
 80038f4:	e016      	b.n	8003924 <d_print_comp+0xd60>
 80038f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038fe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003902:	4798      	blx	r3
 8003904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003908:	3301      	adds	r3, #1
 800390a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800390e:	2200      	movs	r2, #0
 8003910:	2301      	movs	r3, #1
 8003912:	45b8      	cmp	r8, r7
 8003914:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003918:	f804 a002 	strb.w	sl, [r4, r2]
 800391c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003920:	f000 8727 	beq.w	8004772 <d_print_comp+0x1bae>
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	4619      	mov	r1, r3
 8003928:	4620      	mov	r0, r4
 800392a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 800392e:	d0e2      	beq.n	80038f6 <d_print_comp+0xd32>
 8003930:	461a      	mov	r2, r3
 8003932:	3301      	adds	r3, #1
 8003934:	e7ed      	b.n	8003912 <d_print_comp+0xd4e>
 8003936:	4f92      	ldr	r7, [pc, #584]	; (8003b80 <d_print_comp+0xfbc>)
 8003938:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800393c:	f107 080d 	add.w	r8, r7, #13
 8003940:	f04f 0900 	mov.w	r9, #0
 8003944:	e016      	b.n	8003974 <d_print_comp+0xdb0>
 8003946:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800394e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003952:	4798      	blx	r3
 8003954:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003958:	3301      	adds	r3, #1
 800395a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800395e:	2200      	movs	r2, #0
 8003960:	2301      	movs	r3, #1
 8003962:	45b8      	cmp	r8, r7
 8003964:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003968:	f804 a002 	strb.w	sl, [r4, r2]
 800396c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003970:	f000 8708 	beq.w	8004784 <d_print_comp+0x1bc0>
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	4619      	mov	r1, r3
 8003978:	4620      	mov	r0, r4
 800397a:	f817 ab01 	ldrb.w	sl, [r7], #1
 800397e:	d0e2      	beq.n	8003946 <d_print_comp+0xd82>
 8003980:	461a      	mov	r2, r3
 8003982:	3301      	adds	r3, #1
 8003984:	e7ed      	b.n	8003962 <d_print_comp+0xd9e>
 8003986:	4f7f      	ldr	r7, [pc, #508]	; (8003b84 <d_print_comp+0xfc0>)
 8003988:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800398c:	f107 0818 	add.w	r8, r7, #24
 8003990:	f04f 0900 	mov.w	r9, #0
 8003994:	e016      	b.n	80039c4 <d_print_comp+0xe00>
 8003996:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800399a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800399e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039a2:	4798      	blx	r3
 80039a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039a8:	3301      	adds	r3, #1
 80039aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039ae:	2200      	movs	r2, #0
 80039b0:	2301      	movs	r3, #1
 80039b2:	45b8      	cmp	r8, r7
 80039b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039b8:	f804 a002 	strb.w	sl, [r4, r2]
 80039bc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80039c0:	f000 8699 	beq.w	80046f6 <d_print_comp+0x1b32>
 80039c4:	2bff      	cmp	r3, #255	; 0xff
 80039c6:	4619      	mov	r1, r3
 80039c8:	4620      	mov	r0, r4
 80039ca:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80039ce:	d0e2      	beq.n	8003996 <d_print_comp+0xdd2>
 80039d0:	461a      	mov	r2, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	e7ed      	b.n	80039b2 <d_print_comp+0xdee>
 80039d6:	4f6c      	ldr	r7, [pc, #432]	; (8003b88 <d_print_comp+0xfc4>)
 80039d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80039dc:	f107 0808 	add.w	r8, r7, #8
 80039e0:	f04f 0900 	mov.w	r9, #0
 80039e4:	e016      	b.n	8003a14 <d_print_comp+0xe50>
 80039e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039f2:	4798      	blx	r3
 80039f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039f8:	3301      	adds	r3, #1
 80039fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039fe:	2200      	movs	r2, #0
 8003a00:	2301      	movs	r3, #1
 8003a02:	45b8      	cmp	r8, r7
 8003a04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a08:	f804 a002 	strb.w	sl, [r4, r2]
 8003a0c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a10:	f000 86a6 	beq.w	8004760 <d_print_comp+0x1b9c>
 8003a14:	2bff      	cmp	r3, #255	; 0xff
 8003a16:	4619      	mov	r1, r3
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003a1e:	d0e2      	beq.n	80039e6 <d_print_comp+0xe22>
 8003a20:	461a      	mov	r2, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	e7ed      	b.n	8003a02 <d_print_comp+0xe3e>
 8003a26:	4f59      	ldr	r7, [pc, #356]	; (8003b8c <d_print_comp+0xfc8>)
 8003a28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a2c:	f107 080b 	add.w	r8, r7, #11
 8003a30:	f04f 0900 	mov.w	r9, #0
 8003a34:	e016      	b.n	8003a64 <d_print_comp+0xea0>
 8003a36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a42:	4798      	blx	r3
 8003a44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2301      	movs	r3, #1
 8003a52:	45b8      	cmp	r8, r7
 8003a54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003a58:	f804 a002 	strb.w	sl, [r4, r2]
 8003a5c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a60:	f000 85cc 	beq.w	80045fc <d_print_comp+0x1a38>
 8003a64:	2bff      	cmp	r3, #255	; 0xff
 8003a66:	4619      	mov	r1, r3
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f817 ab01 	ldrb.w	sl, [r7], #1
 8003a6e:	d0e2      	beq.n	8003a36 <d_print_comp+0xe72>
 8003a70:	461a      	mov	r2, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	e7ed      	b.n	8003a52 <d_print_comp+0xe8e>
 8003a76:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003a7a:	2fff      	cmp	r7, #255	; 0xff
 8003a7c:	d112      	bne.n	8003aa4 <d_print_comp+0xee0>
 8003a7e:	f04f 0800 	mov.w	r8, #0
 8003a82:	4639      	mov	r1, r7
 8003a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
 8003a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a98:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4647      	mov	r7, r8
 8003aa0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aa4:	237e      	movs	r3, #126	; 0x7e
 8003aa6:	1c7a      	adds	r2, r7, #1
 8003aa8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003aac:	55e3      	strb	r3, [r4, r7]
 8003aae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	68ea      	ldr	r2, [r5, #12]
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7ff f884 	bl	8002bc4 <d_print_comp>
 8003abc:	9905      	ldr	r1, [sp, #20]
 8003abe:	686a      	ldr	r2, [r5, #4]
 8003ac0:	f7ff b973 	b.w	8002daa <d_print_comp+0x1e6>
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	68ea      	ldr	r2, [r5, #12]
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff f87b 	bl	8002bc4 <d_print_comp>
 8003ace:	9905      	ldr	r1, [sp, #20]
 8003ad0:	686a      	ldr	r2, [r5, #4]
 8003ad2:	f7ff b96a 	b.w	8002daa <d_print_comp+0x1e6>
 8003ad6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003ada:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	f000 878b 	beq.w	80049fc <d_print_comp+0x1e38>
 8003ae6:	4e2a      	ldr	r6, [pc, #168]	; (8003b90 <d_print_comp+0xfcc>)
 8003ae8:	f04f 0900 	mov.w	r9, #0
 8003aec:	f106 0a06 	add.w	sl, r6, #6
 8003af0:	e015      	b.n	8003b1e <d_print_comp+0xf5a>
 8003af2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003af6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003afa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003afe:	4798      	blx	r3
 8003b00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b04:	3301      	adds	r3, #1
 8003b06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	45b2      	cmp	sl, r6
 8003b10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003b14:	54a7      	strb	r7, [r4, r2]
 8003b16:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b1a:	f000 868f 	beq.w	800483c <d_print_comp+0x1c78>
 8003b1e:	2bff      	cmp	r3, #255	; 0xff
 8003b20:	4619      	mov	r1, r3
 8003b22:	4620      	mov	r0, r4
 8003b24:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003b28:	d0e3      	beq.n	8003af2 <d_print_comp+0xf2e>
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	e7ee      	b.n	8003b0e <d_print_comp+0xf4a>
 8003b30:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 86d1 	bne.w	80048dc <d_print_comp+0x1d18>
 8003b3a:	f105 0108 	add.w	r1, r5, #8
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7fc fe4a 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8003b44:	4602      	mov	r2, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f001 8271 	beq.w	800502e <d_print_comp+0x246a>
 8003b4c:	7803      	ldrb	r3, [r0, #0]
 8003b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b50:	f001 8262 	beq.w	8005018 <d_print_comp+0x2454>
 8003b54:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff f82f 	bl	8002bc4 <d_print_comp>
 8003b66:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
 8003b6a:	9905      	ldr	r1, [sp, #20]
 8003b6c:	686a      	ldr	r2, [r5, #4]
 8003b6e:	f7ff b91c 	b.w	8002daa <d_print_comp+0x1e6>
 8003b72:	bf00      	nop
 8003b74:	0801afa3 	.word	0x0801afa3
 8003b78:	0801af8f 	.word	0x0801af8f
 8003b7c:	0801af7b 	.word	0x0801af7b
 8003b80:	0801af6c 	.word	0x0801af6c
 8003b84:	0801af47 	.word	0x0801af47
 8003b88:	0801af3b 	.word	0x0801af3b
 8003b8c:	0801af30 	.word	0x0801af30
 8003b90:	0801b110 	.word	0x0801b110
 8003b94:	2300      	movs	r3, #0
 8003b96:	0771      	lsls	r1, r6, #29
 8003b98:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
 8003b9c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8003ba0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003ba4:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003ba8:	68af      	ldr	r7, [r5, #8]
 8003baa:	d505      	bpl.n	8003bb8 <d_print_comp+0xff4>
 8003bac:	783b      	ldrb	r3, [r7, #0]
 8003bae:	b91b      	cbnz	r3, 8003bb8 <d_print_comp+0xff4>
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	2a06      	cmp	r2, #6
 8003bb4:	f001 8433 	beq.w	800541e <d_print_comp+0x285a>
 8003bb8:	463a      	mov	r2, r7
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f7ff f801 	bl	8002bc4 <d_print_comp>
 8003bc2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8003bc8:	f001 8206 	beq.w	8004fd8 <d_print_comp+0x2414>
 8003bcc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003bd0:	2fff      	cmp	r7, #255	; 0xff
 8003bd2:	d112      	bne.n	8003bfa <d_print_comp+0x1036>
 8003bd4:	f04f 0a00 	mov.w	sl, #0
 8003bd8:	4639      	mov	r1, r7
 8003bda:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bde:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003be6:	4620      	mov	r0, r4
 8003be8:	4798      	blx	r3
 8003bea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bee:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4657      	mov	r7, sl
 8003bf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003bfa:	233c      	movs	r3, #60	; 0x3c
 8003bfc:	1c7a      	adds	r2, r7, #1
 8003bfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c02:	55e3      	strb	r3, [r4, r7]
 8003c04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c08:	4631      	mov	r1, r6
 8003c0a:	68ea      	ldr	r2, [r5, #12]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7fe ffd9 	bl	8002bc4 <d_print_comp>
 8003c12:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003c16:	2b3e      	cmp	r3, #62	; 0x3e
 8003c18:	f001 806f 	beq.w	8004cfa <d_print_comp+0x2136>
 8003c1c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8003c20:	2fff      	cmp	r7, #255	; 0xff
 8003c22:	d111      	bne.n	8003c48 <d_print_comp+0x1084>
 8003c24:	2600      	movs	r6, #0
 8003c26:	4639      	mov	r1, r7
 8003c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c2c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003c30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c34:	4620      	mov	r0, r4
 8003c36:	4798      	blx	r3
 8003c38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c3c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003c40:	3301      	adds	r3, #1
 8003c42:	4637      	mov	r7, r6
 8003c44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c48:	233e      	movs	r3, #62	; 0x3e
 8003c4a:	1c7a      	adds	r2, r7, #1
 8003c4c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c50:	55e3      	strb	r3, [r4, r7]
 8003c52:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c56:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c5a:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144
 8003c5e:	9905      	ldr	r1, [sp, #20]
 8003c60:	686a      	ldr	r2, [r5, #4]
 8003c62:	f7ff b8a2 	b.w	8002daa <d_print_comp+0x1e6>
 8003c66:	4fda      	ldr	r7, [pc, #872]	; (8003fd0 <d_print_comp+0x140c>)
 8003c68:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c6c:	f107 0811 	add.w	r8, r7, #17
 8003c70:	f04f 0900 	mov.w	r9, #0
 8003c74:	e016      	b.n	8003ca4 <d_print_comp+0x10e0>
 8003c76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c7e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c82:	4798      	blx	r3
 8003c84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2301      	movs	r3, #1
 8003c92:	45b8      	cmp	r8, r7
 8003c94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003c98:	f804 a002 	strb.w	sl, [r4, r2]
 8003c9c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ca0:	f000 84eb 	beq.w	800467a <d_print_comp+0x1ab6>
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cae:	d0e2      	beq.n	8003c76 <d_print_comp+0x10b2>
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	e7ed      	b.n	8003c92 <d_print_comp+0x10ce>
 8003cb6:	4fc7      	ldr	r7, [pc, #796]	; (8003fd4 <d_print_comp+0x1410>)
 8003cb8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003cbc:	f107 0815 	add.w	r8, r7, #21
 8003cc0:	f04f 0900 	mov.w	r9, #0
 8003cc4:	e016      	b.n	8003cf4 <d_print_comp+0x1130>
 8003cc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cd2:	4798      	blx	r3
 8003cd4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	45b8      	cmp	r8, r7
 8003ce4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ce8:	f804 a002 	strb.w	sl, [r4, r2]
 8003cec:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003cf0:	f000 84cc 	beq.w	800468c <d_print_comp+0x1ac8>
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003cfe:	d0e2      	beq.n	8003cc6 <d_print_comp+0x1102>
 8003d00:	461a      	mov	r2, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	e7ed      	b.n	8003ce2 <d_print_comp+0x111e>
 8003d06:	4fb4      	ldr	r7, [pc, #720]	; (8003fd8 <d_print_comp+0x1414>)
 8003d08:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d0c:	f107 0819 	add.w	r8, r7, #25
 8003d10:	f04f 0900 	mov.w	r9, #0
 8003d14:	e016      	b.n	8003d44 <d_print_comp+0x1180>
 8003d16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d22:	4798      	blx	r3
 8003d24:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2301      	movs	r3, #1
 8003d32:	45b8      	cmp	r8, r7
 8003d34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d38:	f804 a002 	strb.w	sl, [r4, r2]
 8003d3c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d40:	f000 8489 	beq.w	8004656 <d_print_comp+0x1a92>
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	4619      	mov	r1, r3
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d4e:	d0e2      	beq.n	8003d16 <d_print_comp+0x1152>
 8003d50:	461a      	mov	r2, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	e7ed      	b.n	8003d32 <d_print_comp+0x116e>
 8003d56:	4fa1      	ldr	r7, [pc, #644]	; (8003fdc <d_print_comp+0x1418>)
 8003d58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d5c:	f107 0816 	add.w	r8, r7, #22
 8003d60:	f04f 0900 	mov.w	r9, #0
 8003d64:	e016      	b.n	8003d94 <d_print_comp+0x11d0>
 8003d66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d72:	4798      	blx	r3
 8003d74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2301      	movs	r3, #1
 8003d82:	45b8      	cmp	r8, r7
 8003d84:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003d88:	f804 a002 	strb.w	sl, [r4, r2]
 8003d8c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003d90:	f000 846a 	beq.w	8004668 <d_print_comp+0x1aa4>
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	4619      	mov	r1, r3
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003d9e:	d0e2      	beq.n	8003d66 <d_print_comp+0x11a2>
 8003da0:	461a      	mov	r2, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	e7ed      	b.n	8003d82 <d_print_comp+0x11be>
 8003da6:	4f8e      	ldr	r7, [pc, #568]	; (8003fe0 <d_print_comp+0x141c>)
 8003da8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dac:	f107 0813 	add.w	r8, r7, #19
 8003db0:	f04f 0900 	mov.w	r9, #0
 8003db4:	e016      	b.n	8003de4 <d_print_comp+0x1220>
 8003db6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003dba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dbe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003dc2:	4798      	blx	r3
 8003dc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	45b8      	cmp	r8, r7
 8003dd4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003dd8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ddc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003de0:	f000 8427 	beq.w	8004632 <d_print_comp+0x1a6e>
 8003de4:	2bff      	cmp	r3, #255	; 0xff
 8003de6:	4619      	mov	r1, r3
 8003de8:	4620      	mov	r0, r4
 8003dea:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003dee:	d0e2      	beq.n	8003db6 <d_print_comp+0x11f2>
 8003df0:	461a      	mov	r2, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	e7ed      	b.n	8003dd2 <d_print_comp+0x120e>
 8003df6:	4f7b      	ldr	r7, [pc, #492]	; (8003fe4 <d_print_comp+0x1420>)
 8003df8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003dfc:	f107 080f 	add.w	r8, r7, #15
 8003e00:	f04f 0900 	mov.w	r9, #0
 8003e04:	e016      	b.n	8003e34 <d_print_comp+0x1270>
 8003e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e0e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e12:	4798      	blx	r3
 8003e14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2301      	movs	r3, #1
 8003e22:	45b8      	cmp	r8, r7
 8003e24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e28:	f804 a002 	strb.w	sl, [r4, r2]
 8003e2c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e30:	f000 8408 	beq.w	8004644 <d_print_comp+0x1a80>
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	4619      	mov	r1, r3
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e3e:	d0e2      	beq.n	8003e06 <d_print_comp+0x1242>
 8003e40:	461a      	mov	r2, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	e7ed      	b.n	8003e22 <d_print_comp+0x125e>
 8003e46:	4f68      	ldr	r7, [pc, #416]	; (8003fe8 <d_print_comp+0x1424>)
 8003e48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e4c:	f107 081a 	add.w	r8, r7, #26
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	e016      	b.n	8003e84 <d_print_comp+0x12c0>
 8003e56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e62:	4798      	blx	r3
 8003e64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2301      	movs	r3, #1
 8003e72:	45b8      	cmp	r8, r7
 8003e74:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e78:	f804 a002 	strb.w	sl, [r4, r2]
 8003e7c:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003e80:	f000 83c5 	beq.w	800460e <d_print_comp+0x1a4a>
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	4619      	mov	r1, r3
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003e8e:	d0e2      	beq.n	8003e56 <d_print_comp+0x1292>
 8003e90:	461a      	mov	r2, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	e7ed      	b.n	8003e72 <d_print_comp+0x12ae>
 8003e96:	4f55      	ldr	r7, [pc, #340]	; (8003fec <d_print_comp+0x1428>)
 8003e98:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e9c:	f107 0811 	add.w	r8, r7, #17
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	e016      	b.n	8003ed4 <d_print_comp+0x1310>
 8003ea6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003eae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003eb2:	4798      	blx	r3
 8003eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	45b8      	cmp	r8, r7
 8003ec4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ec8:	f804 a002 	strb.w	sl, [r4, r2]
 8003ecc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003ed0:	f000 83a6 	beq.w	8004620 <d_print_comp+0x1a5c>
 8003ed4:	2bff      	cmp	r3, #255	; 0xff
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8003ede:	d0e2      	beq.n	8003ea6 <d_print_comp+0x12e2>
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	e7ed      	b.n	8003ec2 <d_print_comp+0x12fe>
 8003ee6:	f8d4 711c 	ldr.w	r7, [r4, #284]	; 0x11c
 8003eea:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8003eee:	2f00      	cmp	r7, #0
 8003ef0:	f040 85ae 	bne.w	8004a50 <d_print_comp+0x1e8c>
 8003ef4:	f899 2000 	ldrb.w	r2, [r9]
 8003ef8:	2a05      	cmp	r2, #5
 8003efa:	f001 8180 	beq.w	80051fe <d_print_comp+0x263a>
 8003efe:	f899 3000 	ldrb.w	r3, [r9]
 8003f02:	2b23      	cmp	r3, #35	; 0x23
 8003f04:	f000 85a0 	beq.w	8004a48 <d_print_comp+0x1e84>
 8003f08:	782a      	ldrb	r2, [r5, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	f000 859c 	beq.w	8004a48 <d_print_comp+0x1e84>
 8003f10:	2b24      	cmp	r3, #36	; 0x24
 8003f12:	f001 8162 	beq.w	80051da <d_print_comp+0x2616>
 8003f16:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f1a:	46a9      	mov	r9, r5
 8003f1c:	ab18      	add	r3, sp, #96	; 0x60
 8003f1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8003f22:	f843 cd40 	str.w	ip, [r3, #-64]!
 8003f26:	2100      	movs	r1, #0
 8003f28:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8003f2c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f30:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f34:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003f38:	e010      	b.n	8003f5c <d_print_comp+0x1398>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	ab18      	add	r3, sp, #96	; 0x60
 8003f3e:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003f42:	f843 1d40 	str.w	r1, [r3, #-64]!
 8003f46:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003f4a:	9509      	str	r5, [sp, #36]	; 0x24
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f56:	46a9      	mov	r9, r5
 8003f58:	2a00      	cmp	r2, #0
 8003f5a:	d0eb      	beq.n	8003f34 <d_print_comp+0x1370>
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7fe fe30 	bl	8002bc4 <d_print_comp>
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	b923      	cbnz	r3, 8003f72 <d_print_comp+0x13ae>
 8003f68:	464a      	mov	r2, r9
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f001 fcbf 	bl	80058f0 <d_print_mod>
 8003f72:	9b08      	ldr	r3, [sp, #32]
 8003f74:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003f78:	b10f      	cbz	r7, 8003f7e <d_print_comp+0x13ba>
 8003f7a:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8003f7e:	9905      	ldr	r1, [sp, #20]
 8003f80:	686a      	ldr	r2, [r5, #4]
 8003f82:	f7fe bf12 	b.w	8002daa <d_print_comp+0x1e6>
 8003f86:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8003f8a:	4663      	mov	r3, ip
 8003f8c:	f1bc 0f00 	cmp.w	ip, #0
 8003f90:	d0c3      	beq.n	8003f1a <d_print_comp+0x1356>
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	b951      	cbnz	r1, 8003fac <d_print_comp+0x13e8>
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	f1a2 0e19 	sub.w	lr, r2, #25
 8003f9e:	f1be 0f02 	cmp.w	lr, #2
 8003fa2:	f201 80fc 	bhi.w	800519e <d_print_comp+0x25da>
 8003fa6:	4290      	cmp	r0, r2
 8003fa8:	f001 80f0 	beq.w	800518c <d_print_comp+0x25c8>
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ef      	bne.n	8003f92 <d_print_comp+0x13ce>
 8003fb2:	e7b2      	b.n	8003f1a <d_print_comp+0x1356>
 8003fb4:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	f43e aef6 	beq.w	8002daa <d_print_comp+0x1e6>
 8003fbe:	4437      	add	r7, r6
 8003fc0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003fc4:	3f01      	subs	r7, #1
 8003fc6:	3e01      	subs	r6, #1
 8003fc8:	f04f 0800 	mov.w	r8, #0
 8003fcc:	e027      	b.n	800401e <d_print_comp+0x145a>
 8003fce:	bf00      	nop
 8003fd0:	0801b047 	.word	0x0801b047
 8003fd4:	0801b02f 	.word	0x0801b02f
 8003fd8:	0801b013 	.word	0x0801b013
 8003fdc:	0801affb 	.word	0x0801affb
 8003fe0:	0801afe7 	.word	0x0801afe7
 8003fe4:	0801afd7 	.word	0x0801afd7
 8003fe8:	0801afbb 	.word	0x0801afbb
 8003fec:	0801afa7 	.word	0x0801afa7
 8003ff0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ff8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003ffc:	4798      	blx	r3
 8003ffe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004002:	3301      	adds	r3, #1
 8004004:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004008:	2200      	movs	r2, #0
 800400a:	2301      	movs	r3, #1
 800400c:	42b7      	cmp	r7, r6
 800400e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004012:	f804 9002 	strb.w	r9, [r4, r2]
 8004016:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800401a:	f000 83ce 	beq.w	80047ba <d_print_comp+0x1bf6>
 800401e:	2bff      	cmp	r3, #255	; 0xff
 8004020:	4619      	mov	r1, r3
 8004022:	4620      	mov	r0, r4
 8004024:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8004028:	d0e2      	beq.n	8003ff0 <d_print_comp+0x142c>
 800402a:	461a      	mov	r2, r3
 800402c:	3301      	adds	r3, #1
 800402e:	e7ed      	b.n	800400c <d_print_comp+0x1448>
 8004030:	4631      	mov	r1, r6
 8004032:	68aa      	ldr	r2, [r5, #8]
 8004034:	4620      	mov	r0, r4
 8004036:	f7fe fdc5 	bl	8002bc4 <d_print_comp>
 800403a:	9905      	ldr	r1, [sp, #20]
 800403c:	686a      	ldr	r2, [r5, #4]
 800403e:	f7fe beb4 	b.w	8002daa <d_print_comp+0x1e6>
 8004042:	f016 0604 	ands.w	r6, r6, #4
 8004046:	68a8      	ldr	r0, [r5, #8]
 8004048:	f040 8505 	bne.w	8004a56 <d_print_comp+0x1e92>
 800404c:	e9d0 7300 	ldrd	r7, r3, [r0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f43e aeaa 	beq.w	8002daa <d_print_comp+0x1e6>
 8004056:	eb07 0803 	add.w	r8, r7, r3
 800405a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800405e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004062:	3f01      	subs	r7, #1
 8004064:	46b1      	mov	r9, r6
 8004066:	e015      	b.n	8004094 <d_print_comp+0x14d0>
 8004068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800406c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004070:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004074:	4798      	blx	r3
 8004076:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800407a:	3301      	adds	r3, #1
 800407c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004080:	2200      	movs	r2, #0
 8004082:	2301      	movs	r3, #1
 8004084:	45b8      	cmp	r8, r7
 8004086:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800408a:	54a6      	strb	r6, [r4, r2]
 800408c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004090:	f000 8545 	beq.w	8004b1e <d_print_comp+0x1f5a>
 8004094:	2bff      	cmp	r3, #255	; 0xff
 8004096:	4619      	mov	r1, r3
 8004098:	4620      	mov	r0, r4
 800409a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800409e:	d0e3      	beq.n	8004068 <d_print_comp+0x14a4>
 80040a0:	461a      	mov	r2, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	e7ee      	b.n	8004084 <d_print_comp+0x14c0>
 80040a6:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80040aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80040b6:	f1b8 0f00 	cmp.w	r8, #0
 80040ba:	d025      	beq.n	8004108 <d_print_comp+0x1544>
 80040bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	f10d 0920 	add.w	r9, sp, #32
 80040c6:	4623      	mov	r3, r4
 80040c8:	4617      	mov	r7, r2
 80040ca:	4644      	mov	r4, r8
 80040cc:	4692      	mov	sl, r2
 80040ce:	4649      	mov	r1, r9
 80040d0:	46ab      	mov	fp, r5
 80040d2:	4698      	mov	r8, r3
 80040d4:	7825      	ldrb	r5, [r4, #0]
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	600a      	str	r2, [r1, #0]
 80040da:	4628      	mov	r0, r5
 80040dc:	e9c1 4a01 	strd	r4, sl, [r1, #4]
 80040e0:	60cb      	str	r3, [r1, #12]
 80040e2:	3701      	adds	r7, #1
 80040e4:	460a      	mov	r2, r1
 80040e6:	f7fc f97f 	bl	80003e8 <is_fnqual_component_type>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	f000 87c8 	beq.w	8005080 <d_print_comp+0x24bc>
 80040f0:	68a4      	ldr	r4, [r4, #8]
 80040f2:	2c00      	cmp	r4, #0
 80040f4:	f001 8057 	beq.w	80051a6 <d_print_comp+0x25e2>
 80040f8:	2f04      	cmp	r7, #4
 80040fa:	f101 0110 	add.w	r1, r1, #16
 80040fe:	d1e9      	bne.n	80040d4 <d_print_comp+0x1510>
 8004100:	4644      	mov	r4, r8
 8004102:	465d      	mov	r5, fp
 8004104:	f8c8 2114 	str.w	r2, [r8, #276]	; 0x114
 8004108:	2301      	movs	r3, #1
 800410a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800410e:	9905      	ldr	r1, [sp, #20]
 8004110:	686a      	ldr	r2, [r5, #4]
 8004112:	f7fe be4a 	b.w	8002daa <d_print_comp+0x1e6>
 8004116:	f016 0604 	ands.w	r6, r6, #4
 800411a:	68af      	ldr	r7, [r5, #8]
 800411c:	f040 8405 	bne.w	800492a <d_print_comp+0x1d66>
 8004120:	68eb      	ldr	r3, [r5, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f43e ae41 	beq.w	8002daa <d_print_comp+0x1e6>
 8004128:	eb07 0803 	add.w	r8, r7, r3
 800412c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004130:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004134:	3f01      	subs	r7, #1
 8004136:	46b1      	mov	r9, r6
 8004138:	e015      	b.n	8004166 <d_print_comp+0x15a2>
 800413a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800413e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004142:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004146:	4798      	blx	r3
 8004148:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800414c:	3301      	adds	r3, #1
 800414e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004152:	2200      	movs	r2, #0
 8004154:	2301      	movs	r3, #1
 8004156:	45b8      	cmp	r8, r7
 8004158:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800415c:	54a6      	strb	r6, [r4, r2]
 800415e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004162:	f000 84e0 	beq.w	8004b26 <d_print_comp+0x1f62>
 8004166:	2bff      	cmp	r3, #255	; 0xff
 8004168:	4619      	mov	r1, r3
 800416a:	4620      	mov	r0, r4
 800416c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004170:	d0e3      	beq.n	800413a <d_print_comp+0x1576>
 8004172:	461a      	mov	r2, r3
 8004174:	3301      	adds	r3, #1
 8004176:	e7ee      	b.n	8004156 <d_print_comp+0x1592>
 8004178:	68aa      	ldr	r2, [r5, #8]
 800417a:	4631      	mov	r1, r6
 800417c:	4620      	mov	r0, r4
 800417e:	f7fe fd21 	bl	8002bc4 <d_print_comp>
 8004182:	f016 0904 	ands.w	r9, r6, #4
 8004186:	f000 8681 	beq.w	8004e8c <d_print_comp+0x22c8>
 800418a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800418e:	2fff      	cmp	r7, #255	; 0xff
 8004190:	d112      	bne.n	80041b8 <d_print_comp+0x15f4>
 8004192:	f04f 0800 	mov.w	r8, #0
 8004196:	4639      	mov	r1, r7
 8004198:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800419c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80041a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041a4:	4620      	mov	r0, r4
 80041a6:	4798      	blx	r3
 80041a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80041b0:	3301      	adds	r3, #1
 80041b2:	4647      	mov	r7, r8
 80041b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041b8:	232e      	movs	r3, #46	; 0x2e
 80041ba:	1c7a      	adds	r2, r7, #1
 80041bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041c0:	55e3      	strb	r3, [r4, r7]
 80041c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041c6:	68ef      	ldr	r7, [r5, #12]
 80041c8:	783b      	ldrb	r3, [r7, #0]
 80041ca:	2b46      	cmp	r3, #70	; 0x46
 80041cc:	f000 873a 	beq.w	8005044 <d_print_comp+0x2480>
 80041d0:	463a      	mov	r2, r7
 80041d2:	4631      	mov	r1, r6
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fe fcf5 	bl	8002bc4 <d_print_comp>
 80041da:	9905      	ldr	r1, [sp, #20]
 80041dc:	686a      	ldr	r2, [r5, #4]
 80041de:	f7fe bde4 	b.w	8002daa <d_print_comp+0x1e6>
 80041e2:	2301      	movs	r3, #1
 80041e4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80041e8:	686a      	ldr	r2, [r5, #4]
 80041ea:	f7fe bdde 	b.w	8002daa <d_print_comp+0x1e6>
 80041ee:	3701      	adds	r7, #1
 80041f0:	454f      	cmp	r7, r9
 80041f2:	f47e ae2b 	bne.w	8002e4c <d_print_comp+0x288>
 80041f6:	9d03      	ldr	r5, [sp, #12]
 80041f8:	9905      	ldr	r1, [sp, #20]
 80041fa:	686a      	ldr	r2, [r5, #4]
 80041fc:	f7fe bdd5 	b.w	8002daa <d_print_comp+0x1e6>
 8004200:	4631      	mov	r1, r6
 8004202:	68aa      	ldr	r2, [r5, #8]
 8004204:	4620      	mov	r0, r4
 8004206:	f7fe fcdd 	bl	8002bc4 <d_print_comp>
 800420a:	9905      	ldr	r1, [sp, #20]
 800420c:	686a      	ldr	r2, [r5, #4]
 800420e:	f7fe bdcc 	b.w	8002daa <d_print_comp+0x1e6>
 8004212:	4631      	mov	r1, r6
 8004214:	68aa      	ldr	r2, [r5, #8]
 8004216:	4620      	mov	r0, r4
 8004218:	f7fe fcd4 	bl	8002bc4 <d_print_comp>
 800421c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004220:	2fff      	cmp	r7, #255	; 0xff
 8004222:	d111      	bne.n	8004248 <d_print_comp+0x1684>
 8004224:	2600      	movs	r6, #0
 8004226:	4639      	mov	r1, r7
 8004228:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800422c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004230:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004234:	4620      	mov	r0, r4
 8004236:	4798      	blx	r3
 8004238:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800423c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004240:	3301      	adds	r3, #1
 8004242:	4637      	mov	r7, r6
 8004244:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004248:	1c7a      	adds	r2, r7, #1
 800424a:	2329      	movs	r3, #41	; 0x29
 800424c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004250:	55e3      	strb	r3, [r4, r7]
 8004252:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004256:	686a      	ldr	r2, [r5, #4]
 8004258:	9905      	ldr	r1, [sp, #20]
 800425a:	f7fe bda6 	b.w	8002daa <d_print_comp+0x1e6>
 800425e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004262:	68aa      	ldr	r2, [r5, #8]
 8004264:	4fd3      	ldr	r7, [pc, #844]	; (80045b4 <d_print_comp+0x19f0>)
 8004266:	3301      	adds	r3, #1
 8004268:	4631      	mov	r1, r6
 800426a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800426e:	4620      	mov	r0, r4
 8004270:	f7fe fca8 	bl	8002bc4 <d_print_comp>
 8004274:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8004278:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800427c:	3a01      	subs	r2, #1
 800427e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8004282:	1cbe      	adds	r6, r7, #2
 8004284:	f04f 0800 	mov.w	r8, #0
 8004288:	e015      	b.n	80042b6 <d_print_comp+0x16f2>
 800428a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800428e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004292:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004296:	4798      	blx	r3
 8004298:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800429c:	3301      	adds	r3, #1
 800429e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80042a2:	2200      	movs	r2, #0
 80042a4:	2301      	movs	r3, #1
 80042a6:	42b7      	cmp	r7, r6
 80042a8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042ac:	f804 9002 	strb.w	r9, [r4, r2]
 80042b0:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80042b4:	d011      	beq.n	80042da <d_print_comp+0x1716>
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	4619      	mov	r1, r3
 80042ba:	4620      	mov	r0, r4
 80042bc:	f817 9b01 	ldrb.w	r9, [r7], #1
 80042c0:	d0e3      	beq.n	800428a <d_print_comp+0x16c6>
 80042c2:	461a      	mov	r2, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	e7ee      	b.n	80042a6 <d_print_comp+0x16e2>
 80042c8:	4631      	mov	r1, r6
 80042ca:	68aa      	ldr	r2, [r5, #8]
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fe fc79 	bl	8002bc4 <d_print_comp>
 80042d2:	9905      	ldr	r1, [sp, #20]
 80042d4:	686a      	ldr	r2, [r5, #4]
 80042d6:	f7fe bd68 	b.w	8002daa <d_print_comp+0x1e6>
 80042da:	68ea      	ldr	r2, [r5, #12]
 80042dc:	49b6      	ldr	r1, [pc, #728]	; (80045b8 <d_print_comp+0x19f4>)
 80042de:	3201      	adds	r2, #1
 80042e0:	a808      	add	r0, sp, #32
 80042e2:	f010 fea7 	bl	8015034 <sprintf>
 80042e6:	a808      	add	r0, sp, #32
 80042e8:	f002 fd5c 	bl	8006da4 <strlen>
 80042ec:	b328      	cbz	r0, 800433a <d_print_comp+0x1776>
 80042ee:	ae08      	add	r6, sp, #32
 80042f0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80042f4:	1837      	adds	r7, r6, r0
 80042f6:	f04f 0800 	mov.w	r8, #0
 80042fa:	e015      	b.n	8004328 <d_print_comp+0x1764>
 80042fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004304:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004308:	4798      	blx	r3
 800430a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800430e:	3301      	adds	r3, #1
 8004310:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004314:	2200      	movs	r2, #0
 8004316:	2301      	movs	r3, #1
 8004318:	42be      	cmp	r6, r7
 800431a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800431e:	f804 9002 	strb.w	r9, [r4, r2]
 8004322:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004326:	d00a      	beq.n	800433e <d_print_comp+0x177a>
 8004328:	2bff      	cmp	r3, #255	; 0xff
 800432a:	4619      	mov	r1, r3
 800432c:	4620      	mov	r0, r4
 800432e:	f816 9b01 	ldrb.w	r9, [r6], #1
 8004332:	d0e3      	beq.n	80042fc <d_print_comp+0x1738>
 8004334:	461a      	mov	r2, r3
 8004336:	3301      	adds	r3, #1
 8004338:	e7ee      	b.n	8004318 <d_print_comp+0x1754>
 800433a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800433e:	2bff      	cmp	r3, #255	; 0xff
 8004340:	d110      	bne.n	8004364 <d_print_comp+0x17a0>
 8004342:	2600      	movs	r6, #0
 8004344:	4619      	mov	r1, r3
 8004346:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800434a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800434e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004352:	4620      	mov	r0, r4
 8004354:	4798      	blx	r3
 8004356:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800435a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800435e:	3301      	adds	r3, #1
 8004360:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004364:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004368:	9905      	ldr	r1, [sp, #20]
 800436a:	1c50      	adds	r0, r2, #1
 800436c:	237d      	movs	r3, #125	; 0x7d
 800436e:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004372:	54a3      	strb	r3, [r4, r2]
 8004374:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004378:	686a      	ldr	r2, [r5, #4]
 800437a:	f7fe bd16 	b.w	8002daa <d_print_comp+0x1e6>
 800437e:	4631      	mov	r1, r6
 8004380:	68aa      	ldr	r2, [r5, #8]
 8004382:	4620      	mov	r0, r4
 8004384:	f7fe fc1e 	bl	8002bc4 <d_print_comp>
 8004388:	9905      	ldr	r1, [sp, #20]
 800438a:	686a      	ldr	r2, [r5, #4]
 800438c:	f7fe bd0d 	b.w	8002daa <d_print_comp+0x1e6>
 8004390:	68aa      	ldr	r2, [r5, #8]
 8004392:	4989      	ldr	r1, [pc, #548]	; (80045b8 <d_print_comp+0x19f4>)
 8004394:	3201      	adds	r2, #1
 8004396:	a808      	add	r0, sp, #32
 8004398:	f010 fe4c 	bl	8015034 <sprintf>
 800439c:	a808      	add	r0, sp, #32
 800439e:	f002 fd01 	bl	8006da4 <strlen>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d071      	beq.n	800448a <d_print_comp+0x18c6>
 80043a6:	ae08      	add	r6, sp, #32
 80043a8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80043ac:	1837      	adds	r7, r6, r0
 80043ae:	f04f 0800 	mov.w	r8, #0
 80043b2:	e015      	b.n	80043e0 <d_print_comp+0x181c>
 80043b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043c0:	4798      	blx	r3
 80043c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043c6:	3301      	adds	r3, #1
 80043c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043cc:	2200      	movs	r2, #0
 80043ce:	2301      	movs	r3, #1
 80043d0:	42b7      	cmp	r7, r6
 80043d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043d6:	f804 9002 	strb.w	r9, [r4, r2]
 80043da:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80043de:	d056      	beq.n	800448e <d_print_comp+0x18ca>
 80043e0:	2bff      	cmp	r3, #255	; 0xff
 80043e2:	4619      	mov	r1, r3
 80043e4:	4620      	mov	r0, r4
 80043e6:	f816 9b01 	ldrb.w	r9, [r6], #1
 80043ea:	d0e3      	beq.n	80043b4 <d_print_comp+0x17f0>
 80043ec:	461a      	mov	r2, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	e7ee      	b.n	80043d0 <d_print_comp+0x180c>
 80043f2:	4631      	mov	r1, r6
 80043f4:	68ea      	ldr	r2, [r5, #12]
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fe fbe4 	bl	8002bc4 <d_print_comp>
 80043fc:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004400:	2fff      	cmp	r7, #255	; 0xff
 8004402:	d111      	bne.n	8004428 <d_print_comp+0x1864>
 8004404:	2600      	movs	r6, #0
 8004406:	4639      	mov	r1, r7
 8004408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800440c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004414:	4620      	mov	r0, r4
 8004416:	4798      	blx	r3
 8004418:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800441c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004420:	3301      	adds	r3, #1
 8004422:	4637      	mov	r7, r6
 8004424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004428:	1c7a      	adds	r2, r7, #1
 800442a:	235d      	movs	r3, #93	; 0x5d
 800442c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004430:	55e3      	strb	r3, [r4, r7]
 8004432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004436:	686a      	ldr	r2, [r5, #4]
 8004438:	9905      	ldr	r1, [sp, #20]
 800443a:	f7fe bcb6 	b.w	8002daa <d_print_comp+0x1e6>
 800443e:	4631      	mov	r1, r6
 8004440:	68ea      	ldr	r2, [r5, #12]
 8004442:	4620      	mov	r0, r4
 8004444:	f7fe fbbe 	bl	8002bc4 <d_print_comp>
 8004448:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800444c:	2fff      	cmp	r7, #255	; 0xff
 800444e:	d111      	bne.n	8004474 <d_print_comp+0x18b0>
 8004450:	2600      	movs	r6, #0
 8004452:	4639      	mov	r1, r7
 8004454:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004458:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800445c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004460:	4620      	mov	r0, r4
 8004462:	4798      	blx	r3
 8004464:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004468:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800446c:	3301      	adds	r3, #1
 800446e:	4637      	mov	r7, r6
 8004470:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004474:	1c7a      	adds	r2, r7, #1
 8004476:	235d      	movs	r3, #93	; 0x5d
 8004478:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800447c:	55e3      	strb	r3, [r4, r7]
 800447e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004482:	686a      	ldr	r2, [r5, #4]
 8004484:	9905      	ldr	r1, [sp, #20]
 8004486:	f7fe bc90 	b.w	8002daa <d_print_comp+0x1e6>
 800448a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d110      	bne.n	80044b4 <d_print_comp+0x18f0>
 8004492:	2600      	movs	r6, #0
 8004494:	4619      	mov	r1, r3
 8004496:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800449a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800449e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044a2:	4620      	mov	r0, r4
 80044a4:	4798      	blx	r3
 80044a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044aa:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80044ae:	3301      	adds	r3, #1
 80044b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044b4:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80044b8:	9905      	ldr	r1, [sp, #20]
 80044ba:	1c50      	adds	r0, r2, #1
 80044bc:	237d      	movs	r3, #125	; 0x7d
 80044be:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80044c2:	54a3      	strb	r3, [r4, r2]
 80044c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80044c8:	686a      	ldr	r2, [r5, #4]
 80044ca:	f7fe bc6e 	b.w	8002daa <d_print_comp+0x1e6>
 80044ce:	4631      	mov	r1, r6
 80044d0:	68aa      	ldr	r2, [r5, #8]
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7fe fb76 	bl	8002bc4 <d_print_comp>
 80044d8:	9905      	ldr	r1, [sp, #20]
 80044da:	686a      	ldr	r2, [r5, #4]
 80044dc:	f7fe bc65 	b.w	8002daa <d_print_comp+0x1e6>
 80044e0:	9905      	ldr	r1, [sp, #20]
 80044e2:	686a      	ldr	r2, [r5, #4]
 80044e4:	f7fe bc61 	b.w	8002daa <d_print_comp+0x1e6>
 80044e8:	4631      	mov	r1, r6
 80044ea:	68aa      	ldr	r2, [r5, #8]
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fe fb69 	bl	8002bc4 <d_print_comp>
 80044f2:	9905      	ldr	r1, [sp, #20]
 80044f4:	686a      	ldr	r2, [r5, #4]
 80044f6:	f7fe bc58 	b.w	8002daa <d_print_comp+0x1e6>
 80044fa:	4631      	mov	r1, r6
 80044fc:	68ea      	ldr	r2, [r5, #12]
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fe fb60 	bl	8002bc4 <d_print_comp>
 8004504:	9905      	ldr	r1, [sp, #20]
 8004506:	686a      	ldr	r2, [r5, #4]
 8004508:	f7fe bc4f 	b.w	8002daa <d_print_comp+0x1e6>
 800450c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004510:	b13a      	cbz	r2, 8004522 <d_print_comp+0x195e>
 8004512:	ab18      	add	r3, sp, #96	; 0x60
 8004514:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8004518:	f843 1d40 	str.w	r1, [r3, #-64]!
 800451c:	9209      	str	r2, [sp, #36]	; 0x24
 800451e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004522:	68aa      	ldr	r2, [r5, #8]
 8004524:	7813      	ldrb	r3, [r2, #0]
 8004526:	2b04      	cmp	r3, #4
 8004528:	f000 84d6 	beq.w	8004ed8 <d_print_comp+0x2314>
 800452c:	4631      	mov	r1, r6
 800452e:	4620      	mov	r0, r4
 8004530:	f7fe fb48 	bl	8002bc4 <d_print_comp>
 8004534:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004538:	b113      	cbz	r3, 8004540 <d_print_comp+0x197c>
 800453a:	9b08      	ldr	r3, [sp, #32]
 800453c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004540:	9905      	ldr	r1, [sp, #20]
 8004542:	686a      	ldr	r2, [r5, #4]
 8004544:	f7fe bc31 	b.w	8002daa <d_print_comp+0x1e6>
 8004548:	f8da 6004 	ldr.w	r6, [sl, #4]
 800454c:	7832      	ldrb	r2, [r6, #0]
 800454e:	3a61      	subs	r2, #97	; 0x61
 8004550:	2a19      	cmp	r2, #25
 8004552:	d81d      	bhi.n	8004590 <d_print_comp+0x19cc>
 8004554:	2bff      	cmp	r3, #255	; 0xff
 8004556:	d110      	bne.n	800457a <d_print_comp+0x19b6>
 8004558:	2600      	movs	r6, #0
 800455a:	4619      	mov	r1, r3
 800455c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004560:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004564:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004568:	4620      	mov	r0, r4
 800456a:	4798      	blx	r3
 800456c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004570:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004574:	3301      	adds	r3, #1
 8004576:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800457a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800457e:	2320      	movs	r3, #32
 8004580:	1c51      	adds	r1, r2, #1
 8004582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004586:	54a3      	strb	r3, [r4, r2]
 8004588:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800458c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004590:	19f3      	adds	r3, r6, r7
 8004592:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004596:	2b20      	cmp	r3, #32
 8004598:	bf08      	it	eq
 800459a:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 800459e:	2f00      	cmp	r7, #0
 80045a0:	f000 86fb 	beq.w	800539a <d_print_comp+0x27d6>
 80045a4:	3e01      	subs	r6, #1
 80045a6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80045aa:	4437      	add	r7, r6
 80045ac:	f04f 0800 	mov.w	r8, #0
 80045b0:	e01b      	b.n	80045ea <d_print_comp+0x1a26>
 80045b2:	bf00      	nop
 80045b4:	0801b164 	.word	0x0801b164
 80045b8:	0801aeb4 	.word	0x0801aeb4
 80045bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045c4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80045c8:	4798      	blx	r3
 80045ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045ce:	3301      	adds	r3, #1
 80045d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045d4:	2200      	movs	r2, #0
 80045d6:	2301      	movs	r3, #1
 80045d8:	42be      	cmp	r6, r7
 80045da:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80045de:	f804 9002 	strb.w	r9, [r4, r2]
 80045e2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80045e6:	f000 80ec 	beq.w	80047c2 <d_print_comp+0x1bfe>
 80045ea:	2bff      	cmp	r3, #255	; 0xff
 80045ec:	4619      	mov	r1, r3
 80045ee:	4620      	mov	r0, r4
 80045f0:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 80045f4:	d0e2      	beq.n	80045bc <d_print_comp+0x19f8>
 80045f6:	461a      	mov	r2, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	e7ed      	b.n	80045d8 <d_print_comp+0x1a14>
 80045fc:	4631      	mov	r1, r6
 80045fe:	68aa      	ldr	r2, [r5, #8]
 8004600:	4620      	mov	r0, r4
 8004602:	f7fe fadf 	bl	8002bc4 <d_print_comp>
 8004606:	9905      	ldr	r1, [sp, #20]
 8004608:	686a      	ldr	r2, [r5, #4]
 800460a:	f7fe bbce 	b.w	8002daa <d_print_comp+0x1e6>
 800460e:	4631      	mov	r1, r6
 8004610:	68aa      	ldr	r2, [r5, #8]
 8004612:	4620      	mov	r0, r4
 8004614:	f7fe fad6 	bl	8002bc4 <d_print_comp>
 8004618:	9905      	ldr	r1, [sp, #20]
 800461a:	686a      	ldr	r2, [r5, #4]
 800461c:	f7fe bbc5 	b.w	8002daa <d_print_comp+0x1e6>
 8004620:	4631      	mov	r1, r6
 8004622:	68aa      	ldr	r2, [r5, #8]
 8004624:	4620      	mov	r0, r4
 8004626:	f7fe facd 	bl	8002bc4 <d_print_comp>
 800462a:	9905      	ldr	r1, [sp, #20]
 800462c:	686a      	ldr	r2, [r5, #4]
 800462e:	f7fe bbbc 	b.w	8002daa <d_print_comp+0x1e6>
 8004632:	4631      	mov	r1, r6
 8004634:	68aa      	ldr	r2, [r5, #8]
 8004636:	4620      	mov	r0, r4
 8004638:	f7fe fac4 	bl	8002bc4 <d_print_comp>
 800463c:	9905      	ldr	r1, [sp, #20]
 800463e:	686a      	ldr	r2, [r5, #4]
 8004640:	f7fe bbb3 	b.w	8002daa <d_print_comp+0x1e6>
 8004644:	4631      	mov	r1, r6
 8004646:	68aa      	ldr	r2, [r5, #8]
 8004648:	4620      	mov	r0, r4
 800464a:	f7fe fabb 	bl	8002bc4 <d_print_comp>
 800464e:	9905      	ldr	r1, [sp, #20]
 8004650:	686a      	ldr	r2, [r5, #4]
 8004652:	f7fe bbaa 	b.w	8002daa <d_print_comp+0x1e6>
 8004656:	4631      	mov	r1, r6
 8004658:	68aa      	ldr	r2, [r5, #8]
 800465a:	4620      	mov	r0, r4
 800465c:	f7fe fab2 	bl	8002bc4 <d_print_comp>
 8004660:	9905      	ldr	r1, [sp, #20]
 8004662:	686a      	ldr	r2, [r5, #4]
 8004664:	f7fe bba1 	b.w	8002daa <d_print_comp+0x1e6>
 8004668:	4631      	mov	r1, r6
 800466a:	68aa      	ldr	r2, [r5, #8]
 800466c:	4620      	mov	r0, r4
 800466e:	f7fe faa9 	bl	8002bc4 <d_print_comp>
 8004672:	9905      	ldr	r1, [sp, #20]
 8004674:	686a      	ldr	r2, [r5, #4]
 8004676:	f7fe bb98 	b.w	8002daa <d_print_comp+0x1e6>
 800467a:	4631      	mov	r1, r6
 800467c:	68aa      	ldr	r2, [r5, #8]
 800467e:	4620      	mov	r0, r4
 8004680:	f7fe faa0 	bl	8002bc4 <d_print_comp>
 8004684:	9905      	ldr	r1, [sp, #20]
 8004686:	686a      	ldr	r2, [r5, #4]
 8004688:	f7fe bb8f 	b.w	8002daa <d_print_comp+0x1e6>
 800468c:	4fcf      	ldr	r7, [pc, #828]	; (80049cc <d_print_comp+0x1e08>)
 800468e:	68ea      	ldr	r2, [r5, #12]
 8004690:	4631      	mov	r1, r6
 8004692:	4620      	mov	r0, r4
 8004694:	f7fe fa96 	bl	8002bc4 <d_print_comp>
 8004698:	f107 0805 	add.w	r8, r7, #5
 800469c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046a0:	f04f 0900 	mov.w	r9, #0
 80046a4:	e015      	b.n	80046d2 <d_print_comp+0x1b0e>
 80046a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80046aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80046ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80046b2:	4798      	blx	r3
 80046b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80046b8:	3301      	adds	r3, #1
 80046ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80046be:	2200      	movs	r2, #0
 80046c0:	2301      	movs	r3, #1
 80046c2:	4547      	cmp	r7, r8
 80046c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80046c8:	f804 a002 	strb.w	sl, [r4, r2]
 80046cc:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80046d0:	d008      	beq.n	80046e4 <d_print_comp+0x1b20>
 80046d2:	2bff      	cmp	r3, #255	; 0xff
 80046d4:	4619      	mov	r1, r3
 80046d6:	4620      	mov	r0, r4
 80046d8:	f817 ab01 	ldrb.w	sl, [r7], #1
 80046dc:	d0e3      	beq.n	80046a6 <d_print_comp+0x1ae2>
 80046de:	461a      	mov	r2, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	e7ee      	b.n	80046c2 <d_print_comp+0x1afe>
 80046e4:	4631      	mov	r1, r6
 80046e6:	68aa      	ldr	r2, [r5, #8]
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7fe fa6b 	bl	8002bc4 <d_print_comp>
 80046ee:	9905      	ldr	r1, [sp, #20]
 80046f0:	686a      	ldr	r2, [r5, #4]
 80046f2:	f7fe bb5a 	b.w	8002daa <d_print_comp+0x1e6>
 80046f6:	4fb6      	ldr	r7, [pc, #728]	; (80049d0 <d_print_comp+0x1e0c>)
 80046f8:	68aa      	ldr	r2, [r5, #8]
 80046fa:	4631      	mov	r1, r6
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7fe fa61 	bl	8002bc4 <d_print_comp>
 8004702:	f107 0804 	add.w	r8, r7, #4
 8004706:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800470a:	f04f 0900 	mov.w	r9, #0
 800470e:	e015      	b.n	800473c <d_print_comp+0x1b78>
 8004710:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004714:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004718:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800471c:	4798      	blx	r3
 800471e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004722:	3301      	adds	r3, #1
 8004724:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004728:	2200      	movs	r2, #0
 800472a:	2301      	movs	r3, #1
 800472c:	45b8      	cmp	r8, r7
 800472e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004732:	f804 a002 	strb.w	sl, [r4, r2]
 8004736:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800473a:	d008      	beq.n	800474e <d_print_comp+0x1b8a>
 800473c:	2bff      	cmp	r3, #255	; 0xff
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f817 ab01 	ldrb.w	sl, [r7], #1
 8004746:	d0e3      	beq.n	8004710 <d_print_comp+0x1b4c>
 8004748:	461a      	mov	r2, r3
 800474a:	3301      	adds	r3, #1
 800474c:	e7ee      	b.n	800472c <d_print_comp+0x1b68>
 800474e:	4631      	mov	r1, r6
 8004750:	68ea      	ldr	r2, [r5, #12]
 8004752:	4620      	mov	r0, r4
 8004754:	f7fe fa36 	bl	8002bc4 <d_print_comp>
 8004758:	9905      	ldr	r1, [sp, #20]
 800475a:	686a      	ldr	r2, [r5, #4]
 800475c:	f7fe bb25 	b.w	8002daa <d_print_comp+0x1e6>
 8004760:	4631      	mov	r1, r6
 8004762:	68aa      	ldr	r2, [r5, #8]
 8004764:	4620      	mov	r0, r4
 8004766:	f7fe fa2d 	bl	8002bc4 <d_print_comp>
 800476a:	9905      	ldr	r1, [sp, #20]
 800476c:	686a      	ldr	r2, [r5, #4]
 800476e:	f7fe bb1c 	b.w	8002daa <d_print_comp+0x1e6>
 8004772:	4631      	mov	r1, r6
 8004774:	68aa      	ldr	r2, [r5, #8]
 8004776:	4620      	mov	r0, r4
 8004778:	f7fe fa24 	bl	8002bc4 <d_print_comp>
 800477c:	9905      	ldr	r1, [sp, #20]
 800477e:	686a      	ldr	r2, [r5, #4]
 8004780:	f7fe bb13 	b.w	8002daa <d_print_comp+0x1e6>
 8004784:	4631      	mov	r1, r6
 8004786:	68aa      	ldr	r2, [r5, #8]
 8004788:	4620      	mov	r0, r4
 800478a:	f7fe fa1b 	bl	8002bc4 <d_print_comp>
 800478e:	9905      	ldr	r1, [sp, #20]
 8004790:	686a      	ldr	r2, [r5, #4]
 8004792:	f7fe bb0a 	b.w	8002daa <d_print_comp+0x1e6>
 8004796:	4631      	mov	r1, r6
 8004798:	68aa      	ldr	r2, [r5, #8]
 800479a:	4620      	mov	r0, r4
 800479c:	f7fe fa12 	bl	8002bc4 <d_print_comp>
 80047a0:	9905      	ldr	r1, [sp, #20]
 80047a2:	686a      	ldr	r2, [r5, #4]
 80047a4:	f7fe bb01 	b.w	8002daa <d_print_comp+0x1e6>
 80047a8:	4631      	mov	r1, r6
 80047aa:	68aa      	ldr	r2, [r5, #8]
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7fe fa09 	bl	8002bc4 <d_print_comp>
 80047b2:	9905      	ldr	r1, [sp, #20]
 80047b4:	686a      	ldr	r2, [r5, #4]
 80047b6:	f7fe baf8 	b.w	8002daa <d_print_comp+0x1e6>
 80047ba:	9905      	ldr	r1, [sp, #20]
 80047bc:	686a      	ldr	r2, [r5, #4]
 80047be:	f7fe baf4 	b.w	8002daa <d_print_comp+0x1e6>
 80047c2:	9905      	ldr	r1, [sp, #20]
 80047c4:	686a      	ldr	r2, [r5, #4]
 80047c6:	f7fe baf0 	b.w	8002daa <d_print_comp+0x1e6>
 80047ca:	4631      	mov	r1, r6
 80047cc:	68ea      	ldr	r2, [r5, #12]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	4620      	mov	r0, r4
 80047d2:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
 80047d6:	f7fe f9f5 	bl	8002bc4 <d_print_comp>
 80047da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	4296      	cmp	r6, r2
 80047e2:	f000 8441 	beq.w	8005068 <d_print_comp+0x24a4>
 80047e6:	9905      	ldr	r1, [sp, #20]
 80047e8:	686a      	ldr	r2, [r5, #4]
 80047ea:	f7fe bade 	b.w	8002daa <d_print_comp+0x1e6>
 80047ee:	4e79      	ldr	r6, [pc, #484]	; (80049d4 <d_print_comp+0x1e10>)
 80047f0:	4690      	mov	r8, r2
 80047f2:	f106 0906 	add.w	r9, r6, #6
 80047f6:	e014      	b.n	8004822 <d_print_comp+0x1c5e>
 80047f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004800:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004804:	4798      	blx	r3
 8004806:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800480a:	3301      	adds	r3, #1
 800480c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004810:	2200      	movs	r2, #0
 8004812:	2301      	movs	r3, #1
 8004814:	45b1      	cmp	r9, r6
 8004816:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800481a:	54a7      	strb	r7, [r4, r2]
 800481c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004820:	d008      	beq.n	8004834 <d_print_comp+0x1c70>
 8004822:	2bff      	cmp	r3, #255	; 0xff
 8004824:	4619      	mov	r1, r3
 8004826:	4620      	mov	r0, r4
 8004828:	f816 7b01 	ldrb.w	r7, [r6], #1
 800482c:	d0e4      	beq.n	80047f8 <d_print_comp+0x1c34>
 800482e:	461a      	mov	r2, r3
 8004830:	3301      	adds	r3, #1
 8004832:	e7ef      	b.n	8004814 <d_print_comp+0x1c50>
 8004834:	9905      	ldr	r1, [sp, #20]
 8004836:	686a      	ldr	r2, [r5, #4]
 8004838:	f7fe bab7 	b.w	8002daa <d_print_comp+0x1e6>
 800483c:	4642      	mov	r2, r8
 800483e:	a808      	add	r0, sp, #32
 8004840:	4965      	ldr	r1, [pc, #404]	; (80049d8 <d_print_comp+0x1e14>)
 8004842:	f010 fbf7 	bl	8015034 <sprintf>
 8004846:	a808      	add	r0, sp, #32
 8004848:	f002 faac 	bl	8006da4 <strlen>
 800484c:	b328      	cbz	r0, 800489a <d_print_comp+0x1cd6>
 800484e:	ae08      	add	r6, sp, #32
 8004850:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004854:	eb06 0900 	add.w	r9, r6, r0
 8004858:	f04f 0800 	mov.w	r8, #0
 800485c:	e014      	b.n	8004888 <d_print_comp+0x1cc4>
 800485e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004862:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004866:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800486a:	4798      	blx	r3
 800486c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004870:	3301      	adds	r3, #1
 8004872:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004876:	2200      	movs	r2, #0
 8004878:	2301      	movs	r3, #1
 800487a:	45b1      	cmp	r9, r6
 800487c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004880:	54a7      	strb	r7, [r4, r2]
 8004882:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004886:	d008      	beq.n	800489a <d_print_comp+0x1cd6>
 8004888:	2bff      	cmp	r3, #255	; 0xff
 800488a:	4619      	mov	r1, r3
 800488c:	4620      	mov	r0, r4
 800488e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004892:	d0e4      	beq.n	800485e <d_print_comp+0x1c9a>
 8004894:	461a      	mov	r2, r3
 8004896:	3301      	adds	r3, #1
 8004898:	e7ef      	b.n	800487a <d_print_comp+0x1cb6>
 800489a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800489e:	2fff      	cmp	r7, #255	; 0xff
 80048a0:	d111      	bne.n	80048c6 <d_print_comp+0x1d02>
 80048a2:	2600      	movs	r6, #0
 80048a4:	4639      	mov	r1, r7
 80048a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048aa:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048b2:	4620      	mov	r0, r4
 80048b4:	4798      	blx	r3
 80048b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048ba:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80048be:	3301      	adds	r3, #1
 80048c0:	4637      	mov	r7, r6
 80048c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048c6:	1c7a      	adds	r2, r7, #1
 80048c8:	237d      	movs	r3, #125	; 0x7d
 80048ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048ce:	55e3      	strb	r3, [r4, r7]
 80048d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048d4:	686a      	ldr	r2, [r5, #4]
 80048d6:	9905      	ldr	r1, [sp, #20]
 80048d8:	f7fe ba67 	b.w	8002daa <d_print_comp+0x1e6>
 80048dc:	4e3f      	ldr	r6, [pc, #252]	; (80049dc <d_print_comp+0x1e18>)
 80048de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80048e2:	f106 0905 	add.w	r9, r6, #5
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	e015      	b.n	8004918 <d_print_comp+0x1d54>
 80048ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80048f8:	4798      	blx	r3
 80048fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048fe:	3301      	adds	r3, #1
 8004900:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004904:	2200      	movs	r2, #0
 8004906:	2301      	movs	r3, #1
 8004908:	45b1      	cmp	r9, r6
 800490a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800490e:	54a7      	strb	r7, [r4, r2]
 8004910:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004914:	f000 80cf 	beq.w	8004ab6 <d_print_comp+0x1ef2>
 8004918:	2bff      	cmp	r3, #255	; 0xff
 800491a:	4619      	mov	r1, r3
 800491c:	4620      	mov	r0, r4
 800491e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004922:	d0e3      	beq.n	80048ec <d_print_comp+0x1d28>
 8004924:	461a      	mov	r2, r3
 8004926:	3301      	adds	r3, #1
 8004928:	e7ee      	b.n	8004908 <d_print_comp+0x1d44>
 800492a:	68ee      	ldr	r6, [r5, #12]
 800492c:	443e      	add	r6, r7
 800492e:	42be      	cmp	r6, r7
 8004930:	f67e aa3b 	bls.w	8002daa <d_print_comp+0x1e6>
 8004934:	f04f 0800 	mov.w	r8, #0
 8004938:	e018      	b.n	800496c <d_print_comp+0x1da8>
 800493a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800493e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004942:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004946:	4620      	mov	r0, r4
 8004948:	4798      	blx	r3
 800494a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800494e:	3301      	adds	r3, #1
 8004950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004954:	2100      	movs	r1, #0
 8004956:	2301      	movs	r3, #1
 8004958:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800495c:	f804 9001 	strb.w	r9, [r4, r1]
 8004960:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8004964:	3701      	adds	r7, #1
 8004966:	42be      	cmp	r6, r7
 8004968:	f240 80e1 	bls.w	8004b2e <d_print_comp+0x1f6a>
 800496c:	1bf3      	subs	r3, r6, r7
 800496e:	2b03      	cmp	r3, #3
 8004970:	f897 9000 	ldrb.w	r9, [r7]
 8004974:	dd02      	ble.n	800497c <d_print_comp+0x1db8>
 8004976:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800497a:	d005      	beq.n	8004988 <d_print_comp+0x1dc4>
 800497c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004980:	29ff      	cmp	r1, #255	; 0xff
 8004982:	d0da      	beq.n	800493a <d_print_comp+0x1d76>
 8004984:	1c4b      	adds	r3, r1, #1
 8004986:	e7e7      	b.n	8004958 <d_print_comp+0x1d94>
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b5f      	cmp	r3, #95	; 0x5f
 800498c:	d1f6      	bne.n	800497c <d_print_comp+0x1db8>
 800498e:	78bb      	ldrb	r3, [r7, #2]
 8004990:	2b55      	cmp	r3, #85	; 0x55
 8004992:	d1f3      	bne.n	800497c <d_print_comp+0x1db8>
 8004994:	1cf9      	adds	r1, r7, #3
 8004996:	2000      	movs	r0, #0
 8004998:	e002      	b.n	80049a0 <d_print_comp+0x1ddc>
 800499a:	4613      	mov	r3, r2
 800499c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80049a0:	428e      	cmp	r6, r1
 80049a2:	468a      	mov	sl, r1
 80049a4:	d9ea      	bls.n	800497c <d_print_comp+0x1db8>
 80049a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80049ae:	fa5f fe82 	uxtb.w	lr, r2
 80049b2:	f1be 0f09 	cmp.w	lr, #9
 80049b6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80049ba:	d9ee      	bls.n	800499a <d_print_comp+0x1dd6>
 80049bc:	f1bc 0f05 	cmp.w	ip, #5
 80049c0:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80049c4:	f200 85c7 	bhi.w	8005556 <d_print_comp+0x2992>
 80049c8:	3b37      	subs	r3, #55	; 0x37
 80049ca:	e7e7      	b.n	800499c <d_print_comp+0x1dd8>
 80049cc:	0801b028 	.word	0x0801b028
 80049d0:	0801af64 	.word	0x0801af64
 80049d4:	0801b088 	.word	0x0801b088
 80049d8:	0801aeb4 	.word	0x0801aeb4
 80049dc:	0801af28 	.word	0x0801af28
 80049e0:	9905      	ldr	r1, [sp, #20]
 80049e2:	686a      	ldr	r2, [r5, #4]
 80049e4:	f7fe b9e1 	b.w	8002daa <d_print_comp+0x1e6>
 80049e8:	68aa      	ldr	r2, [r5, #8]
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	4619      	mov	r1, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f47e aa26 	bne.w	8002e40 <d_print_comp+0x27c>
 80049f4:	9905      	ldr	r1, [sp, #20]
 80049f6:	686a      	ldr	r2, [r5, #4]
 80049f8:	f7fe b9d7 	b.w	8002daa <d_print_comp+0x1e6>
 80049fc:	4ece      	ldr	r6, [pc, #824]	; (8004d38 <d_print_comp+0x2174>)
 80049fe:	f106 0904 	add.w	r9, r6, #4
 8004a02:	e014      	b.n	8004a2e <d_print_comp+0x1e6a>
 8004a04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004a10:	4798      	blx	r3
 8004a12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a16:	3301      	adds	r3, #1
 8004a18:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2301      	movs	r3, #1
 8004a20:	45b1      	cmp	r9, r6
 8004a22:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a26:	54a7      	strb	r7, [r4, r2]
 8004a28:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004a2c:	d008      	beq.n	8004a40 <d_print_comp+0x1e7c>
 8004a2e:	2bff      	cmp	r3, #255	; 0xff
 8004a30:	4619      	mov	r1, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004a38:	d0e4      	beq.n	8004a04 <d_print_comp+0x1e40>
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e7ef      	b.n	8004a20 <d_print_comp+0x1e5c>
 8004a40:	9905      	ldr	r1, [sp, #20]
 8004a42:	686a      	ldr	r2, [r5, #4]
 8004a44:	f7fe b9b1 	b.w	8002daa <d_print_comp+0x1e6>
 8004a48:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004a4c:	f7ff ba66 	b.w	8003f1c <d_print_comp+0x1358>
 8004a50:	2700      	movs	r7, #0
 8004a52:	f7ff ba54 	b.w	8003efe <d_print_comp+0x133a>
 8004a56:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	f43e a9a5 	beq.w	8002daa <d_print_comp+0x1e6>
 8004a60:	4437      	add	r7, r6
 8004a62:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004a66:	3f01      	subs	r7, #1
 8004a68:	3e01      	subs	r6, #1
 8004a6a:	f04f 0900 	mov.w	r9, #0
 8004a6e:	e015      	b.n	8004a9c <d_print_comp+0x1ed8>
 8004a70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004a7c:	4798      	blx	r3
 8004a7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a82:	3301      	adds	r3, #1
 8004a84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	42b7      	cmp	r7, r6
 8004a8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004a92:	f804 8002 	strb.w	r8, [r4, r2]
 8004a96:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004a9a:	d008      	beq.n	8004aae <d_print_comp+0x1eea>
 8004a9c:	2bff      	cmp	r3, #255	; 0xff
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8004aa6:	d0e3      	beq.n	8004a70 <d_print_comp+0x1eac>
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	e7ee      	b.n	8004a8c <d_print_comp+0x1ec8>
 8004aae:	9905      	ldr	r1, [sp, #20]
 8004ab0:	686a      	ldr	r2, [r5, #4]
 8004ab2:	f7fe b97a 	b.w	8002daa <d_print_comp+0x1e6>
 8004ab6:	68aa      	ldr	r2, [r5, #8]
 8004ab8:	49a0      	ldr	r1, [pc, #640]	; (8004d3c <d_print_comp+0x2178>)
 8004aba:	3201      	adds	r2, #1
 8004abc:	a808      	add	r0, sp, #32
 8004abe:	f010 fab9 	bl	8015034 <sprintf>
 8004ac2:	a808      	add	r0, sp, #32
 8004ac4:	f002 f96e 	bl	8006da4 <strlen>
 8004ac8:	b328      	cbz	r0, 8004b16 <d_print_comp+0x1f52>
 8004aca:	ae08      	add	r6, sp, #32
 8004acc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004ad0:	eb06 0900 	add.w	r9, r6, r0
 8004ad4:	f04f 0800 	mov.w	r8, #0
 8004ad8:	e014      	b.n	8004b04 <d_print_comp+0x1f40>
 8004ada:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ade:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ae2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ae6:	4798      	blx	r3
 8004ae8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aec:	3301      	adds	r3, #1
 8004aee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004af2:	2200      	movs	r2, #0
 8004af4:	2301      	movs	r3, #1
 8004af6:	45b1      	cmp	r9, r6
 8004af8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004afc:	54a7      	strb	r7, [r4, r2]
 8004afe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004b02:	d008      	beq.n	8004b16 <d_print_comp+0x1f52>
 8004b04:	2bff      	cmp	r3, #255	; 0xff
 8004b06:	4619      	mov	r1, r3
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004b0e:	d0e4      	beq.n	8004ada <d_print_comp+0x1f16>
 8004b10:	461a      	mov	r2, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	e7ef      	b.n	8004af6 <d_print_comp+0x1f32>
 8004b16:	9905      	ldr	r1, [sp, #20]
 8004b18:	686a      	ldr	r2, [r5, #4]
 8004b1a:	f7fe b946 	b.w	8002daa <d_print_comp+0x1e6>
 8004b1e:	9905      	ldr	r1, [sp, #20]
 8004b20:	686a      	ldr	r2, [r5, #4]
 8004b22:	f7fe b942 	b.w	8002daa <d_print_comp+0x1e6>
 8004b26:	9905      	ldr	r1, [sp, #20]
 8004b28:	686a      	ldr	r2, [r5, #4]
 8004b2a:	f7fe b93e 	b.w	8002daa <d_print_comp+0x1e6>
 8004b2e:	9905      	ldr	r1, [sp, #20]
 8004b30:	686a      	ldr	r2, [r5, #4]
 8004b32:	f7fe b93a 	b.w	8002daa <d_print_comp+0x1e6>
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b3b      	cmp	r3, #59	; 0x3b
 8004b3c:	f47e abf6 	bne.w	800332c <d_print_comp+0x768>
 8004b40:	f105 030c 	add.w	r3, r5, #12
 8004b44:	68aa      	ldr	r2, [r5, #8]
 8004b46:	4631      	mov	r1, r6
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 fd95 	bl	8006678 <d_maybe_print_fold_expression.isra.20>
 8004b4e:	4680      	mov	r8, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	f040 86a0 	bne.w	8005896 <d_print_comp+0x2cd2>
 8004b56:	e9d5 7202 	ldrd	r7, r2, [r5, #8]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68d3      	ldr	r3, [r2, #12]
 8004b5e:	6808      	ldr	r0, [r1, #0]
 8004b60:	4977      	ldr	r1, [pc, #476]	; (8004d40 <d_print_comp+0x217c>)
 8004b62:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004b66:	e9d3 a902 	ldrd	sl, r9, [r3, #8]
 8004b6a:	f002 f911 	bl	8006d90 <strcmp>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f000 8674 	beq.w	800585c <d_print_comp+0x2c98>
 8004b74:	2204      	movs	r2, #4
 8004b76:	4973      	ldr	r1, [pc, #460]	; (8004d44 <d_print_comp+0x2180>)
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7fb fbff 	bl	800037c <d_append_buffer>
 8004b7e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b82:	b303      	cbz	r3, 8004bc6 <d_print_comp+0x2002>
 8004b84:	465a      	mov	r2, fp
 8004b86:	4631      	mov	r1, r6
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f001 fd23 	bl	80065d4 <d_print_subexpr>
 8004b8e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004b92:	2fff      	cmp	r7, #255	; 0xff
 8004b94:	d110      	bne.n	8004bb8 <d_print_comp+0x1ff4>
 8004b96:	4639      	mov	r1, r7
 8004b98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b9c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004ba0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4798      	blx	r3
 8004ba8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	4647      	mov	r7, r8
 8004bb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004bb8:	2320      	movs	r3, #32
 8004bba:	1c7a      	adds	r2, r7, #1
 8004bbc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004bc0:	55e3      	strb	r3, [r4, r7]
 8004bc2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fd fffa 	bl	8002bc4 <d_print_comp>
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	f000 8663 	beq.w	800589e <d_print_comp+0x2cda>
 8004bd8:	464a      	mov	r2, r9
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 fcf9 	bl	80065d4 <d_print_subexpr>
 8004be2:	9905      	ldr	r1, [sp, #20]
 8004be4:	686a      	ldr	r2, [r5, #4]
 8004be6:	f7fe b8e0 	b.w	8002daa <d_print_comp+0x1e6>
 8004bea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004bee:	4956      	ldr	r1, [pc, #344]	; (8004d48 <d_print_comp+0x2184>)
 8004bf0:	f8d3 a000 	ldr.w	sl, [r3]
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	f002 f8cb 	bl	8006d90 <strcmp>
 8004bfa:	f898 3000 	ldrb.w	r3, [r8]
 8004bfe:	b910      	cbnz	r0, 8004c06 <d_print_comp+0x2042>
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	f000 852b 	beq.w	800565c <d_print_comp+0x2a98>
 8004c06:	2b38      	cmp	r3, #56	; 0x38
 8004c08:	f000 850c 	beq.w	8005624 <d_print_comp+0x2a60>
 8004c0c:	494f      	ldr	r1, [pc, #316]	; (8004d4c <d_print_comp+0x2188>)
 8004c0e:	4650      	mov	r0, sl
 8004c10:	f002 f8be 	bl	8006d90 <strcmp>
 8004c14:	4607      	mov	r7, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f000 8513 	beq.w	8005642 <d_print_comp+0x2a7e>
 8004c1c:	494c      	ldr	r1, [pc, #304]	; (8004d50 <d_print_comp+0x218c>)
 8004c1e:	4650      	mov	r0, sl
 8004c20:	f002 f8b6 	bl	8006d90 <strcmp>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f000 8333 	beq.w	8005290 <d_print_comp+0x26cc>
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	464a      	mov	r2, r9
 8004c30:	f001 fc90 	bl	8006554 <d_print_expr_op>
 8004c34:	4947      	ldr	r1, [pc, #284]	; (8004d54 <d_print_comp+0x2190>)
 8004c36:	4650      	mov	r0, sl
 8004c38:	f002 f8aa 	bl	8006d90 <strcmp>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	f000 83b0 	beq.w	80053a2 <d_print_comp+0x27de>
 8004c42:	4650      	mov	r0, sl
 8004c44:	4944      	ldr	r1, [pc, #272]	; (8004d58 <d_print_comp+0x2194>)
 8004c46:	f002 f8a3 	bl	8006d90 <strcmp>
 8004c4a:	4681      	mov	r9, r0
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47e abd7 	bne.w	8003400 <d_print_comp+0x83c>
 8004c52:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c56:	2fff      	cmp	r7, #255	; 0xff
 8004c58:	d110      	bne.n	8004c7c <d_print_comp+0x20b8>
 8004c5a:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4798      	blx	r3
 8004c6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c70:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8004c74:	3301      	adds	r3, #1
 8004c76:	464f      	mov	r7, r9
 8004c78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c7c:	1c78      	adds	r0, r7, #1
 8004c7e:	2328      	movs	r3, #40	; 0x28
 8004c80:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8004c84:	4642      	mov	r2, r8
 8004c86:	55e3      	strb	r3, [r4, r7]
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c90:	f7fd ff98 	bl	8002bc4 <d_print_comp>
 8004c94:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004c98:	2fff      	cmp	r7, #255	; 0xff
 8004c9a:	d111      	bne.n	8004cc0 <d_print_comp+0x20fc>
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ca4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cac:	4620      	mov	r0, r4
 8004cae:	4798      	blx	r3
 8004cb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cb4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004cb8:	3301      	adds	r3, #1
 8004cba:	4637      	mov	r7, r6
 8004cbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cc0:	1c7a      	adds	r2, r7, #1
 8004cc2:	2329      	movs	r3, #41	; 0x29
 8004cc4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cc8:	55e3      	strb	r3, [r4, r7]
 8004cca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cce:	686a      	ldr	r2, [r5, #4]
 8004cd0:	9905      	ldr	r1, [sp, #20]
 8004cd2:	f7fe b86a 	b.w	8002daa <d_print_comp+0x1e6>
 8004cd6:	f105 020c 	add.w	r2, r5, #12
 8004cda:	4641      	mov	r1, r8
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f001 f935 	bl	8005f4c <d_print_function_type.isra.15>
 8004ce2:	68aa      	ldr	r2, [r5, #8]
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	f000 83fd 	beq.w	80054e4 <d_print_comp+0x2920>
 8004cea:	4641      	mov	r1, r8
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fd ff69 	bl	8002bc4 <d_print_comp>
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	686a      	ldr	r2, [r5, #4]
 8004cf6:	f7fe b858 	b.w	8002daa <d_print_comp+0x1e6>
 8004cfa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004cfe:	2fff      	cmp	r7, #255	; 0xff
 8004d00:	d111      	bne.n	8004d26 <d_print_comp+0x2162>
 8004d02:	2600      	movs	r6, #0
 8004d04:	4639      	mov	r1, r7
 8004d06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004d0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d12:	4620      	mov	r0, r4
 8004d14:	4798      	blx	r3
 8004d16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4637      	mov	r7, r6
 8004d22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d26:	2320      	movs	r3, #32
 8004d28:	1c7a      	adds	r2, r7, #1
 8004d2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d2e:	55e3      	strb	r3, [r4, r7]
 8004d30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d34:	f7fe bf72 	b.w	8003c1c <d_print_comp+0x1058>
 8004d38:	0801b108 	.word	0x0801b108
 8004d3c:	0801aeb4 	.word	0x0801aeb4
 8004d40:	0801aec8 	.word	0x0801aec8
 8004d44:	0801b0c4 	.word	0x0801b0c4
 8004d48:	0801b0ac 	.word	0x0801b0ac
 8004d4c:	0801b0b0 	.word	0x0801b0b0
 8004d50:	0801aeb8 	.word	0x0801aeb8
 8004d54:	0801b0b4 	.word	0x0801b0b4
 8004d58:	0801b3d4 	.word	0x0801b3d4
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f893 8010 	ldrb.w	r8, [r3, #16]
 8004d62:	f1b8 0f00 	cmp.w	r8, #0
 8004d66:	f43e aa89 	beq.w	800327c <d_print_comp+0x6b8>
 8004d6a:	f1b8 0f06 	cmp.w	r8, #6
 8004d6e:	f240 843f 	bls.w	80055f0 <d_print_comp+0x2a2c>
 8004d72:	f1b8 0f07 	cmp.w	r8, #7
 8004d76:	f47e aa81 	bne.w	800327c <d_print_comp+0x6b8>
 8004d7a:	68eb      	ldr	r3, [r5, #12]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	f47e aa7c 	bne.w	800327c <d_print_comp+0x6b8>
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	2a01      	cmp	r2, #1
 8004d88:	f47e aa78 	bne.w	800327c <d_print_comp+0x6b8>
 8004d8c:	283c      	cmp	r0, #60	; 0x3c
 8004d8e:	f47e aa75 	bne.w	800327c <d_print_comp+0x6b8>
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	f000 84b6 	beq.w	8005708 <d_print_comp+0x2b44>
 8004d9c:	2b31      	cmp	r3, #49	; 0x31
 8004d9e:	f47e aa6d 	bne.w	800327c <d_print_comp+0x6b8>
 8004da2:	2204      	movs	r2, #4
 8004da4:	49c3      	ldr	r1, [pc, #780]	; (80050b4 <d_print_comp+0x24f0>)
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7fb fae8 	bl	800037c <d_append_buffer>
 8004dac:	9905      	ldr	r1, [sp, #20]
 8004dae:	686a      	ldr	r2, [r5, #4]
 8004db0:	f7fd bffb 	b.w	8002daa <d_print_comp+0x1e6>
 8004db4:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004db8:	2fff      	cmp	r7, #255	; 0xff
 8004dba:	d112      	bne.n	8004de2 <d_print_comp+0x221e>
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004dc6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004dca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4798      	blx	r3
 8004dd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dd6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4647      	mov	r7, r8
 8004dde:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004de2:	1c7a      	adds	r2, r7, #1
 8004de4:	235b      	movs	r3, #91	; 0x5b
 8004de6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dea:	55e3      	strb	r3, [r4, r7]
 8004dec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004df0:	4631      	mov	r1, r6
 8004df2:	68ea      	ldr	r2, [r5, #12]
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7fd fee5 	bl	8002bc4 <d_print_comp>
 8004dfa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004dfe:	2fff      	cmp	r7, #255	; 0xff
 8004e00:	d111      	bne.n	8004e26 <d_print_comp+0x2262>
 8004e02:	2600      	movs	r6, #0
 8004e04:	4639      	mov	r1, r7
 8004e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e12:	4620      	mov	r0, r4
 8004e14:	4798      	blx	r3
 8004e16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e1a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004e1e:	3301      	adds	r3, #1
 8004e20:	4637      	mov	r7, r6
 8004e22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e26:	1c7a      	adds	r2, r7, #1
 8004e28:	235d      	movs	r3, #93	; 0x5d
 8004e2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e2e:	55e3      	strb	r3, [r4, r7]
 8004e30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e34:	686a      	ldr	r2, [r5, #4]
 8004e36:	9905      	ldr	r1, [sp, #20]
 8004e38:	f7fd bfb7 	b.w	8002daa <d_print_comp+0x1e6>
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	2229      	movs	r2, #41	; 0x29
 8004e40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e44:	54e2      	strb	r2, [r4, r3]
 8004e46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004e4a:	782b      	ldrb	r3, [r5, #0]
 8004e4c:	2b3d      	cmp	r3, #61	; 0x3d
 8004e4e:	f47e aa57 	bne.w	8003300 <d_print_comp+0x73c>
 8004e52:	29ff      	cmp	r1, #255	; 0xff
 8004e54:	d10f      	bne.n	8004e76 <d_print_comp+0x22b2>
 8004e56:	2700      	movs	r7, #0
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e64:	4620      	mov	r0, r4
 8004e66:	4798      	blx	r3
 8004e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e6c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004e70:	3301      	adds	r3, #1
 8004e72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e76:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 8004e7a:	232d      	movs	r3, #45	; 0x2d
 8004e7c:	1c51      	adds	r1, r2, #1
 8004e7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e82:	54a3      	strb	r3, [r4, r2]
 8004e84:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e88:	f7fe ba3a 	b.w	8003300 <d_print_comp+0x73c>
 8004e8c:	4f8a      	ldr	r7, [pc, #552]	; (80050b8 <d_print_comp+0x24f4>)
 8004e8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004e92:	f107 0a02 	add.w	sl, r7, #2
 8004e96:	e016      	b.n	8004ec6 <d_print_comp+0x2302>
 8004e98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ea0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004ea4:	4798      	blx	r3
 8004ea6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	45ba      	cmp	sl, r7
 8004eb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004eba:	f804 8002 	strb.w	r8, [r4, r2]
 8004ebe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004ec2:	f43f a980 	beq.w	80041c6 <d_print_comp+0x1602>
 8004ec6:	2bff      	cmp	r3, #255	; 0xff
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004ed0:	d0e2      	beq.n	8004e98 <d_print_comp+0x22d4>
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	e7ed      	b.n	8004eb4 <d_print_comp+0x22f0>
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	4631      	mov	r1, r6
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7fd fe71 	bl	8002bc4 <d_print_comp>
 8004ee2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004ee6:	b113      	cbz	r3, 8004eee <d_print_comp+0x232a>
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004eee:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004ef2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ef4:	f000 82c4 	beq.w	8005480 <d_print_comp+0x28bc>
 8004ef8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004efc:	2fff      	cmp	r7, #255	; 0xff
 8004efe:	d112      	bne.n	8004f26 <d_print_comp+0x2362>
 8004f00:	f04f 0800 	mov.w	r8, #0
 8004f04:	4639      	mov	r1, r7
 8004f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f0a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f12:	4620      	mov	r0, r4
 8004f14:	4798      	blx	r3
 8004f16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f1a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4647      	mov	r7, r8
 8004f22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f26:	233c      	movs	r3, #60	; 0x3c
 8004f28:	1c7a      	adds	r2, r7, #1
 8004f2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f2e:	55e3      	strb	r3, [r4, r7]
 8004f30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f34:	68ab      	ldr	r3, [r5, #8]
 8004f36:	4631      	mov	r1, r6
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f7fd fe42 	bl	8002bc4 <d_print_comp>
 8004f40:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004f44:	2b3e      	cmp	r3, #62	; 0x3e
 8004f46:	f000 827d 	beq.w	8005444 <d_print_comp+0x2880>
 8004f4a:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004f4e:	2fff      	cmp	r7, #255	; 0xff
 8004f50:	d111      	bne.n	8004f76 <d_print_comp+0x23b2>
 8004f52:	2600      	movs	r6, #0
 8004f54:	4639      	mov	r1, r7
 8004f56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f5a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f62:	4620      	mov	r0, r4
 8004f64:	4798      	blx	r3
 8004f66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f6a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4637      	mov	r7, r6
 8004f72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f76:	233e      	movs	r3, #62	; 0x3e
 8004f78:	1c7a      	adds	r2, r7, #1
 8004f7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004f7e:	55e3      	strb	r3, [r4, r7]
 8004f80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004f84:	f7ff badc 	b.w	8004540 <d_print_comp+0x197c>
 8004f88:	4f4c      	ldr	r7, [pc, #304]	; (80050bc <d_print_comp+0x24f8>)
 8004f8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004f8e:	f107 0905 	add.w	r9, r7, #5
 8004f92:	f04f 0a00 	mov.w	sl, #0
 8004f96:	e016      	b.n	8004fc6 <d_print_comp+0x2402>
 8004f98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fa0:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fa4:	4798      	blx	r3
 8004fa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004faa:	3301      	adds	r3, #1
 8004fac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	45b9      	cmp	r9, r7
 8004fb6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004fba:	f804 8002 	strb.w	r8, [r4, r2]
 8004fbe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8004fc2:	f43e ab41 	beq.w	8003648 <d_print_comp+0xa84>
 8004fc6:	2bff      	cmp	r3, #255	; 0xff
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f817 8b01 	ldrb.w	r8, [r7], #1
 8004fd0:	d0e2      	beq.n	8004f98 <d_print_comp+0x23d4>
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	e7ed      	b.n	8004fb4 <d_print_comp+0x23f0>
 8004fd8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8004fdc:	2fff      	cmp	r7, #255	; 0xff
 8004fde:	d112      	bne.n	8005006 <d_print_comp+0x2442>
 8004fe0:	f04f 0a00 	mov.w	sl, #0
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fea:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8004fee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4798      	blx	r3
 8004ff6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ffa:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 8004ffe:	3301      	adds	r3, #1
 8005000:	4657      	mov	r7, sl
 8005002:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005006:	2320      	movs	r3, #32
 8005008:	1c7a      	adds	r2, r7, #1
 800500a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800500e:	55e3      	strb	r3, [r4, r7]
 8005010:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005014:	f7fe bdda 	b.w	8003bcc <d_print_comp+0x1008>
 8005018:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800501c:	2900      	cmp	r1, #0
 800501e:	f6fe ad99 	blt.w	8003b54 <d_print_comp+0xf90>
 8005022:	f7fb fbc3 	bl	80007ac <d_index_template_argument.part.9>
 8005026:	4602      	mov	r2, r0
 8005028:	2800      	cmp	r0, #0
 800502a:	f47e ad93 	bne.w	8003b54 <d_print_comp+0xf90>
 800502e:	2301      	movs	r3, #1
 8005030:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005034:	686a      	ldr	r2, [r5, #4]
 8005036:	9905      	ldr	r1, [sp, #20]
 8005038:	f7fd beb7 	b.w	8002daa <d_print_comp+0x1e6>
 800503c:	9905      	ldr	r1, [sp, #20]
 800503e:	686a      	ldr	r2, [r5, #4]
 8005040:	f7fd beb3 	b.w	8002daa <d_print_comp+0x1e6>
 8005044:	220d      	movs	r2, #13
 8005046:	491e      	ldr	r1, [pc, #120]	; (80050c0 <d_print_comp+0x24fc>)
 8005048:	4620      	mov	r0, r4
 800504a:	f7fb f997 	bl	800037c <d_append_buffer>
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	4620      	mov	r0, r4
 8005052:	3101      	adds	r1, #1
 8005054:	f7fb fc84 	bl	8000960 <d_append_num>
 8005058:	2203      	movs	r2, #3
 800505a:	491a      	ldr	r1, [pc, #104]	; (80050c4 <d_print_comp+0x2500>)
 800505c:	4620      	mov	r0, r4
 800505e:	f7fb f98d 	bl	800037c <d_append_buffer>
 8005062:	68bf      	ldr	r7, [r7, #8]
 8005064:	f7ff b8b4 	b.w	80041d0 <d_print_comp+0x160c>
 8005068:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800506c:	9905      	ldr	r1, [sp, #20]
 800506e:	686a      	ldr	r2, [r5, #4]
 8005070:	42b8      	cmp	r0, r7
 8005072:	f47d ae9a 	bne.w	8002daa <d_print_comp+0x1e6>
 8005076:	3b01      	subs	r3, #1
 8005078:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800507c:	f7fd be95 	b.w	8002daa <d_print_comp+0x1e6>
 8005080:	4642      	mov	r2, r8
 8005082:	465b      	mov	r3, fp
 8005084:	46ab      	mov	fp, r5
 8005086:	f1bb 0f04 	cmp.w	fp, #4
 800508a:	46a0      	mov	r8, r4
 800508c:	461d      	mov	r5, r3
 800508e:	4614      	mov	r4, r2
 8005090:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
 8005094:	f000 82a3 	beq.w	80055de <d_print_comp+0x2a1a>
 8005098:	f1bb 0f02 	cmp.w	fp, #2
 800509c:	d137      	bne.n	800510e <d_print_comp+0x254a>
 800509e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80050a2:	f89a 3000 	ldrb.w	r3, [sl]
 80050a6:	2b46      	cmp	r3, #70	; 0x46
 80050a8:	f000 8327 	beq.w	80056fa <d_print_comp+0x2b36>
 80050ac:	eb09 1207 	add.w	r2, r9, r7, lsl #4
 80050b0:	3a0c      	subs	r2, #12
 80050b2:	e020      	b.n	80050f6 <d_print_comp+0x2532>
 80050b4:	0801b0e0 	.word	0x0801b0e0
 80050b8:	0801af04 	.word	0x0801af04
 80050bc:	0801b078 	.word	0x0801b078
 80050c0:	0801af08 	.word	0x0801af08
 80050c4:	0801af18 	.word	0x0801af18
 80050c8:	2f04      	cmp	r7, #4
 80050ca:	f43f a81d 	beq.w	8004108 <d_print_comp+0x1544>
 80050ce:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80050d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80050d6:	2300      	movs	r3, #0
 80050d8:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80050dc:	f84e ac10 	str.w	sl, [lr, #-16]
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	f8da a008 	ldr.w	sl, [sl, #8]
 80050e6:	f8c4 c114 	str.w	ip, [r4, #276]	; 0x114
 80050ea:	3701      	adds	r7, #1
 80050ec:	f84e bc04 	str.w	fp, [lr, #-4]
 80050f0:	f84e 3c08 	str.w	r3, [lr, #-8]
 80050f4:	4672      	mov	r2, lr
 80050f6:	f89a 0000 	ldrb.w	r0, [sl]
 80050fa:	f7fb f975 	bl	80003e8 <is_fnqual_component_type>
 80050fe:	f1a2 0b04 	sub.w	fp, r2, #4
 8005102:	f102 0e10 	add.w	lr, r2, #16
 8005106:	f102 0c0c 	add.w	ip, r2, #12
 800510a:	2800      	cmp	r0, #0
 800510c:	d1dc      	bne.n	80050c8 <d_print_comp+0x2504>
 800510e:	68ea      	ldr	r2, [r5, #12]
 8005110:	4631      	mov	r1, r6
 8005112:	4620      	mov	r0, r4
 8005114:	f7fd fd56 	bl	8002bc4 <d_print_comp>
 8005118:	f898 3000 	ldrb.w	r3, [r8]
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf04      	itt	eq
 8005120:	9b06      	ldreq	r3, [sp, #24]
 8005122:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
 8005126:	013f      	lsls	r7, r7, #4
 8005128:	f04f 0a20 	mov.w	sl, #32
 800512c:	46a8      	mov	r8, r5
 800512e:	eb09 0b07 	add.w	fp, r9, r7
 8005132:	f85b 5c08 	ldr.w	r5, [fp, #-8]
 8005136:	bb0d      	cbnz	r5, 800517c <d_print_comp+0x25b8>
 8005138:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800513c:	2bff      	cmp	r3, #255	; 0xff
 800513e:	4620      	mov	r0, r4
 8005140:	4619      	mov	r1, r3
 8005142:	d10e      	bne.n	8005162 <d_print_comp+0x259e>
 8005144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005148:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800514c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005150:	4798      	blx	r3
 8005152:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005156:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005160:	462b      	mov	r3, r5
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005168:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800516c:	f804 a003 	strb.w	sl, [r4, r3]
 8005170:	4631      	mov	r1, r6
 8005172:	4620      	mov	r0, r4
 8005174:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005178:	f000 fbba 	bl	80058f0 <d_print_mod>
 800517c:	3f10      	subs	r7, #16
 800517e:	d1d6      	bne.n	800512e <d_print_comp+0x256a>
 8005180:	9b02      	ldr	r3, [sp, #8]
 8005182:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005186:	4645      	mov	r5, r8
 8005188:	f7fe bfc1 	b.w	800410e <d_print_comp+0x154a>
 800518c:	4631      	mov	r1, r6
 800518e:	68aa      	ldr	r2, [r5, #8]
 8005190:	4620      	mov	r0, r4
 8005192:	f7fd fd17 	bl	8002bc4 <d_print_comp>
 8005196:	9905      	ldr	r1, [sp, #20]
 8005198:	686a      	ldr	r2, [r5, #4]
 800519a:	f7fd be06 	b.w	8002daa <d_print_comp+0x1e6>
 800519e:	460f      	mov	r7, r1
 80051a0:	46a9      	mov	r9, r5
 80051a2:	f7fe bebb 	b.w	8003f1c <d_print_comp+0x1358>
 80051a6:	4644      	mov	r4, r8
 80051a8:	465d      	mov	r5, fp
 80051aa:	f8c8 1114 	str.w	r1, [r8, #276]	; 0x114
 80051ae:	f7fe bfab 	b.w	8004108 <d_print_comp+0x1544>
 80051b2:	68ea      	ldr	r2, [r5, #12]
 80051b4:	4631      	mov	r1, r6
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7fd fd04 	bl	8002bc4 <d_print_comp>
 80051bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051be:	9a01      	ldr	r2, [sp, #4]
 80051c0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f43e ab19 	beq.w	80037fc <d_print_comp+0xc38>
 80051ca:	f7fe bb1f 	b.w	800380c <d_print_comp+0xc48>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4664      	mov	r4, ip
 80051d2:	f8cc 3118 	str.w	r3, [ip, #280]	; 0x118
 80051d6:	f7fe bb19 	b.w	800380c <d_print_comp+0xc48>
 80051da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051de:	f7fe bead 	b.w	8003f3c <d_print_comp+0x1378>
 80051e2:	4631      	mov	r1, r6
 80051e4:	68aa      	ldr	r2, [r5, #8]
 80051e6:	4620      	mov	r0, r4
 80051e8:	f001 f9f4 	bl	80065d4 <d_print_subexpr>
 80051ec:	2203      	movs	r2, #3
 80051ee:	49bf      	ldr	r1, [pc, #764]	; (80054ec <d_print_comp+0x2928>)
 80051f0:	4620      	mov	r0, r4
 80051f2:	f7fb f8c3 	bl	800037c <d_append_buffer>
 80051f6:	9905      	ldr	r1, [sp, #20]
 80051f8:	686a      	ldr	r2, [r5, #4]
 80051fa:	f7fd bdd6 	b.w	8002daa <d_print_comp+0x1e6>
 80051fe:	f8d4 e130 	ldr.w	lr, [r4, #304]	; 0x130
 8005202:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8005206:	f1be 0f00 	cmp.w	lr, #0
 800520a:	dd17      	ble.n	800523c <d_print_comp+0x2678>
 800520c:	6810      	ldr	r0, [r2, #0]
 800520e:	4581      	cmp	r9, r0
 8005210:	f000 81a7 	beq.w	8005562 <d_print_comp+0x299e>
 8005214:	f102 0b08 	add.w	fp, r2, #8
 8005218:	46bc      	mov	ip, r7
 800521a:	9101      	str	r1, [sp, #4]
 800521c:	4670      	mov	r0, lr
 800521e:	e004      	b.n	800522a <d_print_comp+0x2666>
 8005220:	f852 103c 	ldr.w	r1, [r2, ip, lsl #3]
 8005224:	4589      	cmp	r9, r1
 8005226:	f000 819d 	beq.w	8005564 <d_print_comp+0x29a0>
 800522a:	f10c 0c01 	add.w	ip, ip, #1
 800522e:	4560      	cmp	r0, ip
 8005230:	46da      	mov	sl, fp
 8005232:	f10b 0b08 	add.w	fp, fp, #8
 8005236:	d1f3      	bne.n	8005220 <d_print_comp+0x265c>
 8005238:	9901      	ldr	r1, [sp, #4]
 800523a:	4686      	mov	lr, r0
 800523c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8005240:	459e      	cmp	lr, r3
 8005242:	f280 8344 	bge.w	80058ce <d_print_comp+0x2d0a>
 8005246:	f10e 0301 	add.w	r3, lr, #1
 800524a:	eb02 0cce 	add.w	ip, r2, lr, lsl #3
 800524e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8005252:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8005256:	f842 903e 	str.w	r9, [r2, lr, lsl #3]
 800525a:	f10c 0c04 	add.w	ip, ip, #4
 800525e:	2800      	cmp	r0, #0
 8005260:	f000 825b 	beq.w	800571a <d_print_comp+0x2b56>
 8005264:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8005268:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800526c:	429a      	cmp	r2, r3
 800526e:	f102 0e01 	add.w	lr, r2, #1
 8005272:	f280 832c 	bge.w	80058ce <d_print_comp+0x2d0a>
 8005276:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 800527a:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 800527e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005282:	6842      	ldr	r2, [r0, #4]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	f8cc 3000 	str.w	r3, [ip]
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	469c      	mov	ip, r3
 800528e:	e7e6      	b.n	800525e <d_print_comp+0x269a>
 8005290:	4606      	mov	r6, r0
 8005292:	4647      	mov	r7, r8
 8005294:	e001      	b.n	800529a <d_print_comp+0x26d6>
 8005296:	68ff      	ldr	r7, [r7, #12]
 8005298:	b31f      	cbz	r7, 80052e2 <d_print_comp+0x271e>
 800529a:	783b      	ldrb	r3, [r7, #0]
 800529c:	2b2f      	cmp	r3, #47	; 0x2f
 800529e:	d120      	bne.n	80052e2 <d_print_comp+0x271e>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	b1f3      	cbz	r3, 80052e2 <d_print_comp+0x271e>
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	2a4a      	cmp	r2, #74	; 0x4a
 80052a8:	bf18      	it	ne
 80052aa:	3601      	addne	r6, #1
 80052ac:	d1f3      	bne.n	8005296 <d_print_comp+0x26d2>
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7fb faa1 	bl	80007f8 <d_find_pack>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f000 81ef 	beq.w	800569a <d_print_comp+0x2ad6>
 80052bc:	7803      	ldrb	r3, [r0, #0]
 80052be:	2b2f      	cmp	r3, #47	; 0x2f
 80052c0:	f040 81eb 	bne.w	800569a <d_print_comp+0x2ad6>
 80052c4:	6883      	ldr	r3, [r0, #8]
 80052c6:	b153      	cbz	r3, 80052de <d_print_comp+0x271a>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e004      	b.n	80052d6 <d_print_comp+0x2712>
 80052cc:	7802      	ldrb	r2, [r0, #0]
 80052ce:	2a2f      	cmp	r2, #47	; 0x2f
 80052d0:	d105      	bne.n	80052de <d_print_comp+0x271a>
 80052d2:	6882      	ldr	r2, [r0, #8]
 80052d4:	b11a      	cbz	r2, 80052de <d_print_comp+0x271a>
 80052d6:	68c0      	ldr	r0, [r0, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	2800      	cmp	r0, #0
 80052dc:	d1f6      	bne.n	80052cc <d_print_comp+0x2708>
 80052de:	441e      	add	r6, r3
 80052e0:	e7d9      	b.n	8005296 <d_print_comp+0x26d2>
 80052e2:	4631      	mov	r1, r6
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fb fb3b 	bl	8000960 <d_append_num>
 80052ea:	9905      	ldr	r1, [sp, #20]
 80052ec:	686a      	ldr	r2, [r5, #4]
 80052ee:	f7fd bd5c 	b.w	8002daa <d_print_comp+0x1e6>
 80052f2:	4631      	mov	r1, r6
 80052f4:	4620      	mov	r0, r4
 80052f6:	f001 f92d 	bl	8006554 <d_print_expr_op>
 80052fa:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80052fe:	2fff      	cmp	r7, #255	; 0xff
 8005300:	d112      	bne.n	8005328 <d_print_comp+0x2764>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	4639      	mov	r1, r7
 8005308:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800530c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005314:	4620      	mov	r0, r4
 8005316:	4798      	blx	r3
 8005318:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800531c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005320:	3301      	adds	r3, #1
 8005322:	4647      	mov	r7, r8
 8005324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005328:	1c7a      	adds	r2, r7, #1
 800532a:	233c      	movs	r3, #60	; 0x3c
 800532c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005330:	55e3      	strb	r3, [r4, r7]
 8005332:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005336:	68eb      	ldr	r3, [r5, #12]
 8005338:	4631      	mov	r1, r6
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4620      	mov	r0, r4
 800533e:	f7fd fc41 	bl	8002bc4 <d_print_comp>
 8005342:	2202      	movs	r2, #2
 8005344:	496a      	ldr	r1, [pc, #424]	; (80054f0 <d_print_comp+0x292c>)
 8005346:	4620      	mov	r0, r4
 8005348:	f7fb f818 	bl	800037c <d_append_buffer>
 800534c:	68eb      	ldr	r3, [r5, #12]
 800534e:	4631      	mov	r1, r6
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	4620      	mov	r0, r4
 8005354:	f7fd fc36 	bl	8002bc4 <d_print_comp>
 8005358:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800535c:	2fff      	cmp	r7, #255	; 0xff
 800535e:	d111      	bne.n	8005384 <d_print_comp+0x27c0>
 8005360:	2600      	movs	r6, #0
 8005362:	4639      	mov	r1, r7
 8005364:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005368:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800536c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005370:	4620      	mov	r0, r4
 8005372:	4798      	blx	r3
 8005374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005378:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800537c:	3301      	adds	r3, #1
 800537e:	4637      	mov	r7, r6
 8005380:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005384:	1c7a      	adds	r2, r7, #1
 8005386:	2329      	movs	r3, #41	; 0x29
 8005388:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800538c:	55e3      	strb	r3, [r4, r7]
 800538e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005392:	686a      	ldr	r2, [r5, #4]
 8005394:	9905      	ldr	r1, [sp, #20]
 8005396:	f7fd bd08 	b.w	8002daa <d_print_comp+0x1e6>
 800539a:	9905      	ldr	r1, [sp, #20]
 800539c:	686a      	ldr	r2, [r5, #4]
 800539e:	f7fd bd04 	b.w	8002daa <d_print_comp+0x1e6>
 80053a2:	4642      	mov	r2, r8
 80053a4:	4631      	mov	r1, r6
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7fd fc0c 	bl	8002bc4 <d_print_comp>
 80053ac:	9905      	ldr	r1, [sp, #20]
 80053ae:	686a      	ldr	r2, [r5, #4]
 80053b0:	f7fd bcfb 	b.w	8002daa <d_print_comp+0x1e6>
 80053b4:	a918      	add	r1, sp, #96	; 0x60
 80053b6:	4620      	mov	r0, r4
 80053b8:	f841 3d40 	str.w	r3, [r1, #-64]!
 80053bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80053c0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 80053c4:	4641      	mov	r1, r8
 80053c6:	960a      	str	r6, [sp, #40]	; 0x28
 80053c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ca:	9509      	str	r5, [sp, #36]	; 0x24
 80053cc:	f7fd fbfa 	bl	8002bc4 <d_print_comp>
 80053d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80053d8:	b9ee      	cbnz	r6, 8005416 <d_print_comp+0x2852>
 80053da:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80053de:	2fff      	cmp	r7, #255	; 0xff
 80053e0:	d110      	bne.n	8005404 <d_print_comp+0x2840>
 80053e2:	4639      	mov	r1, r7
 80053e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053f0:	4620      	mov	r0, r4
 80053f2:	4798      	blx	r3
 80053f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053f8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053fc:	3301      	adds	r3, #1
 80053fe:	4637      	mov	r7, r6
 8005400:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005404:	2320      	movs	r3, #32
 8005406:	1c7a      	adds	r2, r7, #1
 8005408:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800540c:	55e3      	strb	r3, [r4, r7]
 800540e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005412:	f7fe ba0c 	b.w	800382e <d_print_comp+0xc6a>
 8005416:	9905      	ldr	r1, [sp, #20]
 8005418:	686a      	ldr	r2, [r5, #4]
 800541a:	f7fd bcc6 	b.w	8002daa <d_print_comp+0x1e6>
 800541e:	4935      	ldr	r1, [pc, #212]	; (80054f4 <d_print_comp+0x2930>)
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	f00f fe27 	bl	8015074 <strncmp>
 8005426:	2800      	cmp	r0, #0
 8005428:	f47e abc6 	bne.w	8003bb8 <d_print_comp+0xff4>
 800542c:	4631      	mov	r1, r6
 800542e:	68ea      	ldr	r2, [r5, #12]
 8005430:	4620      	mov	r0, r4
 8005432:	f7fd fbc7 	bl	8002bc4 <d_print_comp>
 8005436:	2202      	movs	r2, #2
 8005438:	492f      	ldr	r1, [pc, #188]	; (80054f8 <d_print_comp+0x2934>)
 800543a:	4620      	mov	r0, r4
 800543c:	f7fa ff9e 	bl	800037c <d_append_buffer>
 8005440:	f7fe bc09 	b.w	8003c56 <d_print_comp+0x1092>
 8005444:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005448:	2fff      	cmp	r7, #255	; 0xff
 800544a:	d111      	bne.n	8005470 <d_print_comp+0x28ac>
 800544c:	2600      	movs	r6, #0
 800544e:	4639      	mov	r1, r7
 8005450:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005454:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005458:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800545c:	4620      	mov	r0, r4
 800545e:	4798      	blx	r3
 8005460:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005464:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005468:	3301      	adds	r3, #1
 800546a:	4637      	mov	r7, r6
 800546c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005470:	2320      	movs	r3, #32
 8005472:	1c7a      	adds	r2, r7, #1
 8005474:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005478:	55e3      	strb	r3, [r4, r7]
 800547a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800547e:	e564      	b.n	8004f4a <d_print_comp+0x2386>
 8005480:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005484:	2fff      	cmp	r7, #255	; 0xff
 8005486:	d112      	bne.n	80054ae <d_print_comp+0x28ea>
 8005488:	f04f 0800 	mov.w	r8, #0
 800548c:	4639      	mov	r1, r7
 800548e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005492:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005496:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800549a:	4620      	mov	r0, r4
 800549c:	4798      	blx	r3
 800549e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054a2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80054a6:	3301      	adds	r3, #1
 80054a8:	4647      	mov	r7, r8
 80054aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054ae:	2320      	movs	r3, #32
 80054b0:	1c7a      	adds	r2, r7, #1
 80054b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80054b6:	55e3      	strb	r3, [r4, r7]
 80054b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80054bc:	e51c      	b.n	8004ef8 <d_print_comp+0x2334>
 80054be:	4640      	mov	r0, r8
 80054c0:	490e      	ldr	r1, [pc, #56]	; (80054fc <d_print_comp+0x2938>)
 80054c2:	f001 fc65 	bl	8006d90 <strcmp>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f040 81fb 	bne.w	80058c2 <d_print_comp+0x2cfe>
 80054cc:	68eb      	ldr	r3, [r5, #12]
 80054ce:	4631      	mov	r1, r6
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	4620      	mov	r0, r4
 80054d4:	f001 f87e 	bl	80065d4 <d_print_subexpr>
 80054d8:	f7fd bc60 	b.w	8002d9c <d_print_comp+0x1d8>
 80054dc:	9905      	ldr	r1, [sp, #20]
 80054de:	686a      	ldr	r2, [r5, #4]
 80054e0:	f7fd bc63 	b.w	8002daa <d_print_comp+0x1e6>
 80054e4:	9905      	ldr	r1, [sp, #20]
 80054e6:	686a      	ldr	r2, [r5, #4]
 80054e8:	f7fd bc5f 	b.w	8002daa <d_print_comp+0x1e6>
 80054ec:	0801b104 	.word	0x0801b104
 80054f0:	0801b0b8 	.word	0x0801b0b8
 80054f4:	0801af1c 	.word	0x0801af1c
 80054f8:	0801af24 	.word	0x0801af24
 80054fc:	0801aebc 	.word	0x0801aebc
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	2a01      	cmp	r2, #1
 8005506:	f47d ac4e 	bne.w	8002da6 <d_print_comp+0x1e2>
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b3e      	cmp	r3, #62	; 0x3e
 8005510:	f47d ac49 	bne.w	8002da6 <d_print_comp+0x1e2>
 8005514:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005518:	2fff      	cmp	r7, #255	; 0xff
 800551a:	d111      	bne.n	8005540 <d_print_comp+0x297c>
 800551c:	2600      	movs	r6, #0
 800551e:	4639      	mov	r1, r7
 8005520:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005524:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005528:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800552c:	4620      	mov	r0, r4
 800552e:	4798      	blx	r3
 8005530:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005534:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005538:	3301      	adds	r3, #1
 800553a:	4637      	mov	r7, r6
 800553c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005540:	1c7a      	adds	r2, r7, #1
 8005542:	2329      	movs	r3, #41	; 0x29
 8005544:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005548:	55e3      	strb	r3, [r4, r7]
 800554a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800554e:	686a      	ldr	r2, [r5, #4]
 8005550:	9905      	ldr	r1, [sp, #20]
 8005552:	f7fd bc2a 	b.w	8002daa <d_print_comp+0x1e6>
 8005556:	2a05      	cmp	r2, #5
 8005558:	f200 80a9 	bhi.w	80056ae <d_print_comp+0x2aea>
 800555c:	3b57      	subs	r3, #87	; 0x57
 800555e:	f7ff ba1d 	b.w	800499c <d_print_comp+0x1dd8>
 8005562:	4692      	mov	sl, r2
 8005564:	461a      	mov	r2, r3
 8005566:	e001      	b.n	800556c <d_print_comp+0x29a8>
 8005568:	6852      	ldr	r2, [r2, #4]
 800556a:	b342      	cbz	r2, 80055be <d_print_comp+0x29fa>
 800556c:	6811      	ldr	r1, [r2, #0]
 800556e:	4589      	cmp	r9, r1
 8005570:	d003      	beq.n	800557a <d_print_comp+0x29b6>
 8005572:	428d      	cmp	r5, r1
 8005574:	d1f8      	bne.n	8005568 <d_print_comp+0x29a4>
 8005576:	429a      	cmp	r2, r3
 8005578:	d0f6      	beq.n	8005568 <d_print_comp+0x29a4>
 800557a:	f109 0108 	add.w	r1, r9, #8
 800557e:	4620      	mov	r0, r4
 8005580:	f7fb f92a 	bl	80007d8 <d_lookup_template_argument.isra.10>
 8005584:	4681      	mov	r9, r0
 8005586:	b198      	cbz	r0, 80055b0 <d_print_comp+0x29ec>
 8005588:	f899 3000 	ldrb.w	r3, [r9]
 800558c:	2b2f      	cmp	r3, #47	; 0x2f
 800558e:	f47e acb6 	bne.w	8003efe <d_print_comp+0x133a>
 8005592:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8005596:	2900      	cmp	r1, #0
 8005598:	f6fe acb6 	blt.w	8003f08 <d_print_comp+0x1344>
 800559c:	4648      	mov	r0, r9
 800559e:	f7fb f905 	bl	80007ac <d_index_template_argument.part.9>
 80055a2:	4681      	mov	r9, r0
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f47e acaa 	bne.w	8003efe <d_print_comp+0x133a>
 80055aa:	b10f      	cbz	r7, 80055b0 <d_print_comp+0x29ec>
 80055ac:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 80055b0:	2301      	movs	r3, #1
 80055b2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80055b6:	686a      	ldr	r2, [r5, #4]
 80055b8:	9905      	ldr	r1, [sp, #20]
 80055ba:	f7fd bbf6 	b.w	8002daa <d_print_comp+0x1e6>
 80055be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80055c2:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 80055c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ca:	f109 0108 	add.w	r1, r9, #8
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7fb f902 	bl	80007d8 <d_lookup_template_argument.isra.10>
 80055d4:	2701      	movs	r7, #1
 80055d6:	4681      	mov	r9, r0
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1d5      	bne.n	8005588 <d_print_comp+0x29c4>
 80055dc:	e7e6      	b.n	80055ac <d_print_comp+0x29e8>
 80055de:	ab18      	add	r3, sp, #96	; 0x60
 80055e0:	9a01      	ldr	r2, [sp, #4]
 80055e2:	f843 2d48 	str.w	r2, [r3, #-72]!
 80055e6:	f8cd 801c 	str.w	r8, [sp, #28]
 80055ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80055ee:	e58e      	b.n	800510e <d_print_comp+0x254a>
 80055f0:	68eb      	ldr	r3, [r5, #12]
 80055f2:	f893 9000 	ldrb.w	r9, [r3]
 80055f6:	f1b9 0f00 	cmp.w	r9, #0
 80055fa:	f47d ae3f 	bne.w	800327c <d_print_comp+0x6b8>
 80055fe:	283d      	cmp	r0, #61	; 0x3d
 8005600:	f000 80e6 	beq.w	80057d0 <d_print_comp+0x2c0c>
 8005604:	4631      	mov	r1, r6
 8005606:	68ea      	ldr	r2, [r5, #12]
 8005608:	4620      	mov	r0, r4
 800560a:	f1a8 0802 	sub.w	r8, r8, #2
 800560e:	f7fd fad9 	bl	8002bc4 <d_print_comp>
 8005612:	f1b8 0f04 	cmp.w	r8, #4
 8005616:	f200 80d7 	bhi.w	80057c8 <d_print_comp+0x2c04>
 800561a:	e8df f008 	tbb	[pc, r8]
 800561e:	93b4      	.short	0x93b4
 8005620:	818a      	.short	0x818a
 8005622:	35          	.byte	0x35
 8005623:	00          	.byte	0x00
 8005624:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005628:	4631      	mov	r1, r6
 800562a:	4620      	mov	r0, r4
 800562c:	f000 ffd2 	bl	80065d4 <d_print_subexpr>
 8005630:	464a      	mov	r2, r9
 8005632:	4631      	mov	r1, r6
 8005634:	4620      	mov	r0, r4
 8005636:	f000 ff8d 	bl	8006554 <d_print_expr_op>
 800563a:	9905      	ldr	r1, [sp, #20]
 800563c:	686a      	ldr	r2, [r5, #4]
 800563e:	f7fd bbb4 	b.w	8002daa <d_print_comp+0x1e6>
 8005642:	4641      	mov	r1, r8
 8005644:	4620      	mov	r0, r4
 8005646:	f7fb f8d7 	bl	80007f8 <d_find_pack>
 800564a:	b1a8      	cbz	r0, 8005678 <d_print_comp+0x2ab4>
 800564c:	7803      	ldrb	r3, [r0, #0]
 800564e:	2b2f      	cmp	r3, #47	; 0x2f
 8005650:	d112      	bne.n	8005678 <d_print_comp+0x2ab4>
 8005652:	6883      	ldr	r3, [r0, #8]
 8005654:	b183      	cbz	r3, 8005678 <d_print_comp+0x2ab4>
 8005656:	68c0      	ldr	r0, [r0, #12]
 8005658:	3701      	adds	r7, #1
 800565a:	e7f6      	b.n	800564a <d_print_comp+0x2a86>
 800565c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	2a01      	cmp	r2, #1
 8005664:	f47f aad2 	bne.w	8004c0c <d_print_comp+0x2048>
 8005668:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	2a29      	cmp	r2, #41	; 0x29
 8005670:	bf08      	it	eq
 8005672:	4698      	moveq	r8, r3
 8005674:	f7ff baca 	b.w	8004c0c <d_print_comp+0x2048>
 8005678:	4639      	mov	r1, r7
 800567a:	4620      	mov	r0, r4
 800567c:	f7fb f970 	bl	8000960 <d_append_num>
 8005680:	9905      	ldr	r1, [sp, #20]
 8005682:	686a      	ldr	r2, [r5, #4]
 8005684:	f7fd bb91 	b.w	8002daa <d_print_comp+0x1e6>
 8005688:	2203      	movs	r2, #3
 800568a:	4994      	ldr	r1, [pc, #592]	; (80058dc <d_print_comp+0x2d18>)
 800568c:	4620      	mov	r0, r4
 800568e:	f7fa fe75 	bl	800037c <d_append_buffer>
 8005692:	9905      	ldr	r1, [sp, #20]
 8005694:	686a      	ldr	r2, [r5, #4]
 8005696:	f7fd bb88 	b.w	8002daa <d_print_comp+0x1e6>
 800569a:	2300      	movs	r3, #0
 800569c:	441e      	add	r6, r3
 800569e:	e5fa      	b.n	8005296 <d_print_comp+0x26d2>
 80056a0:	464a      	mov	r2, r9
 80056a2:	4631      	mov	r1, r6
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 ff55 	bl	8006554 <d_print_expr_op>
 80056aa:	f7fd bea9 	b.w	8003400 <d_print_comp+0x83c>
 80056ae:	2b5f      	cmp	r3, #95	; 0x5f
 80056b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056b4:	f47f a964 	bne.w	8004980 <d_print_comp+0x1dbc>
 80056b8:	28ff      	cmp	r0, #255	; 0xff
 80056ba:	f63f a961 	bhi.w	8004980 <d_print_comp+0x1dbc>
 80056be:	29ff      	cmp	r1, #255	; 0xff
 80056c0:	fa5f f980 	uxtb.w	r9, r0
 80056c4:	d10f      	bne.n	80056e6 <d_print_comp+0x2b22>
 80056c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056d2:	4620      	mov	r0, r4
 80056d4:	4798      	blx	r3
 80056d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056da:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80056de:	3301      	adds	r3, #1
 80056e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056e4:	2100      	movs	r1, #0
 80056e6:	1c4b      	adds	r3, r1, #1
 80056e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80056ec:	4657      	mov	r7, sl
 80056ee:	f804 9001 	strb.w	r9, [r4, r1]
 80056f2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056f6:	f7ff b935 	b.w	8004964 <d_print_comp+0x1da0>
 80056fa:	f8da a008 	ldr.w	sl, [sl, #8]
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	f43e ad01 	beq.w	8004108 <d_print_comp+0x1544>
 8005706:	e4d1      	b.n	80050ac <d_print_comp+0x24e8>
 8005708:	2205      	movs	r2, #5
 800570a:	4975      	ldr	r1, [pc, #468]	; (80058e0 <d_print_comp+0x2d1c>)
 800570c:	4620      	mov	r0, r4
 800570e:	f7fa fe35 	bl	800037c <d_append_buffer>
 8005712:	9905      	ldr	r1, [sp, #20]
 8005714:	686a      	ldr	r2, [r5, #4]
 8005716:	f7fd bb48 	b.w	8002daa <d_print_comp+0x1e6>
 800571a:	f8cc 0000 	str.w	r0, [ip]
 800571e:	e72c      	b.n	800557a <d_print_comp+0x29b6>
 8005720:	2202      	movs	r2, #2
 8005722:	4970      	ldr	r1, [pc, #448]	; (80058e4 <d_print_comp+0x2d20>)
 8005724:	4620      	mov	r0, r4
 8005726:	f7fa fe29 	bl	800037c <d_append_buffer>
 800572a:	9905      	ldr	r1, [sp, #20]
 800572c:	686a      	ldr	r2, [r5, #4]
 800572e:	f7fd bb3c 	b.w	8002daa <d_print_comp+0x1e6>
 8005732:	2202      	movs	r2, #2
 8005734:	496c      	ldr	r1, [pc, #432]	; (80058e8 <d_print_comp+0x2d24>)
 8005736:	4620      	mov	r0, r4
 8005738:	f7fa fe20 	bl	800037c <d_append_buffer>
 800573c:	9905      	ldr	r1, [sp, #20]
 800573e:	686a      	ldr	r2, [r5, #4]
 8005740:	f7fd bb33 	b.w	8002daa <d_print_comp+0x1e6>
 8005744:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005748:	2fff      	cmp	r7, #255	; 0xff
 800574a:	d111      	bne.n	8005770 <d_print_comp+0x2bac>
 800574c:	2600      	movs	r6, #0
 800574e:	4639      	mov	r1, r7
 8005750:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005754:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005758:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800575c:	4620      	mov	r0, r4
 800575e:	4798      	blx	r3
 8005760:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005764:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005768:	3301      	adds	r3, #1
 800576a:	4637      	mov	r7, r6
 800576c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005770:	1c7a      	adds	r2, r7, #1
 8005772:	236c      	movs	r3, #108	; 0x6c
 8005774:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005778:	55e3      	strb	r3, [r4, r7]
 800577a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800577e:	686a      	ldr	r2, [r5, #4]
 8005780:	9905      	ldr	r1, [sp, #20]
 8005782:	f7fd bb12 	b.w	8002daa <d_print_comp+0x1e6>
 8005786:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 800578a:	2fff      	cmp	r7, #255	; 0xff
 800578c:	d111      	bne.n	80057b2 <d_print_comp+0x2bee>
 800578e:	2600      	movs	r6, #0
 8005790:	4639      	mov	r1, r7
 8005792:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005796:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800579a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800579e:	4620      	mov	r0, r4
 80057a0:	4798      	blx	r3
 80057a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057a6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80057aa:	3301      	adds	r3, #1
 80057ac:	4637      	mov	r7, r6
 80057ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057b2:	1c7a      	adds	r2, r7, #1
 80057b4:	2375      	movs	r3, #117	; 0x75
 80057b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80057ba:	55e3      	strb	r3, [r4, r7]
 80057bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80057c0:	686a      	ldr	r2, [r5, #4]
 80057c2:	9905      	ldr	r1, [sp, #20]
 80057c4:	f7fd baf1 	b.w	8002daa <d_print_comp+0x1e6>
 80057c8:	9905      	ldr	r1, [sp, #20]
 80057ca:	686a      	ldr	r2, [r5, #4]
 80057cc:	f7fd baed 	b.w	8002daa <d_print_comp+0x1e6>
 80057d0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 80057d4:	2fff      	cmp	r7, #255	; 0xff
 80057d6:	d110      	bne.n	80057fa <d_print_comp+0x2c36>
 80057d8:	4639      	mov	r1, r7
 80057da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80057e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057e6:	4620      	mov	r0, r4
 80057e8:	4798      	blx	r3
 80057ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057ee:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80057f2:	3301      	adds	r3, #1
 80057f4:	464f      	mov	r7, r9
 80057f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	1c7a      	adds	r2, r7, #1
 80057fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005802:	55e3      	strb	r3, [r4, r7]
 8005804:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005808:	e6fc      	b.n	8005604 <d_print_comp+0x2a40>
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	6891      	ldr	r1, [r2, #8]
 800580e:	2901      	cmp	r1, #1
 8005810:	f47d aa69 	bne.w	8002ce6 <d_print_comp+0x122>
 8005814:	6852      	ldr	r2, [r2, #4]
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	2a3e      	cmp	r2, #62	; 0x3e
 800581a:	f47d aa64 	bne.w	8002ce6 <d_print_comp+0x122>
 800581e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
 8005822:	2fff      	cmp	r7, #255	; 0xff
 8005824:	d110      	bne.n	8005848 <d_print_comp+0x2c84>
 8005826:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800582a:	4639      	mov	r1, r7
 800582c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005830:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005834:	4620      	mov	r0, r4
 8005836:	4798      	blx	r3
 8005838:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800583c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005840:	3301      	adds	r3, #1
 8005842:	4647      	mov	r7, r8
 8005844:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005848:	2328      	movs	r3, #40	; 0x28
 800584a:	1c7a      	adds	r2, r7, #1
 800584c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005850:	55e3      	strb	r3, [r4, r7]
 8005852:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005856:	68ab      	ldr	r3, [r5, #8]
 8005858:	f7fd ba45 	b.w	8002ce6 <d_print_comp+0x122>
 800585c:	465a      	mov	r2, fp
 800585e:	4631      	mov	r1, r6
 8005860:	4620      	mov	r0, r4
 8005862:	f000 feb7 	bl	80065d4 <d_print_subexpr>
 8005866:	463a      	mov	r2, r7
 8005868:	4631      	mov	r1, r6
 800586a:	4620      	mov	r0, r4
 800586c:	f000 fe72 	bl	8006554 <d_print_expr_op>
 8005870:	4652      	mov	r2, sl
 8005872:	4631      	mov	r1, r6
 8005874:	4620      	mov	r0, r4
 8005876:	f000 fead 	bl	80065d4 <d_print_subexpr>
 800587a:	2203      	movs	r2, #3
 800587c:	491b      	ldr	r1, [pc, #108]	; (80058ec <d_print_comp+0x2d28>)
 800587e:	4620      	mov	r0, r4
 8005880:	f7fa fd7c 	bl	800037c <d_append_buffer>
 8005884:	464a      	mov	r2, r9
 8005886:	4631      	mov	r1, r6
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fea3 	bl	80065d4 <d_print_subexpr>
 800588e:	9905      	ldr	r1, [sp, #20]
 8005890:	686a      	ldr	r2, [r5, #4]
 8005892:	f7fd ba8a 	b.w	8002daa <d_print_comp+0x1e6>
 8005896:	9905      	ldr	r1, [sp, #20]
 8005898:	686a      	ldr	r2, [r5, #4]
 800589a:	f7fd ba86 	b.w	8002daa <d_print_comp+0x1e6>
 800589e:	9905      	ldr	r1, [sp, #20]
 80058a0:	686a      	ldr	r2, [r5, #4]
 80058a2:	f7fd ba82 	b.w	8002daa <d_print_comp+0x1e6>
 80058a6:	68d3      	ldr	r3, [r2, #12]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b29      	cmp	r3, #41	; 0x29
 80058ac:	bf1c      	itt	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	4631      	mov	r1, r6
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fe8b 	bl	80065d4 <d_print_subexpr>
 80058be:	f7fd ba22 	b.w	8002d06 <d_print_comp+0x142>
 80058c2:	463a      	mov	r2, r7
 80058c4:	4631      	mov	r1, r6
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 fe44 	bl	8006554 <d_print_expr_op>
 80058cc:	e5fe      	b.n	80054cc <d_print_comp+0x2908>
 80058ce:	2301      	movs	r3, #1
 80058d0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80058d4:	686a      	ldr	r2, [r5, #4]
 80058d6:	f7fd ba68 	b.w	8002daa <d_print_comp+0x1e6>
 80058da:	bf00      	nop
 80058dc:	0801b0d4 	.word	0x0801b0d4
 80058e0:	0801b0d8 	.word	0x0801b0d8
 80058e4:	0801b0d0 	.word	0x0801b0d0
 80058e8:	0801b0cc 	.word	0x0801b0cc
 80058ec:	0801b0c0 	.word	0x0801b0c0

080058f0 <d_print_mod>:
 80058f0:	7813      	ldrb	r3, [r2, #0]
 80058f2:	3b03      	subs	r3, #3
 80058f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f8:	4615      	mov	r5, r2
 80058fa:	4604      	mov	r4, r0
 80058fc:	460e      	mov	r6, r1
 80058fe:	2b4c      	cmp	r3, #76	; 0x4c
 8005900:	f200 82c8 	bhi.w	8005e94 <d_print_mod+0x5a4>
 8005904:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005908:	02c60075 	.word	0x02c60075
 800590c:	02c602c6 	.word	0x02c602c6
 8005910:	02c602c6 	.word	0x02c602c6
 8005914:	02c602c6 	.word	0x02c602c6
 8005918:	02c602c6 	.word	0x02c602c6
 800591c:	02c602c6 	.word	0x02c602c6
 8005920:	02c602c6 	.word	0x02c602c6
 8005924:	02c602c6 	.word	0x02c602c6
 8005928:	02c602c6 	.word	0x02c602c6
 800592c:	02c602c6 	.word	0x02c602c6
 8005930:	02c602c6 	.word	0x02c602c6
 8005934:	00a1007a 	.word	0x00a1007a
 8005938:	007a00c8 	.word	0x007a00c8
 800593c:	00c800a1 	.word	0x00c800a1
 8005940:	010a00ee 	.word	0x010a00ee
 8005944:	01480126 	.word	0x01480126
 8005948:	02790166 	.word	0x02790166
 800594c:	029f0252 	.word	0x029f0252
 8005950:	02c602c6 	.word	0x02c602c6
 8005954:	02c602c6 	.word	0x02c602c6
 8005958:	02c60184 	.word	0x02c60184
 800595c:	02c601cc 	.word	0x02c601cc
 8005960:	02c602c6 	.word	0x02c602c6
 8005964:	02c602c6 	.word	0x02c602c6
 8005968:	02c602c6 	.word	0x02c602c6
 800596c:	02c602c6 	.word	0x02c602c6
 8005970:	02c602c6 	.word	0x02c602c6
 8005974:	02c602c6 	.word	0x02c602c6
 8005978:	02c602c6 	.word	0x02c602c6
 800597c:	02c602c6 	.word	0x02c602c6
 8005980:	02c602c6 	.word	0x02c602c6
 8005984:	02c602c6 	.word	0x02c602c6
 8005988:	02c602c6 	.word	0x02c602c6
 800598c:	02c602c6 	.word	0x02c602c6
 8005990:	02c602c6 	.word	0x02c602c6
 8005994:	02c602c6 	.word	0x02c602c6
 8005998:	01f402c6 	.word	0x01f402c6
 800599c:	022a02c6 	.word	0x022a02c6
 80059a0:	004d      	.short	0x004d
 80059a2:	4fd7      	ldr	r7, [pc, #860]	; (8005d00 <d_print_mod+0x410>)
 80059a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80059a8:	f107 0806 	add.w	r8, r7, #6
 80059ac:	f04f 0900 	mov.w	r9, #0
 80059b0:	e016      	b.n	80059e0 <d_print_mod+0xf0>
 80059b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80059be:	4798      	blx	r3
 80059c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059ca:	2200      	movs	r2, #0
 80059cc:	2301      	movs	r3, #1
 80059ce:	4547      	cmp	r7, r8
 80059d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80059d4:	f804 a002 	strb.w	sl, [r4, r2]
 80059d8:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80059dc:	f000 825f 	beq.w	8005e9e <d_print_mod+0x5ae>
 80059e0:	2bff      	cmp	r3, #255	; 0xff
 80059e2:	4619      	mov	r1, r3
 80059e4:	4620      	mov	r0, r4
 80059e6:	f817 ab01 	ldrb.w	sl, [r7], #1
 80059ea:	d0e2      	beq.n	80059b2 <d_print_mod+0xc2>
 80059ec:	461a      	mov	r2, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	e7ed      	b.n	80059ce <d_print_mod+0xde>
 80059f2:	68aa      	ldr	r2, [r5, #8]
 80059f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	f7fd b8e4 	b.w	8002bc4 <d_print_comp>
 80059fc:	4dc1      	ldr	r5, [pc, #772]	; (8005d04 <d_print_mod+0x414>)
 80059fe:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a02:	f105 0609 	add.w	r6, r5, #9
 8005a06:	2700      	movs	r7, #0
 8005a08:	e016      	b.n	8005a38 <d_print_mod+0x148>
 8005a0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a12:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a16:	4798      	blx	r3
 8005a18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a22:	2200      	movs	r2, #0
 8005a24:	2301      	movs	r3, #1
 8005a26:	42ae      	cmp	r6, r5
 8005a28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a2c:	f804 8002 	strb.w	r8, [r4, r2]
 8005a30:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a34:	f000 80ea 	beq.w	8005c0c <d_print_mod+0x31c>
 8005a38:	2bff      	cmp	r3, #255	; 0xff
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a42:	d0e2      	beq.n	8005a0a <d_print_mod+0x11a>
 8005a44:	461a      	mov	r2, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	e7ed      	b.n	8005a26 <d_print_mod+0x136>
 8005a4a:	4daf      	ldr	r5, [pc, #700]	; (8005d08 <d_print_mod+0x418>)
 8005a4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a50:	f105 0609 	add.w	r6, r5, #9
 8005a54:	2700      	movs	r7, #0
 8005a56:	e016      	b.n	8005a86 <d_print_mod+0x196>
 8005a58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a60:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005a64:	4798      	blx	r3
 8005a66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a70:	2200      	movs	r2, #0
 8005a72:	2301      	movs	r3, #1
 8005a74:	42ae      	cmp	r6, r5
 8005a76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005a7a:	f804 8002 	strb.w	r8, [r4, r2]
 8005a7e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005a82:	f000 80c3 	beq.w	8005c0c <d_print_mod+0x31c>
 8005a86:	2bff      	cmp	r3, #255	; 0xff
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005a90:	d0e2      	beq.n	8005a58 <d_print_mod+0x168>
 8005a92:	461a      	mov	r2, r3
 8005a94:	3301      	adds	r3, #1
 8005a96:	e7ed      	b.n	8005a74 <d_print_mod+0x184>
 8005a98:	4d9c      	ldr	r5, [pc, #624]	; (8005d0c <d_print_mod+0x41c>)
 8005a9a:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005a9e:	1dae      	adds	r6, r5, #6
 8005aa0:	2700      	movs	r7, #0
 8005aa2:	e016      	b.n	8005ad2 <d_print_mod+0x1e2>
 8005aa4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005aa8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005aac:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005ab0:	4798      	blx	r3
 8005ab2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005abc:	2200      	movs	r2, #0
 8005abe:	2301      	movs	r3, #1
 8005ac0:	42b5      	cmp	r5, r6
 8005ac2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ac6:	f804 8002 	strb.w	r8, [r4, r2]
 8005aca:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005ace:	f000 809d 	beq.w	8005c0c <d_print_mod+0x31c>
 8005ad2:	2bff      	cmp	r3, #255	; 0xff
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005adc:	d0e2      	beq.n	8005aa4 <d_print_mod+0x1b4>
 8005ade:	461a      	mov	r2, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	e7ed      	b.n	8005ac0 <d_print_mod+0x1d0>
 8005ae4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ae8:	29ff      	cmp	r1, #255	; 0xff
 8005aea:	d10f      	bne.n	8005b0c <d_print_mod+0x21c>
 8005aec:	2500      	movs	r5, #0
 8005aee:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005af2:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005af6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005afa:	4798      	blx	r3
 8005afc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b00:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b04:	3301      	adds	r3, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	1c4b      	adds	r3, r1, #1
 8005b10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b14:	5462      	strb	r2, [r4, r1]
 8005b16:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b1a:	e05d      	b.n	8005bd8 <d_print_mod+0x2e8>
 8005b1c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b20:	29ff      	cmp	r1, #255	; 0xff
 8005b22:	d10f      	bne.n	8005b44 <d_print_mod+0x254>
 8005b24:	2500      	movs	r5, #0
 8005b26:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b2a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005b2e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b32:	4798      	blx	r3
 8005b34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b38:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b44:	2220      	movs	r2, #32
 8005b46:	1c4b      	adds	r3, r1, #1
 8005b48:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005b4c:	5462      	strb	r2, [r4, r1]
 8005b4e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005b52:	e154      	b.n	8005dfe <d_print_mod+0x50e>
 8005b54:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005b58:	29ff      	cmp	r1, #255	; 0xff
 8005b5a:	d10f      	bne.n	8005b7c <d_print_mod+0x28c>
 8005b5c:	2700      	movs	r7, #0
 8005b5e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005b62:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005b66:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005b6a:	4798      	blx	r3
 8005b6c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005b70:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005b74:	3301      	adds	r3, #1
 8005b76:	4639      	mov	r1, r7
 8005b78:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005b7c:	1c4a      	adds	r2, r1, #1
 8005b7e:	2320      	movs	r3, #32
 8005b80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005b84:	5463      	strb	r3, [r4, r1]
 8005b86:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	68ea      	ldr	r2, [r5, #12]
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	f7fd b816 	b.w	8002bc4 <d_print_comp>
 8005b98:	f011 0604 	ands.w	r6, r1, #4
 8005b9c:	d136      	bne.n	8005c0c <d_print_mod+0x31c>
 8005b9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005ba2:	29ff      	cmp	r1, #255	; 0xff
 8005ba4:	d10e      	bne.n	8005bc4 <d_print_mod+0x2d4>
 8005ba6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005baa:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005bae:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005bb2:	4798      	blx	r3
 8005bb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bb8:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005bc4:	232a      	movs	r3, #42	; 0x2a
 8005bc6:	1c4a      	adds	r2, r1, #1
 8005bc8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005bcc:	5463      	strb	r3, [r4, r1]
 8005bce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005bd2:	e01b      	b.n	8005c0c <d_print_mod+0x31c>
 8005bd4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005bd8:	2bff      	cmp	r3, #255	; 0xff
 8005bda:	f040 81a9 	bne.w	8005f30 <d_print_mod+0x640>
 8005bde:	2500      	movs	r5, #0
 8005be0:	4619      	mov	r1, r3
 8005be2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005be6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005bea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4798      	blx	r3
 8005bf2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2226      	movs	r2, #38	; 0x26
 8005c02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005c06:	54e2      	strb	r2, [r4, r3]
 8005c08:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005c14:	2b28      	cmp	r3, #40	; 0x28
 8005c16:	d019      	beq.n	8005c4c <d_print_mod+0x35c>
 8005c18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c1c:	29ff      	cmp	r1, #255	; 0xff
 8005c1e:	f040 818b 	bne.w	8005f38 <d_print_mod+0x648>
 8005c22:	2700      	movs	r7, #0
 8005c24:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005c28:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005c2c:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005c30:	4798      	blx	r3
 8005c32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c36:	3301      	adds	r3, #1
 8005c38:	4639      	mov	r1, r7
 8005c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2320      	movs	r3, #32
 8005c42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c46:	5463      	strb	r3, [r4, r1]
 8005c48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c4c:	68aa      	ldr	r2, [r5, #8]
 8005c4e:	4d30      	ldr	r5, [pc, #192]	; (8005d10 <d_print_mod+0x420>)
 8005c50:	4631      	mov	r1, r6
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7fc ffb6 	bl	8002bc4 <d_print_comp>
 8005c58:	1cee      	adds	r6, r5, #3
 8005c5a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005c5e:	2700      	movs	r7, #0
 8005c60:	e015      	b.n	8005c8e <d_print_mod+0x39e>
 8005c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005c66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005c6a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005c6e:	4798      	blx	r3
 8005c70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c74:	3301      	adds	r3, #1
 8005c76:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	42ae      	cmp	r6, r5
 8005c80:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005c84:	f804 8002 	strb.w	r8, [r4, r2]
 8005c88:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005c8c:	d0be      	beq.n	8005c0c <d_print_mod+0x31c>
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	4619      	mov	r1, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005c98:	d0e3      	beq.n	8005c62 <d_print_mod+0x372>
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	e7ee      	b.n	8005c7e <d_print_mod+0x38e>
 8005ca0:	4f1c      	ldr	r7, [pc, #112]	; (8005d14 <d_print_mod+0x424>)
 8005ca2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005ca6:	f107 080a 	add.w	r8, r7, #10
 8005caa:	f04f 0900 	mov.w	r9, #0
 8005cae:	e016      	b.n	8005cde <d_print_mod+0x3ee>
 8005cb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005cb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005cb8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005cbc:	4798      	blx	r3
 8005cbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2301      	movs	r3, #1
 8005ccc:	45b8      	cmp	r8, r7
 8005cce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cd2:	f804 a002 	strb.w	sl, [r4, r2]
 8005cd6:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005cda:	f000 811e 	beq.w	8005f1a <d_print_mod+0x62a>
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f817 ab01 	ldrb.w	sl, [r7], #1
 8005ce8:	d0e2      	beq.n	8005cb0 <d_print_mod+0x3c0>
 8005cea:	461a      	mov	r2, r3
 8005cec:	3301      	adds	r3, #1
 8005cee:	e7ed      	b.n	8005ccc <d_print_mod+0x3dc>
 8005cf0:	4d09      	ldr	r5, [pc, #36]	; (8005d18 <d_print_mod+0x428>)
 8005cf2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005cf6:	f105 0611 	add.w	r6, r5, #17
 8005cfa:	2700      	movs	r7, #0
 8005cfc:	e025      	b.n	8005d4a <d_print_mod+0x45a>
 8005cfe:	bf00      	nop
 8005d00:	0801b1c4 	.word	0x0801b1c4
 8005d04:	0801b183 	.word	0x0801b183
 8005d08:	0801b18f 	.word	0x0801b18f
 8005d0c:	0801b19c 	.word	0x0801b19c
 8005d10:	0801b1e8 	.word	0x0801b1e8
 8005d14:	0801b1ec 	.word	0x0801b1ec
 8005d18:	0801b1a3 	.word	0x0801b1a3
 8005d1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d24:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005d28:	4798      	blx	r3
 8005d2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d2e:	3301      	adds	r3, #1
 8005d30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d34:	2200      	movs	r2, #0
 8005d36:	2301      	movs	r3, #1
 8005d38:	42ae      	cmp	r6, r5
 8005d3a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d3e:	f804 8002 	strb.w	r8, [r4, r2]
 8005d42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005d46:	f43f af61 	beq.w	8005c0c <d_print_mod+0x31c>
 8005d4a:	2bff      	cmp	r3, #255	; 0xff
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005d54:	d0e2      	beq.n	8005d1c <d_print_mod+0x42c>
 8005d56:	461a      	mov	r2, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	e7ed      	b.n	8005d38 <d_print_mod+0x448>
 8005d5c:	4f77      	ldr	r7, [pc, #476]	; (8005f3c <d_print_mod+0x64c>)
 8005d5e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005d62:	f107 0809 	add.w	r8, r7, #9
 8005d66:	f04f 0900 	mov.w	r9, #0
 8005d6a:	e016      	b.n	8005d9a <d_print_mod+0x4aa>
 8005d6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005d78:	4798      	blx	r3
 8005d7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005d84:	2200      	movs	r2, #0
 8005d86:	2301      	movs	r3, #1
 8005d88:	4547      	cmp	r7, r8
 8005d8a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d8e:	f804 a002 	strb.w	sl, [r4, r2]
 8005d92:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d96:	f000 8082 	beq.w	8005e9e <d_print_mod+0x5ae>
 8005d9a:	2bff      	cmp	r3, #255	; 0xff
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8005da4:	d0e2      	beq.n	8005d6c <d_print_mod+0x47c>
 8005da6:	461a      	mov	r2, r3
 8005da8:	3301      	adds	r3, #1
 8005daa:	e7ed      	b.n	8005d88 <d_print_mod+0x498>
 8005dac:	4d64      	ldr	r5, [pc, #400]	; (8005f40 <d_print_mod+0x650>)
 8005dae:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005db2:	f105 0608 	add.w	r6, r5, #8
 8005db6:	2700      	movs	r7, #0
 8005db8:	e016      	b.n	8005de8 <d_print_mod+0x4f8>
 8005dba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dc2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005dc6:	4798      	blx	r3
 8005dc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	42ae      	cmp	r6, r5
 8005dd8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ddc:	f804 8002 	strb.w	r8, [r4, r2]
 8005de0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005de4:	f43f af12 	beq.w	8005c0c <d_print_mod+0x31c>
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	4619      	mov	r1, r3
 8005dec:	4620      	mov	r0, r4
 8005dee:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 8005df2:	d0e2      	beq.n	8005dba <d_print_mod+0x4ca>
 8005df4:	461a      	mov	r2, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	e7ed      	b.n	8005dd6 <d_print_mod+0x4e6>
 8005dfa:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005dfe:	4d51      	ldr	r5, [pc, #324]	; (8005f44 <d_print_mod+0x654>)
 8005e00:	2700      	movs	r7, #0
 8005e02:	1cae      	adds	r6, r5, #2
 8005e04:	e016      	b.n	8005e34 <d_print_mod+0x544>
 8005e06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e0e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e12:	4798      	blx	r3
 8005e14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2301      	movs	r3, #1
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e28:	f804 8002 	strb.w	r8, [r4, r2]
 8005e2c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e30:	f43f aeec 	beq.w	8005c0c <d_print_mod+0x31c>
 8005e34:	2bff      	cmp	r3, #255	; 0xff
 8005e36:	4619      	mov	r1, r3
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e3e:	d0e2      	beq.n	8005e06 <d_print_mod+0x516>
 8005e40:	461a      	mov	r2, r3
 8005e42:	3301      	adds	r3, #1
 8005e44:	e7ed      	b.n	8005e22 <d_print_mod+0x532>
 8005e46:	4d40      	ldr	r5, [pc, #256]	; (8005f48 <d_print_mod+0x658>)
 8005e48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005e4c:	f105 060a 	add.w	r6, r5, #10
 8005e50:	2700      	movs	r7, #0
 8005e52:	e016      	b.n	8005e82 <d_print_mod+0x592>
 8005e54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e5c:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005e60:	4798      	blx	r3
 8005e62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2301      	movs	r3, #1
 8005e70:	42b5      	cmp	r5, r6
 8005e72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005e76:	f804 8002 	strb.w	r8, [r4, r2]
 8005e7a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005e7e:	f43f aec5 	beq.w	8005c0c <d_print_mod+0x31c>
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	4619      	mov	r1, r3
 8005e86:	4620      	mov	r0, r4
 8005e88:	f815 8b01 	ldrb.w	r8, [r5], #1
 8005e8c:	d0e2      	beq.n	8005e54 <d_print_mod+0x564>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	e7ed      	b.n	8005e70 <d_print_mod+0x580>
 8005e94:	462a      	mov	r2, r5
 8005e96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9a:	f7fc be93 	b.w	8002bc4 <d_print_comp>
 8005e9e:	68ea      	ldr	r2, [r5, #12]
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	f43f aeb3 	beq.w	8005c0c <d_print_mod+0x31c>
 8005ea6:	2bff      	cmp	r3, #255	; 0xff
 8005ea8:	d144      	bne.n	8005f34 <d_print_mod+0x644>
 8005eaa:	2700      	movs	r7, #0
 8005eac:	4619      	mov	r1, r3
 8005eae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005eb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eb6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4798      	blx	r3
 8005ebe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ec2:	68ea      	ldr	r2, [r5, #12]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005eca:	463b      	mov	r3, r7
 8005ecc:	2101      	movs	r1, #1
 8005ece:	2528      	movs	r5, #40	; 0x28
 8005ed0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	54e5      	strb	r5, [r4, r3]
 8005eda:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005ede:	f7fc fe71 	bl	8002bc4 <d_print_comp>
 8005ee2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ee6:	29ff      	cmp	r1, #255	; 0xff
 8005ee8:	d120      	bne.n	8005f2c <d_print_mod+0x63c>
 8005eea:	2500      	movs	r5, #0
 8005eec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ef0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ef4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ef8:	4620      	mov	r0, r4
 8005efa:	4798      	blx	r3
 8005efc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005f00:	3301      	adds	r3, #1
 8005f02:	4629      	mov	r1, r5
 8005f04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005f08:	2201      	movs	r2, #1
 8005f0a:	2329      	movs	r3, #41	; 0x29
 8005f0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f10:	5463      	strb	r3, [r4, r1]
 8005f12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	68aa      	ldr	r2, [r5, #8]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7fc fe50 	bl	8002bc4 <d_print_comp>
 8005f24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f28:	29ff      	cmp	r1, #255	; 0xff
 8005f2a:	d0de      	beq.n	8005eea <d_print_mod+0x5fa>
 8005f2c:	1c4a      	adds	r2, r1, #1
 8005f2e:	e7ec      	b.n	8005f0a <d_print_mod+0x61a>
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	e665      	b.n	8005c00 <d_print_mod+0x310>
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	e7ca      	b.n	8005ece <d_print_mod+0x5de>
 8005f38:	1c4a      	adds	r2, r1, #1
 8005f3a:	e681      	b.n	8005c40 <d_print_mod+0x350>
 8005f3c:	0801b1b7 	.word	0x0801b1b7
 8005f40:	0801b1cf 	.word	0x0801b1cf
 8005f44:	0801b1cc 	.word	0x0801b1cc
 8005f48:	0801b1dc 	.word	0x0801b1dc

08005f4c <d_print_function_type.isra.15>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	460e      	mov	r6, r1
 8005f54:	4617      	mov	r7, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	b1d3      	cbz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	b9c3      	cbnz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f5e:	462a      	mov	r2, r5
 8005f60:	2001      	movs	r0, #1
 8005f62:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 800612c <d_print_function_type.isra.15+0x1e0>
 8005f66:	e001      	b.n	8005f6c <d_print_function_type.isra.15+0x20>
 8005f68:	6893      	ldr	r3, [r2, #8]
 8005f6a:	b98b      	cbnz	r3, 8005f90 <d_print_function_type.isra.15+0x44>
 8005f6c:	6853      	ldr	r3, [r2, #4]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3b19      	subs	r3, #25
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b12      	cmp	r3, #18
 8005f76:	fa00 f103 	lsl.w	r1, r0, r3
 8005f7a:	d806      	bhi.n	8005f8a <d_print_function_type.isra.15+0x3e>
 8005f7c:	ea11 0f0c 	tst.w	r1, ip
 8005f80:	f040 80c7 	bne.w	8006112 <d_print_function_type.isra.15+0x1c6>
 8005f84:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f88:	d154      	bne.n	8006034 <d_print_function_type.isra.15+0xe8>
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d1eb      	bne.n	8005f68 <d_print_function_type.isra.15+0x1c>
 8005f90:	2300      	movs	r3, #0
 8005f92:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f96:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 f8c6 	bl	8006130 <d_print_mod_list>
 8005fa4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fa8:	29ff      	cmp	r1, #255	; 0xff
 8005faa:	f040 80a4 	bne.w	80060f6 <d_print_function_type.isra.15+0x1aa>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005fb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4798      	blx	r3
 8005fc0:	2328      	movs	r3, #40	; 0x28
 8005fc2:	7023      	strb	r3, [r4, #0]
 8005fc4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	f000 8097 	beq.w	800610e <d_print_function_type.isra.15+0x1c2>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7fc fdee 	bl	8002bc4 <d_print_comp>
 8005fe8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005fec:	2bff      	cmp	r3, #255	; 0xff
 8005fee:	f040 808e 	bne.w	800610e <d_print_function_type.isra.15+0x1c2>
 8005ff2:	2700      	movs	r7, #0
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ffa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ffe:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8006002:	4620      	mov	r0, r4
 8006004:	4798      	blx	r3
 8006006:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006010:	463b      	mov	r3, r7
 8006012:	2201      	movs	r2, #1
 8006014:	2029      	movs	r0, #41	; 0x29
 8006016:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800601a:	4631      	mov	r1, r6
 800601c:	54e0      	strb	r0, [r4, r3]
 800601e:	462a      	mov	r2, r5
 8006020:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8006024:	2301      	movs	r3, #1
 8006026:	4620      	mov	r0, r4
 8006028:	f000 f882 	bl	8006130 <d_print_mod_list>
 800602c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8006030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006034:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006038:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800603c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006040:	2a28      	cmp	r2, #40	; 0x28
 8006042:	d01e      	beq.n	8006082 <d_print_function_type.isra.15+0x136>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d01c      	beq.n	8006082 <d_print_function_type.isra.15+0x136>
 8006048:	29ff      	cmp	r1, #255	; 0xff
 800604a:	d112      	bne.n	8006072 <d_print_function_type.isra.15+0x126>
 800604c:	2300      	movs	r3, #0
 800604e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006052:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800605a:	4620      	mov	r0, r4
 800605c:	4798      	blx	r3
 800605e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006062:	2220      	movs	r2, #32
 8006064:	3301      	adds	r3, #1
 8006066:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800606a:	7022      	strb	r2, [r4, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	1c4a      	adds	r2, r1, #1
 8006070:	e01a      	b.n	80060a8 <d_print_function_type.isra.15+0x15c>
 8006072:	1c4b      	adds	r3, r1, #1
 8006074:	2220      	movs	r2, #32
 8006076:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800607a:	5462      	strb	r2, [r4, r1]
 800607c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006080:	4619      	mov	r1, r3
 8006082:	29ff      	cmp	r1, #255	; 0xff
 8006084:	d1f3      	bne.n	800606e <d_print_function_type.isra.15+0x122>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800608e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006092:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006096:	4620      	mov	r0, r4
 8006098:	4798      	blx	r3
 800609a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800609e:	3301      	adds	r3, #1
 80060a0:	4641      	mov	r1, r8
 80060a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a6:	2201      	movs	r2, #1
 80060a8:	2328      	movs	r3, #40	; 0x28
 80060aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80060ae:	5463      	strb	r3, [r4, r1]
 80060b0:	f04f 0900 	mov.w	r9, #0
 80060b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80060b8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 80060bc:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80060c0:	464b      	mov	r3, r9
 80060c2:	462a      	mov	r2, r5
 80060c4:	4631      	mov	r1, r6
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 f832 	bl	8006130 <d_print_mod_list>
 80060cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80060d0:	2bff      	cmp	r3, #255	; 0xff
 80060d2:	d123      	bne.n	800611c <d_print_function_type.isra.15+0x1d0>
 80060d4:	4619      	mov	r1, r3
 80060d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060de:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80060e2:	4620      	mov	r0, r4
 80060e4:	4798      	blx	r3
 80060e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060ea:	2229      	movs	r2, #41	; 0x29
 80060ec:	3301      	adds	r3, #1
 80060ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060f2:	7022      	strb	r2, [r4, #0]
 80060f4:	2101      	movs	r1, #1
 80060f6:	2228      	movs	r2, #40	; 0x28
 80060f8:	1c4b      	adds	r3, r1, #1
 80060fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80060fe:	5462      	strb	r2, [r4, r1]
 8006100:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	2a00      	cmp	r2, #0
 8006108:	f43f af70 	beq.w	8005fec <d_print_function_type.isra.15+0xa0>
 800610c:	e768      	b.n	8005fe0 <d_print_function_type.isra.15+0x94>
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	e780      	b.n	8006014 <d_print_function_type.isra.15+0xc8>
 8006112:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8006116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800611a:	e793      	b.n	8006044 <d_print_function_type.isra.15+0xf8>
 800611c:	2229      	movs	r2, #41	; 0x29
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006124:	54e2      	strb	r2, [r4, r3]
 8006126:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800612a:	e73d      	b.n	8005fa8 <d_print_function_type.isra.15+0x5c>
 800612c:	00043107 	.word	0x00043107

08006130 <d_print_mod_list>:
 8006130:	2a00      	cmp	r2, #0
 8006132:	f000 80ac 	beq.w	800628e <d_print_mod_list+0x15e>
 8006136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613a:	461f      	mov	r7, r3
 800613c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8006140:	b089      	sub	sp, #36	; 0x24
 8006142:	4605      	mov	r5, r0
 8006144:	bb4b      	cbnz	r3, 800619a <d_print_mod_list+0x6a>
 8006146:	4688      	mov	r8, r1
 8006148:	4614      	mov	r4, r2
 800614a:	f04f 0901 	mov.w	r9, #1
 800614e:	e002      	b.n	8006156 <d_print_mod_list+0x26>
 8006150:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006154:	bb0b      	cbnz	r3, 800619a <d_print_mod_list+0x6a>
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	b9e3      	cbnz	r3, 8006194 <d_print_mod_list+0x64>
 800615a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800615e:	f89a 6000 	ldrb.w	r6, [sl]
 8006162:	4630      	mov	r0, r6
 8006164:	b917      	cbnz	r7, 800616c <d_print_mod_list+0x3c>
 8006166:	f7fa f93f 	bl	80003e8 <is_fnqual_component_type>
 800616a:	b998      	cbnz	r0, 8006194 <d_print_mod_list+0x64>
 800616c:	68e3      	ldr	r3, [r4, #12]
 800616e:	f8c4 9008 	str.w	r9, [r4, #8]
 8006172:	2e29      	cmp	r6, #41	; 0x29
 8006174:	f8d5 b110 	ldr.w	fp, [r5, #272]	; 0x110
 8006178:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800617c:	4652      	mov	r2, sl
 800617e:	4641      	mov	r1, r8
 8006180:	4628      	mov	r0, r5
 8006182:	d00d      	beq.n	80061a0 <d_print_mod_list+0x70>
 8006184:	2e2a      	cmp	r6, #42	; 0x2a
 8006186:	d015      	beq.n	80061b4 <d_print_mod_list+0x84>
 8006188:	2e02      	cmp	r6, #2
 800618a:	d01d      	beq.n	80061c8 <d_print_mod_list+0x98>
 800618c:	f7ff fbb0 	bl	80058f0 <d_print_mod>
 8006190:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 8006194:	6824      	ldr	r4, [r4, #0]
 8006196:	2c00      	cmp	r4, #0
 8006198:	d1da      	bne.n	8006150 <d_print_mod_list+0x20>
 800619a:	b009      	add	sp, #36	; 0x24
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	f10a 020c 	add.w	r2, sl, #12
 80061a6:	f7ff fed1 	bl	8005f4c <d_print_function_type.isra.15>
 80061aa:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061ae:	b009      	add	sp, #36	; 0x24
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	f10a 0208 	add.w	r2, sl, #8
 80061ba:	f000 f8f1 	bl	80063a0 <d_print_array_type.isra.14>
 80061be:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 80061c2:	b009      	add	sp, #36	; 0x24
 80061c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c8:	2600      	movs	r6, #0
 80061ca:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 80061ce:	f8da 2008 	ldr.w	r2, [sl, #8]
 80061d2:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80061d6:	f7fc fcf5 	bl	8002bc4 <d_print_comp>
 80061da:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 80061de:	f018 0704 	ands.w	r7, r8, #4
 80061e2:	d02f      	beq.n	8006244 <d_print_mod_list+0x114>
 80061e4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80061e8:	29ff      	cmp	r1, #255	; 0xff
 80061ea:	f040 80cf 	bne.w	800638c <d_print_mod_list+0x25c>
 80061ee:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80061f2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80061f6:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 80061fa:	4628      	mov	r0, r5
 80061fc:	4798      	blx	r3
 80061fe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006202:	3301      	adds	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 800620a:	2201      	movs	r2, #1
 800620c:	232e      	movs	r3, #46	; 0x2e
 800620e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8006212:	546b      	strb	r3, [r5, r1]
 8006214:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	68dc      	ldr	r4, [r3, #12]
 800621c:	7820      	ldrb	r0, [r4, #0]
 800621e:	2846      	cmp	r0, #70	; 0x46
 8006220:	d102      	bne.n	8006228 <d_print_mod_list+0xf8>
 8006222:	e035      	b.n	8006290 <d_print_mod_list+0x160>
 8006224:	68a4      	ldr	r4, [r4, #8]
 8006226:	7820      	ldrb	r0, [r4, #0]
 8006228:	f7fa f8de 	bl	80003e8 <is_fnqual_component_type>
 800622c:	2800      	cmp	r0, #0
 800622e:	d1f9      	bne.n	8006224 <d_print_mod_list+0xf4>
 8006230:	4622      	mov	r2, r4
 8006232:	4641      	mov	r1, r8
 8006234:	4628      	mov	r0, r5
 8006236:	f7fc fcc5 	bl	8002bc4 <d_print_comp>
 800623a:	f8c5 b110 	str.w	fp, [r5, #272]	; 0x110
 800623e:	b009      	add	sp, #36	; 0x24
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	4e52      	ldr	r6, [pc, #328]	; (8006390 <d_print_mod_list+0x260>)
 8006246:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 800624a:	f106 0902 	add.w	r9, r6, #2
 800624e:	e015      	b.n	800627c <d_print_mod_list+0x14c>
 8006250:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006254:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006258:	f885 70ff 	strb.w	r7, [r5, #255]	; 0xff
 800625c:	4798      	blx	r3
 800625e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006262:	3301      	adds	r3, #1
 8006264:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006268:	2200      	movs	r2, #0
 800626a:	2301      	movs	r3, #1
 800626c:	45b1      	cmp	r9, r6
 800626e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006272:	f805 a002 	strb.w	sl, [r5, r2]
 8006276:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800627a:	d0cd      	beq.n	8006218 <d_print_mod_list+0xe8>
 800627c:	2bff      	cmp	r3, #255	; 0xff
 800627e:	4619      	mov	r1, r3
 8006280:	4628      	mov	r0, r5
 8006282:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006286:	d0e3      	beq.n	8006250 <d_print_mod_list+0x120>
 8006288:	461a      	mov	r2, r3
 800628a:	3301      	adds	r3, #1
 800628c:	e7ee      	b.n	800626c <d_print_mod_list+0x13c>
 800628e:	4770      	bx	lr
 8006290:	4e40      	ldr	r6, [pc, #256]	; (8006394 <d_print_mod_list+0x264>)
 8006292:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006296:	f106 070d 	add.w	r7, r6, #13
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	e015      	b.n	80062cc <d_print_mod_list+0x19c>
 80062a0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80062a4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80062a8:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80062ac:	4798      	blx	r3
 80062ae:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80062b8:	2200      	movs	r2, #0
 80062ba:	2301      	movs	r3, #1
 80062bc:	42b7      	cmp	r7, r6
 80062be:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 80062c2:	f805 a002 	strb.w	sl, [r5, r2]
 80062c6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 80062ca:	d008      	beq.n	80062de <d_print_mod_list+0x1ae>
 80062cc:	2bff      	cmp	r3, #255	; 0xff
 80062ce:	4619      	mov	r1, r3
 80062d0:	4628      	mov	r0, r5
 80062d2:	f816 ab01 	ldrb.w	sl, [r6], #1
 80062d6:	d0e3      	beq.n	80062a0 <d_print_mod_list+0x170>
 80062d8:	461a      	mov	r2, r3
 80062da:	3301      	adds	r3, #1
 80062dc:	e7ee      	b.n	80062bc <d_print_mod_list+0x18c>
 80062de:	68e2      	ldr	r2, [r4, #12]
 80062e0:	492d      	ldr	r1, [pc, #180]	; (8006398 <d_print_mod_list+0x268>)
 80062e2:	3201      	adds	r2, #1
 80062e4:	a801      	add	r0, sp, #4
 80062e6:	f00e fea5 	bl	8015034 <sprintf>
 80062ea:	a801      	add	r0, sp, #4
 80062ec:	f000 fd5a 	bl	8006da4 <strlen>
 80062f0:	b328      	cbz	r0, 800633e <d_print_mod_list+0x20e>
 80062f2:	ae01      	add	r6, sp, #4
 80062f4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80062f8:	1837      	adds	r7, r6, r0
 80062fa:	f04f 0900 	mov.w	r9, #0
 80062fe:	e015      	b.n	800632c <d_print_mod_list+0x1fc>
 8006300:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006304:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006308:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800630c:	4798      	blx	r3
 800630e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8006312:	3301      	adds	r3, #1
 8006314:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006318:	2200      	movs	r2, #0
 800631a:	2301      	movs	r3, #1
 800631c:	42be      	cmp	r6, r7
 800631e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8006322:	f805 a002 	strb.w	sl, [r5, r2]
 8006326:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 800632a:	d00a      	beq.n	8006342 <d_print_mod_list+0x212>
 800632c:	2bff      	cmp	r3, #255	; 0xff
 800632e:	4619      	mov	r1, r3
 8006330:	4628      	mov	r0, r5
 8006332:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006336:	d0e3      	beq.n	8006300 <d_print_mod_list+0x1d0>
 8006338:	461a      	mov	r2, r3
 800633a:	3301      	adds	r3, #1
 800633c:	e7ee      	b.n	800631c <d_print_mod_list+0x1ec>
 800633e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8006342:	4e16      	ldr	r6, [pc, #88]	; (800639c <d_print_mod_list+0x26c>)
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	1cf7      	adds	r7, r6, #3
 800634a:	e016      	b.n	800637a <d_print_mod_list+0x24a>
 800634c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8006350:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8006354:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8006358:	4798      	blx	r3
 800635a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800635e:	3301      	adds	r3, #1
 8006360:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8006364:	2200      	movs	r2, #0
 8006366:	2301      	movs	r3, #1
 8006368:	42b7      	cmp	r7, r6
 800636a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 800636e:	f805 a002 	strb.w	sl, [r5, r2]
 8006372:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
 8006376:	f43f af55 	beq.w	8006224 <d_print_mod_list+0xf4>
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	4619      	mov	r1, r3
 800637e:	4628      	mov	r0, r5
 8006380:	f816 ab01 	ldrb.w	sl, [r6], #1
 8006384:	d0e2      	beq.n	800634c <d_print_mod_list+0x21c>
 8006386:	461a      	mov	r2, r3
 8006388:	3301      	adds	r3, #1
 800638a:	e7ed      	b.n	8006368 <d_print_mod_list+0x238>
 800638c:	1c4a      	adds	r2, r1, #1
 800638e:	e73d      	b.n	800620c <d_print_mod_list+0xdc>
 8006390:	0801af04 	.word	0x0801af04
 8006394:	0801af08 	.word	0x0801af08
 8006398:	0801aeb4 	.word	0x0801aeb4
 800639c:	0801af18 	.word	0x0801af18

080063a0 <d_print_array_type.isra.14>:
 80063a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	4690      	mov	r8, r2
 80063aa:	b15b      	cbz	r3, 80063c4 <d_print_array_type.isra.14+0x24>
 80063ac:	461e      	mov	r6, r3
 80063ae:	689d      	ldr	r5, [r3, #8]
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d042      	beq.n	800643a <d_print_array_type.isra.14+0x9a>
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f9      	bne.n	80063ae <d_print_array_type.isra.14+0xe>
 80063ba:	4632      	mov	r2, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff feb6 	bl	8006130 <d_print_mod_list>
 80063c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063c8:	29ff      	cmp	r1, #255	; 0xff
 80063ca:	f040 80b1 	bne.w	8006530 <d_print_array_type.isra.14+0x190>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063dc:	4620      	mov	r0, r4
 80063de:	4798      	blx	r3
 80063e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063e4:	2220      	movs	r2, #32
 80063e6:	3301      	adds	r3, #1
 80063e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063ec:	7022      	strb	r2, [r4, #0]
 80063ee:	2301      	movs	r3, #1
 80063f0:	225b      	movs	r2, #91	; 0x5b
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063f8:	54e2      	strb	r2, [r4, r3]
 80063fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80063fe:	f8d8 2000 	ldr.w	r2, [r8]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d140      	bne.n	8006488 <d_print_array_type.isra.14+0xe8>
 8006406:	29ff      	cmp	r1, #255	; 0xff
 8006408:	d145      	bne.n	8006496 <d_print_array_type.isra.14+0xf6>
 800640a:	2500      	movs	r5, #0
 800640c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006414:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006418:	4620      	mov	r0, r4
 800641a:	4798      	blx	r3
 800641c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006420:	3301      	adds	r3, #1
 8006422:	4629      	mov	r1, r5
 8006424:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006428:	2201      	movs	r2, #1
 800642a:	235d      	movs	r3, #93	; 0x5d
 800642c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006430:	5463      	strb	r3, [r4, r1]
 8006432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b2a      	cmp	r3, #42	; 0x2a
 8006440:	d12b      	bne.n	800649a <d_print_array_type.isra.14+0xfa>
 8006442:	462b      	mov	r3, r5
 8006444:	4632      	mov	r2, r6
 8006446:	4639      	mov	r1, r7
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fe71 	bl	8006130 <d_print_mod_list>
 800644e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d1cc      	bne.n	80063f0 <d_print_array_type.isra.14+0x50>
 8006456:	2200      	movs	r2, #0
 8006458:	4619      	mov	r1, r3
 800645a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800645e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006462:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006466:	4620      	mov	r0, r4
 8006468:	4798      	blx	r3
 800646a:	235b      	movs	r3, #91	; 0x5b
 800646c:	7023      	strb	r3, [r4, #0]
 800646e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006472:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006476:	f8d8 2000 	ldr.w	r2, [r8]
 800647a:	3301      	adds	r3, #1
 800647c:	2101      	movs	r1, #1
 800647e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006482:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006486:	b132      	cbz	r2, 8006496 <d_print_array_type.isra.14+0xf6>
 8006488:	4639      	mov	r1, r7
 800648a:	4620      	mov	r0, r4
 800648c:	f7fc fb9a 	bl	8002bc4 <d_print_comp>
 8006490:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006494:	e7b7      	b.n	8006406 <d_print_array_type.isra.14+0x66>
 8006496:	1c4a      	adds	r2, r1, #1
 8006498:	e7c7      	b.n	800642a <d_print_array_type.isra.14+0x8a>
 800649a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006550 <d_print_array_type.isra.14+0x1b0>
 800649e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064a2:	f109 0a02 	add.w	sl, r9, #2
 80064a6:	e016      	b.n	80064d6 <d_print_array_type.isra.14+0x136>
 80064a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80064ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80064b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80064b4:	4798      	blx	r3
 80064b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80064ba:	2200      	movs	r2, #0
 80064bc:	3301      	adds	r3, #1
 80064be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80064c2:	45ca      	cmp	sl, r9
 80064c4:	f04f 0301 	mov.w	r3, #1
 80064c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064cc:	f804 b002 	strb.w	fp, [r4, r2]
 80064d0:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064d4:	d010      	beq.n	80064f8 <d_print_array_type.isra.14+0x158>
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	4619      	mov	r1, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	f819 bb01 	ldrb.w	fp, [r9], #1
 80064e0:	d0e2      	beq.n	80064a8 <d_print_array_type.isra.14+0x108>
 80064e2:	461a      	mov	r2, r3
 80064e4:	45ca      	cmp	sl, r9
 80064e6:	f103 0301 	add.w	r3, r3, #1
 80064ea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80064ee:	f804 b002 	strb.w	fp, [r4, r2]
 80064f2:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80064f6:	d1ee      	bne.n	80064d6 <d_print_array_type.isra.14+0x136>
 80064f8:	2300      	movs	r3, #0
 80064fa:	4632      	mov	r2, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	4620      	mov	r0, r4
 8006500:	f7ff fe16 	bl	8006130 <d_print_mod_list>
 8006504:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006508:	2bff      	cmp	r3, #255	; 0xff
 800650a:	d119      	bne.n	8006540 <d_print_array_type.isra.14+0x1a0>
 800650c:	2200      	movs	r2, #0
 800650e:	4619      	mov	r1, r3
 8006510:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8006514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006518:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800651c:	4620      	mov	r0, r4
 800651e:	4798      	blx	r3
 8006520:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006524:	2229      	movs	r2, #41	; 0x29
 8006526:	3301      	adds	r3, #1
 8006528:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800652c:	7022      	strb	r2, [r4, #0]
 800652e:	2101      	movs	r1, #1
 8006530:	2220      	movs	r2, #32
 8006532:	1c4b      	adds	r3, r1, #1
 8006534:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006538:	5462      	strb	r2, [r4, r1]
 800653a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800653e:	e788      	b.n	8006452 <d_print_array_type.isra.14+0xb2>
 8006540:	2229      	movs	r2, #41	; 0x29
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006548:	54e2      	strb	r2, [r4, r3]
 800654a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800654e:	e73b      	b.n	80063c8 <d_print_array_type.isra.14+0x28>
 8006550:	0801b100 	.word	0x0801b100

08006554 <d_print_expr_op>:
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	7815      	ldrb	r5, [r2, #0]
 800655a:	2d31      	cmp	r5, #49	; 0x31
 800655c:	d003      	beq.n	8006566 <d_print_expr_op+0x12>
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f7fc bb2f 	b.w	8002bc4 <d_print_comp>
 8006566:	6893      	ldr	r3, [r2, #8]
 8006568:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 800656c:	b37e      	cbz	r6, 80065ce <d_print_expr_op+0x7a>
 800656e:	442e      	add	r6, r5
 8006570:	4604      	mov	r4, r0
 8006572:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006576:	3e01      	subs	r6, #1
 8006578:	3d01      	subs	r5, #1
 800657a:	2700      	movs	r7, #0
 800657c:	e016      	b.n	80065ac <d_print_expr_op+0x58>
 800657e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006582:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006586:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800658a:	4798      	blx	r3
 800658c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006590:	2200      	movs	r2, #0
 8006592:	3301      	adds	r3, #1
 8006594:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006598:	42b5      	cmp	r5, r6
 800659a:	f04f 0301 	mov.w	r3, #1
 800659e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065a2:	f804 8002 	strb.w	r8, [r4, r2]
 80065a6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065aa:	d010      	beq.n	80065ce <d_print_expr_op+0x7a>
 80065ac:	2bff      	cmp	r3, #255	; 0xff
 80065ae:	4619      	mov	r1, r3
 80065b0:	4620      	mov	r0, r4
 80065b2:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 80065b6:	d0e2      	beq.n	800657e <d_print_expr_op+0x2a>
 80065b8:	461a      	mov	r2, r3
 80065ba:	42b5      	cmp	r5, r6
 80065bc:	f103 0301 	add.w	r3, r3, #1
 80065c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80065c4:	f804 8002 	strb.w	r8, [r4, r2]
 80065c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80065cc:	d1ee      	bne.n	80065ac <d_print_expr_op+0x58>
 80065ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d2:	bf00      	nop

080065d4 <d_print_subexpr>:
 80065d4:	7813      	ldrb	r3, [r2, #0]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	d941      	bls.n	8006664 <d_print_subexpr+0x90>
 80065e0:	2b30      	cmp	r3, #48	; 0x30
 80065e2:	d03f      	beq.n	8006664 <d_print_subexpr+0x90>
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d03d      	beq.n	8006664 <d_print_subexpr+0x90>
 80065e8:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80065ec:	2fff      	cmp	r7, #255	; 0xff
 80065ee:	460e      	mov	r6, r1
 80065f0:	4615      	mov	r5, r2
 80065f2:	d13e      	bne.n	8006672 <d_print_subexpr+0x9e>
 80065f4:	f04f 0800 	mov.w	r8, #0
 80065f8:	4639      	mov	r1, r7
 80065fa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80065fe:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006602:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8006606:	4798      	blx	r3
 8006608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800660c:	3301      	adds	r3, #1
 800660e:	4647      	mov	r7, r8
 8006610:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006614:	2201      	movs	r2, #1
 8006616:	2328      	movs	r3, #40	; 0x28
 8006618:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800661c:	4631      	mov	r1, r6
 800661e:	55e3      	strb	r3, [r4, r7]
 8006620:	462a      	mov	r2, r5
 8006622:	4620      	mov	r0, r4
 8006624:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006628:	f7fc facc 	bl	8002bc4 <d_print_comp>
 800662c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006630:	29ff      	cmp	r1, #255	; 0xff
 8006632:	d11c      	bne.n	800666e <d_print_subexpr+0x9a>
 8006634:	2500      	movs	r5, #0
 8006636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800663a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800663e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006642:	4620      	mov	r0, r4
 8006644:	4798      	blx	r3
 8006646:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800664a:	3301      	adds	r3, #1
 800664c:	4629      	mov	r1, r5
 800664e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006652:	2201      	movs	r2, #1
 8006654:	2329      	movs	r3, #41	; 0x29
 8006656:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800665a:	5463      	strb	r3, [r4, r1]
 800665c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800666a:	f7fc baab 	b.w	8002bc4 <d_print_comp>
 800666e:	1c4a      	adds	r2, r1, #1
 8006670:	e7f0      	b.n	8006654 <d_print_subexpr+0x80>
 8006672:	1c7a      	adds	r2, r7, #1
 8006674:	e7cf      	b.n	8006616 <d_print_subexpr+0x42>
 8006676:	bf00      	nop

08006678 <d_maybe_print_fold_expression.isra.20>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	6892      	ldr	r2, [r2, #8]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	7816      	ldrb	r6, [r2, #0]
 8006682:	2e66      	cmp	r6, #102	; 0x66
 8006684:	b083      	sub	sp, #12
 8006686:	d003      	beq.n	8006690 <d_maybe_print_fold_expression.isra.20+0x18>
 8006688:	2000      	movs	r0, #0
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8006696:	f899 3000 	ldrb.w	r3, [r9]
 800669a:	2b3b      	cmp	r3, #59	; 0x3b
 800669c:	f000 8110 	beq.w	80068c0 <d_maybe_print_fold_expression.isra.20+0x248>
 80066a0:	2300      	movs	r3, #0
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a8:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 80066ac:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80066b0:	7853      	ldrb	r3, [r2, #1]
 80066b2:	3b4c      	subs	r3, #76	; 0x4c
 80066b4:	460d      	mov	r5, r1
 80066b6:	4604      	mov	r4, r0
 80066b8:	2b26      	cmp	r3, #38	; 0x26
 80066ba:	d83a      	bhi.n	8006732 <d_maybe_print_fold_expression.isra.20+0xba>
 80066bc:	e8df f003 	tbb	[pc, r3]
 80066c0:	393939b0 	.word	0x393939b0
 80066c4:	39b03939 	.word	0x39b03939
 80066c8:	39393939 	.word	0x39393939
 80066cc:	39393939 	.word	0x39393939
 80066d0:	39393939 	.word	0x39393939
 80066d4:	39393939 	.word	0x39393939
 80066d8:	39393939 	.word	0x39393939
 80066dc:	39393939 	.word	0x39393939
 80066e0:	39393989 	.word	0x39393989
 80066e4:	3939      	.short	0x3939
 80066e6:	3f          	.byte	0x3f
 80066e7:	00          	.byte	0x00
 80066e8:	4642      	mov	r2, r8
 80066ea:	4629      	mov	r1, r5
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ff31 	bl	8006554 <d_print_expr_op>
 80066f2:	9a01      	ldr	r2, [sp, #4]
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff ff6c 	bl	80065d4 <d_print_subexpr>
 80066fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006700:	29ff      	cmp	r1, #255	; 0xff
 8006702:	f040 80ea 	bne.w	80068da <d_maybe_print_fold_expression.isra.20+0x262>
 8006706:	2500      	movs	r5, #0
 8006708:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800670c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006710:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006714:	4620      	mov	r0, r4
 8006716:	4798      	blx	r3
 8006718:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800671c:	3301      	adds	r3, #1
 800671e:	4629      	mov	r1, r5
 8006720:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006724:	2201      	movs	r2, #1
 8006726:	2329      	movs	r3, #41	; 0x29
 8006728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800672c:	5463      	strb	r3, [r4, r1]
 800672e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006732:	2001      	movs	r0, #1
 8006734:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8006738:	b003      	add	sp, #12
 800673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006742:	29ff      	cmp	r1, #255	; 0xff
 8006744:	f040 80cb 	bne.w	80068de <d_maybe_print_fold_expression.isra.20+0x266>
 8006748:	2600      	movs	r6, #0
 800674a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800674e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006752:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006756:	4798      	blx	r3
 8006758:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800675c:	3301      	adds	r3, #1
 800675e:	4631      	mov	r1, r6
 8006760:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006764:	2201      	movs	r2, #1
 8006766:	2328      	movs	r3, #40	; 0x28
 8006768:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800676c:	4620      	mov	r0, r4
 800676e:	5463      	strb	r3, [r4, r1]
 8006770:	464a      	mov	r2, r9
 8006772:	4629      	mov	r1, r5
 8006774:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006778:	f7ff ff2c 	bl	80065d4 <d_print_subexpr>
 800677c:	4629      	mov	r1, r5
 800677e:	4d59      	ldr	r5, [pc, #356]	; (80068e4 <d_maybe_print_fold_expression.isra.20+0x26c>)
 8006780:	4642      	mov	r2, r8
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fee6 	bl	8006554 <d_print_expr_op>
 8006788:	1d2e      	adds	r6, r5, #4
 800678a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800678e:	f04f 0800 	mov.w	r8, #0
 8006792:	e015      	b.n	80067c0 <d_maybe_print_fold_expression.isra.20+0x148>
 8006794:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006798:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800679c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80067a0:	4798      	blx	r3
 80067a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067a6:	3301      	adds	r3, #1
 80067a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067ac:	2200      	movs	r2, #0
 80067ae:	2301      	movs	r3, #1
 80067b0:	42ae      	cmp	r6, r5
 80067b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80067b6:	f804 9002 	strb.w	r9, [r4, r2]
 80067ba:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80067be:	d0b8      	beq.n	8006732 <d_maybe_print_fold_expression.isra.20+0xba>
 80067c0:	2bff      	cmp	r3, #255	; 0xff
 80067c2:	4619      	mov	r1, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	f815 9b01 	ldrb.w	r9, [r5], #1
 80067ca:	d0e3      	beq.n	8006794 <d_maybe_print_fold_expression.isra.20+0x11c>
 80067cc:	461a      	mov	r2, r3
 80067ce:	3301      	adds	r3, #1
 80067d0:	e7ee      	b.n	80067b0 <d_maybe_print_fold_expression.isra.20+0x138>
 80067d2:	4e45      	ldr	r6, [pc, #276]	; (80068e8 <d_maybe_print_fold_expression.isra.20+0x270>)
 80067d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80067d8:	f106 0a04 	add.w	sl, r6, #4
 80067dc:	e017      	b.n	800680e <d_maybe_print_fold_expression.isra.20+0x196>
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80067e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80067ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80067ee:	4798      	blx	r3
 80067f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80067fa:	2200      	movs	r2, #0
 80067fc:	2301      	movs	r3, #1
 80067fe:	45b2      	cmp	sl, r6
 8006800:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006804:	f804 b002 	strb.w	fp, [r4, r2]
 8006808:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 800680c:	d05e      	beq.n	80068cc <d_maybe_print_fold_expression.isra.20+0x254>
 800680e:	2bff      	cmp	r3, #255	; 0xff
 8006810:	4619      	mov	r1, r3
 8006812:	4620      	mov	r0, r4
 8006814:	f816 bb01 	ldrb.w	fp, [r6], #1
 8006818:	d0e1      	beq.n	80067de <d_maybe_print_fold_expression.isra.20+0x166>
 800681a:	461a      	mov	r2, r3
 800681c:	3301      	adds	r3, #1
 800681e:	e7ee      	b.n	80067fe <d_maybe_print_fold_expression.isra.20+0x186>
 8006820:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006824:	2bff      	cmp	r3, #255	; 0xff
 8006826:	d110      	bne.n	800684a <d_maybe_print_fold_expression.isra.20+0x1d2>
 8006828:	2600      	movs	r6, #0
 800682a:	4619      	mov	r1, r3
 800682c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006830:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8006834:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8006838:	4798      	blx	r3
 800683a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800683e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006848:	4633      	mov	r3, r6
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8006850:	464a      	mov	r2, r9
 8006852:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006856:	4620      	mov	r0, r4
 8006858:	f804 c003 	strb.w	ip, [r4, r3]
 800685c:	4629      	mov	r1, r5
 800685e:	f884 c104 	strb.w	ip, [r4, #260]	; 0x104
 8006862:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80068ec <d_maybe_print_fold_expression.isra.20+0x274>
 8006866:	f7ff feb5 	bl	80065d4 <d_print_subexpr>
 800686a:	4642      	mov	r2, r8
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fe70 	bl	8006554 <d_print_expr_op>
 8006874:	f109 0a03 	add.w	sl, r9, #3
 8006878:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800687c:	2600      	movs	r6, #0
 800687e:	e016      	b.n	80068ae <d_maybe_print_fold_expression.isra.20+0x236>
 8006880:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006884:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006888:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800688c:	4798      	blx	r3
 800688e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006892:	3301      	adds	r3, #1
 8006894:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006898:	2200      	movs	r2, #0
 800689a:	2301      	movs	r3, #1
 800689c:	45d1      	cmp	r9, sl
 800689e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80068a2:	f804 b002 	strb.w	fp, [r4, r2]
 80068a6:	f884 b104 	strb.w	fp, [r4, #260]	; 0x104
 80068aa:	f43f af1d 	beq.w	80066e8 <d_maybe_print_fold_expression.isra.20+0x70>
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	4619      	mov	r1, r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	f819 bb01 	ldrb.w	fp, [r9], #1
 80068b8:	d0e2      	beq.n	8006880 <d_maybe_print_fold_expression.isra.20+0x208>
 80068ba:	461a      	mov	r2, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	e7ed      	b.n	800689c <d_maybe_print_fold_expression.isra.20+0x224>
 80068c0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80068ca:	e6eb      	b.n	80066a4 <d_maybe_print_fold_expression.isra.20+0x2c>
 80068cc:	4642      	mov	r2, r8
 80068ce:	4629      	mov	r1, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff fe3f 	bl	8006554 <d_print_expr_op>
 80068d6:	464a      	mov	r2, r9
 80068d8:	e70c      	b.n	80066f4 <d_maybe_print_fold_expression.isra.20+0x7c>
 80068da:	1c4a      	adds	r2, r1, #1
 80068dc:	e723      	b.n	8006726 <d_maybe_print_fold_expression.isra.20+0xae>
 80068de:	1c4a      	adds	r2, r1, #1
 80068e0:	e741      	b.n	8006766 <d_maybe_print_fold_expression.isra.20+0xee>
 80068e2:	bf00      	nop
 80068e4:	0801b200 	.word	0x0801b200
 80068e8:	0801b1f8 	.word	0x0801b1f8
 80068ec:	0801b104 	.word	0x0801b104

080068f0 <d_demangle_callback.constprop.22>:
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	b0e5      	sub	sp, #404	; 0x194
 80068f6:	f890 a000 	ldrb.w	sl, [r0]
 80068fa:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 80068fe:	af00      	add	r7, sp, #0
 8006900:	4605      	mov	r5, r0
 8006902:	4688      	mov	r8, r1
 8006904:	4616      	mov	r6, r2
 8006906:	f000 80f3 	beq.w	8006af0 <d_demangle_callback.constprop.22+0x200>
 800690a:	2208      	movs	r2, #8
 800690c:	49bb      	ldr	r1, [pc, #748]	; (8006bfc <d_demangle_callback.constprop.22+0x30c>)
 800690e:	4628      	mov	r0, r5
 8006910:	f00e fbb0 	bl	8015074 <strncmp>
 8006914:	b948      	cbnz	r0, 800692a <d_demangle_callback.constprop.22+0x3a>
 8006916:	7a2b      	ldrb	r3, [r5, #8]
 8006918:	2b2e      	cmp	r3, #46	; 0x2e
 800691a:	f000 80d8 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 800691e:	2b5f      	cmp	r3, #95	; 0x5f
 8006920:	f000 80d5 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 8006924:	2b24      	cmp	r3, #36	; 0x24
 8006926:	f000 80d2 	beq.w	8006ace <d_demangle_callback.constprop.22+0x1de>
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fa38 	bl	8006da4 <strlen>
 8006934:	0142      	lsls	r2, r0, #5
 8006936:	0083      	lsls	r3, r0, #2
 8006938:	3208      	adds	r2, #8
 800693a:	330a      	adds	r3, #10
 800693c:	ebad 0d02 	sub.w	sp, sp, r2
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	2400      	movs	r4, #0
 8006946:	46eb      	mov	fp, sp
 8006948:	1829      	adds	r1, r5, r0
 800694a:	ebad 0d03 	sub.w	sp, sp, r3
 800694e:	2211      	movs	r2, #17
 8006950:	0043      	lsls	r3, r0, #1
 8006952:	f1b9 0f01 	cmp.w	r9, #1
 8006956:	f8c7 b01c 	str.w	fp, [r7, #28]
 800695a:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 800695e:	60fd      	str	r5, [r7, #12]
 8006960:	61bd      	str	r5, [r7, #24]
 8006962:	6338      	str	r0, [r7, #48]	; 0x30
 8006964:	6139      	str	r1, [r7, #16]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	617a      	str	r2, [r7, #20]
 800696a:	623c      	str	r4, [r7, #32]
 800696c:	62fc      	str	r4, [r7, #44]	; 0x2c
 800696e:	e9c7 440d 	strd	r4, r4, [r7, #52]	; 0x34
 8006972:	e9c7 440f 	strd	r4, r4, [r7, #60]	; 0x3c
 8006976:	647c      	str	r4, [r7, #68]	; 0x44
 8006978:	f000 80a0 	beq.w	8006abc <d_demangle_callback.constprop.22+0x1cc>
 800697c:	f0c0 80bf 	bcc.w	8006afe <d_demangle_callback.constprop.22+0x20e>
 8006980:	7aea      	ldrb	r2, [r5, #11]
 8006982:	f1b9 0f02 	cmp.w	r9, #2
 8006986:	f105 0a0b 	add.w	sl, r5, #11
 800698a:	bf14      	ite	ne
 800698c:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006990:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006994:	2a5f      	cmp	r2, #95	; 0x5f
 8006996:	f8c7 a018 	str.w	sl, [r7, #24]
 800699a:	f000 80b9 	beq.w	8006b10 <d_demangle_callback.constprop.22+0x220>
 800699e:	4650      	mov	r0, sl
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	f000 f9ff 	bl	8006da4 <strlen>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f340 8123 	ble.w	8006bf4 <d_demangle_callback.constprop.22+0x304>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2201      	movs	r2, #1
 80069b2:	f8cb 3004 	str.w	r3, [fp, #4]
 80069b6:	623a      	str	r2, [r7, #32]
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f000 811b 	beq.w	8006bf4 <d_demangle_callback.constprop.22+0x304>
 80069be:	e9cb a002 	strd	sl, r0, [fp, #8]
 80069c2:	f88b 3000 	strb.w	r3, [fp]
 80069c6:	4649      	mov	r1, r9
 80069c8:	2300      	movs	r3, #0
 80069ca:	465a      	mov	r2, fp
 80069cc:	f107 000c 	add.w	r0, r7, #12
 80069d0:	f7f9 fc1e 	bl	8000210 <d_make_comp>
 80069d4:	69bc      	ldr	r4, [r7, #24]
 80069d6:	4605      	mov	r5, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f9e3 	bl	8006da4 <strlen>
 80069de:	1823      	adds	r3, r4, r0
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	f814 9000 	ldrb.w	r9, [r4, r0]
 80069e6:	f1b9 0f00 	cmp.w	r9, #0
 80069ea:	d16a      	bne.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d068      	beq.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 80069f0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80069f4:	462a      	mov	r2, r5
 80069f6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80069fa:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 80069fe:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 8006a02:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8006a06:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8006a0a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8006a0e:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 8006a12:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006a16:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006a1a:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 8006a1e:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 8006a22:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006a26:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006a2a:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006a2e:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 8006a32:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006a36:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006a3a:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006a3e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8006a42:	f7f9 fc49 	bl	80002d8 <d_count_templates_scopes>
 8006a46:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8006a4a:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
 8006a4e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	fb06 f603 	mul.w	r6, r6, r3
 8006a58:	461a      	mov	r2, r3
 8006a5a:	bfb8      	it	lt
 8006a5c:	2201      	movlt	r2, #1
 8006a5e:	00d2      	lsls	r2, r2, #3
 8006a60:	2e01      	cmp	r6, #1
 8006a62:	4633      	mov	r3, r6
 8006a64:	f102 0208 	add.w	r2, r2, #8
 8006a68:	bfb8      	it	lt
 8006a6a:	2301      	movlt	r3, #1
 8006a6c:	46e8      	mov	r8, sp
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	ebad 0d02 	sub.w	sp, sp, r2
 8006a74:	3308      	adds	r3, #8
 8006a76:	4669      	mov	r1, sp
 8006a78:	462a      	mov	r2, r5
 8006a7a:	ebad 0d03 	sub.w	sp, sp, r3
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8006a84:	2111      	movs	r1, #17
 8006a86:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006a8a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8006a8e:	f7fc f899 	bl	8002bc4 <d_print_comp>
 8006a92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006a96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a9a:	f804 9001 	strb.w	r9, [r4, r1]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	46c5      	mov	sp, r8
 8006aa2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006aa6:	4798      	blx	r3
 8006aa8:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8006aac:	fab0 f080 	clz	r0, r0
 8006ab0:	0940      	lsrs	r0, r0, #5
 8006ab2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	f1ba 0f5f 	cmp.w	sl, #95	; 0x5f
 8006ac0:	d033      	beq.n	8006b2a <d_demangle_callback.constprop.22+0x23a>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	7a6b      	ldrb	r3, [r5, #9]
 8006ad0:	2b44      	cmp	r3, #68	; 0x44
 8006ad2:	d002      	beq.n	8006ada <d_demangle_callback.constprop.22+0x1ea>
 8006ad4:	2b49      	cmp	r3, #73	; 0x49
 8006ad6:	f47f af28 	bne.w	800692a <d_demangle_callback.constprop.22+0x3a>
 8006ada:	7aaa      	ldrb	r2, [r5, #10]
 8006adc:	2a5f      	cmp	r2, #95	; 0x5f
 8006ade:	f47f af24 	bne.w	800692a <d_demangle_callback.constprop.22+0x3a>
 8006ae2:	2b49      	cmp	r3, #73	; 0x49
 8006ae4:	bf14      	ite	ne
 8006ae6:	f04f 0903 	movne.w	r9, #3
 8006aea:	f04f 0902 	moveq.w	r9, #2
 8006aee:	e71e      	b.n	800692e <d_demangle_callback.constprop.22+0x3e>
 8006af0:	7843      	ldrb	r3, [r0, #1]
 8006af2:	2b5a      	cmp	r3, #90	; 0x5a
 8006af4:	f47f af09 	bne.w	800690a <d_demangle_callback.constprop.22+0x1a>
 8006af8:	f04f 0901 	mov.w	r9, #1
 8006afc:	e717      	b.n	800692e <d_demangle_callback.constprop.22+0x3e>
 8006afe:	f107 000c 	add.w	r0, r7, #12
 8006b02:	f7fa fe05 	bl	8001710 <d_type>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	f893 9000 	ldrb.w	r9, [r3]
 8006b0e:	e76a      	b.n	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006b10:	7b2a      	ldrb	r2, [r5, #12]
 8006b12:	2a5a      	cmp	r2, #90	; 0x5a
 8006b14:	f47f af43 	bne.w	800699e <d_demangle_callback.constprop.22+0xae>
 8006b18:	350d      	adds	r5, #13
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f107 000c 	add.w	r0, r7, #12
 8006b20:	61bd      	str	r5, [r7, #24]
 8006b22:	f7fb fd37 	bl	8002594 <d_encoding>
 8006b26:	4683      	mov	fp, r0
 8006b28:	e74d      	b.n	80069c6 <d_demangle_callback.constprop.22+0xd6>
 8006b2a:	786b      	ldrb	r3, [r5, #1]
 8006b2c:	2b5a      	cmp	r3, #90	; 0x5a
 8006b2e:	d1c8      	bne.n	8006ac2 <d_demangle_callback.constprop.22+0x1d2>
 8006b30:	3502      	adds	r5, #2
 8006b32:	4649      	mov	r1, r9
 8006b34:	f107 000c 	add.w	r0, r7, #12
 8006b38:	61bd      	str	r5, [r7, #24]
 8006b3a:	f7fb fd2b 	bl	8002594 <d_encoding>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	07db      	lsls	r3, r3, #31
 8006b42:	4605      	mov	r5, r0
 8006b44:	d552      	bpl.n	8006bec <d_demangle_callback.constprop.22+0x2fc>
 8006b46:	69b8      	ldr	r0, [r7, #24]
 8006b48:	f890 9000 	ldrb.w	r9, [r0]
 8006b4c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006b50:	f47f af49 	bne.w	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006b54:	7843      	ldrb	r3, [r0, #1]
 8006b56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b5a:	2a19      	cmp	r2, #25
 8006b5c:	d93a      	bls.n	8006bd4 <d_demangle_callback.constprop.22+0x2e4>
 8006b5e:	2b5f      	cmp	r3, #95	; 0x5f
 8006b60:	d038      	beq.n	8006bd4 <d_demangle_callback.constprop.22+0x2e4>
 8006b62:	3b30      	subs	r3, #48	; 0x30
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d841      	bhi.n	8006bec <d_demangle_callback.constprop.22+0x2fc>
 8006b68:	7803      	ldrb	r3, [r0, #0]
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6e:	d112      	bne.n	8006b96 <d_demangle_callback.constprop.22+0x2a6>
 8006b70:	7853      	ldrb	r3, [r2, #1]
 8006b72:	3b30      	subs	r3, #48	; 0x30
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d80e      	bhi.n	8006b96 <d_demangle_callback.constprop.22+0x2a6>
 8006b78:	7893      	ldrb	r3, [r2, #2]
 8006b7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b7e:	2909      	cmp	r1, #9
 8006b80:	f102 0202 	add.w	r2, r2, #2
 8006b84:	d8f2      	bhi.n	8006b6c <d_demangle_callback.constprop.22+0x27c>
 8006b86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006b8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b8e:	2909      	cmp	r1, #9
 8006b90:	d9f9      	bls.n	8006b86 <d_demangle_callback.constprop.22+0x296>
 8006b92:	2b2e      	cmp	r3, #46	; 0x2e
 8006b94:	d0ec      	beq.n	8006b70 <d_demangle_callback.constprop.22+0x280>
 8006b96:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	61ba      	str	r2, [r7, #24]
 8006b9e:	da17      	bge.n	8006bd0 <d_demangle_callback.constprop.22+0x2e0>
 8006ba0:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8006ba4:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006ba8:	eb0e 030c 	add.w	r3, lr, ip
 8006bac:	3101      	adds	r1, #1
 8006bae:	1a12      	subs	r2, r2, r0
 8006bb0:	605c      	str	r4, [r3, #4]
 8006bb2:	6239      	str	r1, [r7, #32]
 8006bb4:	d00c      	beq.n	8006bd0 <d_demangle_callback.constprop.22+0x2e0>
 8006bb6:	605c      	str	r4, [r3, #4]
 8006bb8:	f80e 400c 	strb.w	r4, [lr, ip]
 8006bbc:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	214d      	movs	r1, #77	; 0x4d
 8006bc4:	f107 000c 	add.w	r0, r7, #12
 8006bc8:	f7f9 fb22 	bl	8000210 <d_make_comp>
 8006bcc:	4605      	mov	r5, r0
 8006bce:	e7ba      	b.n	8006b46 <d_demangle_callback.constprop.22+0x256>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e7f5      	b.n	8006bc0 <d_demangle_callback.constprop.22+0x2d0>
 8006bd4:	1c81      	adds	r1, r0, #2
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bdc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8006be0:	f1bc 0f19 	cmp.w	ip, #25
 8006be4:	d9f7      	bls.n	8006bd6 <d_demangle_callback.constprop.22+0x2e6>
 8006be6:	2b5f      	cmp	r3, #95	; 0x5f
 8006be8:	d0f5      	beq.n	8006bd6 <d_demangle_callback.constprop.22+0x2e6>
 8006bea:	e7bf      	b.n	8006b6c <d_demangle_callback.constprop.22+0x27c>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	f893 9000 	ldrb.w	r9, [r3]
 8006bf2:	e6f8      	b.n	80069e6 <d_demangle_callback.constprop.22+0xf6>
 8006bf4:	f04f 0b00 	mov.w	fp, #0
 8006bf8:	e6e5      	b.n	80069c6 <d_demangle_callback.constprop.22+0xd6>
 8006bfa:	bf00      	nop
 8006bfc:	0801ae90 	.word	0x0801ae90

08006c00 <__cxa_demangle>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	b380      	cbz	r0, 8006c6a <__cxa_demangle+0x6a>
 8006c08:	b101      	cbz	r1, 8006c0c <__cxa_demangle+0xc>
 8006c0a:	b372      	cbz	r2, 8006c6a <__cxa_demangle+0x6a>
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	4617      	mov	r7, r2
 8006c10:	460e      	mov	r6, r1
 8006c12:	466a      	mov	r2, sp
 8006c14:	492b      	ldr	r1, [pc, #172]	; (8006cc4 <__cxa_demangle+0xc4>)
 8006c16:	461d      	mov	r5, r3
 8006c18:	e9cd 4400 	strd	r4, r4, [sp]
 8006c1c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006c20:	f7ff fe66 	bl	80068f0 <d_demangle_callback.constprop.22>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d047      	beq.n	8006cb8 <__cxa_demangle+0xb8>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	9c00      	ldr	r4, [sp, #0]
 8006c2c:	b9ab      	cbnz	r3, 8006c5a <__cxa_demangle+0x5a>
 8006c2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c32:	b36c      	cbz	r4, 8006c90 <__cxa_demangle+0x90>
 8006c34:	b1b6      	cbz	r6, 8006c64 <__cxa_demangle+0x64>
 8006c36:	4620      	mov	r0, r4
 8006c38:	f000 f8b4 	bl	8006da4 <strlen>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	d31c      	bcc.n	8006c7c <__cxa_demangle+0x7c>
 8006c42:	4630      	mov	r0, r6
 8006c44:	f00d fd36 	bl	80146b4 <free>
 8006c48:	f8c7 8000 	str.w	r8, [r7]
 8006c4c:	b195      	cbz	r5, 8006c74 <__cxa_demangle+0x74>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4620      	mov	r0, r4
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	b004      	add	sp, #16
 8006c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5a:	b334      	cbz	r4, 8006caa <__cxa_demangle+0xaa>
 8006c5c:	f04f 0801 	mov.w	r8, #1
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	d1e8      	bne.n	8006c36 <__cxa_demangle+0x36>
 8006c64:	2f00      	cmp	r7, #0
 8006c66:	d1ef      	bne.n	8006c48 <__cxa_demangle+0x48>
 8006c68:	e7f0      	b.n	8006c4c <__cxa_demangle+0x4c>
 8006c6a:	b113      	cbz	r3, 8006c72 <__cxa_demangle+0x72>
 8006c6c:	f06f 0202 	mvn.w	r2, #2
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	2400      	movs	r4, #0
 8006c74:	4620      	mov	r0, r4
 8006c76:	b004      	add	sp, #16
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	1c42      	adds	r2, r0, #1
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4630      	mov	r0, r6
 8006c82:	f00d ff64 	bl	8014b4e <memcpy>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f00d fd14 	bl	80146b4 <free>
 8006c8c:	4634      	mov	r4, r6
 8006c8e:	e7dd      	b.n	8006c4c <__cxa_demangle+0x4c>
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	d0ee      	beq.n	8006c72 <__cxa_demangle+0x72>
 8006c94:	f1b8 0f01 	cmp.w	r8, #1
 8006c98:	d009      	beq.n	8006cae <__cxa_demangle+0xae>
 8006c9a:	2400      	movs	r4, #0
 8006c9c:	f06f 0301 	mvn.w	r3, #1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	b004      	add	sp, #16
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	d0e1      	beq.n	8006c72 <__cxa_demangle+0x72>
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	e7dd      	b.n	8006c74 <__cxa_demangle+0x74>
 8006cb8:	9800      	ldr	r0, [sp, #0]
 8006cba:	f00d fcfb 	bl	80146b4 <free>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	d1eb      	bne.n	8006c9a <__cxa_demangle+0x9a>
 8006cc2:	e7d6      	b.n	8006c72 <__cxa_demangle+0x72>
 8006cc4:	08000889 	.word	0x08000889

08006cc8 <__gcclibcxx_demangle_callback>:
 8006cc8:	b160      	cbz	r0, 8006ce4 <__gcclibcxx_demangle_callback+0x1c>
 8006cca:	b508      	push	{r3, lr}
 8006ccc:	b139      	cbz	r1, 8006cde <__gcclibcxx_demangle_callback+0x16>
 8006cce:	f7ff fe0f 	bl	80068f0 <d_demangle_callback.constprop.22>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	bf0c      	ite	eq
 8006cd6:	f06f 0001 	mvneq.w	r0, #1
 8006cda:	2000      	movne	r0, #0
 8006cdc:	bd08      	pop	{r3, pc}
 8006cde:	f06f 0002 	mvn.w	r0, #2
 8006ce2:	bd08      	pop	{r3, pc}
 8006ce4:	f06f 0002 	mvn.w	r0, #2
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	0000      	movs	r0, r0
	...

08006cf0 <memchr>:
 8006cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006cf4:	2a10      	cmp	r2, #16
 8006cf6:	db2b      	blt.n	8006d50 <memchr+0x60>
 8006cf8:	f010 0f07 	tst.w	r0, #7
 8006cfc:	d008      	beq.n	8006d10 <memchr+0x20>
 8006cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d02:	3a01      	subs	r2, #1
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d02d      	beq.n	8006d64 <memchr+0x74>
 8006d08:	f010 0f07 	tst.w	r0, #7
 8006d0c:	b342      	cbz	r2, 8006d60 <memchr+0x70>
 8006d0e:	d1f6      	bne.n	8006cfe <memchr+0xe>
 8006d10:	b4f0      	push	{r4, r5, r6, r7}
 8006d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8006d1a:	f022 0407 	bic.w	r4, r2, #7
 8006d1e:	f07f 0700 	mvns.w	r7, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006d28:	3c08      	subs	r4, #8
 8006d2a:	ea85 0501 	eor.w	r5, r5, r1
 8006d2e:	ea86 0601 	eor.w	r6, r6, r1
 8006d32:	fa85 f547 	uadd8	r5, r5, r7
 8006d36:	faa3 f587 	sel	r5, r3, r7
 8006d3a:	fa86 f647 	uadd8	r6, r6, r7
 8006d3e:	faa5 f687 	sel	r6, r5, r7
 8006d42:	b98e      	cbnz	r6, 8006d68 <memchr+0x78>
 8006d44:	d1ee      	bne.n	8006d24 <memchr+0x34>
 8006d46:	bcf0      	pop	{r4, r5, r6, r7}
 8006d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006d4c:	f002 0207 	and.w	r2, r2, #7
 8006d50:	b132      	cbz	r2, 8006d60 <memchr+0x70>
 8006d52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d56:	3a01      	subs	r2, #1
 8006d58:	ea83 0301 	eor.w	r3, r3, r1
 8006d5c:	b113      	cbz	r3, 8006d64 <memchr+0x74>
 8006d5e:	d1f8      	bne.n	8006d52 <memchr+0x62>
 8006d60:	2000      	movs	r0, #0
 8006d62:	4770      	bx	lr
 8006d64:	3801      	subs	r0, #1
 8006d66:	4770      	bx	lr
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	bf06      	itte	eq
 8006d6c:	4635      	moveq	r5, r6
 8006d6e:	3803      	subeq	r0, #3
 8006d70:	3807      	subne	r0, #7
 8006d72:	f015 0f01 	tst.w	r5, #1
 8006d76:	d107      	bne.n	8006d88 <memchr+0x98>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006d7e:	bf02      	ittt	eq
 8006d80:	3001      	addeq	r0, #1
 8006d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006d86:	3001      	addeq	r0, #1
 8006d88:	bcf0      	pop	{r4, r5, r6, r7}
 8006d8a:	3801      	subs	r0, #1
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <strcmp>:
 8006d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	2a01      	cmp	r2, #1
 8006d9a:	bf28      	it	cs
 8006d9c:	429a      	cmpcs	r2, r3
 8006d9e:	d0f7      	beq.n	8006d90 <strcmp>
 8006da0:	1ad0      	subs	r0, r2, r3
 8006da2:	4770      	bx	lr

08006da4 <strlen>:
 8006da4:	4603      	mov	r3, r0
 8006da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d1fb      	bne.n	8006da6 <strlen+0x2>
 8006dae:	1a18      	subs	r0, r3, r0
 8006db0:	3801      	subs	r0, #1
 8006db2:	4770      	bx	lr

08006db4 <__aeabi_drsub>:
 8006db4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006db8:	e002      	b.n	8006dc0 <__adddf3>
 8006dba:	bf00      	nop

08006dbc <__aeabi_dsub>:
 8006dbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006dc0 <__adddf3>:
 8006dc0:	b530      	push	{r4, r5, lr}
 8006dc2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006dc6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006dca:	ea94 0f05 	teq	r4, r5
 8006dce:	bf08      	it	eq
 8006dd0:	ea90 0f02 	teqeq	r0, r2
 8006dd4:	bf1f      	itttt	ne
 8006dd6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006dda:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006dde:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006de2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006de6:	f000 80e2 	beq.w	8006fae <__adddf3+0x1ee>
 8006dea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006dee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006df2:	bfb8      	it	lt
 8006df4:	426d      	neglt	r5, r5
 8006df6:	dd0c      	ble.n	8006e12 <__adddf3+0x52>
 8006df8:	442c      	add	r4, r5
 8006dfa:	ea80 0202 	eor.w	r2, r0, r2
 8006dfe:	ea81 0303 	eor.w	r3, r1, r3
 8006e02:	ea82 0000 	eor.w	r0, r2, r0
 8006e06:	ea83 0101 	eor.w	r1, r3, r1
 8006e0a:	ea80 0202 	eor.w	r2, r0, r2
 8006e0e:	ea81 0303 	eor.w	r3, r1, r3
 8006e12:	2d36      	cmp	r5, #54	; 0x36
 8006e14:	bf88      	it	hi
 8006e16:	bd30      	pophi	{r4, r5, pc}
 8006e18:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006e1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006e20:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006e24:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006e28:	d002      	beq.n	8006e30 <__adddf3+0x70>
 8006e2a:	4240      	negs	r0, r0
 8006e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006e30:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006e34:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006e38:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006e3c:	d002      	beq.n	8006e44 <__adddf3+0x84>
 8006e3e:	4252      	negs	r2, r2
 8006e40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006e44:	ea94 0f05 	teq	r4, r5
 8006e48:	f000 80a7 	beq.w	8006f9a <__adddf3+0x1da>
 8006e4c:	f1a4 0401 	sub.w	r4, r4, #1
 8006e50:	f1d5 0e20 	rsbs	lr, r5, #32
 8006e54:	db0d      	blt.n	8006e72 <__adddf3+0xb2>
 8006e56:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006e5a:	fa22 f205 	lsr.w	r2, r2, r5
 8006e5e:	1880      	adds	r0, r0, r2
 8006e60:	f141 0100 	adc.w	r1, r1, #0
 8006e64:	fa03 f20e 	lsl.w	r2, r3, lr
 8006e68:	1880      	adds	r0, r0, r2
 8006e6a:	fa43 f305 	asr.w	r3, r3, r5
 8006e6e:	4159      	adcs	r1, r3
 8006e70:	e00e      	b.n	8006e90 <__adddf3+0xd0>
 8006e72:	f1a5 0520 	sub.w	r5, r5, #32
 8006e76:	f10e 0e20 	add.w	lr, lr, #32
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006e80:	bf28      	it	cs
 8006e82:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006e86:	fa43 f305 	asr.w	r3, r3, r5
 8006e8a:	18c0      	adds	r0, r0, r3
 8006e8c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e94:	d507      	bpl.n	8006ea6 <__adddf3+0xe6>
 8006e96:	f04f 0e00 	mov.w	lr, #0
 8006e9a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006e9e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006ea2:	eb6e 0101 	sbc.w	r1, lr, r1
 8006ea6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006eaa:	d31b      	bcc.n	8006ee4 <__adddf3+0x124>
 8006eac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006eb0:	d30c      	bcc.n	8006ecc <__adddf3+0x10c>
 8006eb2:	0849      	lsrs	r1, r1, #1
 8006eb4:	ea5f 0030 	movs.w	r0, r0, rrx
 8006eb8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006ebc:	f104 0401 	add.w	r4, r4, #1
 8006ec0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006ec4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006ec8:	f080 809a 	bcs.w	8007000 <__adddf3+0x240>
 8006ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006ed0:	bf08      	it	eq
 8006ed2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006ed6:	f150 0000 	adcs.w	r0, r0, #0
 8006eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006ede:	ea41 0105 	orr.w	r1, r1, r5
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ee8:	4140      	adcs	r0, r0
 8006eea:	eb41 0101 	adc.w	r1, r1, r1
 8006eee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ef2:	f1a4 0401 	sub.w	r4, r4, #1
 8006ef6:	d1e9      	bne.n	8006ecc <__adddf3+0x10c>
 8006ef8:	f091 0f00 	teq	r1, #0
 8006efc:	bf04      	itt	eq
 8006efe:	4601      	moveq	r1, r0
 8006f00:	2000      	moveq	r0, #0
 8006f02:	fab1 f381 	clz	r3, r1
 8006f06:	bf08      	it	eq
 8006f08:	3320      	addeq	r3, #32
 8006f0a:	f1a3 030b 	sub.w	r3, r3, #11
 8006f0e:	f1b3 0220 	subs.w	r2, r3, #32
 8006f12:	da0c      	bge.n	8006f2e <__adddf3+0x16e>
 8006f14:	320c      	adds	r2, #12
 8006f16:	dd08      	ble.n	8006f2a <__adddf3+0x16a>
 8006f18:	f102 0c14 	add.w	ip, r2, #20
 8006f1c:	f1c2 020c 	rsb	r2, r2, #12
 8006f20:	fa01 f00c 	lsl.w	r0, r1, ip
 8006f24:	fa21 f102 	lsr.w	r1, r1, r2
 8006f28:	e00c      	b.n	8006f44 <__adddf3+0x184>
 8006f2a:	f102 0214 	add.w	r2, r2, #20
 8006f2e:	bfd8      	it	le
 8006f30:	f1c2 0c20 	rsble	ip, r2, #32
 8006f34:	fa01 f102 	lsl.w	r1, r1, r2
 8006f38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006f3c:	bfdc      	itt	le
 8006f3e:	ea41 010c 	orrle.w	r1, r1, ip
 8006f42:	4090      	lslle	r0, r2
 8006f44:	1ae4      	subs	r4, r4, r3
 8006f46:	bfa2      	ittt	ge
 8006f48:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006f4c:	4329      	orrge	r1, r5
 8006f4e:	bd30      	popge	{r4, r5, pc}
 8006f50:	ea6f 0404 	mvn.w	r4, r4
 8006f54:	3c1f      	subs	r4, #31
 8006f56:	da1c      	bge.n	8006f92 <__adddf3+0x1d2>
 8006f58:	340c      	adds	r4, #12
 8006f5a:	dc0e      	bgt.n	8006f7a <__adddf3+0x1ba>
 8006f5c:	f104 0414 	add.w	r4, r4, #20
 8006f60:	f1c4 0220 	rsb	r2, r4, #32
 8006f64:	fa20 f004 	lsr.w	r0, r0, r4
 8006f68:	fa01 f302 	lsl.w	r3, r1, r2
 8006f6c:	ea40 0003 	orr.w	r0, r0, r3
 8006f70:	fa21 f304 	lsr.w	r3, r1, r4
 8006f74:	ea45 0103 	orr.w	r1, r5, r3
 8006f78:	bd30      	pop	{r4, r5, pc}
 8006f7a:	f1c4 040c 	rsb	r4, r4, #12
 8006f7e:	f1c4 0220 	rsb	r2, r4, #32
 8006f82:	fa20 f002 	lsr.w	r0, r0, r2
 8006f86:	fa01 f304 	lsl.w	r3, r1, r4
 8006f8a:	ea40 0003 	orr.w	r0, r0, r3
 8006f8e:	4629      	mov	r1, r5
 8006f90:	bd30      	pop	{r4, r5, pc}
 8006f92:	fa21 f004 	lsr.w	r0, r1, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	bd30      	pop	{r4, r5, pc}
 8006f9a:	f094 0f00 	teq	r4, #0
 8006f9e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006fa2:	bf06      	itte	eq
 8006fa4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006fa8:	3401      	addeq	r4, #1
 8006faa:	3d01      	subne	r5, #1
 8006fac:	e74e      	b.n	8006e4c <__adddf3+0x8c>
 8006fae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006fb2:	bf18      	it	ne
 8006fb4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006fb8:	d029      	beq.n	800700e <__adddf3+0x24e>
 8006fba:	ea94 0f05 	teq	r4, r5
 8006fbe:	bf08      	it	eq
 8006fc0:	ea90 0f02 	teqeq	r0, r2
 8006fc4:	d005      	beq.n	8006fd2 <__adddf3+0x212>
 8006fc6:	ea54 0c00 	orrs.w	ip, r4, r0
 8006fca:	bf04      	itt	eq
 8006fcc:	4619      	moveq	r1, r3
 8006fce:	4610      	moveq	r0, r2
 8006fd0:	bd30      	pop	{r4, r5, pc}
 8006fd2:	ea91 0f03 	teq	r1, r3
 8006fd6:	bf1e      	ittt	ne
 8006fd8:	2100      	movne	r1, #0
 8006fda:	2000      	movne	r0, #0
 8006fdc:	bd30      	popne	{r4, r5, pc}
 8006fde:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006fe2:	d105      	bne.n	8006ff0 <__adddf3+0x230>
 8006fe4:	0040      	lsls	r0, r0, #1
 8006fe6:	4149      	adcs	r1, r1
 8006fe8:	bf28      	it	cs
 8006fea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006fee:	bd30      	pop	{r4, r5, pc}
 8006ff0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006ff4:	bf3c      	itt	cc
 8006ff6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006ffa:	bd30      	popcc	{r4, r5, pc}
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007004:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007008:	f04f 0000 	mov.w	r0, #0
 800700c:	bd30      	pop	{r4, r5, pc}
 800700e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007012:	bf1a      	itte	ne
 8007014:	4619      	movne	r1, r3
 8007016:	4610      	movne	r0, r2
 8007018:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800701c:	bf1c      	itt	ne
 800701e:	460b      	movne	r3, r1
 8007020:	4602      	movne	r2, r0
 8007022:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007026:	bf06      	itte	eq
 8007028:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800702c:	ea91 0f03 	teqeq	r1, r3
 8007030:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007034:	bd30      	pop	{r4, r5, pc}
 8007036:	bf00      	nop

08007038 <__aeabi_ui2d>:
 8007038:	f090 0f00 	teq	r0, #0
 800703c:	bf04      	itt	eq
 800703e:	2100      	moveq	r1, #0
 8007040:	4770      	bxeq	lr
 8007042:	b530      	push	{r4, r5, lr}
 8007044:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007048:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800704c:	f04f 0500 	mov.w	r5, #0
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	e750      	b.n	8006ef8 <__adddf3+0x138>
 8007056:	bf00      	nop

08007058 <__aeabi_i2d>:
 8007058:	f090 0f00 	teq	r0, #0
 800705c:	bf04      	itt	eq
 800705e:	2100      	moveq	r1, #0
 8007060:	4770      	bxeq	lr
 8007062:	b530      	push	{r4, r5, lr}
 8007064:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007068:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800706c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007070:	bf48      	it	mi
 8007072:	4240      	negmi	r0, r0
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	e73e      	b.n	8006ef8 <__adddf3+0x138>
 800707a:	bf00      	nop

0800707c <__aeabi_f2d>:
 800707c:	0042      	lsls	r2, r0, #1
 800707e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007082:	ea4f 0131 	mov.w	r1, r1, rrx
 8007086:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800708a:	bf1f      	itttt	ne
 800708c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007090:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007094:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007098:	4770      	bxne	lr
 800709a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800709e:	bf08      	it	eq
 80070a0:	4770      	bxeq	lr
 80070a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80070a6:	bf04      	itt	eq
 80070a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80070ac:	4770      	bxeq	lr
 80070ae:	b530      	push	{r4, r5, lr}
 80070b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80070b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80070b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80070bc:	e71c      	b.n	8006ef8 <__adddf3+0x138>
 80070be:	bf00      	nop

080070c0 <__aeabi_ul2d>:
 80070c0:	ea50 0201 	orrs.w	r2, r0, r1
 80070c4:	bf08      	it	eq
 80070c6:	4770      	bxeq	lr
 80070c8:	b530      	push	{r4, r5, lr}
 80070ca:	f04f 0500 	mov.w	r5, #0
 80070ce:	e00a      	b.n	80070e6 <__aeabi_l2d+0x16>

080070d0 <__aeabi_l2d>:
 80070d0:	ea50 0201 	orrs.w	r2, r0, r1
 80070d4:	bf08      	it	eq
 80070d6:	4770      	bxeq	lr
 80070d8:	b530      	push	{r4, r5, lr}
 80070da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80070de:	d502      	bpl.n	80070e6 <__aeabi_l2d+0x16>
 80070e0:	4240      	negs	r0, r0
 80070e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80070ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80070ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80070f2:	f43f aed8 	beq.w	8006ea6 <__adddf3+0xe6>
 80070f6:	f04f 0203 	mov.w	r2, #3
 80070fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80070fe:	bf18      	it	ne
 8007100:	3203      	addne	r2, #3
 8007102:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007106:	bf18      	it	ne
 8007108:	3203      	addne	r2, #3
 800710a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800710e:	f1c2 0320 	rsb	r3, r2, #32
 8007112:	fa00 fc03 	lsl.w	ip, r0, r3
 8007116:	fa20 f002 	lsr.w	r0, r0, r2
 800711a:	fa01 fe03 	lsl.w	lr, r1, r3
 800711e:	ea40 000e 	orr.w	r0, r0, lr
 8007122:	fa21 f102 	lsr.w	r1, r1, r2
 8007126:	4414      	add	r4, r2
 8007128:	e6bd      	b.n	8006ea6 <__adddf3+0xe6>
 800712a:	bf00      	nop

0800712c <__aeabi_dmul>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800713a:	bf1d      	ittte	ne
 800713c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007140:	ea94 0f0c 	teqne	r4, ip
 8007144:	ea95 0f0c 	teqne	r5, ip
 8007148:	f000 f8de 	bleq	8007308 <__aeabi_dmul+0x1dc>
 800714c:	442c      	add	r4, r5
 800714e:	ea81 0603 	eor.w	r6, r1, r3
 8007152:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007156:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800715a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800715e:	bf18      	it	ne
 8007160:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716c:	d038      	beq.n	80071e0 <__aeabi_dmul+0xb4>
 800716e:	fba0 ce02 	umull	ip, lr, r0, r2
 8007172:	f04f 0500 	mov.w	r5, #0
 8007176:	fbe1 e502 	umlal	lr, r5, r1, r2
 800717a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800717e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007182:	f04f 0600 	mov.w	r6, #0
 8007186:	fbe1 5603 	umlal	r5, r6, r1, r3
 800718a:	f09c 0f00 	teq	ip, #0
 800718e:	bf18      	it	ne
 8007190:	f04e 0e01 	orrne.w	lr, lr, #1
 8007194:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007198:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800719c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80071a0:	d204      	bcs.n	80071ac <__aeabi_dmul+0x80>
 80071a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80071a6:	416d      	adcs	r5, r5
 80071a8:	eb46 0606 	adc.w	r6, r6, r6
 80071ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80071b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80071b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80071b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80071bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80071c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80071c4:	bf88      	it	hi
 80071c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80071ca:	d81e      	bhi.n	800720a <__aeabi_dmul+0xde>
 80071cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80071d0:	bf08      	it	eq
 80071d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80071d6:	f150 0000 	adcs.w	r0, r0, #0
 80071da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80071e4:	ea46 0101 	orr.w	r1, r6, r1
 80071e8:	ea40 0002 	orr.w	r0, r0, r2
 80071ec:	ea81 0103 	eor.w	r1, r1, r3
 80071f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80071f4:	bfc2      	ittt	gt
 80071f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80071fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80071fe:	bd70      	popgt	{r4, r5, r6, pc}
 8007200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007204:	f04f 0e00 	mov.w	lr, #0
 8007208:	3c01      	subs	r4, #1
 800720a:	f300 80ab 	bgt.w	8007364 <__aeabi_dmul+0x238>
 800720e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007212:	bfde      	ittt	le
 8007214:	2000      	movle	r0, #0
 8007216:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800721a:	bd70      	pople	{r4, r5, r6, pc}
 800721c:	f1c4 0400 	rsb	r4, r4, #0
 8007220:	3c20      	subs	r4, #32
 8007222:	da35      	bge.n	8007290 <__aeabi_dmul+0x164>
 8007224:	340c      	adds	r4, #12
 8007226:	dc1b      	bgt.n	8007260 <__aeabi_dmul+0x134>
 8007228:	f104 0414 	add.w	r4, r4, #20
 800722c:	f1c4 0520 	rsb	r5, r4, #32
 8007230:	fa00 f305 	lsl.w	r3, r0, r5
 8007234:	fa20 f004 	lsr.w	r0, r0, r4
 8007238:	fa01 f205 	lsl.w	r2, r1, r5
 800723c:	ea40 0002 	orr.w	r0, r0, r2
 8007240:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800724c:	fa21 f604 	lsr.w	r6, r1, r4
 8007250:	eb42 0106 	adc.w	r1, r2, r6
 8007254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007258:	bf08      	it	eq
 800725a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f1c4 040c 	rsb	r4, r4, #12
 8007264:	f1c4 0520 	rsb	r5, r4, #32
 8007268:	fa00 f304 	lsl.w	r3, r0, r4
 800726c:	fa20 f005 	lsr.w	r0, r0, r5
 8007270:	fa01 f204 	lsl.w	r2, r1, r4
 8007274:	ea40 0002 	orr.w	r0, r0, r2
 8007278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800727c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007280:	f141 0100 	adc.w	r1, r1, #0
 8007284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007288:	bf08      	it	eq
 800728a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f1c4 0520 	rsb	r5, r4, #32
 8007294:	fa00 f205 	lsl.w	r2, r0, r5
 8007298:	ea4e 0e02 	orr.w	lr, lr, r2
 800729c:	fa20 f304 	lsr.w	r3, r0, r4
 80072a0:	fa01 f205 	lsl.w	r2, r1, r5
 80072a4:	ea43 0302 	orr.w	r3, r3, r2
 80072a8:	fa21 f004 	lsr.w	r0, r1, r4
 80072ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80072b0:	fa21 f204 	lsr.w	r2, r1, r4
 80072b4:	ea20 0002 	bic.w	r0, r0, r2
 80072b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80072bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80072c0:	bf08      	it	eq
 80072c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	f094 0f00 	teq	r4, #0
 80072cc:	d10f      	bne.n	80072ee <__aeabi_dmul+0x1c2>
 80072ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80072d2:	0040      	lsls	r0, r0, #1
 80072d4:	eb41 0101 	adc.w	r1, r1, r1
 80072d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072dc:	bf08      	it	eq
 80072de:	3c01      	subeq	r4, #1
 80072e0:	d0f7      	beq.n	80072d2 <__aeabi_dmul+0x1a6>
 80072e2:	ea41 0106 	orr.w	r1, r1, r6
 80072e6:	f095 0f00 	teq	r5, #0
 80072ea:	bf18      	it	ne
 80072ec:	4770      	bxne	lr
 80072ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80072f2:	0052      	lsls	r2, r2, #1
 80072f4:	eb43 0303 	adc.w	r3, r3, r3
 80072f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80072fc:	bf08      	it	eq
 80072fe:	3d01      	subeq	r5, #1
 8007300:	d0f7      	beq.n	80072f2 <__aeabi_dmul+0x1c6>
 8007302:	ea43 0306 	orr.w	r3, r3, r6
 8007306:	4770      	bx	lr
 8007308:	ea94 0f0c 	teq	r4, ip
 800730c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007310:	bf18      	it	ne
 8007312:	ea95 0f0c 	teqne	r5, ip
 8007316:	d00c      	beq.n	8007332 <__aeabi_dmul+0x206>
 8007318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800731c:	bf18      	it	ne
 800731e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007322:	d1d1      	bne.n	80072c8 <__aeabi_dmul+0x19c>
 8007324:	ea81 0103 	eor.w	r1, r1, r3
 8007328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007336:	bf06      	itte	eq
 8007338:	4610      	moveq	r0, r2
 800733a:	4619      	moveq	r1, r3
 800733c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007340:	d019      	beq.n	8007376 <__aeabi_dmul+0x24a>
 8007342:	ea94 0f0c 	teq	r4, ip
 8007346:	d102      	bne.n	800734e <__aeabi_dmul+0x222>
 8007348:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800734c:	d113      	bne.n	8007376 <__aeabi_dmul+0x24a>
 800734e:	ea95 0f0c 	teq	r5, ip
 8007352:	d105      	bne.n	8007360 <__aeabi_dmul+0x234>
 8007354:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8007358:	bf1c      	itt	ne
 800735a:	4610      	movne	r0, r2
 800735c:	4619      	movne	r1, r3
 800735e:	d10a      	bne.n	8007376 <__aeabi_dmul+0x24a>
 8007360:	ea81 0103 	eor.w	r1, r1, r3
 8007364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007368:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800736c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007370:	f04f 0000 	mov.w	r0, #0
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800737a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800737e:	bd70      	pop	{r4, r5, r6, pc}

08007380 <__aeabi_ddiv>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800738a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800738e:	bf1d      	ittte	ne
 8007390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007394:	ea94 0f0c 	teqne	r4, ip
 8007398:	ea95 0f0c 	teqne	r5, ip
 800739c:	f000 f8a7 	bleq	80074ee <__aeabi_ddiv+0x16e>
 80073a0:	eba4 0405 	sub.w	r4, r4, r5
 80073a4:	ea81 0e03 	eor.w	lr, r1, r3
 80073a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80073ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80073b0:	f000 8088 	beq.w	80074c4 <__aeabi_ddiv+0x144>
 80073b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80073b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80073bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80073c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80073c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80073c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80073cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80073d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80073d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80073d8:	429d      	cmp	r5, r3
 80073da:	bf08      	it	eq
 80073dc:	4296      	cmpeq	r6, r2
 80073de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80073e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80073e6:	d202      	bcs.n	80073ee <__aeabi_ddiv+0x6e>
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80073ee:	1ab6      	subs	r6, r6, r2
 80073f0:	eb65 0503 	sbc.w	r5, r5, r3
 80073f4:	085b      	lsrs	r3, r3, #1
 80073f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80073fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007402:	ebb6 0e02 	subs.w	lr, r6, r2
 8007406:	eb75 0e03 	sbcs.w	lr, r5, r3
 800740a:	bf22      	ittt	cs
 800740c:	1ab6      	subcs	r6, r6, r2
 800740e:	4675      	movcs	r5, lr
 8007410:	ea40 000c 	orrcs.w	r0, r0, ip
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	ea4f 0232 	mov.w	r2, r2, rrx
 800741a:	ebb6 0e02 	subs.w	lr, r6, r2
 800741e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007422:	bf22      	ittt	cs
 8007424:	1ab6      	subcs	r6, r6, r2
 8007426:	4675      	movcs	r5, lr
 8007428:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007432:	ebb6 0e02 	subs.w	lr, r6, r2
 8007436:	eb75 0e03 	sbcs.w	lr, r5, r3
 800743a:	bf22      	ittt	cs
 800743c:	1ab6      	subcs	r6, r6, r2
 800743e:	4675      	movcs	r5, lr
 8007440:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	ea4f 0232 	mov.w	r2, r2, rrx
 800744a:	ebb6 0e02 	subs.w	lr, r6, r2
 800744e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007452:	bf22      	ittt	cs
 8007454:	1ab6      	subcs	r6, r6, r2
 8007456:	4675      	movcs	r5, lr
 8007458:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800745c:	ea55 0e06 	orrs.w	lr, r5, r6
 8007460:	d018      	beq.n	8007494 <__aeabi_ddiv+0x114>
 8007462:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007466:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800746a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800746e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007472:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800747a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800747e:	d1c0      	bne.n	8007402 <__aeabi_ddiv+0x82>
 8007480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007484:	d10b      	bne.n	800749e <__aeabi_ddiv+0x11e>
 8007486:	ea41 0100 	orr.w	r1, r1, r0
 800748a:	f04f 0000 	mov.w	r0, #0
 800748e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007492:	e7b6      	b.n	8007402 <__aeabi_ddiv+0x82>
 8007494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007498:	bf04      	itt	eq
 800749a:	4301      	orreq	r1, r0
 800749c:	2000      	moveq	r0, #0
 800749e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80074a2:	bf88      	it	hi
 80074a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80074a8:	f63f aeaf 	bhi.w	800720a <__aeabi_dmul+0xde>
 80074ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80074b0:	bf04      	itt	eq
 80074b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80074b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80074ba:	f150 0000 	adcs.w	r0, r0, #0
 80074be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80074c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80074cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80074d0:	bfc2      	ittt	gt
 80074d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074da:	bd70      	popgt	{r4, r5, r6, pc}
 80074dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074e0:	f04f 0e00 	mov.w	lr, #0
 80074e4:	3c01      	subs	r4, #1
 80074e6:	e690      	b.n	800720a <__aeabi_dmul+0xde>
 80074e8:	ea45 0e06 	orr.w	lr, r5, r6
 80074ec:	e68d      	b.n	800720a <__aeabi_dmul+0xde>
 80074ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80074f2:	ea94 0f0c 	teq	r4, ip
 80074f6:	bf08      	it	eq
 80074f8:	ea95 0f0c 	teqeq	r5, ip
 80074fc:	f43f af3b 	beq.w	8007376 <__aeabi_dmul+0x24a>
 8007500:	ea94 0f0c 	teq	r4, ip
 8007504:	d10a      	bne.n	800751c <__aeabi_ddiv+0x19c>
 8007506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800750a:	f47f af34 	bne.w	8007376 <__aeabi_dmul+0x24a>
 800750e:	ea95 0f0c 	teq	r5, ip
 8007512:	f47f af25 	bne.w	8007360 <__aeabi_dmul+0x234>
 8007516:	4610      	mov	r0, r2
 8007518:	4619      	mov	r1, r3
 800751a:	e72c      	b.n	8007376 <__aeabi_dmul+0x24a>
 800751c:	ea95 0f0c 	teq	r5, ip
 8007520:	d106      	bne.n	8007530 <__aeabi_ddiv+0x1b0>
 8007522:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007526:	f43f aefd 	beq.w	8007324 <__aeabi_dmul+0x1f8>
 800752a:	4610      	mov	r0, r2
 800752c:	4619      	mov	r1, r3
 800752e:	e722      	b.n	8007376 <__aeabi_dmul+0x24a>
 8007530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007534:	bf18      	it	ne
 8007536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800753a:	f47f aec5 	bne.w	80072c8 <__aeabi_dmul+0x19c>
 800753e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007542:	f47f af0d 	bne.w	8007360 <__aeabi_dmul+0x234>
 8007546:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800754a:	f47f aeeb 	bne.w	8007324 <__aeabi_dmul+0x1f8>
 800754e:	e712      	b.n	8007376 <__aeabi_dmul+0x24a>

08007550 <__gedf2>:
 8007550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007554:	e006      	b.n	8007564 <__cmpdf2+0x4>
 8007556:	bf00      	nop

08007558 <__ledf2>:
 8007558:	f04f 0c01 	mov.w	ip, #1
 800755c:	e002      	b.n	8007564 <__cmpdf2+0x4>
 800755e:	bf00      	nop

08007560 <__cmpdf2>:
 8007560:	f04f 0c01 	mov.w	ip, #1
 8007564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800756c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007574:	bf18      	it	ne
 8007576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800757a:	d01b      	beq.n	80075b4 <__cmpdf2+0x54>
 800757c:	b001      	add	sp, #4
 800757e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8007582:	bf0c      	ite	eq
 8007584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007588:	ea91 0f03 	teqne	r1, r3
 800758c:	bf02      	ittt	eq
 800758e:	ea90 0f02 	teqeq	r0, r2
 8007592:	2000      	moveq	r0, #0
 8007594:	4770      	bxeq	lr
 8007596:	f110 0f00 	cmn.w	r0, #0
 800759a:	ea91 0f03 	teq	r1, r3
 800759e:	bf58      	it	pl
 80075a0:	4299      	cmppl	r1, r3
 80075a2:	bf08      	it	eq
 80075a4:	4290      	cmpeq	r0, r2
 80075a6:	bf2c      	ite	cs
 80075a8:	17d8      	asrcs	r0, r3, #31
 80075aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80075ae:	f040 0001 	orr.w	r0, r0, #1
 80075b2:	4770      	bx	lr
 80075b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80075b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075bc:	d102      	bne.n	80075c4 <__cmpdf2+0x64>
 80075be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80075c2:	d107      	bne.n	80075d4 <__cmpdf2+0x74>
 80075c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80075c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80075cc:	d1d6      	bne.n	800757c <__cmpdf2+0x1c>
 80075ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80075d2:	d0d3      	beq.n	800757c <__cmpdf2+0x1c>
 80075d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <__aeabi_cdrcmple>:
 80075dc:	4684      	mov	ip, r0
 80075de:	4610      	mov	r0, r2
 80075e0:	4662      	mov	r2, ip
 80075e2:	468c      	mov	ip, r1
 80075e4:	4619      	mov	r1, r3
 80075e6:	4663      	mov	r3, ip
 80075e8:	e000      	b.n	80075ec <__aeabi_cdcmpeq>
 80075ea:	bf00      	nop

080075ec <__aeabi_cdcmpeq>:
 80075ec:	b501      	push	{r0, lr}
 80075ee:	f7ff ffb7 	bl	8007560 <__cmpdf2>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	bf48      	it	mi
 80075f6:	f110 0f00 	cmnmi.w	r0, #0
 80075fa:	bd01      	pop	{r0, pc}

080075fc <__aeabi_dcmpeq>:
 80075fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007600:	f7ff fff4 	bl	80075ec <__aeabi_cdcmpeq>
 8007604:	bf0c      	ite	eq
 8007606:	2001      	moveq	r0, #1
 8007608:	2000      	movne	r0, #0
 800760a:	f85d fb08 	ldr.w	pc, [sp], #8
 800760e:	bf00      	nop

08007610 <__aeabi_dcmplt>:
 8007610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007614:	f7ff ffea 	bl	80075ec <__aeabi_cdcmpeq>
 8007618:	bf34      	ite	cc
 800761a:	2001      	movcc	r0, #1
 800761c:	2000      	movcs	r0, #0
 800761e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007622:	bf00      	nop

08007624 <__aeabi_dcmple>:
 8007624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007628:	f7ff ffe0 	bl	80075ec <__aeabi_cdcmpeq>
 800762c:	bf94      	ite	ls
 800762e:	2001      	movls	r0, #1
 8007630:	2000      	movhi	r0, #0
 8007632:	f85d fb08 	ldr.w	pc, [sp], #8
 8007636:	bf00      	nop

08007638 <__aeabi_dcmpge>:
 8007638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800763c:	f7ff ffce 	bl	80075dc <__aeabi_cdrcmple>
 8007640:	bf94      	ite	ls
 8007642:	2001      	movls	r0, #1
 8007644:	2000      	movhi	r0, #0
 8007646:	f85d fb08 	ldr.w	pc, [sp], #8
 800764a:	bf00      	nop

0800764c <__aeabi_dcmpgt>:
 800764c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007650:	f7ff ffc4 	bl	80075dc <__aeabi_cdrcmple>
 8007654:	bf34      	ite	cc
 8007656:	2001      	movcc	r0, #1
 8007658:	2000      	movcs	r0, #0
 800765a:	f85d fb08 	ldr.w	pc, [sp], #8
 800765e:	bf00      	nop

08007660 <__aeabi_dcmpun>:
 8007660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007668:	d102      	bne.n	8007670 <__aeabi_dcmpun+0x10>
 800766a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800766e:	d10a      	bne.n	8007686 <__aeabi_dcmpun+0x26>
 8007670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007678:	d102      	bne.n	8007680 <__aeabi_dcmpun+0x20>
 800767a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800767e:	d102      	bne.n	8007686 <__aeabi_dcmpun+0x26>
 8007680:	f04f 0000 	mov.w	r0, #0
 8007684:	4770      	bx	lr
 8007686:	f04f 0001 	mov.w	r0, #1
 800768a:	4770      	bx	lr

0800768c <__aeabi_d2iz>:
 800768c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007690:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007694:	d215      	bcs.n	80076c2 <__aeabi_d2iz+0x36>
 8007696:	d511      	bpl.n	80076bc <__aeabi_d2iz+0x30>
 8007698:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800769c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80076a0:	d912      	bls.n	80076c8 <__aeabi_d2iz+0x3c>
 80076a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80076a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80076ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80076b2:	fa23 f002 	lsr.w	r0, r3, r2
 80076b6:	bf18      	it	ne
 80076b8:	4240      	negne	r0, r0
 80076ba:	4770      	bx	lr
 80076bc:	f04f 0000 	mov.w	r0, #0
 80076c0:	4770      	bx	lr
 80076c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80076c6:	d105      	bne.n	80076d4 <__aeabi_d2iz+0x48>
 80076c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80076cc:	bf08      	it	eq
 80076ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80076d2:	4770      	bx	lr
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <__aeabi_uldivmod>:
 80076dc:	b953      	cbnz	r3, 80076f4 <__aeabi_uldivmod+0x18>
 80076de:	b94a      	cbnz	r2, 80076f4 <__aeabi_uldivmod+0x18>
 80076e0:	2900      	cmp	r1, #0
 80076e2:	bf08      	it	eq
 80076e4:	2800      	cmpeq	r0, #0
 80076e6:	bf1c      	itt	ne
 80076e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80076ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80076f0:	f001 b8f8 	b.w	80088e4 <__aeabi_idiv0>
 80076f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80076f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80076fc:	f000 f806 	bl	800770c <__udivmoddi4>
 8007700:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007708:	b004      	add	sp, #16
 800770a:	4770      	bx	lr

0800770c <__udivmoddi4>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	9e08      	ldr	r6, [sp, #32]
 8007712:	4604      	mov	r4, r0
 8007714:	4688      	mov	r8, r1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d14b      	bne.n	80077b2 <__udivmoddi4+0xa6>
 800771a:	428a      	cmp	r2, r1
 800771c:	4615      	mov	r5, r2
 800771e:	d967      	bls.n	80077f0 <__udivmoddi4+0xe4>
 8007720:	fab2 f282 	clz	r2, r2
 8007724:	b14a      	cbz	r2, 800773a <__udivmoddi4+0x2e>
 8007726:	f1c2 0720 	rsb	r7, r2, #32
 800772a:	fa01 f302 	lsl.w	r3, r1, r2
 800772e:	fa20 f707 	lsr.w	r7, r0, r7
 8007732:	4095      	lsls	r5, r2
 8007734:	ea47 0803 	orr.w	r8, r7, r3
 8007738:	4094      	lsls	r4, r2
 800773a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800773e:	0c23      	lsrs	r3, r4, #16
 8007740:	fbb8 f7fe 	udiv	r7, r8, lr
 8007744:	fa1f fc85 	uxth.w	ip, r5
 8007748:	fb0e 8817 	mls	r8, lr, r7, r8
 800774c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007750:	fb07 f10c 	mul.w	r1, r7, ip
 8007754:	4299      	cmp	r1, r3
 8007756:	d909      	bls.n	800776c <__udivmoddi4+0x60>
 8007758:	18eb      	adds	r3, r5, r3
 800775a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800775e:	f080 811b 	bcs.w	8007998 <__udivmoddi4+0x28c>
 8007762:	4299      	cmp	r1, r3
 8007764:	f240 8118 	bls.w	8007998 <__udivmoddi4+0x28c>
 8007768:	3f02      	subs	r7, #2
 800776a:	442b      	add	r3, r5
 800776c:	1a5b      	subs	r3, r3, r1
 800776e:	b2a4      	uxth	r4, r4
 8007770:	fbb3 f0fe 	udiv	r0, r3, lr
 8007774:	fb0e 3310 	mls	r3, lr, r0, r3
 8007778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800777c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007780:	45a4      	cmp	ip, r4
 8007782:	d909      	bls.n	8007798 <__udivmoddi4+0x8c>
 8007784:	192c      	adds	r4, r5, r4
 8007786:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800778a:	f080 8107 	bcs.w	800799c <__udivmoddi4+0x290>
 800778e:	45a4      	cmp	ip, r4
 8007790:	f240 8104 	bls.w	800799c <__udivmoddi4+0x290>
 8007794:	3802      	subs	r0, #2
 8007796:	442c      	add	r4, r5
 8007798:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800779c:	eba4 040c 	sub.w	r4, r4, ip
 80077a0:	2700      	movs	r7, #0
 80077a2:	b11e      	cbz	r6, 80077ac <__udivmoddi4+0xa0>
 80077a4:	40d4      	lsrs	r4, r2
 80077a6:	2300      	movs	r3, #0
 80077a8:	e9c6 4300 	strd	r4, r3, [r6]
 80077ac:	4639      	mov	r1, r7
 80077ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b2:	428b      	cmp	r3, r1
 80077b4:	d909      	bls.n	80077ca <__udivmoddi4+0xbe>
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	f000 80eb 	beq.w	8007992 <__udivmoddi4+0x286>
 80077bc:	2700      	movs	r7, #0
 80077be:	e9c6 0100 	strd	r0, r1, [r6]
 80077c2:	4638      	mov	r0, r7
 80077c4:	4639      	mov	r1, r7
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	fab3 f783 	clz	r7, r3
 80077ce:	2f00      	cmp	r7, #0
 80077d0:	d147      	bne.n	8007862 <__udivmoddi4+0x156>
 80077d2:	428b      	cmp	r3, r1
 80077d4:	d302      	bcc.n	80077dc <__udivmoddi4+0xd0>
 80077d6:	4282      	cmp	r2, r0
 80077d8:	f200 80fa 	bhi.w	80079d0 <__udivmoddi4+0x2c4>
 80077dc:	1a84      	subs	r4, r0, r2
 80077de:	eb61 0303 	sbc.w	r3, r1, r3
 80077e2:	2001      	movs	r0, #1
 80077e4:	4698      	mov	r8, r3
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	d0e0      	beq.n	80077ac <__udivmoddi4+0xa0>
 80077ea:	e9c6 4800 	strd	r4, r8, [r6]
 80077ee:	e7dd      	b.n	80077ac <__udivmoddi4+0xa0>
 80077f0:	b902      	cbnz	r2, 80077f4 <__udivmoddi4+0xe8>
 80077f2:	deff      	udf	#255	; 0xff
 80077f4:	fab2 f282 	clz	r2, r2
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	f040 808f 	bne.w	800791c <__udivmoddi4+0x210>
 80077fe:	1b49      	subs	r1, r1, r5
 8007800:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007804:	fa1f f885 	uxth.w	r8, r5
 8007808:	2701      	movs	r7, #1
 800780a:	fbb1 fcfe 	udiv	ip, r1, lr
 800780e:	0c23      	lsrs	r3, r4, #16
 8007810:	fb0e 111c 	mls	r1, lr, ip, r1
 8007814:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007818:	fb08 f10c 	mul.w	r1, r8, ip
 800781c:	4299      	cmp	r1, r3
 800781e:	d907      	bls.n	8007830 <__udivmoddi4+0x124>
 8007820:	18eb      	adds	r3, r5, r3
 8007822:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007826:	d202      	bcs.n	800782e <__udivmoddi4+0x122>
 8007828:	4299      	cmp	r1, r3
 800782a:	f200 80cd 	bhi.w	80079c8 <__udivmoddi4+0x2bc>
 800782e:	4684      	mov	ip, r0
 8007830:	1a59      	subs	r1, r3, r1
 8007832:	b2a3      	uxth	r3, r4
 8007834:	fbb1 f0fe 	udiv	r0, r1, lr
 8007838:	fb0e 1410 	mls	r4, lr, r0, r1
 800783c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007840:	fb08 f800 	mul.w	r8, r8, r0
 8007844:	45a0      	cmp	r8, r4
 8007846:	d907      	bls.n	8007858 <__udivmoddi4+0x14c>
 8007848:	192c      	adds	r4, r5, r4
 800784a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800784e:	d202      	bcs.n	8007856 <__udivmoddi4+0x14a>
 8007850:	45a0      	cmp	r8, r4
 8007852:	f200 80b6 	bhi.w	80079c2 <__udivmoddi4+0x2b6>
 8007856:	4618      	mov	r0, r3
 8007858:	eba4 0408 	sub.w	r4, r4, r8
 800785c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007860:	e79f      	b.n	80077a2 <__udivmoddi4+0x96>
 8007862:	f1c7 0c20 	rsb	ip, r7, #32
 8007866:	40bb      	lsls	r3, r7
 8007868:	fa22 fe0c 	lsr.w	lr, r2, ip
 800786c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007870:	fa01 f407 	lsl.w	r4, r1, r7
 8007874:	fa20 f50c 	lsr.w	r5, r0, ip
 8007878:	fa21 f30c 	lsr.w	r3, r1, ip
 800787c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007880:	4325      	orrs	r5, r4
 8007882:	fbb3 f9f8 	udiv	r9, r3, r8
 8007886:	0c2c      	lsrs	r4, r5, #16
 8007888:	fb08 3319 	mls	r3, r8, r9, r3
 800788c:	fa1f fa8e 	uxth.w	sl, lr
 8007890:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007894:	fb09 f40a 	mul.w	r4, r9, sl
 8007898:	429c      	cmp	r4, r3
 800789a:	fa02 f207 	lsl.w	r2, r2, r7
 800789e:	fa00 f107 	lsl.w	r1, r0, r7
 80078a2:	d90b      	bls.n	80078bc <__udivmoddi4+0x1b0>
 80078a4:	eb1e 0303 	adds.w	r3, lr, r3
 80078a8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80078ac:	f080 8087 	bcs.w	80079be <__udivmoddi4+0x2b2>
 80078b0:	429c      	cmp	r4, r3
 80078b2:	f240 8084 	bls.w	80079be <__udivmoddi4+0x2b2>
 80078b6:	f1a9 0902 	sub.w	r9, r9, #2
 80078ba:	4473      	add	r3, lr
 80078bc:	1b1b      	subs	r3, r3, r4
 80078be:	b2ad      	uxth	r5, r5
 80078c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80078c4:	fb08 3310 	mls	r3, r8, r0, r3
 80078c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80078cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80078d0:	45a2      	cmp	sl, r4
 80078d2:	d908      	bls.n	80078e6 <__udivmoddi4+0x1da>
 80078d4:	eb1e 0404 	adds.w	r4, lr, r4
 80078d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078dc:	d26b      	bcs.n	80079b6 <__udivmoddi4+0x2aa>
 80078de:	45a2      	cmp	sl, r4
 80078e0:	d969      	bls.n	80079b6 <__udivmoddi4+0x2aa>
 80078e2:	3802      	subs	r0, #2
 80078e4:	4474      	add	r4, lr
 80078e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80078ea:	fba0 8902 	umull	r8, r9, r0, r2
 80078ee:	eba4 040a 	sub.w	r4, r4, sl
 80078f2:	454c      	cmp	r4, r9
 80078f4:	46c2      	mov	sl, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	d354      	bcc.n	80079a4 <__udivmoddi4+0x298>
 80078fa:	d051      	beq.n	80079a0 <__udivmoddi4+0x294>
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	d069      	beq.n	80079d4 <__udivmoddi4+0x2c8>
 8007900:	ebb1 050a 	subs.w	r5, r1, sl
 8007904:	eb64 0403 	sbc.w	r4, r4, r3
 8007908:	fa04 fc0c 	lsl.w	ip, r4, ip
 800790c:	40fd      	lsrs	r5, r7
 800790e:	40fc      	lsrs	r4, r7
 8007910:	ea4c 0505 	orr.w	r5, ip, r5
 8007914:	e9c6 5400 	strd	r5, r4, [r6]
 8007918:	2700      	movs	r7, #0
 800791a:	e747      	b.n	80077ac <__udivmoddi4+0xa0>
 800791c:	f1c2 0320 	rsb	r3, r2, #32
 8007920:	fa20 f703 	lsr.w	r7, r0, r3
 8007924:	4095      	lsls	r5, r2
 8007926:	fa01 f002 	lsl.w	r0, r1, r2
 800792a:	fa21 f303 	lsr.w	r3, r1, r3
 800792e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007932:	4338      	orrs	r0, r7
 8007934:	0c01      	lsrs	r1, r0, #16
 8007936:	fbb3 f7fe 	udiv	r7, r3, lr
 800793a:	fa1f f885 	uxth.w	r8, r5
 800793e:	fb0e 3317 	mls	r3, lr, r7, r3
 8007942:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007946:	fb07 f308 	mul.w	r3, r7, r8
 800794a:	428b      	cmp	r3, r1
 800794c:	fa04 f402 	lsl.w	r4, r4, r2
 8007950:	d907      	bls.n	8007962 <__udivmoddi4+0x256>
 8007952:	1869      	adds	r1, r5, r1
 8007954:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8007958:	d22f      	bcs.n	80079ba <__udivmoddi4+0x2ae>
 800795a:	428b      	cmp	r3, r1
 800795c:	d92d      	bls.n	80079ba <__udivmoddi4+0x2ae>
 800795e:	3f02      	subs	r7, #2
 8007960:	4429      	add	r1, r5
 8007962:	1acb      	subs	r3, r1, r3
 8007964:	b281      	uxth	r1, r0
 8007966:	fbb3 f0fe 	udiv	r0, r3, lr
 800796a:	fb0e 3310 	mls	r3, lr, r0, r3
 800796e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007972:	fb00 f308 	mul.w	r3, r0, r8
 8007976:	428b      	cmp	r3, r1
 8007978:	d907      	bls.n	800798a <__udivmoddi4+0x27e>
 800797a:	1869      	adds	r1, r5, r1
 800797c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007980:	d217      	bcs.n	80079b2 <__udivmoddi4+0x2a6>
 8007982:	428b      	cmp	r3, r1
 8007984:	d915      	bls.n	80079b2 <__udivmoddi4+0x2a6>
 8007986:	3802      	subs	r0, #2
 8007988:	4429      	add	r1, r5
 800798a:	1ac9      	subs	r1, r1, r3
 800798c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007990:	e73b      	b.n	800780a <__udivmoddi4+0xfe>
 8007992:	4637      	mov	r7, r6
 8007994:	4630      	mov	r0, r6
 8007996:	e709      	b.n	80077ac <__udivmoddi4+0xa0>
 8007998:	4607      	mov	r7, r0
 800799a:	e6e7      	b.n	800776c <__udivmoddi4+0x60>
 800799c:	4618      	mov	r0, r3
 800799e:	e6fb      	b.n	8007798 <__udivmoddi4+0x8c>
 80079a0:	4541      	cmp	r1, r8
 80079a2:	d2ab      	bcs.n	80078fc <__udivmoddi4+0x1f0>
 80079a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80079a8:	eb69 020e 	sbc.w	r2, r9, lr
 80079ac:	3801      	subs	r0, #1
 80079ae:	4613      	mov	r3, r2
 80079b0:	e7a4      	b.n	80078fc <__udivmoddi4+0x1f0>
 80079b2:	4660      	mov	r0, ip
 80079b4:	e7e9      	b.n	800798a <__udivmoddi4+0x27e>
 80079b6:	4618      	mov	r0, r3
 80079b8:	e795      	b.n	80078e6 <__udivmoddi4+0x1da>
 80079ba:	4667      	mov	r7, ip
 80079bc:	e7d1      	b.n	8007962 <__udivmoddi4+0x256>
 80079be:	4681      	mov	r9, r0
 80079c0:	e77c      	b.n	80078bc <__udivmoddi4+0x1b0>
 80079c2:	3802      	subs	r0, #2
 80079c4:	442c      	add	r4, r5
 80079c6:	e747      	b.n	8007858 <__udivmoddi4+0x14c>
 80079c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80079cc:	442b      	add	r3, r5
 80079ce:	e72f      	b.n	8007830 <__udivmoddi4+0x124>
 80079d0:	4638      	mov	r0, r7
 80079d2:	e708      	b.n	80077e6 <__udivmoddi4+0xda>
 80079d4:	4637      	mov	r7, r6
 80079d6:	e6e9      	b.n	80077ac <__udivmoddi4+0xa0>

080079d8 <selfrel_offset31>:
 80079d8:	6803      	ldr	r3, [r0, #0]
 80079da:	005a      	lsls	r2, r3, #1
 80079dc:	bf4c      	ite	mi
 80079de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80079e6:	4418      	add	r0, r3
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop

080079ec <search_EIT_table>:
 80079ec:	b361      	cbz	r1, 8007a48 <search_EIT_table+0x5c>
 80079ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f2:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 80079f6:	4690      	mov	r8, r2
 80079f8:	4606      	mov	r6, r0
 80079fa:	46d1      	mov	r9, sl
 80079fc:	2700      	movs	r7, #0
 80079fe:	eb07 0409 	add.w	r4, r7, r9
 8007a02:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007a06:	1064      	asrs	r4, r4, #1
 8007a08:	00e5      	lsls	r5, r4, #3
 8007a0a:	1971      	adds	r1, r6, r5
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	f7ff ffe3 	bl	80079d8 <selfrel_offset31>
 8007a12:	45a2      	cmp	sl, r4
 8007a14:	4683      	mov	fp, r0
 8007a16:	f105 0008 	add.w	r0, r5, #8
 8007a1a:	4430      	add	r0, r6
 8007a1c:	d009      	beq.n	8007a32 <search_EIT_table+0x46>
 8007a1e:	f7ff ffdb 	bl	80079d8 <selfrel_offset31>
 8007a22:	45c3      	cmp	fp, r8
 8007a24:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007a28:	d805      	bhi.n	8007a36 <search_EIT_table+0x4a>
 8007a2a:	4540      	cmp	r0, r8
 8007a2c:	d209      	bcs.n	8007a42 <search_EIT_table+0x56>
 8007a2e:	1c67      	adds	r7, r4, #1
 8007a30:	e7e5      	b.n	80079fe <search_EIT_table+0x12>
 8007a32:	45c3      	cmp	fp, r8
 8007a34:	d905      	bls.n	8007a42 <search_EIT_table+0x56>
 8007a36:	42a7      	cmp	r7, r4
 8007a38:	d002      	beq.n	8007a40 <search_EIT_table+0x54>
 8007a3a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8007a3e:	e7de      	b.n	80079fe <search_EIT_table+0x12>
 8007a40:	2100      	movs	r1, #0
 8007a42:	4608      	mov	r0, r1
 8007a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	4608      	mov	r0, r1
 8007a4a:	4770      	bx	lr

08007a4c <__gnu_unwind_get_pr_addr>:
 8007a4c:	2801      	cmp	r0, #1
 8007a4e:	d007      	beq.n	8007a60 <__gnu_unwind_get_pr_addr+0x14>
 8007a50:	2802      	cmp	r0, #2
 8007a52:	d007      	beq.n	8007a64 <__gnu_unwind_get_pr_addr+0x18>
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <__gnu_unwind_get_pr_addr+0x1c>)
 8007a56:	2800      	cmp	r0, #0
 8007a58:	bf0c      	ite	eq
 8007a5a:	4618      	moveq	r0, r3
 8007a5c:	2000      	movne	r0, #0
 8007a5e:	4770      	bx	lr
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <__gnu_unwind_get_pr_addr+0x20>)
 8007a62:	4770      	bx	lr
 8007a64:	4802      	ldr	r0, [pc, #8]	; (8007a70 <__gnu_unwind_get_pr_addr+0x24>)
 8007a66:	4770      	bx	lr
 8007a68:	08008139 	.word	0x08008139
 8007a6c:	0800813d 	.word	0x0800813d
 8007a70:	08008141 	.word	0x08008141

08007a74 <get_eit_entry>:
 8007a74:	b530      	push	{r4, r5, lr}
 8007a76:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <get_eit_entry+0x98>)
 8007a78:	b083      	sub	sp, #12
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	1e8d      	subs	r5, r1, #2
 8007a7e:	b34b      	cbz	r3, 8007ad4 <get_eit_entry+0x60>
 8007a80:	a901      	add	r1, sp, #4
 8007a82:	4628      	mov	r0, r5
 8007a84:	f3af 8000 	nop.w
 8007a88:	b1f0      	cbz	r0, 8007ac8 <get_eit_entry+0x54>
 8007a8a:	9901      	ldr	r1, [sp, #4]
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	f7ff ffad 	bl	80079ec <search_EIT_table>
 8007a92:	4601      	mov	r1, r0
 8007a94:	b1c0      	cbz	r0, 8007ac8 <get_eit_entry+0x54>
 8007a96:	f7ff ff9f 	bl	80079d8 <selfrel_offset31>
 8007a9a:	684b      	ldr	r3, [r1, #4]
 8007a9c:	64a0      	str	r0, [r4, #72]	; 0x48
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d02e      	beq.n	8007b00 <get_eit_entry+0x8c>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f101 0004 	add.w	r0, r1, #4
 8007aa8:	db26      	blt.n	8007af8 <get_eit_entry+0x84>
 8007aaa:	f7ff ff95 	bl	80079d8 <selfrel_offset31>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	db12      	blt.n	8007ae0 <get_eit_entry+0x6c>
 8007aba:	f7ff ff8d 	bl	80079d8 <selfrel_offset31>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6120      	str	r0, [r4, #16]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	b003      	add	sp, #12
 8007ac6:	bd30      	pop	{r4, r5, pc}
 8007ac8:	2300      	movs	r3, #0
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	2309      	movs	r3, #9
 8007ace:	4618      	mov	r0, r3
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bd30      	pop	{r4, r5, pc}
 8007ad4:	490e      	ldr	r1, [pc, #56]	; (8007b10 <get_eit_entry+0x9c>)
 8007ad6:	480f      	ldr	r0, [pc, #60]	; (8007b14 <get_eit_entry+0xa0>)
 8007ad8:	1a09      	subs	r1, r1, r0
 8007ada:	10c9      	asrs	r1, r1, #3
 8007adc:	9101      	str	r1, [sp, #4]
 8007ade:	e7d5      	b.n	8007a8c <get_eit_entry+0x18>
 8007ae0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007ae4:	f7ff ffb2 	bl	8007a4c <__gnu_unwind_get_pr_addr>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bf14      	ite	ne
 8007aec:	2300      	movne	r3, #0
 8007aee:	2309      	moveq	r3, #9
 8007af0:	6120      	str	r0, [r4, #16]
 8007af2:	4618      	mov	r0, r3
 8007af4:	b003      	add	sp, #12
 8007af6:	bd30      	pop	{r4, r5, pc}
 8007af8:	2301      	movs	r3, #1
 8007afa:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8007afe:	e7d9      	b.n	8007ab4 <get_eit_entry+0x40>
 8007b00:	2300      	movs	r3, #0
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	2305      	movs	r3, #5
 8007b06:	4618      	mov	r0, r3
 8007b08:	b003      	add	sp, #12
 8007b0a:	bd30      	pop	{r4, r5, pc}
 8007b0c:	00000000 	.word	0x00000000
 8007b10:	0801bbe4 	.word	0x0801bbe4
 8007b14:	0801ba5c 	.word	0x0801ba5c

08007b18 <restore_non_core_regs>:
 8007b18:	6803      	ldr	r3, [r0, #0]
 8007b1a:	07da      	lsls	r2, r3, #31
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4604      	mov	r4, r0
 8007b20:	d406      	bmi.n	8007b30 <restore_non_core_regs+0x18>
 8007b22:	079b      	lsls	r3, r3, #30
 8007b24:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007b28:	d509      	bpl.n	8007b3e <restore_non_core_regs+0x26>
 8007b2a:	f000 fc5f 	bl	80083ec <__gnu_Unwind_Restore_VFP_D>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	0759      	lsls	r1, r3, #29
 8007b32:	d509      	bpl.n	8007b48 <restore_non_core_regs+0x30>
 8007b34:	071a      	lsls	r2, r3, #28
 8007b36:	d50e      	bpl.n	8007b56 <restore_non_core_regs+0x3e>
 8007b38:	06db      	lsls	r3, r3, #27
 8007b3a:	d513      	bpl.n	8007b64 <restore_non_core_regs+0x4c>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	f000 fc4d 	bl	80083dc <__gnu_Unwind_Restore_VFP>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	0759      	lsls	r1, r3, #29
 8007b46:	d4f5      	bmi.n	8007b34 <restore_non_core_regs+0x1c>
 8007b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b4c:	f000 fc56 	bl	80083fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	071a      	lsls	r2, r3, #28
 8007b54:	d4f0      	bmi.n	8007b38 <restore_non_core_regs+0x20>
 8007b56:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007b5a:	f000 fc57 	bl	800840c <__gnu_Unwind_Restore_WMMXD>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	06db      	lsls	r3, r3, #27
 8007b62:	d4eb      	bmi.n	8007b3c <restore_non_core_regs+0x24>
 8007b64:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b6c:	f000 bc92 	b.w	8008494 <__gnu_Unwind_Restore_WMMXC>

08007b70 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007b70:	6803      	ldr	r3, [r0, #0]
 8007b72:	b103      	cbz	r3, 8007b76 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007b74:	4403      	add	r3, r0
 8007b76:	4618      	mov	r0, r3
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop

08007b7c <__gnu_unwind_24bit.isra.1>:
 8007b7c:	2009      	movs	r0, #9
 8007b7e:	4770      	bx	lr

08007b80 <_Unwind_DebugHook>:
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <unwind_phase2>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	e008      	b.n	8007b9e <unwind_phase2+0x1a>
 8007b8c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007b8e:	6163      	str	r3, [r4, #20]
 8007b90:	462a      	mov	r2, r5
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	4621      	mov	r1, r4
 8007b96:	2001      	movs	r0, #1
 8007b98:	4798      	blx	r3
 8007b9a:	2808      	cmp	r0, #8
 8007b9c:	d108      	bne.n	8007bb0 <unwind_phase2+0x2c>
 8007b9e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff ff67 	bl	8007a74 <get_eit_entry>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0ef      	beq.n	8007b8c <unwind_phase2+0x8>
 8007bac:	f00c fb30 	bl	8014210 <abort>
 8007bb0:	2807      	cmp	r0, #7
 8007bb2:	d1fb      	bne.n	8007bac <unwind_phase2+0x28>
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007bb8:	f7ff ffe2 	bl	8007b80 <_Unwind_DebugHook>
 8007bbc:	1d28      	adds	r0, r5, #4
 8007bbe:	f000 fc01 	bl	80083c4 <__restore_core_regs>
 8007bc2:	bf00      	nop

08007bc4 <unwind_phase2_forced>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	1d0c      	adds	r4, r1, #4
 8007bca:	4605      	mov	r5, r0
 8007bcc:	4617      	mov	r7, r2
 8007bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bd0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007bd4:	ae03      	add	r6, sp, #12
 8007bd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007be0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007be4:	ac02      	add	r4, sp, #8
 8007be6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007bea:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007bee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	e021      	b.n	8007c3c <unwind_phase2_forced+0x78>
 8007bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bfa:	616b      	str	r3, [r5, #20]
 8007bfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c00:	4621      	mov	r1, r4
 8007c02:	a87a      	add	r0, sp, #488	; 0x1e8
 8007c04:	f00c ffa3 	bl	8014b4e <memcpy>
 8007c08:	692b      	ldr	r3, [r5, #16]
 8007c0a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4798      	blx	r3
 8007c12:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007c14:	e9cd 4900 	strd	r4, r9, [sp]
 8007c18:	4682      	mov	sl, r0
 8007c1a:	6463      	str	r3, [r4, #68]	; 0x44
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	462b      	mov	r3, r5
 8007c20:	462a      	mov	r2, r5
 8007c22:	2001      	movs	r0, #1
 8007c24:	47c0      	blx	r8
 8007c26:	4607      	mov	r7, r0
 8007c28:	b9f8      	cbnz	r0, 8007c6a <unwind_phase2_forced+0xa6>
 8007c2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c2e:	a97a      	add	r1, sp, #488	; 0x1e8
 8007c30:	4620      	mov	r0, r4
 8007c32:	f00c ff8c 	bl	8014b4e <memcpy>
 8007c36:	f1ba 0f08 	cmp.w	sl, #8
 8007c3a:	d11c      	bne.n	8007c76 <unwind_phase2_forced+0xb2>
 8007c3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7ff ff18 	bl	8007a74 <get_eit_entry>
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	bf08      	it	eq
 8007c48:	2609      	moveq	r6, #9
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	bf18      	it	ne
 8007c4e:	260a      	movne	r6, #10
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d0d1      	beq.n	8007bf8 <unwind_phase2_forced+0x34>
 8007c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c56:	f046 0110 	orr.w	r1, r6, #16
 8007c5a:	e9cd 4900 	strd	r4, r9, [sp]
 8007c5e:	462a      	mov	r2, r5
 8007c60:	6463      	str	r3, [r4, #68]	; 0x44
 8007c62:	2001      	movs	r0, #1
 8007c64:	462b      	mov	r3, r5
 8007c66:	47c0      	blx	r8
 8007c68:	b100      	cbz	r0, 8007c6c <unwind_phase2_forced+0xa8>
 8007c6a:	2709      	movs	r7, #9
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c76:	f1ba 0f07 	cmp.w	sl, #7
 8007c7a:	d1f6      	bne.n	8007c6a <unwind_phase2_forced+0xa6>
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c80:	f7ff ff7e 	bl	8007b80 <_Unwind_DebugHook>
 8007c84:	a803      	add	r0, sp, #12
 8007c86:	f000 fb9d 	bl	80083c4 <__restore_core_regs>
 8007c8a:	bf00      	nop

08007c8c <_Unwind_GetCFA>:
 8007c8c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007c8e:	4770      	bx	lr

08007c90 <__gnu_Unwind_RaiseException>:
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007c94:	640b      	str	r3, [r1, #64]	; 0x40
 8007c96:	1d0d      	adds	r5, r1, #4
 8007c98:	460f      	mov	r7, r1
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9e:	b0f9      	sub	sp, #484	; 0x1e4
 8007ca0:	ac01      	add	r4, sp, #4
 8007ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007cb8:	9500      	str	r5, [sp, #0]
 8007cba:	e006      	b.n	8007cca <__gnu_Unwind_RaiseException+0x3a>
 8007cbc:	6933      	ldr	r3, [r6, #16]
 8007cbe:	466a      	mov	r2, sp
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4798      	blx	r3
 8007cc4:	2808      	cmp	r0, #8
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	d108      	bne.n	8007cdc <__gnu_Unwind_RaiseException+0x4c>
 8007cca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fed1 	bl	8007a74 <get_eit_entry>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d0f2      	beq.n	8007cbc <__gnu_Unwind_RaiseException+0x2c>
 8007cd6:	2009      	movs	r0, #9
 8007cd8:	b079      	add	sp, #484	; 0x1e4
 8007cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cdc:	4668      	mov	r0, sp
 8007cde:	f7ff ff1b 	bl	8007b18 <restore_non_core_regs>
 8007ce2:	2c06      	cmp	r4, #6
 8007ce4:	d1f7      	bne.n	8007cd6 <__gnu_Unwind_RaiseException+0x46>
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff ff4b 	bl	8007b84 <unwind_phase2>
 8007cee:	bf00      	nop

08007cf0 <__gnu_Unwind_ForcedUnwind>:
 8007cf0:	b430      	push	{r4, r5}
 8007cf2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007cf4:	60c1      	str	r1, [r0, #12]
 8007cf6:	6182      	str	r2, [r0, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	641d      	str	r5, [r3, #64]	; 0x40
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	bc30      	pop	{r4, r5}
 8007d00:	e760      	b.n	8007bc4 <unwind_phase2_forced>
 8007d02:	bf00      	nop

08007d04 <__gnu_Unwind_Resume>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	68c6      	ldr	r6, [r0, #12]
 8007d08:	6943      	ldr	r3, [r0, #20]
 8007d0a:	640b      	str	r3, [r1, #64]	; 0x40
 8007d0c:	b9be      	cbnz	r6, 8007d3e <__gnu_Unwind_Resume+0x3a>
 8007d0e:	6903      	ldr	r3, [r0, #16]
 8007d10:	460a      	mov	r2, r1
 8007d12:	4604      	mov	r4, r0
 8007d14:	460d      	mov	r5, r1
 8007d16:	4601      	mov	r1, r0
 8007d18:	2002      	movs	r0, #2
 8007d1a:	4798      	blx	r3
 8007d1c:	2807      	cmp	r0, #7
 8007d1e:	d007      	beq.n	8007d30 <__gnu_Unwind_Resume+0x2c>
 8007d20:	2808      	cmp	r0, #8
 8007d22:	d103      	bne.n	8007d2c <__gnu_Unwind_Resume+0x28>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff ff2c 	bl	8007b84 <unwind_phase2>
 8007d2c:	f00c fa70 	bl	8014210 <abort>
 8007d30:	4630      	mov	r0, r6
 8007d32:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007d34:	f7ff ff24 	bl	8007b80 <_Unwind_DebugHook>
 8007d38:	1d28      	adds	r0, r5, #4
 8007d3a:	f000 fb43 	bl	80083c4 <__restore_core_regs>
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f7ff ff40 	bl	8007bc4 <unwind_phase2_forced>
 8007d44:	f00c fa64 	bl	8014210 <abort>

08007d48 <__gnu_Unwind_Resume_or_Rethrow>:
 8007d48:	68c2      	ldr	r2, [r0, #12]
 8007d4a:	b11a      	cbz	r2, 8007d54 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007d4c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007d4e:	640a      	str	r2, [r1, #64]	; 0x40
 8007d50:	2200      	movs	r2, #0
 8007d52:	e737      	b.n	8007bc4 <unwind_phase2_forced>
 8007d54:	e79c      	b.n	8007c90 <__gnu_Unwind_RaiseException>
 8007d56:	bf00      	nop

08007d58 <_Unwind_Complete>:
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop

08007d5c <_Unwind_DeleteException>:
 8007d5c:	6883      	ldr	r3, [r0, #8]
 8007d5e:	b113      	cbz	r3, 8007d66 <_Unwind_DeleteException+0xa>
 8007d60:	4601      	mov	r1, r0
 8007d62:	2001      	movs	r0, #1
 8007d64:	4718      	bx	r3
 8007d66:	4770      	bx	lr

08007d68 <_Unwind_VRS_Get>:
 8007d68:	2904      	cmp	r1, #4
 8007d6a:	d807      	bhi.n	8007d7c <_Unwind_VRS_Get+0x14>
 8007d6c:	e8df f001 	tbb	[pc, r1]
 8007d70:	08060803 	.word	0x08060803
 8007d74:	08          	.byte	0x08
 8007d75:	00          	.byte	0x00
 8007d76:	b90b      	cbnz	r3, 8007d7c <_Unwind_VRS_Get+0x14>
 8007d78:	2a0f      	cmp	r2, #15
 8007d7a:	d903      	bls.n	8007d84 <_Unwind_VRS_Get+0x1c>
 8007d7c:	2002      	movs	r0, #2
 8007d7e:	4770      	bx	lr
 8007d80:	2001      	movs	r0, #1
 8007d82:	4770      	bx	lr
 8007d84:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	6853      	ldr	r3, [r2, #4]
 8007d8c:	9a00      	ldr	r2, [sp, #0]
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop

08007d94 <_Unwind_GetGR>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	2300      	movs	r3, #0
 8007d9a:	ac03      	add	r4, sp, #12
 8007d9c:	460a      	mov	r2, r1
 8007d9e:	9400      	str	r4, [sp, #0]
 8007da0:	4619      	mov	r1, r3
 8007da2:	f7ff ffe1 	bl	8007d68 <_Unwind_VRS_Get>
 8007da6:	9803      	ldr	r0, [sp, #12]
 8007da8:	b004      	add	sp, #16
 8007daa:	bd10      	pop	{r4, pc}

08007dac <_Unwind_VRS_Set>:
 8007dac:	2904      	cmp	r1, #4
 8007dae:	d807      	bhi.n	8007dc0 <_Unwind_VRS_Set+0x14>
 8007db0:	e8df f001 	tbb	[pc, r1]
 8007db4:	08060803 	.word	0x08060803
 8007db8:	08          	.byte	0x08
 8007db9:	00          	.byte	0x00
 8007dba:	b90b      	cbnz	r3, 8007dc0 <_Unwind_VRS_Set+0x14>
 8007dbc:	2a0f      	cmp	r2, #15
 8007dbe:	d903      	bls.n	8007dc8 <_Unwind_VRS_Set+0x1c>
 8007dc0:	2002      	movs	r0, #2
 8007dc2:	4770      	bx	lr
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	4770      	bx	lr
 8007dc8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007dcc:	9a00      	ldr	r2, [sp, #0]
 8007dce:	6812      	ldr	r2, [r2, #0]
 8007dd0:	6042      	str	r2, [r0, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <_Unwind_SetGR>:
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	ac04      	add	r4, sp, #16
 8007dde:	2300      	movs	r3, #0
 8007de0:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007de4:	460a      	mov	r2, r1
 8007de6:	9400      	str	r4, [sp, #0]
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7ff ffdf 	bl	8007dac <_Unwind_VRS_Set>
 8007dee:	b004      	add	sp, #16
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	bf00      	nop

08007df4 <__gnu_Unwind_Backtrace>:
 8007df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007df8:	6413      	str	r3, [r2, #64]	; 0x40
 8007dfa:	1d15      	adds	r5, r2, #4
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	460e      	mov	r6, r1
 8007e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e02:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007e06:	ac17      	add	r4, sp, #92	; 0x5c
 8007e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e1e:	9516      	str	r5, [sp, #88]	; 0x58
 8007e20:	e010      	b.n	8007e44 <__gnu_Unwind_Backtrace+0x50>
 8007e22:	a816      	add	r0, sp, #88	; 0x58
 8007e24:	f7ff ffd8 	bl	8007dd8 <_Unwind_SetGR>
 8007e28:	4631      	mov	r1, r6
 8007e2a:	a816      	add	r0, sp, #88	; 0x58
 8007e2c:	47b8      	blx	r7
 8007e2e:	aa16      	add	r2, sp, #88	; 0x58
 8007e30:	4669      	mov	r1, sp
 8007e32:	b978      	cbnz	r0, 8007e54 <__gnu_Unwind_Backtrace+0x60>
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	2008      	movs	r0, #8
 8007e38:	4798      	blx	r3
 8007e3a:	2805      	cmp	r0, #5
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	d00a      	beq.n	8007e56 <__gnu_Unwind_Backtrace+0x62>
 8007e40:	2809      	cmp	r0, #9
 8007e42:	d007      	beq.n	8007e54 <__gnu_Unwind_Backtrace+0x60>
 8007e44:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007e46:	4668      	mov	r0, sp
 8007e48:	f7ff fe14 	bl	8007a74 <get_eit_entry>
 8007e4c:	466a      	mov	r2, sp
 8007e4e:	210c      	movs	r1, #12
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d0e6      	beq.n	8007e22 <__gnu_Unwind_Backtrace+0x2e>
 8007e54:	2409      	movs	r4, #9
 8007e56:	a816      	add	r0, sp, #88	; 0x58
 8007e58:	f7ff fe5e 	bl	8007b18 <restore_non_core_regs>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e64 <__gnu_unwind_pr_common>:
 8007e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e68:	460d      	mov	r5, r1
 8007e6a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e6c:	b089      	sub	sp, #36	; 0x24
 8007e6e:	1d0c      	adds	r4, r1, #4
 8007e70:	4616      	mov	r6, r2
 8007e72:	f000 0b03 	and.w	fp, r0, #3
 8007e76:	680a      	ldr	r2, [r1, #0]
 8007e78:	9406      	str	r4, [sp, #24]
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d068      	beq.n	8007f52 <__gnu_unwind_pr_common+0xee>
 8007e80:	0c13      	lsrs	r3, r2, #16
 8007e82:	b2d9      	uxtb	r1, r3
 8007e84:	0412      	lsls	r2, r2, #16
 8007e86:	f88d 301d 	strb.w	r3, [sp, #29]
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007e90:	9205      	str	r2, [sp, #20]
 8007e92:	f88d 301c 	strb.w	r3, [sp, #28]
 8007e96:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007e98:	f1bb 0f02 	cmp.w	fp, #2
 8007e9c:	bf08      	it	eq
 8007e9e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007ea0:	f013 0301 	ands.w	r3, r3, #1
 8007ea4:	d146      	bne.n	8007f34 <__gnu_unwind_pr_common+0xd0>
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	f000 0308 	and.w	r3, r0, #8
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	f8d4 9000 	ldr.w	r9, [r4]
 8007eb2:	f1b9 0f00 	cmp.w	r9, #0
 8007eb6:	f000 80f3 	beq.w	80080a0 <__gnu_unwind_pr_common+0x23c>
 8007eba:	2f02      	cmp	r7, #2
 8007ebc:	d045      	beq.n	8007f4a <__gnu_unwind_pr_common+0xe6>
 8007ebe:	f8b4 9000 	ldrh.w	r9, [r4]
 8007ec2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8007ec6:	3404      	adds	r4, #4
 8007ec8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007eca:	f028 0a01 	bic.w	sl, r8, #1
 8007ece:	210f      	movs	r1, #15
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	449a      	add	sl, r3
 8007ed4:	f7ff ff5e 	bl	8007d94 <_Unwind_GetGR>
 8007ed8:	4582      	cmp	sl, r0
 8007eda:	d834      	bhi.n	8007f46 <__gnu_unwind_pr_common+0xe2>
 8007edc:	f029 0301 	bic.w	r3, r9, #1
 8007ee0:	4453      	add	r3, sl
 8007ee2:	4283      	cmp	r3, r0
 8007ee4:	bf94      	ite	ls
 8007ee6:	2000      	movls	r0, #0
 8007ee8:	2001      	movhi	r0, #1
 8007eea:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007eee:	f008 0802 	and.w	r8, r8, #2
 8007ef2:	f009 0901 	and.w	r9, r9, #1
 8007ef6:	ea48 0809 	orr.w	r8, r8, r9
 8007efa:	f1b8 0f01 	cmp.w	r8, #1
 8007efe:	d03a      	beq.n	8007f76 <__gnu_unwind_pr_common+0x112>
 8007f00:	d331      	bcc.n	8007f66 <__gnu_unwind_pr_common+0x102>
 8007f02:	f1b8 0f02 	cmp.w	r8, #2
 8007f06:	d11a      	bne.n	8007f3e <__gnu_unwind_pr_common+0xda>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8007f0e:	f1bb 0f00 	cmp.w	fp, #0
 8007f12:	d166      	bne.n	8007fe2 <__gnu_unwind_pr_common+0x17e>
 8007f14:	b130      	cbz	r0, 8007f24 <__gnu_unwind_pr_common+0xc0>
 8007f16:	9a00      	ldr	r2, [sp, #0]
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	d06c      	beq.n	8007ff6 <__gnu_unwind_pr_common+0x192>
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	f000 8090 	beq.w	8008044 <__gnu_unwind_pr_common+0x1e0>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da00      	bge.n	8007f2a <__gnu_unwind_pr_common+0xc6>
 8007f28:	3404      	adds	r4, #4
 8007f2a:	f10a 0301 	add.w	r3, sl, #1
 8007f2e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007f32:	e7bc      	b.n	8007eae <__gnu_unwind_pr_common+0x4a>
 8007f34:	4630      	mov	r0, r6
 8007f36:	a905      	add	r1, sp, #20
 8007f38:	f000 fb46 	bl	80085c8 <__gnu_unwind_execute>
 8007f3c:	b178      	cbz	r0, 8007f5e <__gnu_unwind_pr_common+0xfa>
 8007f3e:	2009      	movs	r0, #9
 8007f40:	b009      	add	sp, #36	; 0x24
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	2000      	movs	r0, #0
 8007f48:	e7cf      	b.n	8007eea <__gnu_unwind_pr_common+0x86>
 8007f4a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8007f4e:	3408      	adds	r4, #8
 8007f50:	e7ba      	b.n	8007ec8 <__gnu_unwind_pr_common+0x64>
 8007f52:	0212      	lsls	r2, r2, #8
 8007f54:	2303      	movs	r3, #3
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007f5c:	e79b      	b.n	8007e96 <__gnu_unwind_pr_common+0x32>
 8007f5e:	2008      	movs	r0, #8
 8007f60:	b009      	add	sp, #36	; 0x24
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	f1bb 0f00 	cmp.w	fp, #0
 8007f6a:	d002      	beq.n	8007f72 <__gnu_unwind_pr_common+0x10e>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f040 80b4 	bne.w	80080da <__gnu_unwind_pr_common+0x276>
 8007f72:	3404      	adds	r4, #4
 8007f74:	e79b      	b.n	8007eae <__gnu_unwind_pr_common+0x4a>
 8007f76:	f1bb 0f00 	cmp.w	fp, #0
 8007f7a:	d118      	bne.n	8007fae <__gnu_unwind_pr_common+0x14a>
 8007f7c:	b1a8      	cbz	r0, 8007faa <__gnu_unwind_pr_common+0x146>
 8007f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f82:	1c99      	adds	r1, r3, #2
 8007f84:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007f88:	d0d9      	beq.n	8007f3e <__gnu_unwind_pr_common+0xda>
 8007f8a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9104      	str	r1, [sp, #16]
 8007f92:	f000 80b5 	beq.w	8008100 <__gnu_unwind_pr_common+0x29c>
 8007f96:	1d20      	adds	r0, r4, #4
 8007f98:	f7ff fdea 	bl	8007b70 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007f9c:	ab04      	add	r3, sp, #16
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f00b fc1f 	bl	80137e4 <__cxa_type_match>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d167      	bne.n	800807a <__gnu_unwind_pr_common+0x216>
 8007faa:	3408      	adds	r4, #8
 8007fac:	e77f      	b.n	8007eae <__gnu_unwind_pr_common+0x4a>
 8007fae:	210d      	movs	r1, #13
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007fb6:	f7ff feed 	bl	8007d94 <_Unwind_GetGR>
 8007fba:	4580      	cmp	r8, r0
 8007fbc:	d1f5      	bne.n	8007faa <__gnu_unwind_pr_common+0x146>
 8007fbe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d1f2      	bne.n	8007faa <__gnu_unwind_pr_common+0x146>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7ff fd07 	bl	80079d8 <selfrel_offset31>
 8007fca:	210f      	movs	r1, #15
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7ff ff02 	bl	8007dd8 <_Unwind_SetGR>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	2100      	movs	r1, #0
 8007fda:	f7ff fefd 	bl	8007dd8 <_Unwind_SetGR>
 8007fde:	2007      	movs	r0, #7
 8007fe0:	e7ae      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8007fe2:	210d      	movs	r1, #13
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8007fea:	f7ff fed3 	bl	8007d94 <_Unwind_GetGR>
 8007fee:	4580      	cmp	r8, r0
 8007ff0:	d032      	beq.n	8008058 <__gnu_unwind_pr_common+0x1f4>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	e796      	b.n	8007f24 <__gnu_unwind_pr_common+0xc0>
 8007ff6:	f1ba 0f00 	cmp.w	sl, #0
 8007ffa:	d023      	beq.n	8008044 <__gnu_unwind_pr_common+0x1e0>
 8007ffc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008000:	f104 0804 	add.w	r8, r4, #4
 8008004:	f8cd b008 	str.w	fp, [sp, #8]
 8008008:	f8dd 9000 	ldr.w	r9, [sp]
 800800c:	9703      	str	r7, [sp, #12]
 800800e:	46a3      	mov	fp, r4
 8008010:	461c      	mov	r4, r3
 8008012:	e002      	b.n	800801a <__gnu_unwind_pr_common+0x1b6>
 8008014:	4557      	cmp	r7, sl
 8008016:	46b9      	mov	r9, r7
 8008018:	d040      	beq.n	800809c <__gnu_unwind_pr_common+0x238>
 800801a:	4640      	mov	r0, r8
 800801c:	9404      	str	r4, [sp, #16]
 800801e:	f7ff fda7 	bl	8007b70 <_Unwind_decode_typeinfo_ptr.isra.0>
 8008022:	ab04      	add	r3, sp, #16
 8008024:	4601      	mov	r1, r0
 8008026:	2200      	movs	r2, #0
 8008028:	4628      	mov	r0, r5
 800802a:	f00b fbdb 	bl	80137e4 <__cxa_type_match>
 800802e:	f109 0701 	add.w	r7, r9, #1
 8008032:	f108 0804 	add.w	r8, r8, #4
 8008036:	2800      	cmp	r0, #0
 8008038:	d0ec      	beq.n	8008014 <__gnu_unwind_pr_common+0x1b0>
 800803a:	45d1      	cmp	r9, sl
 800803c:	465c      	mov	r4, fp
 800803e:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8008042:	d1d6      	bne.n	8007ff2 <__gnu_unwind_pr_common+0x18e>
 8008044:	4630      	mov	r0, r6
 8008046:	210d      	movs	r1, #13
 8008048:	f7ff fea4 	bl	8007d94 <_Unwind_GetGR>
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	6228      	str	r0, [r5, #32]
 8008050:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8008054:	2006      	movs	r0, #6
 8008056:	e773      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8008058:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800805a:	429c      	cmp	r4, r3
 800805c:	d1c9      	bne.n	8007ff2 <__gnu_unwind_pr_common+0x18e>
 800805e:	2204      	movs	r2, #4
 8008060:	f04f 0800 	mov.w	r8, #0
 8008064:	18a3      	adds	r3, r4, r2
 8008066:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 800806a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	4543      	cmp	r3, r8
 8008072:	db4d      	blt.n	8008110 <__gnu_unwind_pr_common+0x2ac>
 8008074:	2301      	movs	r3, #1
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	e757      	b.n	8007f2a <__gnu_unwind_pr_common+0xc6>
 800807a:	4680      	mov	r8, r0
 800807c:	210d      	movs	r1, #13
 800807e:	4630      	mov	r0, r6
 8008080:	f7ff fe88 	bl	8007d94 <_Unwind_GetGR>
 8008084:	f1b8 0f02 	cmp.w	r8, #2
 8008088:	6228      	str	r0, [r5, #32]
 800808a:	d13e      	bne.n	800810a <__gnu_unwind_pr_common+0x2a6>
 800808c:	462b      	mov	r3, r5
 800808e:	9a04      	ldr	r2, [sp, #16]
 8008090:	f843 2f2c 	str.w	r2, [r3, #44]!
 8008094:	626b      	str	r3, [r5, #36]	; 0x24
 8008096:	62ac      	str	r4, [r5, #40]	; 0x28
 8008098:	2006      	movs	r0, #6
 800809a:	e751      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 800809c:	465c      	mov	r4, fp
 800809e:	e7d1      	b.n	8008044 <__gnu_unwind_pr_common+0x1e0>
 80080a0:	a905      	add	r1, sp, #20
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 fa90 	bl	80085c8 <__gnu_unwind_execute>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f47f af48 	bne.w	8007f3e <__gnu_unwind_pr_common+0xda>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f43f af54 	beq.w	8007f5e <__gnu_unwind_pr_common+0xfa>
 80080b6:	210f      	movs	r1, #15
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fe6b 	bl	8007d94 <_Unwind_GetGR>
 80080be:	210e      	movs	r1, #14
 80080c0:	4602      	mov	r2, r0
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff fe88 	bl	8007dd8 <_Unwind_SetGR>
 80080c8:	4630      	mov	r0, r6
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <__gnu_unwind_pr_common+0x2d0>)
 80080cc:	210f      	movs	r1, #15
 80080ce:	f7ff fe83 	bl	8007dd8 <_Unwind_SetGR>
 80080d2:	2007      	movs	r0, #7
 80080d4:	b009      	add	sp, #36	; 0x24
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	4620      	mov	r0, r4
 80080dc:	f7ff fc7c 	bl	80079d8 <selfrel_offset31>
 80080e0:	3404      	adds	r4, #4
 80080e2:	4607      	mov	r7, r0
 80080e4:	63ac      	str	r4, [r5, #56]	; 0x38
 80080e6:	4628      	mov	r0, r5
 80080e8:	f00b fbd4 	bl	8013894 <__cxa_begin_cleanup>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f43f af26 	beq.w	8007f3e <__gnu_unwind_pr_common+0xda>
 80080f2:	4630      	mov	r0, r6
 80080f4:	463a      	mov	r2, r7
 80080f6:	210f      	movs	r1, #15
 80080f8:	f7ff fe6e 	bl	8007dd8 <_Unwind_SetGR>
 80080fc:	2007      	movs	r0, #7
 80080fe:	e71f      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8008100:	4630      	mov	r0, r6
 8008102:	210d      	movs	r1, #13
 8008104:	f7ff fe46 	bl	8007d94 <_Unwind_GetGR>
 8008108:	6228      	str	r0, [r5, #32]
 800810a:	9b04      	ldr	r3, [sp, #16]
 800810c:	626b      	str	r3, [r5, #36]	; 0x24
 800810e:	e7c2      	b.n	8008096 <__gnu_unwind_pr_common+0x232>
 8008110:	f10a 0001 	add.w	r0, sl, #1
 8008114:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8008118:	f7ff fc5e 	bl	80079d8 <selfrel_offset31>
 800811c:	210f      	movs	r1, #15
 800811e:	4602      	mov	r2, r0
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff fe59 	bl	8007dd8 <_Unwind_SetGR>
 8008126:	4630      	mov	r0, r6
 8008128:	462a      	mov	r2, r5
 800812a:	4641      	mov	r1, r8
 800812c:	f7ff fe54 	bl	8007dd8 <_Unwind_SetGR>
 8008130:	2007      	movs	r0, #7
 8008132:	e705      	b.n	8007f40 <__gnu_unwind_pr_common+0xdc>
 8008134:	080136fd 	.word	0x080136fd

08008138 <__aeabi_unwind_cpp_pr0>:
 8008138:	2300      	movs	r3, #0
 800813a:	e693      	b.n	8007e64 <__gnu_unwind_pr_common>

0800813c <__aeabi_unwind_cpp_pr1>:
 800813c:	2301      	movs	r3, #1
 800813e:	e691      	b.n	8007e64 <__gnu_unwind_pr_common>

08008140 <__aeabi_unwind_cpp_pr2>:
 8008140:	2302      	movs	r3, #2
 8008142:	e68f      	b.n	8007e64 <__gnu_unwind_pr_common>

08008144 <_Unwind_VRS_Pop>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4605      	mov	r5, r0
 800814a:	b0c4      	sub	sp, #272	; 0x110
 800814c:	2904      	cmp	r1, #4
 800814e:	d806      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 8008150:	e8df f001 	tbb	[pc, r1]
 8008154:	03052b4d 	.word	0x03052b4d
 8008158:	09          	.byte	0x09
 8008159:	00          	.byte	0x00
 800815a:	2b03      	cmp	r3, #3
 800815c:	d05f      	beq.n	800821e <_Unwind_VRS_Pop+0xda>
 800815e:	2002      	movs	r0, #2
 8008160:	b044      	add	sp, #272	; 0x110
 8008162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f9      	bne.n	800815e <_Unwind_VRS_Pop+0x1a>
 800816a:	2a10      	cmp	r2, #16
 800816c:	d8f7      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	06dc      	lsls	r4, r3, #27
 8008172:	f100 80f4 	bmi.w	800835e <_Unwind_VRS_Pop+0x21a>
 8008176:	ac22      	add	r4, sp, #136	; 0x88
 8008178:	4620      	mov	r0, r4
 800817a:	9201      	str	r2, [sp, #4]
 800817c:	f000 f994 	bl	80084a8 <__gnu_Unwind_Save_WMMXC>
 8008180:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008182:	9a01      	ldr	r2, [sp, #4]
 8008184:	2300      	movs	r3, #0
 8008186:	2601      	movs	r6, #1
 8008188:	fa06 f103 	lsl.w	r1, r6, r3
 800818c:	4211      	tst	r1, r2
 800818e:	d003      	beq.n	8008198 <_Unwind_VRS_Pop+0x54>
 8008190:	6801      	ldr	r1, [r0, #0]
 8008192:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8008196:	3004      	adds	r0, #4
 8008198:	3301      	adds	r3, #1
 800819a:	2b04      	cmp	r3, #4
 800819c:	d1f4      	bne.n	8008188 <_Unwind_VRS_Pop+0x44>
 800819e:	63a8      	str	r0, [r5, #56]	; 0x38
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 f977 	bl	8008494 <__gnu_Unwind_Restore_WMMXC>
 80081a6:	2000      	movs	r0, #0
 80081a8:	e7da      	b.n	8008160 <_Unwind_VRS_Pop+0x1c>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80081b0:	b297      	uxth	r7, r2
 80081b2:	d052      	beq.n	800825a <_Unwind_VRS_Pop+0x116>
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	d1d2      	bne.n	800815e <_Unwind_VRS_Pop+0x1a>
 80081b8:	eb06 0807 	add.w	r8, r6, r7
 80081bc:	f1b8 0f20 	cmp.w	r8, #32
 80081c0:	d8cd      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 80081c2:	2e0f      	cmp	r6, #15
 80081c4:	f240 8099 	bls.w	80082fa <_Unwind_VRS_Pop+0x1b6>
 80081c8:	46b8      	mov	r8, r7
 80081ca:	2f00      	cmp	r7, #0
 80081cc:	f040 80db 	bne.w	8008386 <_Unwind_VRS_Pop+0x242>
 80081d0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80081d2:	63aa      	str	r2, [r5, #56]	; 0x38
 80081d4:	2e0f      	cmp	r6, #15
 80081d6:	f240 80be 	bls.w	8008356 <_Unwind_VRS_Pop+0x212>
 80081da:	f1b8 0f00 	cmp.w	r8, #0
 80081de:	d002      	beq.n	80081e6 <_Unwind_VRS_Pop+0xa2>
 80081e0:	a802      	add	r0, sp, #8
 80081e2:	f000 f90b 	bl	80083fc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80081e6:	2000      	movs	r0, #0
 80081e8:	b044      	add	sp, #272	; 0x110
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1b5      	bne.n	800815e <_Unwind_VRS_Pop+0x1a>
 80081f2:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80081f4:	b297      	uxth	r7, r2
 80081f6:	1d28      	adds	r0, r5, #4
 80081f8:	2601      	movs	r6, #1
 80081fa:	fa06 f103 	lsl.w	r1, r6, r3
 80081fe:	4239      	tst	r1, r7
 8008200:	f103 0301 	add.w	r3, r3, #1
 8008204:	d002      	beq.n	800820c <_Unwind_VRS_Pop+0xc8>
 8008206:	6821      	ldr	r1, [r4, #0]
 8008208:	6001      	str	r1, [r0, #0]
 800820a:	3404      	adds	r4, #4
 800820c:	2b10      	cmp	r3, #16
 800820e:	f100 0004 	add.w	r0, r0, #4
 8008212:	d1f2      	bne.n	80081fa <_Unwind_VRS_Pop+0xb6>
 8008214:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8008218:	d1e5      	bne.n	80081e6 <_Unwind_VRS_Pop+0xa2>
 800821a:	63ac      	str	r4, [r5, #56]	; 0x38
 800821c:	e7a0      	b.n	8008160 <_Unwind_VRS_Pop+0x1c>
 800821e:	0c16      	lsrs	r6, r2, #16
 8008220:	b297      	uxth	r7, r2
 8008222:	19f3      	adds	r3, r6, r7
 8008224:	2b10      	cmp	r3, #16
 8008226:	d89a      	bhi.n	800815e <_Unwind_VRS_Pop+0x1a>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	071a      	lsls	r2, r3, #28
 800822c:	d45d      	bmi.n	80082ea <_Unwind_VRS_Pop+0x1a6>
 800822e:	ac22      	add	r4, sp, #136	; 0x88
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f90d 	bl	8008450 <__gnu_Unwind_Save_WMMXD>
 8008236:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800823a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800823c:	b13f      	cbz	r7, 800824e <_Unwind_VRS_Pop+0x10a>
 800823e:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	f841 0b04 	str.w	r0, [r1], #4
 8008248:	3304      	adds	r3, #4
 800824a:	4293      	cmp	r3, r2
 800824c:	d1f9      	bne.n	8008242 <_Unwind_VRS_Pop+0xfe>
 800824e:	4620      	mov	r0, r4
 8008250:	63ab      	str	r3, [r5, #56]	; 0x38
 8008252:	f000 f8db 	bl	800840c <__gnu_Unwind_Restore_WMMXD>
 8008256:	2000      	movs	r0, #0
 8008258:	e782      	b.n	8008160 <_Unwind_VRS_Pop+0x1c>
 800825a:	19f2      	adds	r2, r6, r7
 800825c:	2a10      	cmp	r2, #16
 800825e:	f63f af7e 	bhi.w	800815e <_Unwind_VRS_Pop+0x1a>
 8008262:	2e0f      	cmp	r6, #15
 8008264:	f63f af7b 	bhi.w	800815e <_Unwind_VRS_Pop+0x1a>
 8008268:	682a      	ldr	r2, [r5, #0]
 800826a:	07d1      	lsls	r1, r2, #31
 800826c:	d508      	bpl.n	8008280 <_Unwind_VRS_Pop+0x13c>
 800826e:	4628      	mov	r0, r5
 8008270:	f022 0203 	bic.w	r2, r2, #3
 8008274:	f840 2b48 	str.w	r2, [r0], #72
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f000 f8b3 	bl	80083e4 <__gnu_Unwind_Save_VFP>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	ac22      	add	r4, sp, #136	; 0x88
 8008284:	4620      	mov	r0, r4
 8008286:	f000 f8ad 	bl	80083e4 <__gnu_Unwind_Save_VFP>
 800828a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	2f00      	cmp	r7, #0
 8008290:	f000 8095 	beq.w	80083be <_Unwind_VRS_Pop+0x27a>
 8008294:	007f      	lsls	r7, r7, #1
 8008296:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800829a:	f04f 0800 	mov.w	r8, #0
 800829e:	3c04      	subs	r4, #4
 80082a0:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 80082a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80082a8:	f844 0f04 	str.w	r0, [r4, #4]!
 80082ac:	4291      	cmp	r1, r2
 80082ae:	d1f9      	bne.n	80082a4 <_Unwind_VRS_Pop+0x160>
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	d00f      	beq.n	80082d6 <_Unwind_VRS_Pop+0x192>
 80082b6:	ac02      	add	r4, sp, #8
 80082b8:	2e10      	cmp	r6, #16
 80082ba:	4631      	mov	r1, r6
 80082bc:	bf38      	it	cc
 80082be:	2110      	movcc	r1, #16
 80082c0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80082c4:	3984      	subs	r1, #132	; 0x84
 80082c6:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 80082ca:	f852 0b04 	ldr.w	r0, [r2], #4
 80082ce:	f841 0f04 	str.w	r0, [r1, #4]!
 80082d2:	4294      	cmp	r4, r2
 80082d4:	d1f9      	bne.n	80082ca <_Unwind_VRS_Pop+0x186>
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	f47f af7b 	bne.w	80081d2 <_Unwind_VRS_Pop+0x8e>
 80082dc:	ac22      	add	r4, sp, #136	; 0x88
 80082de:	3204      	adds	r2, #4
 80082e0:	63aa      	str	r2, [r5, #56]	; 0x38
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f87a 	bl	80083dc <__gnu_Unwind_Restore_VFP>
 80082e8:	e77d      	b.n	80081e6 <_Unwind_VRS_Pop+0xa2>
 80082ea:	f023 0308 	bic.w	r3, r3, #8
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 80082f4:	f000 f8ac 	bl	8008450 <__gnu_Unwind_Save_WMMXD>
 80082f8:	e799      	b.n	800822e <_Unwind_VRS_Pop+0xea>
 80082fa:	f1b8 0f10 	cmp.w	r8, #16
 80082fe:	682a      	ldr	r2, [r5, #0]
 8008300:	d943      	bls.n	800838a <_Unwind_VRS_Pop+0x246>
 8008302:	07d0      	lsls	r0, r2, #31
 8008304:	f1a8 0810 	sub.w	r8, r8, #16
 8008308:	d50b      	bpl.n	8008322 <_Unwind_VRS_Pop+0x1de>
 800830a:	4628      	mov	r0, r5
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	f042 0202 	orr.w	r2, r2, #2
 8008314:	f840 2b48 	str.w	r2, [r0], #72
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f000 f86b 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 800831e:	682a      	ldr	r2, [r5, #0]
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	0751      	lsls	r1, r2, #29
 8008324:	d425      	bmi.n	8008372 <_Unwind_VRS_Pop+0x22e>
 8008326:	2e0f      	cmp	r6, #15
 8008328:	d804      	bhi.n	8008334 <_Unwind_VRS_Pop+0x1f0>
 800832a:	a822      	add	r0, sp, #136	; 0x88
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f000 f861 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 8008332:	9b01      	ldr	r3, [sp, #4]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	ac02      	add	r4, sp, #8
 8008338:	4620      	mov	r0, r4
 800833a:	f000 f863 	bl	8008404 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800833e:	f1c6 0110 	rsb	r1, r6, #16
 8008342:	2900      	cmp	r1, #0
 8008344:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008346:	9b01      	ldr	r3, [sp, #4]
 8008348:	ddb6      	ble.n	80082b8 <_Unwind_VRS_Pop+0x174>
 800834a:	ac22      	add	r4, sp, #136	; 0x88
 800834c:	004f      	lsls	r7, r1, #1
 800834e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008352:	4611      	mov	r1, r2
 8008354:	e7a3      	b.n	800829e <_Unwind_VRS_Pop+0x15a>
 8008356:	a822      	add	r0, sp, #136	; 0x88
 8008358:	f000 f848 	bl	80083ec <__gnu_Unwind_Restore_VFP_D>
 800835c:	e73d      	b.n	80081da <_Unwind_VRS_Pop+0x96>
 800835e:	f023 0310 	bic.w	r3, r3, #16
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8008368:	9201      	str	r2, [sp, #4]
 800836a:	f000 f89d 	bl	80084a8 <__gnu_Unwind_Save_WMMXC>
 800836e:	9a01      	ldr	r2, [sp, #4]
 8008370:	e701      	b.n	8008176 <_Unwind_VRS_Pop+0x32>
 8008372:	4628      	mov	r0, r5
 8008374:	f022 0204 	bic.w	r2, r2, #4
 8008378:	f840 2bd0 	str.w	r2, [r0], #208
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	f000 f841 	bl	8008404 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008382:	9b01      	ldr	r3, [sp, #4]
 8008384:	e7cf      	b.n	8008326 <_Unwind_VRS_Pop+0x1e2>
 8008386:	682a      	ldr	r2, [r5, #0]
 8008388:	e7cb      	b.n	8008322 <_Unwind_VRS_Pop+0x1de>
 800838a:	07d0      	lsls	r0, r2, #31
 800838c:	d50a      	bpl.n	80083a4 <_Unwind_VRS_Pop+0x260>
 800838e:	4628      	mov	r0, r5
 8008390:	f022 0201 	bic.w	r2, r2, #1
 8008394:	f042 0202 	orr.w	r2, r2, #2
 8008398:	f840 2b48 	str.w	r2, [r0], #72
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	f000 f829 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	ac22      	add	r4, sp, #136	; 0x88
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 f823 	bl	80083f4 <__gnu_Unwind_Save_VFP_D>
 80083ae:	46b8      	mov	r8, r7
 80083b0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f47f af6d 	bne.w	8008294 <_Unwind_VRS_Pop+0x150>
 80083ba:	460a      	mov	r2, r1
 80083bc:	e709      	b.n	80081d2 <_Unwind_VRS_Pop+0x8e>
 80083be:	460a      	mov	r2, r1
 80083c0:	e78d      	b.n	80082de <_Unwind_VRS_Pop+0x19a>
 80083c2:	bf00      	nop

080083c4 <__restore_core_regs>:
 80083c4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80083c8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80083cc:	469c      	mov	ip, r3
 80083ce:	46a6      	mov	lr, r4
 80083d0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80083d4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80083d8:	46e5      	mov	sp, ip
 80083da:	bd00      	pop	{pc}

080083dc <__gnu_Unwind_Restore_VFP>:
 80083dc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop

080083e4 <__gnu_Unwind_Save_VFP>:
 80083e4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <__gnu_Unwind_Restore_VFP_D>:
 80083ec:	ec90 0b20 	vldmia	r0, {d0-d15}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop

080083f4 <__gnu_Unwind_Save_VFP_D>:
 80083f4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80083fc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop

08008404 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8008404:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop

0800840c <__gnu_Unwind_Restore_WMMXD>:
 800840c:	ecf0 0102 	ldfe	f0, [r0], #8
 8008410:	ecf0 1102 	ldfe	f1, [r0], #8
 8008414:	ecf0 2102 	ldfe	f2, [r0], #8
 8008418:	ecf0 3102 	ldfe	f3, [r0], #8
 800841c:	ecf0 4102 	ldfe	f4, [r0], #8
 8008420:	ecf0 5102 	ldfe	f5, [r0], #8
 8008424:	ecf0 6102 	ldfe	f6, [r0], #8
 8008428:	ecf0 7102 	ldfe	f7, [r0], #8
 800842c:	ecf0 8102 	ldfp	f0, [r0], #8
 8008430:	ecf0 9102 	ldfp	f1, [r0], #8
 8008434:	ecf0 a102 	ldfp	f2, [r0], #8
 8008438:	ecf0 b102 	ldfp	f3, [r0], #8
 800843c:	ecf0 c102 	ldfp	f4, [r0], #8
 8008440:	ecf0 d102 	ldfp	f5, [r0], #8
 8008444:	ecf0 e102 	ldfp	f6, [r0], #8
 8008448:	ecf0 f102 	ldfp	f7, [r0], #8
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop

08008450 <__gnu_Unwind_Save_WMMXD>:
 8008450:	ece0 0102 	stfe	f0, [r0], #8
 8008454:	ece0 1102 	stfe	f1, [r0], #8
 8008458:	ece0 2102 	stfe	f2, [r0], #8
 800845c:	ece0 3102 	stfe	f3, [r0], #8
 8008460:	ece0 4102 	stfe	f4, [r0], #8
 8008464:	ece0 5102 	stfe	f5, [r0], #8
 8008468:	ece0 6102 	stfe	f6, [r0], #8
 800846c:	ece0 7102 	stfe	f7, [r0], #8
 8008470:	ece0 8102 	stfp	f0, [r0], #8
 8008474:	ece0 9102 	stfp	f1, [r0], #8
 8008478:	ece0 a102 	stfp	f2, [r0], #8
 800847c:	ece0 b102 	stfp	f3, [r0], #8
 8008480:	ece0 c102 	stfp	f4, [r0], #8
 8008484:	ece0 d102 	stfp	f5, [r0], #8
 8008488:	ece0 e102 	stfp	f6, [r0], #8
 800848c:	ece0 f102 	stfp	f7, [r0], #8
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop

08008494 <__gnu_Unwind_Restore_WMMXC>:
 8008494:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008498:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800849c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80084a0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <__gnu_Unwind_Save_WMMXC>:
 80084a8:	fca0 8101 	stc2	1, cr8, [r0], #4
 80084ac:	fca0 9101 	stc2	1, cr9, [r0], #4
 80084b0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80084b4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop

080084bc <_Unwind_RaiseException>:
 80084bc:	46ec      	mov	ip, sp
 80084be:	b500      	push	{lr}
 80084c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084d0:	a901      	add	r1, sp, #4
 80084d2:	f7ff fbdd 	bl	8007c90 <__gnu_Unwind_RaiseException>
 80084d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084da:	b012      	add	sp, #72	; 0x48
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop

080084e0 <_Unwind_Resume>:
 80084e0:	46ec      	mov	ip, sp
 80084e2:	b500      	push	{lr}
 80084e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80084e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80084f4:	a901      	add	r1, sp, #4
 80084f6:	f7ff fc05 	bl	8007d04 <__gnu_Unwind_Resume>
 80084fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80084fe:	b012      	add	sp, #72	; 0x48
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <_Unwind_Resume_or_Rethrow>:
 8008504:	46ec      	mov	ip, sp
 8008506:	b500      	push	{lr}
 8008508:	e92d 5000 	stmdb	sp!, {ip, lr}
 800850c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008510:	f04f 0300 	mov.w	r3, #0
 8008514:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008518:	a901      	add	r1, sp, #4
 800851a:	f7ff fc15 	bl	8007d48 <__gnu_Unwind_Resume_or_Rethrow>
 800851e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008522:	b012      	add	sp, #72	; 0x48
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop

08008528 <_Unwind_ForcedUnwind>:
 8008528:	46ec      	mov	ip, sp
 800852a:	b500      	push	{lr}
 800852c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008530:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008534:	f04f 0300 	mov.w	r3, #0
 8008538:	e92d 000c 	stmdb	sp!, {r2, r3}
 800853c:	ab01      	add	r3, sp, #4
 800853e:	f7ff fbd7 	bl	8007cf0 <__gnu_Unwind_ForcedUnwind>
 8008542:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008546:	b012      	add	sp, #72	; 0x48
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop

0800854c <_Unwind_Backtrace>:
 800854c:	46ec      	mov	ip, sp
 800854e:	b500      	push	{lr}
 8008550:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008554:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008560:	aa01      	add	r2, sp, #4
 8008562:	f7ff fc47 	bl	8007df4 <__gnu_Unwind_Backtrace>
 8008566:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800856a:	b012      	add	sp, #72	; 0x48
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop

08008570 <next_unwind_byte>:
 8008570:	7a02      	ldrb	r2, [r0, #8]
 8008572:	b982      	cbnz	r2, 8008596 <next_unwind_byte+0x26>
 8008574:	7a43      	ldrb	r3, [r0, #9]
 8008576:	b1ab      	cbz	r3, 80085a4 <next_unwind_byte+0x34>
 8008578:	6842      	ldr	r2, [r0, #4]
 800857a:	3b01      	subs	r3, #1
 800857c:	b410      	push	{r4}
 800857e:	7243      	strb	r3, [r0, #9]
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	2103      	movs	r1, #3
 8008584:	1d14      	adds	r4, r2, #4
 8008586:	7201      	strb	r1, [r0, #8]
 8008588:	021a      	lsls	r2, r3, #8
 800858a:	6044      	str	r4, [r0, #4]
 800858c:	6002      	str	r2, [r0, #0]
 800858e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008592:	0e18      	lsrs	r0, r3, #24
 8008594:	4770      	bx	lr
 8008596:	6803      	ldr	r3, [r0, #0]
 8008598:	3a01      	subs	r2, #1
 800859a:	7202      	strb	r2, [r0, #8]
 800859c:	021a      	lsls	r2, r3, #8
 800859e:	6002      	str	r2, [r0, #0]
 80085a0:	0e18      	lsrs	r0, r3, #24
 80085a2:	4770      	bx	lr
 80085a4:	20b0      	movs	r0, #176	; 0xb0
 80085a6:	4770      	bx	lr

080085a8 <_Unwind_GetGR.constprop.0>:
 80085a8:	b500      	push	{lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	aa03      	add	r2, sp, #12
 80085ae:	2300      	movs	r3, #0
 80085b0:	9200      	str	r2, [sp, #0]
 80085b2:	4619      	mov	r1, r3
 80085b4:	220c      	movs	r2, #12
 80085b6:	f7ff fbd7 	bl	8007d68 <_Unwind_VRS_Get>
 80085ba:	9803      	ldr	r0, [sp, #12]
 80085bc:	b005      	add	sp, #20
 80085be:	f85d fb04 	ldr.w	pc, [sp], #4
 80085c2:	bf00      	nop

080085c4 <unwind_UCB_from_context>:
 80085c4:	e7f0      	b.n	80085a8 <_Unwind_GetGR.constprop.0>
 80085c6:	bf00      	nop

080085c8 <__gnu_unwind_execute>:
 80085c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085cc:	4605      	mov	r5, r0
 80085ce:	b085      	sub	sp, #20
 80085d0:	460e      	mov	r6, r1
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ffca 	bl	8008570 <next_unwind_byte>
 80085dc:	28b0      	cmp	r0, #176	; 0xb0
 80085de:	4604      	mov	r4, r0
 80085e0:	f000 80b1 	beq.w	8008746 <__gnu_unwind_execute+0x17e>
 80085e4:	0607      	lsls	r7, r0, #24
 80085e6:	d520      	bpl.n	800862a <__gnu_unwind_execute+0x62>
 80085e8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80085ec:	2b80      	cmp	r3, #128	; 0x80
 80085ee:	d065      	beq.n	80086bc <__gnu_unwind_execute+0xf4>
 80085f0:	2b90      	cmp	r3, #144	; 0x90
 80085f2:	d036      	beq.n	8008662 <__gnu_unwind_execute+0x9a>
 80085f4:	2ba0      	cmp	r3, #160	; 0xa0
 80085f6:	d078      	beq.n	80086ea <__gnu_unwind_execute+0x122>
 80085f8:	2bb0      	cmp	r3, #176	; 0xb0
 80085fa:	d047      	beq.n	800868c <__gnu_unwind_execute+0xc4>
 80085fc:	2bc0      	cmp	r3, #192	; 0xc0
 80085fe:	f000 808a 	beq.w	8008716 <__gnu_unwind_execute+0x14e>
 8008602:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008606:	2bd0      	cmp	r3, #208	; 0xd0
 8008608:	d10b      	bne.n	8008622 <__gnu_unwind_execute+0x5a>
 800860a:	f000 0207 	and.w	r2, r0, #7
 800860e:	3201      	adds	r2, #1
 8008610:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008614:	2305      	movs	r3, #5
 8008616:	2101      	movs	r1, #1
 8008618:	4628      	mov	r0, r5
 800861a:	f7ff fd93 	bl	8008144 <_Unwind_VRS_Pop>
 800861e:	2800      	cmp	r0, #0
 8008620:	d0d9      	beq.n	80085d6 <__gnu_unwind_execute+0xe>
 8008622:	2009      	movs	r0, #9
 8008624:	b005      	add	sp, #20
 8008626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800862a:	f10d 090c 	add.w	r9, sp, #12
 800862e:	2300      	movs	r3, #0
 8008630:	4619      	mov	r1, r3
 8008632:	0087      	lsls	r7, r0, #2
 8008634:	f8cd 9000 	str.w	r9, [sp]
 8008638:	220d      	movs	r2, #13
 800863a:	4628      	mov	r0, r5
 800863c:	f7ff fb94 	bl	8007d68 <_Unwind_VRS_Get>
 8008640:	b2ff      	uxtb	r7, r7
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	f8cd 9000 	str.w	r9, [sp]
 8008648:	3704      	adds	r7, #4
 800864a:	0660      	lsls	r0, r4, #25
 800864c:	bf4c      	ite	mi
 800864e:	1bdf      	submi	r7, r3, r7
 8008650:	18ff      	addpl	r7, r7, r3
 8008652:	2300      	movs	r3, #0
 8008654:	4619      	mov	r1, r3
 8008656:	220d      	movs	r2, #13
 8008658:	4628      	mov	r0, r5
 800865a:	9703      	str	r7, [sp, #12]
 800865c:	f7ff fba6 	bl	8007dac <_Unwind_VRS_Set>
 8008660:	e7b9      	b.n	80085d6 <__gnu_unwind_execute+0xe>
 8008662:	f000 030d 	and.w	r3, r0, #13
 8008666:	2b0d      	cmp	r3, #13
 8008668:	d0db      	beq.n	8008622 <__gnu_unwind_execute+0x5a>
 800866a:	af03      	add	r7, sp, #12
 800866c:	2300      	movs	r3, #0
 800866e:	f000 020f 	and.w	r2, r0, #15
 8008672:	4619      	mov	r1, r3
 8008674:	9700      	str	r7, [sp, #0]
 8008676:	4628      	mov	r0, r5
 8008678:	f7ff fb76 	bl	8007d68 <_Unwind_VRS_Get>
 800867c:	2300      	movs	r3, #0
 800867e:	9700      	str	r7, [sp, #0]
 8008680:	4619      	mov	r1, r3
 8008682:	220d      	movs	r2, #13
 8008684:	4628      	mov	r0, r5
 8008686:	f7ff fb91 	bl	8007dac <_Unwind_VRS_Set>
 800868a:	e7a4      	b.n	80085d6 <__gnu_unwind_execute+0xe>
 800868c:	28b1      	cmp	r0, #177	; 0xb1
 800868e:	d05f      	beq.n	8008750 <__gnu_unwind_execute+0x188>
 8008690:	28b2      	cmp	r0, #178	; 0xb2
 8008692:	f000 80cc 	beq.w	800882e <__gnu_unwind_execute+0x266>
 8008696:	28b3      	cmp	r0, #179	; 0xb3
 8008698:	d07e      	beq.n	8008798 <__gnu_unwind_execute+0x1d0>
 800869a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800869e:	2bb4      	cmp	r3, #180	; 0xb4
 80086a0:	d0bf      	beq.n	8008622 <__gnu_unwind_execute+0x5a>
 80086a2:	f000 0207 	and.w	r2, r0, #7
 80086a6:	3201      	adds	r2, #1
 80086a8:	2301      	movs	r3, #1
 80086aa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80086ae:	4619      	mov	r1, r3
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff fd47 	bl	8008144 <_Unwind_VRS_Pop>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d08d      	beq.n	80085d6 <__gnu_unwind_execute+0xe>
 80086ba:	e7b2      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ff57 	bl	8008570 <next_unwind_byte>
 80086c2:	0224      	lsls	r4, r4, #8
 80086c4:	4304      	orrs	r4, r0
 80086c6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80086ca:	d0aa      	beq.n	8008622 <__gnu_unwind_execute+0x5a>
 80086cc:	0124      	lsls	r4, r4, #4
 80086ce:	2300      	movs	r3, #0
 80086d0:	b2a2      	uxth	r2, r4
 80086d2:	4619      	mov	r1, r3
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff fd35 	bl	8008144 <_Unwind_VRS_Pop>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1a1      	bne.n	8008622 <__gnu_unwind_execute+0x5a>
 80086de:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80086e2:	bf18      	it	ne
 80086e4:	f04f 0801 	movne.w	r8, #1
 80086e8:	e775      	b.n	80085d6 <__gnu_unwind_execute+0xe>
 80086ea:	43c2      	mvns	r2, r0
 80086ec:	f002 0307 	and.w	r3, r2, #7
 80086f0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80086f4:	411a      	asrs	r2, r3
 80086f6:	0701      	lsls	r1, r0, #28
 80086f8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	bf48      	it	mi
 8008702:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8008706:	4619      	mov	r1, r3
 8008708:	4628      	mov	r0, r5
 800870a:	f7ff fd1b 	bl	8008144 <_Unwind_VRS_Pop>
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f af61 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 8008714:	e785      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 8008716:	28c6      	cmp	r0, #198	; 0xc6
 8008718:	d051      	beq.n	80087be <__gnu_unwind_execute+0x1f6>
 800871a:	28c7      	cmp	r0, #199	; 0xc7
 800871c:	d05a      	beq.n	80087d4 <__gnu_unwind_execute+0x20c>
 800871e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8008722:	2bc0      	cmp	r3, #192	; 0xc0
 8008724:	d069      	beq.n	80087fa <__gnu_unwind_execute+0x232>
 8008726:	28c8      	cmp	r0, #200	; 0xc8
 8008728:	d075      	beq.n	8008816 <__gnu_unwind_execute+0x24e>
 800872a:	28c9      	cmp	r0, #201	; 0xc9
 800872c:	f47f af79 	bne.w	8008622 <__gnu_unwind_execute+0x5a>
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ff1d 	bl	8008570 <next_unwind_byte>
 8008736:	0302      	lsls	r2, r0, #12
 8008738:	f000 000f 	and.w	r0, r0, #15
 800873c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8008740:	3001      	adds	r0, #1
 8008742:	4302      	orrs	r2, r0
 8008744:	e766      	b.n	8008614 <__gnu_unwind_execute+0x4c>
 8008746:	f1b8 0f00 	cmp.w	r8, #0
 800874a:	d014      	beq.n	8008776 <__gnu_unwind_execute+0x1ae>
 800874c:	2000      	movs	r0, #0
 800874e:	e769      	b.n	8008624 <__gnu_unwind_execute+0x5c>
 8008750:	4630      	mov	r0, r6
 8008752:	f7ff ff0d 	bl	8008570 <next_unwind_byte>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f af63 	beq.w	8008622 <__gnu_unwind_execute+0x5a>
 800875c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008760:	f47f af5f 	bne.w	8008622 <__gnu_unwind_execute+0x5a>
 8008764:	4602      	mov	r2, r0
 8008766:	4619      	mov	r1, r3
 8008768:	4628      	mov	r0, r5
 800876a:	f7ff fceb 	bl	8008144 <_Unwind_VRS_Pop>
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af31 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 8008774:	e755      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 8008776:	ac03      	add	r4, sp, #12
 8008778:	4643      	mov	r3, r8
 800877a:	220e      	movs	r2, #14
 800877c:	4641      	mov	r1, r8
 800877e:	9400      	str	r4, [sp, #0]
 8008780:	4628      	mov	r0, r5
 8008782:	f7ff faf1 	bl	8007d68 <_Unwind_VRS_Get>
 8008786:	9400      	str	r4, [sp, #0]
 8008788:	4628      	mov	r0, r5
 800878a:	4643      	mov	r3, r8
 800878c:	220f      	movs	r2, #15
 800878e:	4641      	mov	r1, r8
 8008790:	f7ff fb0c 	bl	8007dac <_Unwind_VRS_Set>
 8008794:	4640      	mov	r0, r8
 8008796:	e745      	b.n	8008624 <__gnu_unwind_execute+0x5c>
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff fee9 	bl	8008570 <next_unwind_byte>
 800879e:	0301      	lsls	r1, r0, #12
 80087a0:	f000 000f 	and.w	r0, r0, #15
 80087a4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80087a8:	1c42      	adds	r2, r0, #1
 80087aa:	2301      	movs	r3, #1
 80087ac:	430a      	orrs	r2, r1
 80087ae:	4628      	mov	r0, r5
 80087b0:	4619      	mov	r1, r3
 80087b2:	f7ff fcc7 	bl	8008144 <_Unwind_VRS_Pop>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f af0d 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 80087bc:	e731      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff fed6 	bl	8008570 <next_unwind_byte>
 80087c4:	0301      	lsls	r1, r0, #12
 80087c6:	f000 000f 	and.w	r0, r0, #15
 80087ca:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80087ce:	1c42      	adds	r2, r0, #1
 80087d0:	2303      	movs	r3, #3
 80087d2:	e7eb      	b.n	80087ac <__gnu_unwind_execute+0x1e4>
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7ff fecb 	bl	8008570 <next_unwind_byte>
 80087da:	4602      	mov	r2, r0
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f af20 	beq.w	8008622 <__gnu_unwind_execute+0x5a>
 80087e2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80087e6:	f47f af1c 	bne.w	8008622 <__gnu_unwind_execute+0x5a>
 80087ea:	2104      	movs	r1, #4
 80087ec:	4628      	mov	r0, r5
 80087ee:	f7ff fca9 	bl	8008144 <_Unwind_VRS_Pop>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f aeef 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 80087f8:	e713      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 80087fa:	f000 020f 	and.w	r2, r0, #15
 80087fe:	3201      	adds	r2, #1
 8008800:	2303      	movs	r3, #3
 8008802:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8008806:	4619      	mov	r1, r3
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fc9b 	bl	8008144 <_Unwind_VRS_Pop>
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f aee1 	beq.w	80085d6 <__gnu_unwind_execute+0xe>
 8008814:	e705      	b.n	8008622 <__gnu_unwind_execute+0x5a>
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff feaa 	bl	8008570 <next_unwind_byte>
 800881c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8008820:	f000 030f 	and.w	r3, r0, #15
 8008824:	3210      	adds	r2, #16
 8008826:	3301      	adds	r3, #1
 8008828:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800882c:	e6f2      	b.n	8008614 <__gnu_unwind_execute+0x4c>
 800882e:	2300      	movs	r3, #0
 8008830:	f10d 090c 	add.w	r9, sp, #12
 8008834:	220d      	movs	r2, #13
 8008836:	4619      	mov	r1, r3
 8008838:	f8cd 9000 	str.w	r9, [sp]
 800883c:	4628      	mov	r0, r5
 800883e:	f7ff fa93 	bl	8007d68 <_Unwind_VRS_Get>
 8008842:	4630      	mov	r0, r6
 8008844:	f7ff fe94 	bl	8008570 <next_unwind_byte>
 8008848:	0602      	lsls	r2, r0, #24
 800884a:	f04f 0702 	mov.w	r7, #2
 800884e:	d50c      	bpl.n	800886a <__gnu_unwind_execute+0x2a2>
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008856:	40b8      	lsls	r0, r7
 8008858:	4403      	add	r3, r0
 800885a:	4630      	mov	r0, r6
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	f7ff fe87 	bl	8008570 <next_unwind_byte>
 8008862:	0603      	lsls	r3, r0, #24
 8008864:	f107 0707 	add.w	r7, r7, #7
 8008868:	d4f2      	bmi.n	8008850 <__gnu_unwind_execute+0x288>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f8cd 9000 	str.w	r9, [sp]
 8008870:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8008874:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8008878:	40bc      	lsls	r4, r7
 800887a:	2300      	movs	r3, #0
 800887c:	4414      	add	r4, r2
 800887e:	4619      	mov	r1, r3
 8008880:	220d      	movs	r2, #13
 8008882:	4628      	mov	r0, r5
 8008884:	9403      	str	r4, [sp, #12]
 8008886:	f7ff fa91 	bl	8007dac <_Unwind_VRS_Set>
 800888a:	e6a4      	b.n	80085d6 <__gnu_unwind_execute+0xe>

0800888c <__gnu_unwind_frame>:
 800888c:	b510      	push	{r4, lr}
 800888e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008890:	b084      	sub	sp, #16
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	2003      	movs	r0, #3
 8008896:	f88d 000c 	strb.w	r0, [sp, #12]
 800889a:	79dc      	ldrb	r4, [r3, #7]
 800889c:	f88d 400d 	strb.w	r4, [sp, #13]
 80088a0:	0212      	lsls	r2, r2, #8
 80088a2:	3308      	adds	r3, #8
 80088a4:	4608      	mov	r0, r1
 80088a6:	a901      	add	r1, sp, #4
 80088a8:	9201      	str	r2, [sp, #4]
 80088aa:	9302      	str	r3, [sp, #8]
 80088ac:	f7ff fe8c 	bl	80085c8 <__gnu_unwind_execute>
 80088b0:	b004      	add	sp, #16
 80088b2:	bd10      	pop	{r4, pc}

080088b4 <_Unwind_GetRegionStart>:
 80088b4:	b508      	push	{r3, lr}
 80088b6:	f7ff fe85 	bl	80085c4 <unwind_UCB_from_context>
 80088ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80088bc:	bd08      	pop	{r3, pc}
 80088be:	bf00      	nop

080088c0 <_Unwind_GetLanguageSpecificData>:
 80088c0:	b508      	push	{r3, lr}
 80088c2:	f7ff fe7f 	bl	80085c4 <unwind_UCB_from_context>
 80088c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80088c8:	79c3      	ldrb	r3, [r0, #7]
 80088ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80088ce:	3008      	adds	r0, #8
 80088d0:	bd08      	pop	{r3, pc}
 80088d2:	bf00      	nop

080088d4 <_Unwind_GetDataRelBase>:
 80088d4:	b508      	push	{r3, lr}
 80088d6:	f00b fc9b 	bl	8014210 <abort>
 80088da:	bf00      	nop

080088dc <_Unwind_GetTextRelBase>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	f7ff fff9 	bl	80088d4 <_Unwind_GetDataRelBase>
 80088e2:	bf00      	nop

080088e4 <__aeabi_idiv0>:
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <BSP_PB_Init>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	460a      	mov	r2, r1
 80088f2:	71fb      	strb	r3, [r7, #7]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <BSP_PB_Init+0x30>
 80088fe:	4b3a      	ldr	r3, [pc, #232]	; (80089e8 <BSP_PB_Init+0x100>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	4a39      	ldr	r2, [pc, #228]	; (80089e8 <BSP_PB_Init+0x100>)
 8008904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008908:	6313      	str	r3, [r2, #48]	; 0x30
 800890a:	4b37      	ldr	r3, [pc, #220]	; (80089e8 <BSP_PB_Init+0x100>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	e01b      	b.n	8008950 <BSP_PB_Init+0x68>
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d10c      	bne.n	8008938 <BSP_PB_Init+0x50>
 800891e:	4b32      	ldr	r3, [pc, #200]	; (80089e8 <BSP_PB_Init+0x100>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a31      	ldr	r2, [pc, #196]	; (80089e8 <BSP_PB_Init+0x100>)
 8008924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b2f      	ldr	r3, [pc, #188]	; (80089e8 <BSP_PB_Init+0x100>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	e00b      	b.n	8008950 <BSP_PB_Init+0x68>
 8008938:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <BSP_PB_Init+0x100>)
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <BSP_PB_Init+0x100>)
 800893e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008942:	6313      	str	r3, [r2, #48]	; 0x30
 8008944:	4b28      	ldr	r3, [pc, #160]	; (80089e8 <BSP_PB_Init+0x100>)
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008950:	79bb      	ldrb	r3, [r7, #6]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d114      	bne.n	8008980 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	4a24      	ldr	r2, [pc, #144]	; (80089ec <BSP_PB_Init+0x104>)
 800895a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008960:	2300      	movs	r3, #0
 8008962:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8008968:	2302      	movs	r3, #2
 800896a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	4a20      	ldr	r2, [pc, #128]	; (80089f0 <BSP_PB_Init+0x108>)
 8008970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008974:	f107 0214 	add.w	r2, r7, #20
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f001 ff84 	bl	800a888 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8008980:	79bb      	ldrb	r3, [r7, #6]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d12c      	bne.n	80089e0 <BSP_PB_Init+0xf8>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	4a18      	ldr	r2, [pc, #96]	; (80089ec <BSP_PB_Init+0x104>)
 800898a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800898e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8008990:	2300      	movs	r3, #0
 8008992:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8008994:	2302      	movs	r3, #2
 8008996:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <BSP_PB_Init+0xbc>
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800899e:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <BSP_PB_Init+0x10c>)
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	e001      	b.n	80089a8 <BSP_PB_Init+0xc0>
    }
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80089a4:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <BSP_PB_Init+0x110>)
 80089a6:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	4a11      	ldr	r2, [pc, #68]	; (80089f0 <BSP_PB_Init+0x108>)
 80089ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b0:	f107 0214 	add.w	r2, r7, #20
 80089b4:	4611      	mov	r1, r2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 ff66 	bl	800a888 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <BSP_PB_Init+0x114>)
 80089c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089c4:	b25b      	sxtb	r3, r3
 80089c6:	2200      	movs	r2, #0
 80089c8:	210f      	movs	r1, #15
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 f835 	bl	8009a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80089d0:	79fb      	ldrb	r3, [r7, #7]
 80089d2:	4a0a      	ldr	r2, [pc, #40]	; (80089fc <BSP_PB_Init+0x114>)
 80089d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d8:	b25b      	sxtb	r3, r3
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 f849 	bl	8009a72 <HAL_NVIC_EnableIRQ>
  }
}
 80089e0:	bf00      	nop
 80089e2:	3728      	adds	r7, #40	; 0x28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40023800 	.word	0x40023800
 80089ec:	08018ac8 	.word	0x08018ac8
 80089f0:	20000000 	.word	0x20000000
 80089f4:	10210000 	.word	0x10210000
 80089f8:	10110000 	.word	0x10110000
 80089fc:	08018ad0 	.word	0x08018ad0

08008a00 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	4a07      	ldr	r2, [pc, #28]	; (8008a2c <BSP_PB_GetState+0x2c>)
 8008a0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	4a06      	ldr	r2, [pc, #24]	; (8008a30 <BSP_PB_GetState+0x30>)
 8008a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	f002 f8de 	bl	800abdc <HAL_GPIO_ReadPin>
 8008a20:	4603      	mov	r3, r0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000000 	.word	0x20000000
 8008a30:	08018ac8 	.word	0x08018ac8

08008a34 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008a38:	4b31      	ldr	r3, [pc, #196]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a3a:	2228      	movs	r2, #40	; 0x28
 8008a3c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008a3e:	4b30      	ldr	r3, [pc, #192]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a40:	2209      	movs	r2, #9
 8008a42:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008a44:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a46:	2235      	movs	r2, #53	; 0x35
 8008a48:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008a4a:	4b2d      	ldr	r3, [pc, #180]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a4c:	220b      	movs	r2, #11
 8008a4e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008a50:	4b2b      	ldr	r3, [pc, #172]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a52:	f240 121b 	movw	r2, #283	; 0x11b
 8008a56:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008a58:	4b29      	ldr	r3, [pc, #164]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a5a:	f240 2215 	movw	r2, #533	; 0x215
 8008a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8008a60:	4b27      	ldr	r3, [pc, #156]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a62:	f240 121d 	movw	r2, #285	; 0x11d
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8008a68:	4b25      	ldr	r3, [pc, #148]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a6a:	f240 2235 	movw	r2, #565	; 0x235
 8008a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8008a70:	2100      	movs	r1, #0
 8008a72:	4823      	ldr	r0, [pc, #140]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a74:	f000 fb9a 	bl	80091ac <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8008a78:	4b21      	ldr	r3, [pc, #132]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a7a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8008a80:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a82:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8008a90:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8008a98:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008aa0:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8008aa6:	4b16      	ldr	r3, [pc, #88]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8008aac:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8008ab8:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008aba:	4a12      	ldr	r2, [pc, #72]	; (8008b04 <BSP_LCD_Init+0xd0>)
 8008abc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008abe:	4810      	ldr	r0, [pc, #64]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008ac0:	f002 febe 	bl	800b840 <HAL_LTDC_GetState>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d103      	bne.n	8008ad2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8008aca:	2100      	movs	r1, #0
 8008acc:	480c      	ldr	r0, [pc, #48]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008ace:	f000 fa93 	bl	8008ff8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8008ad2:	480b      	ldr	r0, [pc, #44]	; (8008b00 <BSP_LCD_Init+0xcc>)
 8008ad4:	f002 fd64 	bl	800b5a0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ade:	480a      	ldr	r0, [pc, #40]	; (8008b08 <BSP_LCD_Init+0xd4>)
 8008ae0:	f002 f894 	bl	800ac0c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	2108      	movs	r1, #8
 8008ae8:	4808      	ldr	r0, [pc, #32]	; (8008b0c <BSP_LCD_Init+0xd8>)
 8008aea:	f002 f88f 	bl	800ac0c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8008aee:	f000 fc7d 	bl	80093ec <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008af2:	4807      	ldr	r0, [pc, #28]	; (8008b10 <BSP_LCD_Init+0xdc>)
 8008af4:	f000 f8d0 	bl	8008c98 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200009fc 	.word	0x200009fc
 8008b04:	40016800 	.word	0x40016800
 8008b08:	40022000 	.word	0x40022000
 8008b0c:	40022800 	.word	0x40022800
 8008b10:	20000020 	.word	0x20000020

08008b14 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <BSP_LCD_GetXSize+0x20>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a06      	ldr	r2, [pc, #24]	; (8008b38 <BSP_LCD_GetXSize+0x24>)
 8008b1e:	2134      	movs	r1, #52	; 0x34
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	4413      	add	r3, r2
 8008b26:	3360      	adds	r3, #96	; 0x60
 8008b28:	681b      	ldr	r3, [r3, #0]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	20000ae4 	.word	0x20000ae4
 8008b38:	200009fc 	.word	0x200009fc

08008b3c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008b40:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <BSP_LCD_GetYSize+0x20>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <BSP_LCD_GetYSize+0x24>)
 8008b46:	2134      	movs	r1, #52	; 0x34
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3364      	adds	r3, #100	; 0x64
 8008b50:	681b      	ldr	r3, [r3, #0]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20000ae4 	.word	0x20000ae4
 8008b60:	200009fc 	.word	0x200009fc

08008b64 <BSP_LCD_LayerRgb565Init>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b090      	sub	sp, #64	; 0x40
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8008b74:	f7ff ffce 	bl	8008b14 <BSP_LCD_GetXSize>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8008b80:	f7ff ffdc 	bl	8008b3c <BSP_LCD_GetYSize>
 8008b84:	4603      	mov	r3, r0
 8008b86:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8008b90:	23ff      	movs	r3, #255	; 0xff
 8008b92:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008baa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008bb0:	2307      	movs	r3, #7
 8008bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8008bb4:	f7ff ffae 	bl	8008b14 <BSP_LCD_GetXSize>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8008bbc:	f7ff ffbe 	bl	8008b3c <BSP_LCD_GetYSize>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008bc4:	88fa      	ldrh	r2, [r7, #6]
 8008bc6:	f107 030c 	add.w	r3, r7, #12
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4812      	ldr	r0, [pc, #72]	; (8008c18 <BSP_LCD_LayerRgb565Init+0xb4>)
 8008bce:	f002 fdc3 	bl	800b758 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	4911      	ldr	r1, [pc, #68]	; (8008c1c <BSP_LCD_LayerRgb565Init+0xb8>)
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	3304      	adds	r3, #4
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008be6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008be8:	88fa      	ldrh	r2, [r7, #6]
 8008bea:	490c      	ldr	r1, [pc, #48]	; (8008c1c <BSP_LCD_LayerRgb565Init+0xb8>)
 8008bec:	4613      	mov	r3, r2
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <BSP_LCD_LayerRgb565Init+0xbc>)
 8008bfa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008bfc:	88fa      	ldrh	r2, [r7, #6]
 8008bfe:	4907      	ldr	r1, [pc, #28]	; (8008c1c <BSP_LCD_LayerRgb565Init+0xb8>)
 8008c00:	4613      	mov	r3, r2
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	440b      	add	r3, r1
 8008c0a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8008c0e:	601a      	str	r2, [r3, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3740      	adds	r7, #64	; 0x40
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	200009fc 	.word	0x200009fc
 8008c1c:	20000ae8 	.word	0x20000ae8
 8008c20:	20000020 	.word	0x20000020

08008c24 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8008c2c:	4a04      	ldr	r2, [pc, #16]	; (8008c40 <BSP_LCD_SelectLayer+0x1c>)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6013      	str	r3, [r2, #0]
} 
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20000ae4 	.word	0x20000ae4

08008c44 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4619      	mov	r1, r3
 8008c56:	4803      	ldr	r0, [pc, #12]	; (8008c64 <BSP_LCD_SetTransparency+0x20>)
 8008c58:	f002 fdbc 	bl	800b7d4 <HAL_LTDC_SetAlpha>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200009fc 	.word	0x200009fc

08008c68 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <BSP_LCD_SetTextColor+0x28>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4907      	ldr	r1, [pc, #28]	; (8008c94 <BSP_LCD_SetTextColor+0x2c>)
 8008c76:	4613      	mov	r3, r2
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	20000ae4 	.word	0x20000ae4
 8008c94:	20000ae8 	.word	0x20000ae8

08008c98 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8008ca0:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <BSP_LCD_SetFont+0x2c>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4908      	ldr	r1, [pc, #32]	; (8008cc8 <BSP_LCD_SetFont+0x30>)
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20000ae4 	.word	0x20000ae4
 8008cc8:	20000ae8 	.word	0x20000ae8

08008ccc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <BSP_LCD_Clear+0x48>)
 8008cd6:	681c      	ldr	r4, [r3, #0]
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <BSP_LCD_Clear+0x48>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a0e      	ldr	r2, [pc, #56]	; (8008d18 <BSP_LCD_Clear+0x4c>)
 8008cde:	2134      	movs	r1, #52	; 0x34
 8008ce0:	fb01 f303 	mul.w	r3, r1, r3
 8008ce4:	4413      	add	r3, r2
 8008ce6:	335c      	adds	r3, #92	; 0x5c
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461d      	mov	r5, r3
 8008cec:	f7ff ff12 	bl	8008b14 <BSP_LCD_GetXSize>
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	f7ff ff23 	bl	8008b3c <BSP_LCD_GetYSize>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4613      	mov	r3, r2
 8008d02:	4632      	mov	r2, r6
 8008d04:	4629      	mov	r1, r5
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fb24 	bl	8009354 <LL_FillBuffer>
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d14:	20000ae4 	.word	0x20000ae4
 8008d18:	200009fc 	.word	0x200009fc

08008d1c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8008d1c:	b590      	push	{r4, r7, lr}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	80fb      	strh	r3, [r7, #6]
 8008d26:	460b      	mov	r3, r1
 8008d28:	80bb      	strh	r3, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008d2e:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <BSP_LCD_DisplayChar+0x80>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	491b      	ldr	r1, [pc, #108]	; (8008da0 <BSP_LCD_DisplayChar+0x84>)
 8008d34:	4613      	mov	r3, r2
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	3308      	adds	r3, #8
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6819      	ldr	r1, [r3, #0]
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008d4a:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <BSP_LCD_DisplayChar+0x80>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	4c14      	ldr	r4, [pc, #80]	; (8008da0 <BSP_LCD_DisplayChar+0x84>)
 8008d50:	4613      	mov	r3, r2
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4423      	add	r3, r4
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008d60:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8008d64:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <BSP_LCD_DisplayChar+0x80>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4c0d      	ldr	r4, [pc, #52]	; (8008da0 <BSP_LCD_DisplayChar+0x84>)
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4423      	add	r3, r4
 8008d74:	3308      	adds	r3, #8
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	889b      	ldrh	r3, [r3, #4]
 8008d7a:	3307      	adds	r3, #7
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	da00      	bge.n	8008d82 <BSP_LCD_DisplayChar+0x66>
 8008d80:	3307      	adds	r3, #7
 8008d82:	10db      	asrs	r3, r3, #3
 8008d84:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008d88:	18ca      	adds	r2, r1, r3
 8008d8a:	88b9      	ldrh	r1, [r7, #4]
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fa28 	bl	80091e4 <DrawChar>
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd90      	pop	{r4, r7, pc}
 8008d9c:	20000ae4 	.word	0x20000ae4
 8008da0:	20000ae8 	.word	0x20000ae8

08008da4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, const char* Text, Text_AlignModeTypdef Mode)
{
 8008da4:	b5b0      	push	{r4, r5, r7, lr}
 8008da6:	b088      	sub	sp, #32
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60ba      	str	r2, [r7, #8]
 8008dac:	461a      	mov	r2, r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	81fb      	strh	r3, [r7, #14]
 8008db2:	460b      	mov	r3, r1
 8008db4:	81bb      	strh	r3, [r7, #12]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	83fb      	strh	r3, [r7, #30]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8008dce:	e002      	b.n	8008dd6 <BSP_LCD_DisplayStringAt+0x32>
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	617a      	str	r2, [r7, #20]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f6      	bne.n	8008dd0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008de2:	f7ff fe97 	bl	8008b14 <BSP_LCD_GetXSize>
 8008de6:	4b4f      	ldr	r3, [pc, #316]	; (8008f24 <BSP_LCD_DisplayStringAt+0x180>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	494f      	ldr	r1, [pc, #316]	; (8008f28 <BSP_LCD_DisplayStringAt+0x184>)
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	3308      	adds	r3, #8
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	889b      	ldrh	r3, [r3, #4]
 8008dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e00:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d01c      	beq.n	8008e42 <BSP_LCD_DisplayStringAt+0x9e>
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d017      	beq.n	8008e3c <BSP_LCD_DisplayStringAt+0x98>
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d12e      	bne.n	8008e6e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	1ad1      	subs	r1, r2, r3
 8008e16:	4b43      	ldr	r3, [pc, #268]	; (8008f24 <BSP_LCD_DisplayStringAt+0x180>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4843      	ldr	r0, [pc, #268]	; (8008f28 <BSP_LCD_DisplayStringAt+0x184>)
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4403      	add	r3, r0
 8008e26:	3308      	adds	r3, #8
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	889b      	ldrh	r3, [r3, #4]
 8008e2c:	fb03 f301 	mul.w	r3, r3, r1
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	89fb      	ldrh	r3, [r7, #14]
 8008e36:	4413      	add	r3, r2
 8008e38:	83fb      	strh	r3, [r7, #30]
      break;
 8008e3a:	e01b      	b.n	8008e74 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	83fb      	strh	r3, [r7, #30]
      break;
 8008e40:	e018      	b.n	8008e74 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	b299      	uxth	r1, r3
 8008e4a:	4b36      	ldr	r3, [pc, #216]	; (8008f24 <BSP_LCD_DisplayStringAt+0x180>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4836      	ldr	r0, [pc, #216]	; (8008f28 <BSP_LCD_DisplayStringAt+0x184>)
 8008e50:	4613      	mov	r3, r2
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4403      	add	r3, r0
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	889b      	ldrh	r3, [r3, #4]
 8008e60:	fb11 f303 	smulbb	r3, r1, r3
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	89fb      	ldrh	r3, [r7, #14]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	83fb      	strh	r3, [r7, #30]
      break;
 8008e6c:	e002      	b.n	8008e74 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8008e6e:	89fb      	ldrh	r3, [r7, #14]
 8008e70:	83fb      	strh	r3, [r7, #30]
      break;
 8008e72:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8008e74:	8bfb      	ldrh	r3, [r7, #30]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <BSP_LCD_DisplayStringAt+0xde>
 8008e7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da1d      	bge.n	8008ebe <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8008e82:	2301      	movs	r3, #1
 8008e84:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008e86:	e01a      	b.n	8008ebe <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	89b9      	ldrh	r1, [r7, #12]
 8008e8e:	8bfb      	ldrh	r3, [r7, #30]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff ff43 	bl	8008d1c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008e96:	4b23      	ldr	r3, [pc, #140]	; (8008f24 <BSP_LCD_DisplayStringAt+0x180>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4923      	ldr	r1, [pc, #140]	; (8008f28 <BSP_LCD_DisplayStringAt+0x184>)
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	889a      	ldrh	r2, [r3, #4]
 8008eac:	8bfb      	ldrh	r3, [r7, #30]
 8008eae:	4413      	add	r3, r2
 8008eb0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60bb      	str	r3, [r7, #8]
    i++;
 8008eb8:	8bbb      	ldrh	r3, [r7, #28]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bf14      	ite	ne
 8008ec6:	2301      	movne	r3, #1
 8008ec8:	2300      	moveq	r3, #0
 8008eca:	b2dc      	uxtb	r4, r3
 8008ecc:	f7ff fe22 	bl	8008b14 <BSP_LCD_GetXSize>
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	8bb9      	ldrh	r1, [r7, #28]
 8008ed4:	4b13      	ldr	r3, [pc, #76]	; (8008f24 <BSP_LCD_DisplayStringAt+0x180>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4813      	ldr	r0, [pc, #76]	; (8008f28 <BSP_LCD_DisplayStringAt+0x184>)
 8008eda:	4613      	mov	r3, r2
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4403      	add	r3, r0
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	889b      	ldrh	r3, [r3, #4]
 8008eea:	fb03 f301 	mul.w	r3, r3, r1
 8008eee:	1aeb      	subs	r3, r5, r3
 8008ef0:	b299      	uxth	r1, r3
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <BSP_LCD_DisplayStringAt+0x180>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	480c      	ldr	r0, [pc, #48]	; (8008f28 <BSP_LCD_DisplayStringAt+0x184>)
 8008ef8:	4613      	mov	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4403      	add	r3, r0
 8008f02:	3308      	adds	r3, #8
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	889b      	ldrh	r3, [r3, #4]
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	bf2c      	ite	cs
 8008f0c:	2301      	movcs	r3, #1
 8008f0e:	2300      	movcc	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	4023      	ands	r3, r4
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1b6      	bne.n	8008e88 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8008f1a:	bf00      	nop
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bdb0      	pop	{r4, r5, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000ae4 	.word	0x20000ae4
 8008f28:	20000ae8 	.word	0x20000ae8

08008f2c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	603a      	str	r2, [r7, #0]
 8008f36:	80fb      	strh	r3, [r7, #6]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008f3c:	4b1d      	ldr	r3, [pc, #116]	; (8008fb4 <BSP_LCD_DrawPixel+0x88>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1d      	ldr	r2, [pc, #116]	; (8008fb8 <BSP_LCD_DrawPixel+0x8c>)
 8008f42:	2134      	movs	r1, #52	; 0x34
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	3348      	adds	r3, #72	; 0x48
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d116      	bne.n	8008f80 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008f52:	4b18      	ldr	r3, [pc, #96]	; (8008fb4 <BSP_LCD_DrawPixel+0x88>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <BSP_LCD_DrawPixel+0x8c>)
 8008f58:	2134      	movs	r1, #52	; 0x34
 8008f5a:	fb01 f303 	mul.w	r3, r1, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	335c      	adds	r3, #92	; 0x5c
 8008f62:	681c      	ldr	r4, [r3, #0]
 8008f64:	88bd      	ldrh	r5, [r7, #4]
 8008f66:	f7ff fdd5 	bl	8008b14 <BSP_LCD_GetXSize>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	fb03 f205 	mul.w	r2, r3, r5
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	4413      	add	r3, r2
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4423      	add	r3, r4
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8008f7e:	e015      	b.n	8008fac <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008f80:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <BSP_LCD_DrawPixel+0x88>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a0c      	ldr	r2, [pc, #48]	; (8008fb8 <BSP_LCD_DrawPixel+0x8c>)
 8008f86:	2134      	movs	r1, #52	; 0x34
 8008f88:	fb01 f303 	mul.w	r3, r1, r3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	335c      	adds	r3, #92	; 0x5c
 8008f90:	681c      	ldr	r4, [r3, #0]
 8008f92:	88bd      	ldrh	r5, [r7, #4]
 8008f94:	f7ff fdbe 	bl	8008b14 <BSP_LCD_GetXSize>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	fb03 f205 	mul.w	r2, r3, r5
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4423      	add	r3, r4
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	6013      	str	r3, [r2, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8008fb4:	20000ae4 	.word	0x20000ae4
 8008fb8:	200009fc 	.word	0x200009fc

08008fbc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008fc0:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <BSP_LCD_DisplayOn+0x30>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699a      	ldr	r2, [r3, #24]
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <BSP_LCD_DisplayOn+0x30>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0201 	orr.w	r2, r2, #1
 8008fce:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008fd6:	4806      	ldr	r0, [pc, #24]	; (8008ff0 <BSP_LCD_DisplayOn+0x34>)
 8008fd8:	f001 fe18 	bl	800ac0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008fdc:	2201      	movs	r2, #1
 8008fde:	2108      	movs	r1, #8
 8008fe0:	4804      	ldr	r0, [pc, #16]	; (8008ff4 <BSP_LCD_DisplayOn+0x38>)
 8008fe2:	f001 fe13 	bl	800ac0c <HAL_GPIO_WritePin>
}
 8008fe6:	bf00      	nop
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	200009fc 	.word	0x200009fc
 8008ff0:	40022000 	.word	0x40022000
 8008ff4:	40022800 	.word	0x40022800

08008ff8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b090      	sub	sp, #64	; 0x40
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8009002:	4b64      	ldr	r3, [pc, #400]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009006:	4a63      	ldr	r2, [pc, #396]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009008:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800900c:	6453      	str	r3, [r2, #68]	; 0x44
 800900e:	4b61      	ldr	r3, [pc, #388]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800901a:	4b5e      	ldr	r3, [pc, #376]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 800901c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901e:	4a5d      	ldr	r2, [pc, #372]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009024:	6313      	str	r3, [r2, #48]	; 0x30
 8009026:	4b5b      	ldr	r3, [pc, #364]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009032:	4b58      	ldr	r3, [pc, #352]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	4a57      	ldr	r2, [pc, #348]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009038:	f043 0310 	orr.w	r3, r3, #16
 800903c:	6313      	str	r3, [r2, #48]	; 0x30
 800903e:	4b55      	ldr	r3, [pc, #340]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	f003 0310 	and.w	r3, r3, #16
 8009046:	623b      	str	r3, [r7, #32]
 8009048:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800904a:	4b52      	ldr	r3, [pc, #328]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	4a51      	ldr	r2, [pc, #324]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009054:	6313      	str	r3, [r2, #48]	; 0x30
 8009056:	4b4f      	ldr	r3, [pc, #316]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009062:	4b4c      	ldr	r3, [pc, #304]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	4a4b      	ldr	r2, [pc, #300]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800906c:	6313      	str	r3, [r2, #48]	; 0x30
 800906e:	4b49      	ldr	r3, [pc, #292]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	61bb      	str	r3, [r7, #24]
 8009078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800907a:	4b46      	ldr	r3, [pc, #280]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	4a45      	ldr	r2, [pc, #276]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009084:	6313      	str	r3, [r2, #48]	; 0x30
 8009086:	4b43      	ldr	r3, [pc, #268]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009092:	4b40      	ldr	r3, [pc, #256]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 8009098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800909c:	6313      	str	r3, [r2, #48]	; 0x30
 800909e:	4b3d      	ldr	r3, [pc, #244]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80090aa:	4b3a      	ldr	r3, [pc, #232]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	4a39      	ldr	r2, [pc, #228]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090b4:	6313      	str	r3, [r2, #48]	; 0x30
 80090b6:	4b37      	ldr	r3, [pc, #220]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80090c2:	4b34      	ldr	r3, [pc, #208]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	4a33      	ldr	r2, [pc, #204]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090cc:	6313      	str	r3, [r2, #48]	; 0x30
 80090ce:	4b31      	ldr	r3, [pc, #196]	; (8009194 <BSP_LCD_MspInit+0x19c>)
 80090d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090d6:	60bb      	str	r3, [r7, #8]
 80090d8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80090da:	2310      	movs	r3, #16
 80090dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80090de:	2302      	movs	r3, #2
 80090e0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80090e6:	2302      	movs	r3, #2
 80090e8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80090ea:	230e      	movs	r3, #14
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80090ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090f2:	4619      	mov	r1, r3
 80090f4:	4828      	ldr	r0, [pc, #160]	; (8009198 <BSP_LCD_MspInit+0x1a0>)
 80090f6:	f001 fbc7 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80090fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009100:	2302      	movs	r3, #2
 8009102:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8009104:	2309      	movs	r3, #9
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800910c:	4619      	mov	r1, r3
 800910e:	4823      	ldr	r0, [pc, #140]	; (800919c <BSP_LCD_MspInit+0x1a4>)
 8009110:	f001 fbba 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8009114:	f44f 4367 	mov.w	r3, #59136	; 0xe700
 8009118:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800911a:	2302      	movs	r3, #2
 800911c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800911e:	230e      	movs	r3, #14
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8009122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009126:	4619      	mov	r1, r3
 8009128:	481d      	ldr	r0, [pc, #116]	; (80091a0 <BSP_LCD_MspInit+0x1a8>)
 800912a:	f001 fbad 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800912e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009134:	2302      	movs	r3, #2
 8009136:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8009138:	230e      	movs	r3, #14
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800913c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009140:	4619      	mov	r1, r3
 8009142:	4818      	ldr	r0, [pc, #96]	; (80091a4 <BSP_LCD_MspInit+0x1ac>)
 8009144:	f001 fba0 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8009148:	23f7      	movs	r3, #247	; 0xf7
 800914a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800914c:	2302      	movs	r3, #2
 800914e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8009150:	230e      	movs	r3, #14
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8009154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009158:	4619      	mov	r1, r3
 800915a:	4813      	ldr	r0, [pc, #76]	; (80091a8 <BSP_LCD_MspInit+0x1b0>)
 800915c:	f001 fb94 	bl	800a888 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8009160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8009166:	2301      	movs	r3, #1
 8009168:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800916a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800916e:	4619      	mov	r1, r3
 8009170:	480b      	ldr	r0, [pc, #44]	; (80091a0 <BSP_LCD_MspInit+0x1a8>)
 8009172:	f001 fb89 	bl	800a888 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8009176:	2308      	movs	r3, #8
 8009178:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800917a:	2301      	movs	r3, #1
 800917c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800917e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009182:	4619      	mov	r1, r3
 8009184:	4808      	ldr	r0, [pc, #32]	; (80091a8 <BSP_LCD_MspInit+0x1b0>)
 8009186:	f001 fb7f 	bl	800a888 <HAL_GPIO_Init>
}
 800918a:	bf00      	nop
 800918c:	3740      	adds	r7, #64	; 0x40
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	40023800 	.word	0x40023800
 8009198:	40021000 	.word	0x40021000
 800919c:	40021800 	.word	0x40021800
 80091a0:	40022000 	.word	0x40022000
 80091a4:	40022400 	.word	0x40022400
 80091a8:	40022800 	.word	0x40022800

080091ac <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <BSP_LCD_ClockConfig+0x34>)
 80091b8:	2208      	movs	r2, #8
 80091ba:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80091bc:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <BSP_LCD_ClockConfig+0x34>)
 80091be:	22c0      	movs	r2, #192	; 0xc0
 80091c0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80091c2:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <BSP_LCD_ClockConfig+0x34>)
 80091c4:	2205      	movs	r2, #5
 80091c6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <BSP_LCD_ClockConfig+0x34>)
 80091ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80091ce:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80091d0:	4803      	ldr	r0, [pc, #12]	; (80091e0 <BSP_LCD_ClockConfig+0x34>)
 80091d2:	f003 f93d 	bl	800c450 <HAL_RCCEx_PeriphCLKConfig>
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000b00 	.word	0x20000b00

080091e4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	603a      	str	r2, [r7, #0]
 80091ee:	80fb      	strh	r3, [r7, #6]
 80091f0:	460b      	mov	r3, r1
 80091f2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	2300      	movs	r3, #0
 80091fa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80091fc:	4b53      	ldr	r3, [pc, #332]	; (800934c <DrawChar+0x168>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4953      	ldr	r1, [pc, #332]	; (8009350 <DrawChar+0x16c>)
 8009202:	4613      	mov	r3, r2
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	3308      	adds	r3, #8
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	88db      	ldrh	r3, [r3, #6]
 8009212:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8009214:	4b4d      	ldr	r3, [pc, #308]	; (800934c <DrawChar+0x168>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	494d      	ldr	r1, [pc, #308]	; (8009350 <DrawChar+0x16c>)
 800921a:	4613      	mov	r3, r2
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	440b      	add	r3, r1
 8009224:	3308      	adds	r3, #8
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	889b      	ldrh	r3, [r3, #4]
 800922a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800922c:	8a3b      	ldrh	r3, [r7, #16]
 800922e:	3307      	adds	r3, #7
 8009230:	2b00      	cmp	r3, #0
 8009232:	da00      	bge.n	8009236 <DrawChar+0x52>
 8009234:	3307      	adds	r3, #7
 8009236:	10db      	asrs	r3, r3, #3
 8009238:	b2db      	uxtb	r3, r3
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	b2da      	uxtb	r2, r3
 800923e:	8a3b      	ldrh	r3, [r7, #16]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e076      	b.n	800933a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800924c:	8a3b      	ldrh	r3, [r7, #16]
 800924e:	3307      	adds	r3, #7
 8009250:	2b00      	cmp	r3, #0
 8009252:	da00      	bge.n	8009256 <DrawChar+0x72>
 8009254:	3307      	adds	r3, #7
 8009256:	10db      	asrs	r3, r3, #3
 8009258:	461a      	mov	r2, r3
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	fb03 f302 	mul.w	r3, r3, r2
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	4413      	add	r3, r2
 8009264:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8009266:	8a3b      	ldrh	r3, [r7, #16]
 8009268:	3307      	adds	r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	da00      	bge.n	8009270 <DrawChar+0x8c>
 800926e:	3307      	adds	r3, #7
 8009270:	10db      	asrs	r3, r3, #3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d002      	beq.n	800927c <DrawChar+0x98>
 8009276:	2b02      	cmp	r3, #2
 8009278:	d004      	beq.n	8009284 <DrawChar+0xa0>
 800927a:	e00c      	b.n	8009296 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	617b      	str	r3, [r7, #20]
      break;
 8009282:	e016      	b.n	80092b2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	3201      	adds	r2, #1
 800928e:	7812      	ldrb	r2, [r2, #0]
 8009290:	4313      	orrs	r3, r2
 8009292:	617b      	str	r3, [r7, #20]
      break;
 8009294:	e00d      	b.n	80092b2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	041a      	lsls	r2, r3, #16
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3301      	adds	r3, #1
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	4313      	orrs	r3, r2
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	3202      	adds	r2, #2
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]
      break;
 80092b0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80092b2:	2300      	movs	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	e036      	b.n	8009326 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80092b8:	8a3a      	ldrh	r2, [r7, #16]
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	1ad2      	subs	r2, r2, r3
 80092be:	7bfb      	ldrb	r3, [r7, #15]
 80092c0:	4413      	add	r3, r2
 80092c2:	3b01      	subs	r3, #1
 80092c4:	2201      	movs	r2, #1
 80092c6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d012      	beq.n	80092fa <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	4413      	add	r3, r2
 80092dc:	b298      	uxth	r0, r3
 80092de:	4b1b      	ldr	r3, [pc, #108]	; (800934c <DrawChar+0x168>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	491b      	ldr	r1, [pc, #108]	; (8009350 <DrawChar+0x16c>)
 80092e4:	4613      	mov	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	88bb      	ldrh	r3, [r7, #4]
 80092f2:	4619      	mov	r1, r3
 80092f4:	f7ff fe1a 	bl	8008f2c <BSP_LCD_DrawPixel>
 80092f8:	e012      	b.n	8009320 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	4413      	add	r3, r2
 8009302:	b298      	uxth	r0, r3
 8009304:	4b11      	ldr	r3, [pc, #68]	; (800934c <DrawChar+0x168>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4911      	ldr	r1, [pc, #68]	; (8009350 <DrawChar+0x16c>)
 800930a:	4613      	mov	r3, r2
 800930c:	005b      	lsls	r3, r3, #1
 800930e:	4413      	add	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	440b      	add	r3, r1
 8009314:	3304      	adds	r3, #4
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	88bb      	ldrh	r3, [r7, #4]
 800931a:	4619      	mov	r1, r3
 800931c:	f7ff fe06 	bl	8008f2c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	3301      	adds	r3, #1
 8009324:	61bb      	str	r3, [r7, #24]
 8009326:	8a3b      	ldrh	r3, [r7, #16]
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	429a      	cmp	r2, r3
 800932c:	d3c4      	bcc.n	80092b8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800932e:	88bb      	ldrh	r3, [r7, #4]
 8009330:	3301      	adds	r3, #1
 8009332:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3301      	adds	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	8a7b      	ldrh	r3, [r7, #18]
 800933c:	69fa      	ldr	r2, [r7, #28]
 800933e:	429a      	cmp	r2, r3
 8009340:	d384      	bcc.n	800924c <DrawChar+0x68>
  }
}
 8009342:	bf00      	nop
 8009344:	3720      	adds	r7, #32
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000ae4 	.word	0x20000ae4
 8009350:	20000ae8 	.word	0x20000ae8

08009354 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af02      	add	r7, sp, #8
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8009362:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <LL_FillBuffer+0x88>)
 8009364:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009368:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800936a:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <LL_FillBuffer+0x8c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <LL_FillBuffer+0x90>)
 8009370:	2134      	movs	r1, #52	; 0x34
 8009372:	fb01 f303 	mul.w	r3, r1, r3
 8009376:	4413      	add	r3, r2
 8009378:	3348      	adds	r3, #72	; 0x48
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d103      	bne.n	8009388 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8009380:	4b16      	ldr	r3, [pc, #88]	; (80093dc <LL_FillBuffer+0x88>)
 8009382:	2202      	movs	r2, #2
 8009384:	609a      	str	r2, [r3, #8]
 8009386:	e002      	b.n	800938e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8009388:	4b14      	ldr	r3, [pc, #80]	; (80093dc <LL_FillBuffer+0x88>)
 800938a:	2200      	movs	r2, #0
 800938c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800938e:	4a13      	ldr	r2, [pc, #76]	; (80093dc <LL_FillBuffer+0x88>)
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8009394:	4b11      	ldr	r3, [pc, #68]	; (80093dc <LL_FillBuffer+0x88>)
 8009396:	4a14      	ldr	r2, [pc, #80]	; (80093e8 <LL_FillBuffer+0x94>)
 8009398:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800939a:	4810      	ldr	r0, [pc, #64]	; (80093dc <LL_FillBuffer+0x88>)
 800939c:	f000 fd40 	bl	8009e20 <HAL_DMA2D_Init>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d115      	bne.n	80093d2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80093a6:	68f9      	ldr	r1, [r7, #12]
 80093a8:	480c      	ldr	r0, [pc, #48]	; (80093dc <LL_FillBuffer+0x88>)
 80093aa:	f000 fea1 	bl	800a0f0 <HAL_DMA2D_ConfigLayer>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10e      	bne.n	80093d2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	69f9      	ldr	r1, [r7, #28]
 80093be:	4807      	ldr	r0, [pc, #28]	; (80093dc <LL_FillBuffer+0x88>)
 80093c0:	f000 fd82 	bl	8009ec8 <HAL_DMA2D_Start>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d103      	bne.n	80093d2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80093ca:	210a      	movs	r1, #10
 80093cc:	4803      	ldr	r0, [pc, #12]	; (80093dc <LL_FillBuffer+0x88>)
 80093ce:	f000 fda6 	bl	8009f1e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000aa4 	.word	0x20000aa4
 80093e0:	20000ae4 	.word	0x20000ae4
 80093e4:	200009fc 	.word	0x200009fc
 80093e8:	4002b000 	.word	0x4002b000

080093ec <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80093f0:	4b29      	ldr	r3, [pc, #164]	; (8009498 <BSP_SDRAM_Init+0xac>)
 80093f2:	4a2a      	ldr	r2, [pc, #168]	; (800949c <BSP_SDRAM_Init+0xb0>)
 80093f4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80093f6:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 80093f8:	2202      	movs	r2, #2
 80093fa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80093fc:	4b28      	ldr	r3, [pc, #160]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 80093fe:	2207      	movs	r2, #7
 8009400:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8009402:	4b27      	ldr	r3, [pc, #156]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 8009404:	2204      	movs	r2, #4
 8009406:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8009408:	4b25      	ldr	r3, [pc, #148]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 800940a:	2207      	movs	r2, #7
 800940c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 8009410:	2202      	movs	r2, #2
 8009412:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 8009416:	2202      	movs	r2, #2
 8009418:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800941a:	4b21      	ldr	r3, [pc, #132]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 800941c:	2202      	movs	r2, #2
 800941e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009422:	2200      	movs	r2, #0
 8009424:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009426:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009428:	2200      	movs	r2, #0
 800942a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800942c:	4b1a      	ldr	r3, [pc, #104]	; (8009498 <BSP_SDRAM_Init+0xac>)
 800942e:	2204      	movs	r2, #4
 8009430:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8009432:	4b19      	ldr	r3, [pc, #100]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009434:	2210      	movs	r2, #16
 8009436:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009438:	4b17      	ldr	r3, [pc, #92]	; (8009498 <BSP_SDRAM_Init+0xac>)
 800943a:	2240      	movs	r2, #64	; 0x40
 800943c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800943e:	4b16      	ldr	r3, [pc, #88]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009444:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009446:	4b14      	ldr	r3, [pc, #80]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009448:	2200      	movs	r2, #0
 800944a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800944c:	4b12      	ldr	r3, [pc, #72]	; (8009498 <BSP_SDRAM_Init+0xac>)
 800944e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009452:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8009454:	4b10      	ldr	r3, [pc, #64]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800945a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800945c:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <BSP_SDRAM_Init+0xac>)
 800945e:	2200      	movs	r2, #0
 8009460:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8009462:	2100      	movs	r1, #0
 8009464:	480c      	ldr	r0, [pc, #48]	; (8009498 <BSP_SDRAM_Init+0xac>)
 8009466:	f000 f87f 	bl	8009568 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800946a:	490d      	ldr	r1, [pc, #52]	; (80094a0 <BSP_SDRAM_Init+0xb4>)
 800946c:	480a      	ldr	r0, [pc, #40]	; (8009498 <BSP_SDRAM_Init+0xac>)
 800946e:	f003 fbdd 	bl	800cc2c <HAL_SDRAM_Init>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d003      	beq.n	8009480 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <BSP_SDRAM_Init+0xb8>)
 800947a:	2201      	movs	r2, #1
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	e002      	b.n	8009486 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8009480:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <BSP_SDRAM_Init+0xb8>)
 8009482:	2200      	movs	r2, #0
 8009484:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8009486:	f240 6003 	movw	r0, #1539	; 0x603
 800948a:	f000 f80d 	bl	80094a8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800948e:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <BSP_SDRAM_Init+0xb8>)
 8009490:	781b      	ldrb	r3, [r3, #0]
}
 8009492:	4618      	mov	r0, r3
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000b84 	.word	0x20000b84
 800949c:	a0000140 	.word	0xa0000140
 80094a0:	20000bb8 	.word	0x20000bb8
 80094a4:	2000000c 	.word	0x2000000c

080094a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80094b4:	4b2a      	ldr	r3, [pc, #168]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80094ba:	4b29      	ldr	r3, [pc, #164]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094bc:	2210      	movs	r2, #16
 80094be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80094c6:	4b26      	ldr	r3, [pc, #152]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80094cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094d0:	4923      	ldr	r1, [pc, #140]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094d2:	4824      	ldr	r0, [pc, #144]	; (8009564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80094d4:	f003 fbe8 	bl	800cca8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80094d8:	2001      	movs	r0, #1
 80094da:	f000 f9b1 	bl	8009840 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80094de:	4b20      	ldr	r3, [pc, #128]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094e0:	2202      	movs	r2, #2
 80094e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80094e4:	4b1e      	ldr	r3, [pc, #120]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094e6:	2210      	movs	r2, #16
 80094e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80094ea:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80094f0:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80094f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094fa:	4919      	ldr	r1, [pc, #100]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80094fc:	4819      	ldr	r0, [pc, #100]	; (8009564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80094fe:	f003 fbd3 	bl	800cca8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009504:	2203      	movs	r2, #3
 8009506:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800950a:	2210      	movs	r2, #16
 800950c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800950e:	4b14      	ldr	r3, [pc, #80]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009510:	2208      	movs	r2, #8
 8009512:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009514:	4b12      	ldr	r3, [pc, #72]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009516:	2200      	movs	r2, #0
 8009518:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800951a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800951e:	4910      	ldr	r1, [pc, #64]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009520:	4810      	ldr	r0, [pc, #64]	; (8009564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009522:	f003 fbc1 	bl	800cca8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8009526:	f44f 7308 	mov.w	r3, #544	; 0x220
 800952a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800952c:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800952e:	2204      	movs	r2, #4
 8009530:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009534:	2210      	movs	r2, #16
 8009536:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009538:	4b09      	ldr	r3, [pc, #36]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800953a:	2201      	movs	r2, #1
 800953c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4a07      	ldr	r2, [pc, #28]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009542:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009548:	4905      	ldr	r1, [pc, #20]	; (8009560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800954a:	4806      	ldr	r0, [pc, #24]	; (8009564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800954c:	f003 fbac 	bl	800cca8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	4804      	ldr	r0, [pc, #16]	; (8009564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009554:	f003 fbd3 	bl	800ccfe <HAL_SDRAM_ProgramRefreshRate>
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000bd4 	.word	0x20000bd4
 8009564:	20000b84 	.word	0x20000b84

08009568 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8009568:	b580      	push	{r7, lr}
 800956a:	b090      	sub	sp, #64	; 0x40
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009572:	4b70      	ldr	r3, [pc, #448]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	4a6f      	ldr	r2, [pc, #444]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009578:	f043 0301 	orr.w	r3, r3, #1
 800957c:	6393      	str	r3, [r2, #56]	; 0x38
 800957e:	4b6d      	ldr	r3, [pc, #436]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	62bb      	str	r3, [r7, #40]	; 0x28
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800958a:	4b6a      	ldr	r3, [pc, #424]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	4a69      	ldr	r2, [pc, #420]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009594:	6313      	str	r3, [r2, #48]	; 0x30
 8009596:	4b67      	ldr	r3, [pc, #412]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80095a2:	4b64      	ldr	r3, [pc, #400]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	4a63      	ldr	r2, [pc, #396]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095a8:	f043 0304 	orr.w	r3, r3, #4
 80095ac:	6313      	str	r3, [r2, #48]	; 0x30
 80095ae:	4b61      	ldr	r3, [pc, #388]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f003 0304 	and.w	r3, r3, #4
 80095b6:	623b      	str	r3, [r7, #32]
 80095b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095ba:	4b5e      	ldr	r3, [pc, #376]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	4a5d      	ldr	r2, [pc, #372]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095c0:	f043 0308 	orr.w	r3, r3, #8
 80095c4:	6313      	str	r3, [r2, #48]	; 0x30
 80095c6:	4b5b      	ldr	r3, [pc, #364]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	f003 0308 	and.w	r3, r3, #8
 80095ce:	61fb      	str	r3, [r7, #28]
 80095d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80095d2:	4b58      	ldr	r3, [pc, #352]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	4a57      	ldr	r2, [pc, #348]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095d8:	f043 0310 	orr.w	r3, r3, #16
 80095dc:	6313      	str	r3, [r2, #48]	; 0x30
 80095de:	4b55      	ldr	r3, [pc, #340]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	61bb      	str	r3, [r7, #24]
 80095e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80095ea:	4b52      	ldr	r3, [pc, #328]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	4a51      	ldr	r2, [pc, #324]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095f0:	f043 0320 	orr.w	r3, r3, #32
 80095f4:	6313      	str	r3, [r2, #48]	; 0x30
 80095f6:	4b4f      	ldr	r3, [pc, #316]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 80095f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009602:	4b4c      	ldr	r3, [pc, #304]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009606:	4a4b      	ldr	r2, [pc, #300]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800960c:	6313      	str	r3, [r2, #48]	; 0x30
 800960e:	4b49      	ldr	r3, [pc, #292]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	613b      	str	r3, [r7, #16]
 8009618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800961a:	4b46      	ldr	r3, [pc, #280]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	4a45      	ldr	r2, [pc, #276]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009624:	6313      	str	r3, [r2, #48]	; 0x30
 8009626:	4b43      	ldr	r3, [pc, #268]	; (8009734 <BSP_SDRAM_MspInit+0x1cc>)
 8009628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009632:	2302      	movs	r3, #2
 8009634:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009636:	2301      	movs	r3, #1
 8009638:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800963a:	2302      	movs	r3, #2
 800963c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800963e:	230c      	movs	r3, #12
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8009642:	2308      	movs	r3, #8
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800964a:	4619      	mov	r1, r3
 800964c:	483a      	ldr	r0, [pc, #232]	; (8009738 <BSP_SDRAM_MspInit+0x1d0>)
 800964e:	f001 f91b 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8009652:	f24c 730b 	movw	r3, #50955	; 0xc70b
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800965c:	4619      	mov	r1, r3
 800965e:	4837      	ldr	r0, [pc, #220]	; (800973c <BSP_SDRAM_MspInit+0x1d4>)
 8009660:	f001 f912 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8009664:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800966a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800966e:	4619      	mov	r1, r3
 8009670:	4833      	ldr	r0, [pc, #204]	; (8009740 <BSP_SDRAM_MspInit+0x1d8>)
 8009672:	f001 f909 	bl	800a888 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8009676:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800967a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800967c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009680:	4619      	mov	r1, r3
 8009682:	4830      	ldr	r0, [pc, #192]	; (8009744 <BSP_SDRAM_MspInit+0x1dc>)
 8009684:	f001 f900 	bl	800a888 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8009688:	f248 1333 	movw	r3, #33075	; 0x8133
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800968e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009692:	4619      	mov	r1, r3
 8009694:	482c      	ldr	r0, [pc, #176]	; (8009748 <BSP_SDRAM_MspInit+0x1e0>)
 8009696:	f001 f8f7 	bl	800a888 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800969a:	2328      	movs	r3, #40	; 0x28
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800969e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096a2:	4619      	mov	r1, r3
 80096a4:	4829      	ldr	r0, [pc, #164]	; (800974c <BSP_SDRAM_MspInit+0x1e4>)
 80096a6:	f001 f8ef 	bl	800a888 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80096aa:	4b29      	ldr	r3, [pc, #164]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80096b0:	4b27      	ldr	r3, [pc, #156]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096b2:	2280      	movs	r2, #128	; 0x80
 80096b4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80096b6:	4b26      	ldr	r3, [pc, #152]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096bc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80096be:	4b24      	ldr	r3, [pc, #144]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096c4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80096c6:	4b22      	ldr	r3, [pc, #136]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096cc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80096ce:	4b20      	ldr	r3, [pc, #128]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80096d4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80096d6:	4b1e      	ldr	r3, [pc, #120]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096d8:	2200      	movs	r2, #0
 80096da:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80096dc:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80096e2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80096e4:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80096ea:	4b19      	ldr	r3, [pc, #100]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096ec:	2203      	movs	r2, #3
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80096f0:	4b17      	ldr	r3, [pc, #92]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80096f6:	4b16      	ldr	r3, [pc, #88]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80096fc:	4b14      	ldr	r3, [pc, #80]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 80096fe:	4a15      	ldr	r2, [pc, #84]	; (8009754 <BSP_SDRAM_MspInit+0x1ec>)
 8009700:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a12      	ldr	r2, [pc, #72]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 8009706:	631a      	str	r2, [r3, #48]	; 0x30
 8009708:	4a11      	ldr	r2, [pc, #68]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800970e:	4810      	ldr	r0, [pc, #64]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 8009710:	f000 fa78 	bl	8009c04 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8009714:	480e      	ldr	r0, [pc, #56]	; (8009750 <BSP_SDRAM_MspInit+0x1e8>)
 8009716:	f000 f9c7 	bl	8009aa8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800971a:	2200      	movs	r2, #0
 800971c:	2105      	movs	r1, #5
 800971e:	2038      	movs	r0, #56	; 0x38
 8009720:	f000 f98b 	bl	8009a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8009724:	2038      	movs	r0, #56	; 0x38
 8009726:	f000 f9a4 	bl	8009a72 <HAL_NVIC_EnableIRQ>
}
 800972a:	bf00      	nop
 800972c:	3740      	adds	r7, #64	; 0x40
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	40023800 	.word	0x40023800
 8009738:	40020800 	.word	0x40020800
 800973c:	40020c00 	.word	0x40020c00
 8009740:	40021000 	.word	0x40021000
 8009744:	40021400 	.word	0x40021400
 8009748:	40021800 	.word	0x40021800
 800974c:	40021c00 	.word	0x40021c00
 8009750:	20000be4 	.word	0x20000be4
 8009754:	40026410 	.word	0x40026410

08009758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800975c:	4b0b      	ldr	r3, [pc, #44]	; (800978c <HAL_Init+0x34>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a0a      	ldr	r2, [pc, #40]	; (800978c <HAL_Init+0x34>)
 8009762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009766:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009768:	4b08      	ldr	r3, [pc, #32]	; (800978c <HAL_Init+0x34>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a07      	ldr	r2, [pc, #28]	; (800978c <HAL_Init+0x34>)
 800976e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009774:	2003      	movs	r0, #3
 8009776:	f000 f955 	bl	8009a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800977a:	2000      	movs	r0, #0
 800977c:	f000 f810 	bl	80097a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8009780:	f000 f806 	bl	8009790 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	40023c00 	.word	0x40023c00

08009790 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8009794:	bf00      	nop
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
	...

080097a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80097a8:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <HAL_InitTick+0x54>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <HAL_InitTick+0x58>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	4619      	mov	r1, r3
 80097b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80097ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f965 	bl	8009a8e <HAL_SYSTICK_Config>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e00e      	b.n	80097ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b0f      	cmp	r3, #15
 80097d2:	d80a      	bhi.n	80097ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80097d4:	2200      	movs	r2, #0
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097dc:	f000 f92d 	bl	8009a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80097e0:	4a06      	ldr	r2, [pc, #24]	; (80097fc <HAL_InitTick+0x5c>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	e000      	b.n	80097ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000018 	.word	0x20000018
 80097f8:	20000014 	.word	0x20000014
 80097fc:	20000010 	.word	0x20000010

08009800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <HAL_IncTick+0x20>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <HAL_IncTick+0x24>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4413      	add	r3, r2
 8009810:	4a04      	ldr	r2, [pc, #16]	; (8009824 <HAL_IncTick+0x24>)
 8009812:	6013      	str	r3, [r2, #0]
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	20000014 	.word	0x20000014
 8009824:	20033034 	.word	0x20033034

08009828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  return uwTick;
 800982c:	4b03      	ldr	r3, [pc, #12]	; (800983c <HAL_GetTick+0x14>)
 800982e:	681b      	ldr	r3, [r3, #0]
}
 8009830:	4618      	mov	r0, r3
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	20033034 	.word	0x20033034

08009840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009848:	f7ff ffee 	bl	8009828 <HAL_GetTick>
 800984c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009858:	d005      	beq.n	8009866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800985a:	4b09      	ldr	r3, [pc, #36]	; (8009880 <HAL_Delay+0x40>)
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009866:	bf00      	nop
 8009868:	f7ff ffde 	bl	8009828 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d8f7      	bhi.n	8009868 <HAL_Delay+0x28>
  {
  }
}
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000014 	.word	0x20000014

08009884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009894:	4b0b      	ldr	r3, [pc, #44]	; (80098c4 <__NVIC_SetPriorityGrouping+0x40>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80098a0:	4013      	ands	r3, r2
 80098a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80098ac:	4b06      	ldr	r3, [pc, #24]	; (80098c8 <__NVIC_SetPriorityGrouping+0x44>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098b2:	4a04      	ldr	r2, [pc, #16]	; (80098c4 <__NVIC_SetPriorityGrouping+0x40>)
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	60d3      	str	r3, [r2, #12]
}
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	e000ed00 	.word	0xe000ed00
 80098c8:	05fa0000 	.word	0x05fa0000

080098cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098d0:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <__NVIC_GetPriorityGrouping+0x18>)
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	0a1b      	lsrs	r3, r3, #8
 80098d6:	f003 0307 	and.w	r3, r3, #7
}
 80098da:	4618      	mov	r0, r3
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	e000ed00 	.word	0xe000ed00

080098e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	db0b      	blt.n	8009912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	f003 021f 	and.w	r2, r3, #31
 8009900:	4907      	ldr	r1, [pc, #28]	; (8009920 <__NVIC_EnableIRQ+0x38>)
 8009902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009906:	095b      	lsrs	r3, r3, #5
 8009908:	2001      	movs	r0, #1
 800990a:	fa00 f202 	lsl.w	r2, r0, r2
 800990e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	e000e100 	.word	0xe000e100

08009924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	6039      	str	r1, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009934:	2b00      	cmp	r3, #0
 8009936:	db0a      	blt.n	800994e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	490c      	ldr	r1, [pc, #48]	; (8009970 <__NVIC_SetPriority+0x4c>)
 800993e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009942:	0112      	lsls	r2, r2, #4
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	440b      	add	r3, r1
 8009948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800994c:	e00a      	b.n	8009964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	b2da      	uxtb	r2, r3
 8009952:	4908      	ldr	r1, [pc, #32]	; (8009974 <__NVIC_SetPriority+0x50>)
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	f003 030f 	and.w	r3, r3, #15
 800995a:	3b04      	subs	r3, #4
 800995c:	0112      	lsls	r2, r2, #4
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	440b      	add	r3, r1
 8009962:	761a      	strb	r2, [r3, #24]
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	e000e100 	.word	0xe000e100
 8009974:	e000ed00 	.word	0xe000ed00

08009978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009978:	b480      	push	{r7}
 800997a:	b089      	sub	sp, #36	; 0x24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	f1c3 0307 	rsb	r3, r3, #7
 8009992:	2b04      	cmp	r3, #4
 8009994:	bf28      	it	cs
 8009996:	2304      	movcs	r3, #4
 8009998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	3304      	adds	r3, #4
 800999e:	2b06      	cmp	r3, #6
 80099a0:	d902      	bls.n	80099a8 <NVIC_EncodePriority+0x30>
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	3b03      	subs	r3, #3
 80099a6:	e000      	b.n	80099aa <NVIC_EncodePriority+0x32>
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	fa02 f303 	lsl.w	r3, r2, r3
 80099b6:	43da      	mvns	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	401a      	ands	r2, r3
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ca:	43d9      	mvns	r1, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099d0:	4313      	orrs	r3, r2
         );
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3724      	adds	r7, #36	; 0x24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099f0:	d301      	bcc.n	80099f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099f2:	2301      	movs	r3, #1
 80099f4:	e00f      	b.n	8009a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099f6:	4a0a      	ldr	r2, [pc, #40]	; (8009a20 <SysTick_Config+0x40>)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099fe:	210f      	movs	r1, #15
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a04:	f7ff ff8e 	bl	8009924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009a08:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <SysTick_Config+0x40>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009a0e:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <SysTick_Config+0x40>)
 8009a10:	2207      	movs	r2, #7
 8009a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	e000e010 	.word	0xe000e010

08009a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ff29 	bl	8009884 <__NVIC_SetPriorityGrouping>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	4603      	mov	r3, r0
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a4c:	f7ff ff3e 	bl	80098cc <__NVIC_GetPriorityGrouping>
 8009a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	6978      	ldr	r0, [r7, #20]
 8009a58:	f7ff ff8e 	bl	8009978 <NVIC_EncodePriority>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff ff5d 	bl	8009924 <__NVIC_SetPriority>
}
 8009a6a:	bf00      	nop
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	4603      	mov	r3, r0
 8009a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff ff31 	bl	80098e8 <__NVIC_EnableIRQ>
}
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff ffa2 	bl	80099e0 <SysTick_Config>
 8009a9c:	4603      	mov	r3, r0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009ab4:	f7ff feb8 	bl	8009828 <HAL_GetTick>
 8009ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e099      	b.n	8009bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0201 	bic.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ae4:	e00f      	b.n	8009b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009ae6:	f7ff fe9f 	bl	8009828 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b05      	cmp	r3, #5
 8009af2:	d908      	bls.n	8009b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2203      	movs	r2, #3
 8009afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e078      	b.n	8009bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e8      	bne.n	8009ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	4b38      	ldr	r3, [pc, #224]	; (8009c00 <HAL_DMA_Init+0x158>)
 8009b20:	4013      	ands	r3, r2
 8009b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d107      	bne.n	8009b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f023 0307 	bic.w	r3, r3, #7
 8009b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d117      	bne.n	8009bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8bd 	bl	8009d2c <DMA_CheckFifoParam>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d008      	beq.n	8009bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2240      	movs	r2, #64	; 0x40
 8009bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e016      	b.n	8009bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f874 	bl	8009cc0 <DMA_CalcBaseAndBitshift>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be0:	223f      	movs	r2, #63	; 0x3f
 8009be2:	409a      	lsls	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	f010803f 	.word	0xf010803f

08009c04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e050      	b.n	8009cb8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d101      	bne.n	8009c26 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8009c22:	2302      	movs	r3, #2
 8009c24:	e048      	b.n	8009cb8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0201 	bic.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2200      	movs	r2, #0
 8009c44:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2221      	movs	r2, #33	; 0x21
 8009c64:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f82a 	bl	8009cc0 <DMA_CalcBaseAndBitshift>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c74:	223f      	movs	r2, #63	; 0x3f
 8009c76:	409a      	lsls	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	3b10      	subs	r3, #16
 8009cd0:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <DMA_CalcBaseAndBitshift+0x60>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	091b      	lsrs	r3, r3, #4
 8009cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009cda:	4a12      	ldr	r2, [pc, #72]	; (8009d24 <DMA_CalcBaseAndBitshift+0x64>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d908      	bls.n	8009d00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <DMA_CalcBaseAndBitshift+0x68>)
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	1d1a      	adds	r2, r3, #4
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	659a      	str	r2, [r3, #88]	; 0x58
 8009cfe:	e006      	b.n	8009d0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <DMA_CalcBaseAndBitshift+0x68>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	aaaaaaab 	.word	0xaaaaaaab
 8009d24:	08018ad8 	.word	0x08018ad8
 8009d28:	fffffc00 	.word	0xfffffc00

08009d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d11f      	bne.n	8009d86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d855      	bhi.n	8009df8 <DMA_CheckFifoParam+0xcc>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <DMA_CheckFifoParam+0x28>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d65 	.word	0x08009d65
 8009d58:	08009d77 	.word	0x08009d77
 8009d5c:	08009d65 	.word	0x08009d65
 8009d60:	08009df9 	.word	0x08009df9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d045      	beq.n	8009dfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d74:	e042      	b.n	8009dfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009d7e:	d13f      	bne.n	8009e00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d84:	e03c      	b.n	8009e00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d8e:	d121      	bne.n	8009dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d836      	bhi.n	8009e04 <DMA_CheckFifoParam+0xd8>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <DMA_CheckFifoParam+0x70>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009dad 	.word	0x08009dad
 8009da0:	08009db3 	.word	0x08009db3
 8009da4:	08009dad 	.word	0x08009dad
 8009da8:	08009dc5 	.word	0x08009dc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73fb      	strb	r3, [r7, #15]
      break;
 8009db0:	e02f      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d024      	beq.n	8009e08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009dc2:	e021      	b.n	8009e08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009dcc:	d11e      	bne.n	8009e0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009dd2:	e01b      	b.n	8009e0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d902      	bls.n	8009de0 <DMA_CheckFifoParam+0xb4>
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d003      	beq.n	8009de6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009dde:	e018      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	73fb      	strb	r3, [r7, #15]
      break;
 8009de4:	e015      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00e      	beq.n	8009e10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	73fb      	strb	r3, [r7, #15]
      break;
 8009df6:	e00b      	b.n	8009e10 <DMA_CheckFifoParam+0xe4>
      break;
 8009df8:	bf00      	nop
 8009dfa:	e00a      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e008      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      break;
 8009e00:	bf00      	nop
 8009e02:	e006      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      break;
 8009e04:	bf00      	nop
 8009e06:	e004      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      break;
 8009e08:	bf00      	nop
 8009e0a:	e002      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      break;   
 8009e0c:	bf00      	nop
 8009e0e:	e000      	b.n	8009e12 <DMA_CheckFifoParam+0xe6>
      break;
 8009e10:	bf00      	nop
    }
  } 
  
  return status; 
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e039      	b.n	8009ea6 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f834 	bl	8009eb4 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e70:	f023 0107 	bic.w	r1, r3, #7
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e86:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <HAL_DMA2D_Init+0x90>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	68d1      	ldr	r1, [r2, #12]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6812      	ldr	r2, [r2, #0]
 8009e92:	430b      	orrs	r3, r1
 8009e94:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	ffffc000 	.word	0xffffc000

08009eb4 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af02      	add	r7, sp, #8
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_DMA2D_Start+0x1c>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e018      	b.n	8009f16 <HAL_DMA2D_Start+0x4e>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	68b9      	ldr	r1, [r7, #8]
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f98c 	bl	800a21c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d056      	beq.n	8009fec <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8009f3e:	f7ff fc73 	bl	8009828 <HAL_GetTick>
 8009f42:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8009f44:	e04b      	b.n	8009fde <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d023      	beq.n	8009fa0 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	f043 0202 	orr.w	r2, r3, #2
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7c:	f043 0201 	orr.w	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2221      	movs	r2, #33	; 0x21
 8009f8a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e0a2      	b.n	800a0e6 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa6:	d01a      	beq.n	8009fde <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <HAL_DMA2D_PollForTransfer+0xa0>
 8009fae:	f7ff fc3b 	bl	8009828 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d20f      	bcs.n	8009fde <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	f043 0220 	orr.w	r2, r3, #32
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e083      	b.n	800a0e6 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0ac      	beq.n	8009f46 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800a004:	2b00      	cmp	r3, #0
 800a006:	d061      	beq.n	800a0cc <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a008:	f7ff fc0e 	bl	8009828 <HAL_GetTick>
 800a00c:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800a00e:	e056      	b.n	800a0be <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d02e      	beq.n	800a080 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a030:	f043 0204 	orr.w	r2, r3, #4
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f003 0320 	and.w	r3, r3, #32
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a046:	f043 0202 	orr.w	r2, r3, #2
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05c:	f043 0201 	orr.w	r2, r3, #1
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2229      	movs	r2, #41	; 0x29
 800a06a:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2204      	movs	r2, #4
 800a070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 800a07c:	2301      	movs	r3, #1
 800a07e:	e032      	b.n	800a0e6 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a086:	d01a      	beq.n	800a0be <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <HAL_DMA2D_PollForTransfer+0x180>
 800a08e:	f7ff fbcb 	bl	8009828 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d20f      	bcs.n	800a0be <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a2:	f043 0220 	orr.w	r2, r3, #32
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e013      	b.n	800a0e6 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0a1      	beq.n	800a010 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2212      	movs	r2, #18
 800a0d2:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	3318      	adds	r3, #24
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	4413      	add	r3, r2
 800a104:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_DMA2D_ConfigLayer+0x34>
 800a120:	2302      	movs	r3, #2
 800a122:	e073      	b.n	800a20c <HAL_DMA2D_ConfigLayer+0x11c>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	041b      	lsls	r3, r3, #16
 800a13e:	4313      	orrs	r3, r2
 800a140:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800a142:	4b35      	ldr	r3, [pc, #212]	; (800a218 <HAL_DMA2D_ConfigLayer+0x128>)
 800a144:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2b0a      	cmp	r3, #10
 800a14c:	d003      	beq.n	800a156 <HAL_DMA2D_ConfigLayer+0x66>
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2b09      	cmp	r3, #9
 800a154:	d107      	bne.n	800a166 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	4313      	orrs	r3, r2
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e005      	b.n	800a172 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	061b      	lsls	r3, r3, #24
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	4313      	orrs	r3, r2
 800a170:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d120      	bne.n	800a1ba <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	43db      	mvns	r3, r3
 800a182:	ea02 0103 	and.w	r1, r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	6812      	ldr	r2, [r2, #0]
 800a198:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b0a      	cmp	r3, #10
 800a1a0:	d003      	beq.n	800a1aa <HAL_DMA2D_ConfigLayer+0xba>
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	d127      	bne.n	800a1fa <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a1b6:	629a      	str	r2, [r3, #40]	; 0x28
 800a1b8:	e01f      	b.n	800a1fa <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69da      	ldr	r2, [r3, #28]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	ea02 0103 	and.w	r1, r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	6812      	ldr	r2, [r2, #0]
 800a1da:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	2b0a      	cmp	r3, #10
 800a1e2:	d003      	beq.n	800a1ec <HAL_DMA2D_ConfigLayer+0xfc>
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	2b09      	cmp	r3, #9
 800a1ea:	d106      	bne.n	800a1fa <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	68da      	ldr	r2, [r3, #12]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a1f8:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	ff03000f 	.word	0xff03000f

0800a21c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 800a21c:	b480      	push	{r7}
 800a21e:	b08b      	sub	sp, #44	; 0x2c
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a244:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	041a      	lsls	r2, r3, #16
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	431a      	orrs	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a268:	d174      	bne.n	800a354 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a270:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a278:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a280:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	b2db      	uxtb	r3, r3
 800a286:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d108      	bne.n	800a2a2 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	431a      	orrs	r2, r3
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	4313      	orrs	r3, r2
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a0:	e053      	b.n	800a34a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d106      	bne.n	800a2b8 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b6:	e048      	b.n	800a34a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d111      	bne.n	800a2e4 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	0cdb      	lsrs	r3, r3, #19
 800a2c4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	0a9b      	lsrs	r3, r3, #10
 800a2ca:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	08db      	lsrs	r3, r3, #3
 800a2d0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	02db      	lsls	r3, r3, #11
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e2:	e032      	b.n	800a34a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d117      	bne.n	800a31c <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	0fdb      	lsrs	r3, r3, #31
 800a2f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	0cdb      	lsrs	r3, r3, #19
 800a2f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	0adb      	lsrs	r3, r3, #11
 800a2fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	08db      	lsrs	r3, r3, #3
 800a302:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	029b      	lsls	r3, r3, #10
 800a30c:	431a      	orrs	r2, r3
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	03db      	lsls	r3, r3, #15
 800a312:	4313      	orrs	r3, r2
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
 800a31a:	e016      	b.n	800a34a <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	0f1b      	lsrs	r3, r3, #28
 800a320:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	0d1b      	lsrs	r3, r3, #20
 800a326:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	0b1b      	lsrs	r3, r3, #12
 800a32c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	091b      	lsrs	r3, r3, #4
 800a332:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	011a      	lsls	r2, r3, #4
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	431a      	orrs	r2, r3
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	031b      	lsls	r3, r3, #12
 800a342:	4313      	orrs	r3, r2
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a350:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800a352:	e003      	b.n	800a35c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	60da      	str	r2, [r3, #12]
}
 800a35c:	bf00      	nop
 800a35e:	372c      	adds	r7, #44	; 0x2c
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a37a:	4b27      	ldr	r3, [pc, #156]	; (800a418 <HAL_FLASH_Program+0xb0>)
 800a37c:	7d1b      	ldrb	r3, [r3, #20]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d101      	bne.n	800a386 <HAL_FLASH_Program+0x1e>
 800a382:	2302      	movs	r3, #2
 800a384:	e043      	b.n	800a40e <HAL_FLASH_Program+0xa6>
 800a386:	4b24      	ldr	r3, [pc, #144]	; (800a418 <HAL_FLASH_Program+0xb0>)
 800a388:	2201      	movs	r2, #1
 800a38a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a38c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a390:	f000 f878 	bl	800a484 <FLASH_WaitForLastOperation>
 800a394:	4603      	mov	r3, r0
 800a396:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d133      	bne.n	800a406 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d823      	bhi.n	800a3ec <HAL_FLASH_Program+0x84>
 800a3a4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <HAL_FLASH_Program+0x44>)
 800a3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3aa:	bf00      	nop
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a3c9 	.word	0x0800a3c9
 800a3b4:	0800a3d5 	.word	0x0800a3d5
 800a3b8:	0800a3e1 	.word	0x0800a3e1
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800a3bc:	783b      	ldrb	r3, [r7, #0]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	68b8      	ldr	r0, [r7, #8]
 800a3c2:	f000 f919 	bl	800a5f8 <FLASH_Program_Byte>
        break;
 800a3c6:	e012      	b.n	800a3ee <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a3c8:	883b      	ldrh	r3, [r7, #0]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	68b8      	ldr	r0, [r7, #8]
 800a3ce:	f000 f8ed 	bl	800a5ac <FLASH_Program_HalfWord>
        break;
 800a3d2:	e00c      	b.n	800a3ee <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	68b8      	ldr	r0, [r7, #8]
 800a3da:	f000 f8c3 	bl	800a564 <FLASH_Program_Word>
        break;
 800a3de:	e006      	b.n	800a3ee <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800a3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e4:	68b8      	ldr	r0, [r7, #8]
 800a3e6:	f000 f88d 	bl	800a504 <FLASH_Program_DoubleWord>
        break;
 800a3ea:	e000      	b.n	800a3ee <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800a3ec:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a3ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a3f2:	f000 f847 	bl	800a484 <FLASH_WaitForLastOperation>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800a3fa:	4b08      	ldr	r3, [pc, #32]	; (800a41c <HAL_FLASH_Program+0xb4>)
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	4a07      	ldr	r2, [pc, #28]	; (800a41c <HAL_FLASH_Program+0xb4>)
 800a400:	f023 0301 	bic.w	r3, r3, #1
 800a404:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <HAL_FLASH_Program+0xb0>)
 800a408:	2200      	movs	r2, #0
 800a40a:	751a      	strb	r2, [r3, #20]

  return status;
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20033038 	.word	0x20033038
 800a41c:	40023c00 	.word	0x40023c00

0800a420 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a42a:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <HAL_FLASH_Unlock+0x38>)
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da0b      	bge.n	800a44a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a432:	4b09      	ldr	r3, [pc, #36]	; (800a458 <HAL_FLASH_Unlock+0x38>)
 800a434:	4a09      	ldr	r2, [pc, #36]	; (800a45c <HAL_FLASH_Unlock+0x3c>)
 800a436:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a438:	4b07      	ldr	r3, [pc, #28]	; (800a458 <HAL_FLASH_Unlock+0x38>)
 800a43a:	4a09      	ldr	r2, [pc, #36]	; (800a460 <HAL_FLASH_Unlock+0x40>)
 800a43c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a43e:	4b06      	ldr	r3, [pc, #24]	; (800a458 <HAL_FLASH_Unlock+0x38>)
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	da01      	bge.n	800a44a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a44a:	79fb      	ldrb	r3, [r7, #7]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	40023c00 	.word	0x40023c00
 800a45c:	45670123 	.word	0x45670123
 800a460:	cdef89ab 	.word	0xcdef89ab

0800a464 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a468:	4b05      	ldr	r3, [pc, #20]	; (800a480 <HAL_FLASH_Lock+0x1c>)
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	4a04      	ldr	r2, [pc, #16]	; (800a480 <HAL_FLASH_Lock+0x1c>)
 800a46e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a472:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	40023c00 	.word	0x40023c00

0800a484 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a490:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <FLASH_WaitForLastOperation+0x78>)
 800a492:	2200      	movs	r2, #0
 800a494:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a496:	f7ff f9c7 	bl	8009828 <HAL_GetTick>
 800a49a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a49c:	e010      	b.n	800a4c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4a4:	d00c      	beq.n	800a4c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <FLASH_WaitForLastOperation+0x38>
 800a4ac:	f7ff f9bc 	bl	8009828 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d201      	bcs.n	800a4c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e019      	b.n	800a4f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a4c0:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <FLASH_WaitForLastOperation+0x7c>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e8      	bne.n	800a49e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <FLASH_WaitForLastOperation+0x7c>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a4d8:	f000 f8b2 	bl	800a640 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e009      	b.n	800a4f4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <FLASH_WaitForLastOperation+0x7c>)
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <FLASH_WaitForLastOperation+0x7c>)
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800a4f2:	2300      	movs	r3, #0
  
}  
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20033038 	.word	0x20033038
 800a500:	40023c00 	.word	0x40023c00

0800a504 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a504:	b490      	push	{r4, r7}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800a510:	4b13      	ldr	r3, [pc, #76]	; (800a560 <FLASH_Program_DoubleWord+0x5c>)
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	4a12      	ldr	r2, [pc, #72]	; (800a560 <FLASH_Program_DoubleWord+0x5c>)
 800a516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a51a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <FLASH_Program_DoubleWord+0x5c>)
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	4a0f      	ldr	r2, [pc, #60]	; (800a560 <FLASH_Program_DoubleWord+0x5c>)
 800a522:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a528:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <FLASH_Program_DoubleWord+0x5c>)
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <FLASH_Program_DoubleWord+0x5c>)
 800a52e:	f043 0301 	orr.w	r3, r3, #1
 800a532:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a53a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	f04f 0400 	mov.w	r4, #0
 800a546:	0013      	movs	r3, r2
 800a548:	2400      	movs	r4, #0
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	3204      	adds	r2, #4
 800a54e:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a550:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bc90      	pop	{r4, r7}
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40023c00 	.word	0x40023c00

0800a564 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800a56e:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <FLASH_Program_Word+0x44>)
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	4a0d      	ldr	r2, [pc, #52]	; (800a5a8 <FLASH_Program_Word+0x44>)
 800a574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a578:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a57a:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <FLASH_Program_Word+0x44>)
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <FLASH_Program_Word+0x44>)
 800a580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a584:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a586:	4b08      	ldr	r3, [pc, #32]	; (800a5a8 <FLASH_Program_Word+0x44>)
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	4a07      	ldr	r2, [pc, #28]	; (800a5a8 <FLASH_Program_Word+0x44>)
 800a58c:	f043 0301 	orr.w	r3, r3, #1
 800a590:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	40023c00 	.word	0x40023c00

0800a5ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800a5b8:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <FLASH_Program_HalfWord+0x48>)
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	4a0d      	ldr	r2, [pc, #52]	; (800a5f4 <FLASH_Program_HalfWord+0x48>)
 800a5be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <FLASH_Program_HalfWord+0x48>)
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	4a0a      	ldr	r2, [pc, #40]	; (800a5f4 <FLASH_Program_HalfWord+0x48>)
 800a5ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a5d0:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <FLASH_Program_HalfWord+0x48>)
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	4a07      	ldr	r2, [pc, #28]	; (800a5f4 <FLASH_Program_HalfWord+0x48>)
 800a5d6:	f043 0301 	orr.w	r3, r3, #1
 800a5da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	887a      	ldrh	r2, [r7, #2]
 800a5e0:	801a      	strh	r2, [r3, #0]
 800a5e2:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800a5e6:	bf00      	nop
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	40023c00 	.word	0x40023c00

0800a5f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <FLASH_Program_Byte+0x44>)
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	4a0c      	ldr	r2, [pc, #48]	; (800a63c <FLASH_Program_Byte+0x44>)
 800a60a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a60e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <FLASH_Program_Byte+0x44>)
 800a612:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <FLASH_Program_Byte+0x44>)
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a618:	4b08      	ldr	r3, [pc, #32]	; (800a63c <FLASH_Program_Byte+0x44>)
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	4a07      	ldr	r2, [pc, #28]	; (800a63c <FLASH_Program_Byte+0x44>)
 800a61e:	f043 0301 	orr.w	r3, r3, #1
 800a622:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a62e:	bf00      	nop
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	40023c00 	.word	0x40023c00

0800a640 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a644:	4b21      	ldr	r3, [pc, #132]	; (800a6cc <FLASH_SetErrorCode+0x8c>)
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a650:	4b1f      	ldr	r3, [pc, #124]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	f043 0320 	orr.w	r3, r3, #32
 800a658:	4a1d      	ldr	r2, [pc, #116]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a65a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a65c:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <FLASH_SetErrorCode+0x8c>)
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0310 	and.w	r3, r3, #16
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a668:	4b19      	ldr	r3, [pc, #100]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f043 0310 	orr.w	r3, r3, #16
 800a670:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a672:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a674:	4b15      	ldr	r3, [pc, #84]	; (800a6cc <FLASH_SetErrorCode+0x8c>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d005      	beq.n	800a68c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a680:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f043 0308 	orr.w	r3, r3, #8
 800a688:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a68a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a68c:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <FLASH_SetErrorCode+0x8c>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a698:	4b0d      	ldr	r3, [pc, #52]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	f043 0304 	orr.w	r3, r3, #4
 800a6a0:	4a0b      	ldr	r2, [pc, #44]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a6a2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800a6a4:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <FLASH_SetErrorCode+0x8c>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800a6b0:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f043 0302 	orr.w	r3, r3, #2
 800a6b8:	4a05      	ldr	r2, [pc, #20]	; (800a6d0 <FLASH_SetErrorCode+0x90>)
 800a6ba:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <FLASH_SetErrorCode+0x8c>)
 800a6be:	22f2      	movs	r2, #242	; 0xf2
 800a6c0:	60da      	str	r2, [r3, #12]
}
 800a6c2:	bf00      	nop
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	40023c00 	.word	0x40023c00
 800a6d0:	20033038 	.word	0x20033038

0800a6d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6e6:	4b2f      	ldr	r3, [pc, #188]	; (800a7a4 <HAL_FLASHEx_Erase+0xd0>)
 800a6e8:	7d1b      	ldrb	r3, [r3, #20]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_FLASHEx_Erase+0x1e>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e053      	b.n	800a79a <HAL_FLASHEx_Erase+0xc6>
 800a6f2:	4b2c      	ldr	r3, [pc, #176]	; (800a7a4 <HAL_FLASHEx_Erase+0xd0>)
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a6f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a6fc:	f7ff fec2 	bl	800a484 <FLASH_WaitForLastOperation>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d143      	bne.n	800a792 <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a710:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d112      	bne.n	800a740 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f843 	bl	800a7ac <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a726:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a72a:	f7ff feab 	bl	800a484 <FLASH_WaitForLastOperation>
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a732:	4b1d      	ldr	r3, [pc, #116]	; (800a7a8 <HAL_FLASHEx_Erase+0xd4>)
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4a1c      	ldr	r2, [pc, #112]	; (800a7a8 <HAL_FLASHEx_Erase+0xd4>)
 800a738:	f023 0304 	bic.w	r3, r3, #4
 800a73c:	6113      	str	r3, [r2, #16]
 800a73e:	e028      	b.n	800a792 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	60bb      	str	r3, [r7, #8]
 800a746:	e01c      	b.n	800a782 <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	4619      	mov	r1, r3
 800a750:	68b8      	ldr	r0, [r7, #8]
 800a752:	f000 f84f 	bl	800a7f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a756:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a75a:	f7ff fe93 	bl	800a484 <FLASH_WaitForLastOperation>
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800a762:	4b11      	ldr	r3, [pc, #68]	; (800a7a8 <HAL_FLASHEx_Erase+0xd4>)
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	4a10      	ldr	r2, [pc, #64]	; (800a7a8 <HAL_FLASHEx_Erase+0xd4>)
 800a768:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 800a76c:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	601a      	str	r2, [r3, #0]
          break;
 800a77a:	e00a      	b.n	800a792 <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	3301      	adds	r3, #1
 800a780:	60bb      	str	r3, [r7, #8]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689a      	ldr	r2, [r3, #8]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	4413      	add	r3, r2
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d3da      	bcc.n	800a748 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a792:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <HAL_FLASHEx_Erase+0xd0>)
 800a794:	2200      	movs	r2, #0
 800a796:	751a      	strb	r2, [r3, #20]

  return status;
 800a798:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20033038 	.word	0x20033038
 800a7a8:	40023c00 	.word	0x40023c00

0800a7ac <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800a7b6:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <FLASH_MassErase+0x44>)
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	4a0d      	ldr	r2, [pc, #52]	; (800a7f0 <FLASH_MassErase+0x44>)
 800a7bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a7c2:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <FLASH_MassErase+0x44>)
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	4a0a      	ldr	r2, [pc, #40]	; (800a7f0 <FLASH_MassErase+0x44>)
 800a7c8:	f043 0304 	orr.w	r3, r3, #4
 800a7cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <FLASH_MassErase+0x44>)
 800a7d0:	691a      	ldr	r2, [r3, #16]
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	021b      	lsls	r3, r3, #8
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	4a05      	ldr	r2, [pc, #20]	; (800a7f0 <FLASH_MassErase+0x44>)
 800a7da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7de:	6113      	str	r3, [r2, #16]
 800a7e0:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	40023c00 	.word	0x40023c00

0800a7f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e010      	b.n	800a832 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d103      	bne.n	800a81e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e009      	b.n	800a832 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d103      	bne.n	800a82c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a824:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	e002      	b.n	800a832 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a82c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a830:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	4a13      	ldr	r2, [pc, #76]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a83c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a83e:	4b11      	ldr	r3, [pc, #68]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	4910      	ldr	r1, [pc, #64]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 800a84a:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	4a0d      	ldr	r2, [pc, #52]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a850:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a854:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a856:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a858:	691a      	ldr	r2, [r3, #16]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	4313      	orrs	r3, r2
 800a860:	4a08      	ldr	r2, [pc, #32]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a862:	f043 0302 	orr.w	r3, r3, #2
 800a866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a868:	4b06      	ldr	r3, [pc, #24]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	4a05      	ldr	r2, [pc, #20]	; (800a884 <FLASH_Erase_Sector+0x90>)
 800a86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a872:	6113      	str	r3, [r2, #16]
 800a874:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a878:	bf00      	nop
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	40023c00 	.word	0x40023c00

0800a888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a888:	b480      	push	{r7}
 800a88a:	b089      	sub	sp, #36	; 0x24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a892:	2300      	movs	r3, #0
 800a894:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a89a:	2300      	movs	r3, #0
 800a89c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e175      	b.n	800ab94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	f040 8164 	bne.w	800ab8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d003      	beq.n	800a8d6 <HAL_GPIO_Init+0x4e>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2b12      	cmp	r3, #18
 800a8d4:	d123      	bne.n	800a91e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	08da      	lsrs	r2, r3, #3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3208      	adds	r2, #8
 800a8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	220f      	movs	r2, #15
 800a8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f2:	43db      	mvns	r3, r3
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	691a      	ldr	r2, [r3, #16]
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	fa02 f303 	lsl.w	r3, r2, r3
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	08da      	lsrs	r2, r3, #3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3208      	adds	r2, #8
 800a918:	69b9      	ldr	r1, [r7, #24]
 800a91a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	2203      	movs	r2, #3
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	43db      	mvns	r3, r3
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	4013      	ands	r3, r2
 800a934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f003 0203 	and.w	r2, r3, #3
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	fa02 f303 	lsl.w	r3, r2, r3
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	4313      	orrs	r3, r2
 800a94a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d00b      	beq.n	800a972 <HAL_GPIO_Init+0xea>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d007      	beq.n	800a972 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a966:	2b11      	cmp	r3, #17
 800a968:	d003      	beq.n	800a972 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2b12      	cmp	r3, #18
 800a970:	d130      	bne.n	800a9d4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	2203      	movs	r2, #3
 800a97e:	fa02 f303 	lsl.w	r3, r2, r3
 800a982:	43db      	mvns	r3, r3
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	4013      	ands	r3, r2
 800a988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	fa02 f303 	lsl.w	r3, r2, r3
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	4313      	orrs	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	091b      	lsrs	r3, r3, #4
 800a9be:	f003 0201 	and.w	r2, r3, #1
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	2203      	movs	r2, #3
 800a9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e4:	43db      	mvns	r3, r3
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 80be 	beq.w	800ab8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa12:	4b65      	ldr	r3, [pc, #404]	; (800aba8 <HAL_GPIO_Init+0x320>)
 800aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa16:	4a64      	ldr	r2, [pc, #400]	; (800aba8 <HAL_GPIO_Init+0x320>)
 800aa18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa1c:	6453      	str	r3, [r2, #68]	; 0x44
 800aa1e:	4b62      	ldr	r3, [pc, #392]	; (800aba8 <HAL_GPIO_Init+0x320>)
 800aa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800aa2a:	4a60      	ldr	r2, [pc, #384]	; (800abac <HAL_GPIO_Init+0x324>)
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	089b      	lsrs	r3, r3, #2
 800aa30:	3302      	adds	r3, #2
 800aa32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	220f      	movs	r2, #15
 800aa42:	fa02 f303 	lsl.w	r3, r2, r3
 800aa46:	43db      	mvns	r3, r3
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a57      	ldr	r2, [pc, #348]	; (800abb0 <HAL_GPIO_Init+0x328>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d037      	beq.n	800aac6 <HAL_GPIO_Init+0x23e>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a56      	ldr	r2, [pc, #344]	; (800abb4 <HAL_GPIO_Init+0x32c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d031      	beq.n	800aac2 <HAL_GPIO_Init+0x23a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a55      	ldr	r2, [pc, #340]	; (800abb8 <HAL_GPIO_Init+0x330>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d02b      	beq.n	800aabe <HAL_GPIO_Init+0x236>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a54      	ldr	r2, [pc, #336]	; (800abbc <HAL_GPIO_Init+0x334>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d025      	beq.n	800aaba <HAL_GPIO_Init+0x232>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a53      	ldr	r2, [pc, #332]	; (800abc0 <HAL_GPIO_Init+0x338>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d01f      	beq.n	800aab6 <HAL_GPIO_Init+0x22e>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a52      	ldr	r2, [pc, #328]	; (800abc4 <HAL_GPIO_Init+0x33c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d019      	beq.n	800aab2 <HAL_GPIO_Init+0x22a>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a51      	ldr	r2, [pc, #324]	; (800abc8 <HAL_GPIO_Init+0x340>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d013      	beq.n	800aaae <HAL_GPIO_Init+0x226>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a50      	ldr	r2, [pc, #320]	; (800abcc <HAL_GPIO_Init+0x344>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00d      	beq.n	800aaaa <HAL_GPIO_Init+0x222>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a4f      	ldr	r2, [pc, #316]	; (800abd0 <HAL_GPIO_Init+0x348>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d007      	beq.n	800aaa6 <HAL_GPIO_Init+0x21e>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a4e      	ldr	r2, [pc, #312]	; (800abd4 <HAL_GPIO_Init+0x34c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d101      	bne.n	800aaa2 <HAL_GPIO_Init+0x21a>
 800aa9e:	2309      	movs	r3, #9
 800aaa0:	e012      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aaa2:	230a      	movs	r3, #10
 800aaa4:	e010      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aaa6:	2308      	movs	r3, #8
 800aaa8:	e00e      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aaaa:	2307      	movs	r3, #7
 800aaac:	e00c      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aaae:	2306      	movs	r3, #6
 800aab0:	e00a      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aab2:	2305      	movs	r3, #5
 800aab4:	e008      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aab6:	2304      	movs	r3, #4
 800aab8:	e006      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aaba:	2303      	movs	r3, #3
 800aabc:	e004      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e002      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e000      	b.n	800aac8 <HAL_GPIO_Init+0x240>
 800aac6:	2300      	movs	r3, #0
 800aac8:	69fa      	ldr	r2, [r7, #28]
 800aaca:	f002 0203 	and.w	r2, r2, #3
 800aace:	0092      	lsls	r2, r2, #2
 800aad0:	4093      	lsls	r3, r2
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800aad8:	4934      	ldr	r1, [pc, #208]	; (800abac <HAL_GPIO_Init+0x324>)
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	089b      	lsrs	r3, r3, #2
 800aade:	3302      	adds	r3, #2
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aae6:	4b3c      	ldr	r3, [pc, #240]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	43db      	mvns	r3, r3
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab0a:	4a33      	ldr	r2, [pc, #204]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab10:	4b31      	ldr	r3, [pc, #196]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	43db      	mvns	r3, r3
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab34:	4a28      	ldr	r2, [pc, #160]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab3a:	4b27      	ldr	r3, [pc, #156]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	43db      	mvns	r3, r3
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	4013      	ands	r3, r2
 800ab48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab5e:	4a1e      	ldr	r2, [pc, #120]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab64:	4b1c      	ldr	r3, [pc, #112]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	43db      	mvns	r3, r3
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	4013      	ands	r3, r2
 800ab72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d003      	beq.n	800ab88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab88:	4a13      	ldr	r2, [pc, #76]	; (800abd8 <HAL_GPIO_Init+0x350>)
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	3301      	adds	r3, #1
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	2b0f      	cmp	r3, #15
 800ab98:	f67f ae86 	bls.w	800a8a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800ab9c:	bf00      	nop
 800ab9e:	3724      	adds	r7, #36	; 0x24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	40023800 	.word	0x40023800
 800abac:	40013800 	.word	0x40013800
 800abb0:	40020000 	.word	0x40020000
 800abb4:	40020400 	.word	0x40020400
 800abb8:	40020800 	.word	0x40020800
 800abbc:	40020c00 	.word	0x40020c00
 800abc0:	40021000 	.word	0x40021000
 800abc4:	40021400 	.word	0x40021400
 800abc8:	40021800 	.word	0x40021800
 800abcc:	40021c00 	.word	0x40021c00
 800abd0:	40022000 	.word	0x40022000
 800abd4:	40022400 	.word	0x40022400
 800abd8:	40013c00 	.word	0x40013c00

0800abdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	691a      	ldr	r2, [r3, #16]
 800abec:	887b      	ldrh	r3, [r7, #2]
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
 800abf8:	e001      	b.n	800abfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	807b      	strh	r3, [r7, #2]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac1c:	787b      	ldrb	r3, [r7, #1]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac22:	887a      	ldrh	r2, [r7, #2]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ac28:	e003      	b.n	800ac32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ac2a:	887b      	ldrh	r3, [r7, #2]
 800ac2c:	041a      	lsls	r2, r3, #16
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	619a      	str	r2, [r3, #24]
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
	...

0800ac40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e07f      	b.n	800ad52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d106      	bne.n	800ac6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f007 ff38 	bl	8012adc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2224      	movs	r2, #36	; 0x24
 800ac70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f022 0201 	bic.w	r2, r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d107      	bne.n	800acba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acb6:	609a      	str	r2, [r3, #8]
 800acb8:	e006      	b.n	800acc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800acc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d104      	bne.n	800acda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6859      	ldr	r1, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <HAL_I2C_Init+0x11c>)
 800ace6:	430b      	orrs	r3, r1
 800ace8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68da      	ldr	r2, [r3, #12]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691a      	ldr	r2, [r3, #16]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	ea42 0103 	orr.w	r1, r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	021a      	lsls	r2, r3, #8
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69d9      	ldr	r1, [r3, #28]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a1a      	ldr	r2, [r3, #32]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2220      	movs	r2, #32
 800ad3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	02008000 	.word	0x02008000

0800ad60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	607a      	str	r2, [r7, #4]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	817b      	strh	r3, [r7, #10]
 800ad70:	4613      	mov	r3, r2
 800ad72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	f040 80e4 	bne.w	800af4e <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_I2C_Master_Transmit+0x34>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e0dd      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad9c:	f7fe fd44 	bl	8009828 <HAL_GetTick>
 800ada0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	2319      	movs	r3, #25
 800ada8:	2201      	movs	r2, #1
 800adaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 f9fc 	bl	800b1ac <I2C_WaitOnFlagUntilTimeout>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e0c8      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2221      	movs	r2, #33	; 0x21
 800adc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2210      	movs	r2, #16
 800adca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	893a      	ldrh	r2, [r7, #8]
 800adde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adea:	b29b      	uxth	r3, r3
 800adec:	2bff      	cmp	r3, #255	; 0xff
 800adee:	d90e      	bls.n	800ae0e <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	22ff      	movs	r2, #255	; 0xff
 800adf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	8979      	ldrh	r1, [r7, #10]
 800adfe:	4b56      	ldr	r3, [pc, #344]	; (800af58 <HAL_I2C_Master_Transmit+0x1f8>)
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 fb50 	bl	800b4ac <I2C_TransferConfig>
 800ae0c:	e070      	b.n	800aef0 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	8979      	ldrh	r1, [r7, #10]
 800ae20:	4b4d      	ldr	r3, [pc, #308]	; (800af58 <HAL_I2C_Master_Transmit+0x1f8>)
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 fb3f 	bl	800b4ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800ae2e:	e05f      	b.n	800aef0 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	6a39      	ldr	r1, [r7, #32]
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f000 f9f3 	bl	800b220 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d007      	beq.n	800ae50 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d101      	bne.n	800ae4c <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e081      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e07f      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	1c59      	adds	r1, r3, #1
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	6251      	str	r1, [r2, #36]	; 0x24
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae74:	3b01      	subs	r3, #1
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d135      	bne.n	800aef0 <HAL_I2C_Master_Transmit+0x190>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d030      	beq.n	800aef0 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	6a3b      	ldr	r3, [r7, #32]
 800ae94:	2200      	movs	r2, #0
 800ae96:	2180      	movs	r1, #128	; 0x80
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 f987 	bl	800b1ac <I2C_WaitOnFlagUntilTimeout>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e053      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	2bff      	cmp	r3, #255	; 0xff
 800aeb0:	d90e      	bls.n	800aed0 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	22ff      	movs	r2, #255	; 0xff
 800aeb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	8979      	ldrh	r1, [r7, #10]
 800aec0:	2300      	movs	r3, #0
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 faef 	bl	800b4ac <I2C_TransferConfig>
 800aece:	e00f      	b.n	800aef0 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	8979      	ldrh	r1, [r7, #10]
 800aee2:	2300      	movs	r3, #0
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fade 	bl	800b4ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d19a      	bne.n	800ae30 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	6a39      	ldr	r1, [r7, #32]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f9ce 	bl	800b2a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d101      	bne.n	800af16 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e01c      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e01a      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2220      	movs	r2, #32
 800af20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6859      	ldr	r1, [r3, #4]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <HAL_I2C_Master_Transmit+0x1fc>)
 800af2e:	400b      	ands	r3, r1
 800af30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2220      	movs	r2, #32
 800af36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e000      	b.n	800af50 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 800af4e:	2302      	movs	r3, #2
  }
}
 800af50:	4618      	mov	r0, r3
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	80002000 	.word	0x80002000
 800af5c:	fe00e800 	.word	0xfe00e800

0800af60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af02      	add	r7, sp, #8
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	607a      	str	r2, [r7, #4]
 800af6a:	461a      	mov	r2, r3
 800af6c:	460b      	mov	r3, r1
 800af6e:	817b      	strh	r3, [r7, #10]
 800af70:	4613      	mov	r3, r2
 800af72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 800af74:	2300      	movs	r3, #0
 800af76:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b20      	cmp	r3, #32
 800af82:	f040 80e5 	bne.w	800b150 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_I2C_Master_Receive+0x34>
 800af90:	2302      	movs	r3, #2
 800af92:	e0de      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af9c:	f7fe fc44 	bl	8009828 <HAL_GetTick>
 800afa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	2319      	movs	r3, #25
 800afa8:	2201      	movs	r2, #1
 800afaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 f8fc 	bl	800b1ac <I2C_WaitOnFlagUntilTimeout>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e0c9      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2222      	movs	r2, #34	; 0x22
 800afc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2210      	movs	r2, #16
 800afca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	893a      	ldrh	r2, [r7, #8]
 800afde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afea:	b29b      	uxth	r3, r3
 800afec:	2bff      	cmp	r3, #255	; 0xff
 800afee:	d90e      	bls.n	800b00e <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	22ff      	movs	r2, #255	; 0xff
 800aff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800affa:	b2da      	uxtb	r2, r3
 800affc:	8979      	ldrh	r1, [r7, #10]
 800affe:	4b57      	ldr	r3, [pc, #348]	; (800b15c <HAL_I2C_Master_Receive+0x1fc>)
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 fa50 	bl	800b4ac <I2C_TransferConfig>
 800b00c:	e071      	b.n	800b0f2 <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b012:	b29a      	uxth	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	8979      	ldrh	r1, [r7, #10]
 800b020:	4b4e      	ldr	r3, [pc, #312]	; (800b15c <HAL_I2C_Master_Receive+0x1fc>)
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fa3f 	bl	800b4ac <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b02e:	e060      	b.n	800b0f2 <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	6a39      	ldr	r1, [r7, #32]
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 f96f 	bl	800b318 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d007      	beq.n	800b050 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b044:	2b04      	cmp	r3, #4
 800b046:	d101      	bne.n	800b04c <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e082      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e080      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	1c59      	adds	r1, r3, #1
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	6251      	str	r1, [r2, #36]	; 0x24
 800b060:	b2c2      	uxtb	r2, r0
 800b062:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b068:	3b01      	subs	r3, #1
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b074:	b29b      	uxth	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	b29a      	uxth	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b082:	2b00      	cmp	r3, #0
 800b084:	d135      	bne.n	800b0f2 <HAL_I2C_Master_Receive+0x192>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d030      	beq.n	800b0f2 <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	2200      	movs	r2, #0
 800b098:	2180      	movs	r1, #128	; 0x80
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 f886 	bl	800b1ac <I2C_WaitOnFlagUntilTimeout>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e053      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	2bff      	cmp	r3, #255	; 0xff
 800b0b2:	d90e      	bls.n	800b0d2 <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	22ff      	movs	r2, #255	; 0xff
 800b0b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	8979      	ldrh	r1, [r7, #10]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 f9ee 	bl	800b4ac <I2C_TransferConfig>
 800b0d0:	e00f      	b.n	800b0f2 <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	8979      	ldrh	r1, [r7, #10]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 f9dd 	bl	800b4ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d199      	bne.n	800b030 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	6a39      	ldr	r1, [r7, #32]
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 f8cd 	bl	800b2a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d007      	beq.n	800b11c <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b110:	2b04      	cmp	r3, #4
 800b112:	d101      	bne.n	800b118 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	e01c      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e01a      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2220      	movs	r2, #32
 800b122:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6859      	ldr	r1, [r3, #4]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <HAL_I2C_Master_Receive+0x200>)
 800b130:	400b      	ands	r3, r1
 800b132:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2220      	movs	r2, #32
 800b138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e000      	b.n	800b152 <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 800b150:	2302      	movs	r3, #2
  }
}
 800b152:	4618      	mov	r0, r3
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	80002400 	.word	0x80002400
 800b160:	fe00e800 	.word	0xfe00e800

0800b164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	f003 0302 	and.w	r3, r3, #2
 800b176:	2b02      	cmp	r3, #2
 800b178:	d103      	bne.n	800b182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2200      	movs	r2, #0
 800b180:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d007      	beq.n	800b1a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699a      	ldr	r2, [r3, #24]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f042 0201 	orr.w	r2, r2, #1
 800b19e:	619a      	str	r2, [r3, #24]
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	603b      	str	r3, [r7, #0]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1bc:	e01c      	b.n	800b1f8 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1c4:	d018      	beq.n	800b1f8 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d007      	beq.n	800b1dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1cc:	f7fe fb2c 	bl	8009828 <HAL_GetTick>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d20d      	bcs.n	800b1f8 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e00f      	b.n	800b218 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	699a      	ldr	r2, [r3, #24]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	4013      	ands	r3, r2
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	429a      	cmp	r2, r3
 800b206:	bf0c      	ite	eq
 800b208:	2301      	moveq	r3, #1
 800b20a:	2300      	movne	r3, #0
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	461a      	mov	r2, r3
 800b210:	79fb      	ldrb	r3, [r7, #7]
 800b212:	429a      	cmp	r2, r3
 800b214:	d0d3      	beq.n	800b1be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b22c:	e02c      	b.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f8dc 	bl	800b3f0 <I2C_IsAcknowledgeFailed>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e02a      	b.n	800b298 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b248:	d01e      	beq.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d007      	beq.n	800b260 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b250:	f7fe faea 	bl	8009828 <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d213      	bcs.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b264:	f043 0220 	orr.w	r2, r3, #32
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2220      	movs	r2, #32
 800b270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e007      	b.n	800b298 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	2b02      	cmp	r3, #2
 800b294:	d1cb      	bne.n	800b22e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2ac:	e028      	b.n	800b300 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 f89c 	bl	800b3f0 <I2C_IsAcknowledgeFailed>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e026      	b.n	800b310 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d007      	beq.n	800b2d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b2c8:	f7fe faae 	bl	8009828 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d213      	bcs.n	800b300 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2dc:	f043 0220 	orr.w	r2, r3, #32
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e007      	b.n	800b310 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d1cf      	bne.n	800b2ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b324:	e055      	b.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	68b9      	ldr	r1, [r7, #8]
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 f860 	bl	800b3f0 <I2C_IsAcknowledgeFailed>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e053      	b.n	800b3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	f003 0320 	and.w	r3, r3, #32
 800b344:	2b20      	cmp	r3, #32
 800b346:	d129      	bne.n	800b39c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	f003 0304 	and.w	r3, r3, #4
 800b352:	2b04      	cmp	r3, #4
 800b354:	d105      	bne.n	800b362 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	e03f      	b.n	800b3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2220      	movs	r2, #32
 800b368:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6859      	ldr	r1, [r3, #4]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800b376:	400b      	ands	r3, r1
 800b378:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2220      	movs	r2, #32
 800b384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e022      	b.n	800b3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800b3a2:	f7fe fa41 	bl	8009828 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d20f      	bcs.n	800b3d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3b6:	f043 0220 	orr.w	r2, r3, #32
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e007      	b.n	800b3e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d1a2      	bne.n	800b326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	fe00e800 	.word	0xfe00e800

0800b3f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	f003 0310 	and.w	r3, r3, #16
 800b406:	2b10      	cmp	r3, #16
 800b408:	d148      	bne.n	800b49c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b40a:	e01c      	b.n	800b446 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b412:	d018      	beq.n	800b446 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <I2C_IsAcknowledgeFailed+0x3a>
 800b41a:	f7fe fa05 	bl	8009828 <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	429a      	cmp	r2, r3
 800b428:	d20d      	bcs.n	800b446 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2220      	movs	r2, #32
 800b42e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e02b      	b.n	800b49e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	f003 0320 	and.w	r3, r3, #32
 800b450:	2b20      	cmp	r3, #32
 800b452:	d1db      	bne.n	800b40c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2210      	movs	r2, #16
 800b45a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2220      	movs	r2, #32
 800b462:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff fe7d 	bl	800b164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6859      	ldr	r1, [r3, #4]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <I2C_IsAcknowledgeFailed+0xb8>)
 800b476:	400b      	ands	r3, r1
 800b478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2204      	movs	r2, #4
 800b47e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2220      	movs	r2, #32
 800b484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e000      	b.n	800b49e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	fe00e800 	.word	0xfe00e800

0800b4ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	607b      	str	r3, [r7, #4]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	817b      	strh	r3, [r7, #10]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	0d5b      	lsrs	r3, r3, #21
 800b4c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <I2C_TransferConfig+0x58>)
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	ea02 0103 	and.w	r1, r2, r3
 800b4d6:	897b      	ldrh	r3, [r7, #10]
 800b4d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b4dc:	7a7b      	ldrb	r3, [r7, #9]
 800b4de:	041b      	lsls	r3, r3, #16
 800b4e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	03ff63ff 	.word	0x03ff63ff

0800b508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d138      	bne.n	800b590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b528:	2302      	movs	r3, #2
 800b52a:	e032      	b.n	800b592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2224      	movs	r2, #36	; 0x24
 800b538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0201 	bic.w	r2, r2, #1
 800b54a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b55a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6819      	ldr	r1, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e000      	b.n	800b592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b590:	2302      	movs	r3, #2
  }
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
	...

0800b5a0 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e0c7      	b.n	800b74a <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f007 fb4e 	bl	8012c70 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	699a      	ldr	r2, [r3, #24]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b5ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6999      	ldr	r1, [r3, #24]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b600:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6899      	ldr	r1, [r3, #8]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	4b4e      	ldr	r3, [pc, #312]	; (800b754 <HAL_LTDC_Init+0x1b4>)
 800b61c:	400b      	ands	r3, r1
 800b61e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	041b      	lsls	r3, r3, #16
 800b626:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6899      	ldr	r1, [r3, #8]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	699a      	ldr	r2, [r3, #24]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68d9      	ldr	r1, [r3, #12]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	4b42      	ldr	r3, [pc, #264]	; (800b754 <HAL_LTDC_Init+0x1b4>)
 800b64a:	400b      	ands	r3, r1
 800b64c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	041b      	lsls	r3, r3, #16
 800b654:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68d9      	ldr	r1, [r3, #12]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a1a      	ldr	r2, [r3, #32]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6919      	ldr	r1, [r3, #16]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	4b37      	ldr	r3, [pc, #220]	; (800b754 <HAL_LTDC_Init+0x1b4>)
 800b678:	400b      	ands	r3, r1
 800b67a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	041b      	lsls	r3, r3, #16
 800b682:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6919      	ldr	r1, [r3, #16]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	431a      	orrs	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6959      	ldr	r1, [r3, #20]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	4b2b      	ldr	r3, [pc, #172]	; (800b754 <HAL_LTDC_Init+0x1b4>)
 800b6a6:	400b      	ands	r3, r1
 800b6a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ae:	041b      	lsls	r3, r3, #16
 800b6b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6959      	ldr	r1, [r3, #20]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b6d8:	041b      	lsls	r3, r3, #16
 800b6da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b6ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b6fe:	431a      	orrs	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f042 0204 	orr.w	r2, r2, #4
 800b716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0202 	orr.w	r2, r2, #2
 800b726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	699a      	ldr	r2, [r3, #24]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	f000f800 	.word	0xf000f800

0800b758 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800b758:	b5b0      	push	{r4, r5, r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d101      	bne.n	800b772 <HAL_LTDC_ConfigLayer+0x1a>
 800b76e:	2302      	movs	r3, #2
 800b770:	e02c      	b.n	800b7cc <HAL_LTDC_ConfigLayer+0x74>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2202      	movs	r2, #2
 800b77e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2134      	movs	r1, #52	; 0x34
 800b788:	fb01 f303 	mul.w	r3, r1, r3
 800b78c:	4413      	add	r3, r2
 800b78e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	4614      	mov	r4, r2
 800b796:	461d      	mov	r5, r3
 800b798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b79a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b79c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b79e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	68b9      	ldr	r1, [r7, #8]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f855 	bl	800b85c <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bdb0      	pop	{r4, r5, r7, pc}

0800b7d4 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d101      	bne.n	800b7ee <HAL_LTDC_SetAlpha+0x1a>
 800b7ea:	2302      	movs	r3, #2
 800b7ec:	e024      	b.n	800b838 <HAL_LTDC_SetAlpha+0x64>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2234      	movs	r2, #52	; 0x34
 800b802:	fb02 f303 	mul.w	r3, r2, r3
 800b806:	3338      	adds	r3, #56	; 0x38
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	4413      	add	r3, r2
 800b80c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	6979      	ldr	r1, [r7, #20]
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 f81f 	bl	800b85c <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2201      	movs	r2, #1
 800b824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b84e:	b2db      	uxtb	r3, r3
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b089      	sub	sp, #36	; 0x24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	0c1b      	lsrs	r3, r3, #16
 800b880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b884:	4413      	add	r3, r2
 800b886:	041b      	lsls	r3, r3, #16
 800b888:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	01db      	lsls	r3, r3, #7
 800b894:	4413      	add	r3, r2
 800b896:	3384      	adds	r3, #132	; 0x84
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	6812      	ldr	r2, [r2, #0]
 800b89e:	4611      	mov	r1, r2
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	01d2      	lsls	r2, r2, #7
 800b8a4:	440a      	add	r2, r1
 800b8a6:	3284      	adds	r2, #132	; 0x84
 800b8a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b8ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	0c1b      	lsrs	r3, r3, #16
 800b8ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8be:	4413      	add	r3, r2
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	01db      	lsls	r3, r3, #7
 800b8cc:	440b      	add	r3, r1
 800b8ce:	3384      	adds	r3, #132	; 0x84
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8e6:	4413      	add	r3, r2
 800b8e8:	041b      	lsls	r3, r3, #16
 800b8ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	01db      	lsls	r3, r3, #7
 800b8f6:	4413      	add	r3, r2
 800b8f8:	3384      	adds	r3, #132	; 0x84
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	6812      	ldr	r2, [r2, #0]
 800b900:	4611      	mov	r1, r2
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	01d2      	lsls	r2, r2, #7
 800b906:	440a      	add	r2, r1
 800b908:	3284      	adds	r2, #132	; 0x84
 800b90a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b90e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b91e:	4413      	add	r3, r2
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4619      	mov	r1, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	01db      	lsls	r3, r3, #7
 800b92c:	440b      	add	r3, r1
 800b92e:	3384      	adds	r3, #132	; 0x84
 800b930:	4619      	mov	r1, r3
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	4313      	orrs	r3, r2
 800b936:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	461a      	mov	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	01db      	lsls	r3, r3, #7
 800b942:	4413      	add	r3, r2
 800b944:	3384      	adds	r3, #132	; 0x84
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	6812      	ldr	r2, [r2, #0]
 800b94c:	4611      	mov	r1, r2
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	01d2      	lsls	r2, r2, #7
 800b952:	440a      	add	r2, r1
 800b954:	3284      	adds	r2, #132	; 0x84
 800b956:	f023 0307 	bic.w	r3, r3, #7
 800b95a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	01db      	lsls	r3, r3, #7
 800b966:	4413      	add	r3, r2
 800b968:	3384      	adds	r3, #132	; 0x84
 800b96a:	461a      	mov	r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b978:	021b      	lsls	r3, r3, #8
 800b97a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b982:	041b      	lsls	r3, r3, #16
 800b984:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	061b      	lsls	r3, r3, #24
 800b98c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	01db      	lsls	r3, r3, #7
 800b998:	4413      	add	r3, r2
 800b99a:	3384      	adds	r3, #132	; 0x84
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	01db      	lsls	r3, r3, #7
 800b9a8:	4413      	add	r3, r2
 800b9aa:	3384      	adds	r3, #132	; 0x84
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	431a      	orrs	r2, r3
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	01db      	lsls	r3, r3, #7
 800b9cc:	440b      	add	r3, r1
 800b9ce:	3384      	adds	r3, #132	; 0x84
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	01db      	lsls	r3, r3, #7
 800b9e2:	4413      	add	r3, r2
 800b9e4:	3384      	adds	r3, #132	; 0x84
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	6812      	ldr	r2, [r2, #0]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	01d2      	lsls	r2, r2, #7
 800b9f2:	440a      	add	r2, r1
 800b9f4:	3284      	adds	r2, #132	; 0x84
 800b9f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	461a      	mov	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	01db      	lsls	r3, r3, #7
 800ba06:	4413      	add	r3, r2
 800ba08:	3384      	adds	r3, #132	; 0x84
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	01db      	lsls	r3, r3, #7
 800ba1c:	4413      	add	r3, r2
 800ba1e:	3384      	adds	r3, #132	; 0x84
 800ba20:	69da      	ldr	r2, [r3, #28]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4619      	mov	r1, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	01db      	lsls	r3, r3, #7
 800ba2c:	440b      	add	r3, r1
 800ba2e:	3384      	adds	r3, #132	; 0x84
 800ba30:	4619      	mov	r1, r3
 800ba32:	4b58      	ldr	r3, [pc, #352]	; (800bb94 <LTDC_SetConfig+0x338>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	69da      	ldr	r2, [r3, #28]
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	68f9      	ldr	r1, [r7, #12]
 800ba42:	6809      	ldr	r1, [r1, #0]
 800ba44:	4608      	mov	r0, r1
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	01c9      	lsls	r1, r1, #7
 800ba4a:	4401      	add	r1, r0
 800ba4c:	3184      	adds	r1, #132	; 0x84
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	01db      	lsls	r3, r3, #7
 800ba5c:	4413      	add	r3, r2
 800ba5e:	3384      	adds	r3, #132	; 0x84
 800ba60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	01db      	lsls	r3, r3, #7
 800ba6c:	4413      	add	r3, r2
 800ba6e:	3384      	adds	r3, #132	; 0x84
 800ba70:	461a      	mov	r2, r3
 800ba72:	2300      	movs	r3, #0
 800ba74:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	01db      	lsls	r3, r3, #7
 800ba80:	4413      	add	r3, r2
 800ba82:	3384      	adds	r3, #132	; 0x84
 800ba84:	461a      	mov	r2, r3
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 800ba94:	2304      	movs	r3, #4
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	e01b      	b.n	800bad2 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d102      	bne.n	800baa8 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 800baa2:	2303      	movs	r3, #3
 800baa4:	61fb      	str	r3, [r7, #28]
 800baa6:	e014      	b.n	800bad2 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	2b04      	cmp	r3, #4
 800baae:	d00b      	beq.n	800bac8 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d007      	beq.n	800bac8 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800babc:	2b03      	cmp	r3, #3
 800babe:	d003      	beq.n	800bac8 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bac4:	2b07      	cmp	r3, #7
 800bac6:	d102      	bne.n	800bace <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 800bac8:	2302      	movs	r3, #2
 800baca:	61fb      	str	r3, [r7, #28]
 800bacc:	e001      	b.n	800bad2 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 800bace:	2301      	movs	r3, #1
 800bad0:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	01db      	lsls	r3, r3, #7
 800badc:	4413      	add	r3, r2
 800bade:	3384      	adds	r3, #132	; 0x84
 800bae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	6812      	ldr	r2, [r2, #0]
 800bae6:	4611      	mov	r1, r2
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	01d2      	lsls	r2, r2, #7
 800baec:	440a      	add	r2, r1
 800baee:	3284      	adds	r2, #132	; 0x84
 800baf0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800baf4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	69fa      	ldr	r2, [r7, #28]
 800bafc:	fb02 f303 	mul.w	r3, r2, r3
 800bb00:	041a      	lsls	r2, r3, #16
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6859      	ldr	r1, [r3, #4]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	1acb      	subs	r3, r1, r3
 800bb0c:	69f9      	ldr	r1, [r7, #28]
 800bb0e:	fb01 f303 	mul.w	r3, r1, r3
 800bb12:	3303      	adds	r3, #3
 800bb14:	68f9      	ldr	r1, [r7, #12]
 800bb16:	6809      	ldr	r1, [r1, #0]
 800bb18:	4608      	mov	r0, r1
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	01c9      	lsls	r1, r1, #7
 800bb1e:	4401      	add	r1, r0
 800bb20:	3184      	adds	r1, #132	; 0x84
 800bb22:	4313      	orrs	r3, r2
 800bb24:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	01db      	lsls	r3, r3, #7
 800bb30:	4413      	add	r3, r2
 800bb32:	3384      	adds	r3, #132	; 0x84
 800bb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	01db      	lsls	r3, r3, #7
 800bb40:	440b      	add	r3, r1
 800bb42:	3384      	adds	r3, #132	; 0x84
 800bb44:	4619      	mov	r1, r3
 800bb46:	4b14      	ldr	r3, [pc, #80]	; (800bb98 <LTDC_SetConfig+0x33c>)
 800bb48:	4013      	ands	r3, r2
 800bb4a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	01db      	lsls	r3, r3, #7
 800bb56:	4413      	add	r3, r2
 800bb58:	3384      	adds	r3, #132	; 0x84
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	461a      	mov	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	01db      	lsls	r3, r3, #7
 800bb6c:	4413      	add	r3, r2
 800bb6e:	3384      	adds	r3, #132	; 0x84
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	6812      	ldr	r2, [r2, #0]
 800bb76:	4611      	mov	r1, r2
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	01d2      	lsls	r2, r2, #7
 800bb7c:	440a      	add	r2, r1
 800bb7e:	3284      	adds	r2, #132	; 0x84
 800bb80:	f043 0301 	orr.w	r3, r3, #1
 800bb84:	6013      	str	r3, [r2, #0]
}
 800bb86:	bf00      	nop
 800bb88:	3724      	adds	r7, #36	; 0x24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	fffff8f8 	.word	0xfffff8f8
 800bb98:	fffff800 	.word	0xfffff800

0800bb9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bba6:	4b23      	ldr	r3, [pc, #140]	; (800bc34 <HAL_PWREx_EnableOverDrive+0x98>)
 800bba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbaa:	4a22      	ldr	r2, [pc, #136]	; (800bc34 <HAL_PWREx_EnableOverDrive+0x98>)
 800bbac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbb0:	6413      	str	r3, [r2, #64]	; 0x40
 800bbb2:	4b20      	ldr	r3, [pc, #128]	; (800bc34 <HAL_PWREx_EnableOverDrive+0x98>)
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bbbe:	4b1e      	ldr	r3, [pc, #120]	; (800bc38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a1d      	ldr	r2, [pc, #116]	; (800bc38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bbca:	f7fd fe2d 	bl	8009828 <HAL_GetTick>
 800bbce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bbd0:	e009      	b.n	800bbe6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bbd2:	f7fd fe29 	bl	8009828 <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbe0:	d901      	bls.n	800bbe6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e022      	b.n	800bc2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf2:	d1ee      	bne.n	800bbd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bbf4:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a0f      	ldr	r2, [pc, #60]	; (800bc38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bbfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc00:	f7fd fe12 	bl	8009828 <HAL_GetTick>
 800bc04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc06:	e009      	b.n	800bc1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bc08:	f7fd fe0e 	bl	8009828 <HAL_GetTick>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc16:	d901      	bls.n	800bc1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e007      	b.n	800bc2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc28:	d1ee      	bne.n	800bc08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	40023800 	.word	0x40023800
 800bc38:	40007000 	.word	0x40007000

0800bc3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800bc44:	2300      	movs	r3, #0
 800bc46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e25c      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f000 8087 	beq.w	800bd6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc60:	4b96      	ldr	r3, [pc, #600]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f003 030c 	and.w	r3, r3, #12
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d00c      	beq.n	800bc86 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bc6c:	4b93      	ldr	r3, [pc, #588]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	f003 030c 	and.w	r3, r3, #12
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d112      	bne.n	800bc9e <HAL_RCC_OscConfig+0x62>
 800bc78:	4b90      	ldr	r3, [pc, #576]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc84:	d10b      	bne.n	800bc9e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc86:	4b8d      	ldr	r3, [pc, #564]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d06c      	beq.n	800bd6c <HAL_RCC_OscConfig+0x130>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d168      	bne.n	800bd6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e236      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca6:	d106      	bne.n	800bcb6 <HAL_RCC_OscConfig+0x7a>
 800bca8:	4b84      	ldr	r3, [pc, #528]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a83      	ldr	r2, [pc, #524]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	e02e      	b.n	800bd14 <HAL_RCC_OscConfig+0xd8>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10c      	bne.n	800bcd8 <HAL_RCC_OscConfig+0x9c>
 800bcbe:	4b7f      	ldr	r3, [pc, #508]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a7e      	ldr	r2, [pc, #504]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcc8:	6013      	str	r3, [r2, #0]
 800bcca:	4b7c      	ldr	r3, [pc, #496]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a7b      	ldr	r2, [pc, #492]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	e01d      	b.n	800bd14 <HAL_RCC_OscConfig+0xd8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bce0:	d10c      	bne.n	800bcfc <HAL_RCC_OscConfig+0xc0>
 800bce2:	4b76      	ldr	r3, [pc, #472]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a75      	ldr	r2, [pc, #468]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	4b73      	ldr	r3, [pc, #460]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a72      	ldr	r2, [pc, #456]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	e00b      	b.n	800bd14 <HAL_RCC_OscConfig+0xd8>
 800bcfc:	4b6f      	ldr	r3, [pc, #444]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a6e      	ldr	r2, [pc, #440]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	4b6c      	ldr	r3, [pc, #432]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a6b      	ldr	r2, [pc, #428]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bd12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d013      	beq.n	800bd44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd1c:	f7fd fd84 	bl	8009828 <HAL_GetTick>
 800bd20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd22:	e008      	b.n	800bd36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd24:	f7fd fd80 	bl	8009828 <HAL_GetTick>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	2b64      	cmp	r3, #100	; 0x64
 800bd30:	d901      	bls.n	800bd36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bd32:	2303      	movs	r3, #3
 800bd34:	e1ea      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd36:	4b61      	ldr	r3, [pc, #388]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0f0      	beq.n	800bd24 <HAL_RCC_OscConfig+0xe8>
 800bd42:	e014      	b.n	800bd6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd44:	f7fd fd70 	bl	8009828 <HAL_GetTick>
 800bd48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd4a:	e008      	b.n	800bd5e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd4c:	f7fd fd6c 	bl	8009828 <HAL_GetTick>
 800bd50:	4602      	mov	r2, r0
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	2b64      	cmp	r3, #100	; 0x64
 800bd58:	d901      	bls.n	800bd5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e1d6      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd5e:	4b57      	ldr	r3, [pc, #348]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1f0      	bne.n	800bd4c <HAL_RCC_OscConfig+0x110>
 800bd6a:	e000      	b.n	800bd6e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d069      	beq.n	800be4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bd7a:	4b50      	ldr	r3, [pc, #320]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	f003 030c 	and.w	r3, r3, #12
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00b      	beq.n	800bd9e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd86:	4b4d      	ldr	r3, [pc, #308]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f003 030c 	and.w	r3, r3, #12
 800bd8e:	2b08      	cmp	r3, #8
 800bd90:	d11c      	bne.n	800bdcc <HAL_RCC_OscConfig+0x190>
 800bd92:	4b4a      	ldr	r3, [pc, #296]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d116      	bne.n	800bdcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd9e:	4b47      	ldr	r3, [pc, #284]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0302 	and.w	r3, r3, #2
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <HAL_RCC_OscConfig+0x17a>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d001      	beq.n	800bdb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e1aa      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdb6:	4b41      	ldr	r3, [pc, #260]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	493d      	ldr	r1, [pc, #244]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bdca:	e040      	b.n	800be4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d023      	beq.n	800be1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bdd4:	4b39      	ldr	r3, [pc, #228]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a38      	ldr	r2, [pc, #224]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde0:	f7fd fd22 	bl	8009828 <HAL_GetTick>
 800bde4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bde6:	e008      	b.n	800bdfa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bde8:	f7fd fd1e 	bl	8009828 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d901      	bls.n	800bdfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e188      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdfa:	4b30      	ldr	r3, [pc, #192]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0302 	and.w	r3, r3, #2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0f0      	beq.n	800bde8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be06:	4b2d      	ldr	r3, [pc, #180]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	00db      	lsls	r3, r3, #3
 800be14:	4929      	ldr	r1, [pc, #164]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be16:	4313      	orrs	r3, r2
 800be18:	600b      	str	r3, [r1, #0]
 800be1a:	e018      	b.n	800be4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be1c:	4b27      	ldr	r3, [pc, #156]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a26      	ldr	r2, [pc, #152]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be22:	f023 0301 	bic.w	r3, r3, #1
 800be26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be28:	f7fd fcfe 	bl	8009828 <HAL_GetTick>
 800be2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be2e:	e008      	b.n	800be42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be30:	f7fd fcfa 	bl	8009828 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d901      	bls.n	800be42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e164      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be42:	4b1e      	ldr	r3, [pc, #120]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1f0      	bne.n	800be30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0308 	and.w	r3, r3, #8
 800be56:	2b00      	cmp	r3, #0
 800be58:	d038      	beq.n	800becc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d019      	beq.n	800be96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be62:	4b16      	ldr	r3, [pc, #88]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be66:	4a15      	ldr	r2, [pc, #84]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be68:	f043 0301 	orr.w	r3, r3, #1
 800be6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be6e:	f7fd fcdb 	bl	8009828 <HAL_GetTick>
 800be72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be74:	e008      	b.n	800be88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be76:	f7fd fcd7 	bl	8009828 <HAL_GetTick>
 800be7a:	4602      	mov	r2, r0
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	2b02      	cmp	r3, #2
 800be82:	d901      	bls.n	800be88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e141      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be88:	4b0c      	ldr	r3, [pc, #48]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0f0      	beq.n	800be76 <HAL_RCC_OscConfig+0x23a>
 800be94:	e01a      	b.n	800becc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be96:	4b09      	ldr	r3, [pc, #36]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be9a:	4a08      	ldr	r2, [pc, #32]	; (800bebc <HAL_RCC_OscConfig+0x280>)
 800be9c:	f023 0301 	bic.w	r3, r3, #1
 800bea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bea2:	f7fd fcc1 	bl	8009828 <HAL_GetTick>
 800bea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bea8:	e00a      	b.n	800bec0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800beaa:	f7fd fcbd 	bl	8009828 <HAL_GetTick>
 800beae:	4602      	mov	r2, r0
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d903      	bls.n	800bec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	e127      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
 800bebc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bec0:	4b94      	ldr	r3, [pc, #592]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bec4:	f003 0302 	and.w	r3, r3, #2
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1ee      	bne.n	800beaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 80a4 	beq.w	800c022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800beda:	4b8e      	ldr	r3, [pc, #568]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10d      	bne.n	800bf02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800bee6:	4b8b      	ldr	r3, [pc, #556]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	4a8a      	ldr	r2, [pc, #552]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800beec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef0:	6413      	str	r3, [r2, #64]	; 0x40
 800bef2:	4b88      	ldr	r3, [pc, #544]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800befa:	60fb      	str	r3, [r7, #12]
 800befc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800befe:	2301      	movs	r3, #1
 800bf00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf02:	4b85      	ldr	r3, [pc, #532]	; (800c118 <HAL_RCC_OscConfig+0x4dc>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d118      	bne.n	800bf40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800bf0e:	4b82      	ldr	r3, [pc, #520]	; (800c118 <HAL_RCC_OscConfig+0x4dc>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a81      	ldr	r2, [pc, #516]	; (800c118 <HAL_RCC_OscConfig+0x4dc>)
 800bf14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf1a:	f7fd fc85 	bl	8009828 <HAL_GetTick>
 800bf1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf20:	e008      	b.n	800bf34 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bf22:	f7fd fc81 	bl	8009828 <HAL_GetTick>
 800bf26:	4602      	mov	r2, r0
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	2b64      	cmp	r3, #100	; 0x64
 800bf2e:	d901      	bls.n	800bf34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e0eb      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bf34:	4b78      	ldr	r3, [pc, #480]	; (800c118 <HAL_RCC_OscConfig+0x4dc>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d0f0      	beq.n	800bf22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d106      	bne.n	800bf56 <HAL_RCC_OscConfig+0x31a>
 800bf48:	4b72      	ldr	r3, [pc, #456]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4c:	4a71      	ldr	r2, [pc, #452]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf4e:	f043 0301 	orr.w	r3, r3, #1
 800bf52:	6713      	str	r3, [r2, #112]	; 0x70
 800bf54:	e02d      	b.n	800bfb2 <HAL_RCC_OscConfig+0x376>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10c      	bne.n	800bf78 <HAL_RCC_OscConfig+0x33c>
 800bf5e:	4b6d      	ldr	r3, [pc, #436]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf62:	4a6c      	ldr	r2, [pc, #432]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf64:	f023 0301 	bic.w	r3, r3, #1
 800bf68:	6713      	str	r3, [r2, #112]	; 0x70
 800bf6a:	4b6a      	ldr	r3, [pc, #424]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6e:	4a69      	ldr	r2, [pc, #420]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf70:	f023 0304 	bic.w	r3, r3, #4
 800bf74:	6713      	str	r3, [r2, #112]	; 0x70
 800bf76:	e01c      	b.n	800bfb2 <HAL_RCC_OscConfig+0x376>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	2b05      	cmp	r3, #5
 800bf7e:	d10c      	bne.n	800bf9a <HAL_RCC_OscConfig+0x35e>
 800bf80:	4b64      	ldr	r3, [pc, #400]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf84:	4a63      	ldr	r2, [pc, #396]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf86:	f043 0304 	orr.w	r3, r3, #4
 800bf8a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf8c:	4b61      	ldr	r3, [pc, #388]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf90:	4a60      	ldr	r2, [pc, #384]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf92:	f043 0301 	orr.w	r3, r3, #1
 800bf96:	6713      	str	r3, [r2, #112]	; 0x70
 800bf98:	e00b      	b.n	800bfb2 <HAL_RCC_OscConfig+0x376>
 800bf9a:	4b5e      	ldr	r3, [pc, #376]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bf9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9e:	4a5d      	ldr	r2, [pc, #372]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bfa0:	f023 0301 	bic.w	r3, r3, #1
 800bfa4:	6713      	str	r3, [r2, #112]	; 0x70
 800bfa6:	4b5b      	ldr	r3, [pc, #364]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfaa:	4a5a      	ldr	r2, [pc, #360]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bfac:	f023 0304 	bic.w	r3, r3, #4
 800bfb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d015      	beq.n	800bfe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfba:	f7fd fc35 	bl	8009828 <HAL_GetTick>
 800bfbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfc0:	e00a      	b.n	800bfd8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bfc2:	f7fd fc31 	bl	8009828 <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d901      	bls.n	800bfd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e099      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfd8:	4b4e      	ldr	r3, [pc, #312]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800bfda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfdc:	f003 0302 	and.w	r3, r3, #2
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0ee      	beq.n	800bfc2 <HAL_RCC_OscConfig+0x386>
 800bfe4:	e014      	b.n	800c010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfe6:	f7fd fc1f 	bl	8009828 <HAL_GetTick>
 800bfea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfec:	e00a      	b.n	800c004 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bfee:	f7fd fc1b 	bl	8009828 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d901      	bls.n	800c004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e083      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c004:	4b43      	ldr	r3, [pc, #268]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c008:	f003 0302 	and.w	r3, r3, #2
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1ee      	bne.n	800bfee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c010:	7dfb      	ldrb	r3, [r7, #23]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d105      	bne.n	800c022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c016:	4b3f      	ldr	r3, [pc, #252]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	4a3e      	ldr	r2, [pc, #248]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c01c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d06f      	beq.n	800c10a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c02a:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	f003 030c 	and.w	r3, r3, #12
 800c032:	2b08      	cmp	r3, #8
 800c034:	d067      	beq.n	800c106 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d149      	bne.n	800c0d2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c03e:	4b35      	ldr	r3, [pc, #212]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a34      	ldr	r2, [pc, #208]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c04a:	f7fd fbed 	bl	8009828 <HAL_GetTick>
 800c04e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c050:	e008      	b.n	800c064 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c052:	f7fd fbe9 	bl	8009828 <HAL_GetTick>
 800c056:	4602      	mov	r2, r0
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d901      	bls.n	800c064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c060:	2303      	movs	r3, #3
 800c062:	e053      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c064:	4b2b      	ldr	r3, [pc, #172]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1f0      	bne.n	800c052 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	431a      	orrs	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07e:	019b      	lsls	r3, r3, #6
 800c080:	431a      	orrs	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c086:	085b      	lsrs	r3, r3, #1
 800c088:	3b01      	subs	r3, #1
 800c08a:	041b      	lsls	r3, r3, #16
 800c08c:	431a      	orrs	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c092:	061b      	lsls	r3, r3, #24
 800c094:	4313      	orrs	r3, r2
 800c096:	4a1f      	ldr	r2, [pc, #124]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c098:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c09c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c09e:	4b1d      	ldr	r3, [pc, #116]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a1c      	ldr	r2, [pc, #112]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c0a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0aa:	f7fd fbbd 	bl	8009828 <HAL_GetTick>
 800c0ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0b0:	e008      	b.n	800c0c4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0b2:	f7fd fbb9 	bl	8009828 <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d901      	bls.n	800c0c4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e023      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d0f0      	beq.n	800c0b2 <HAL_RCC_OscConfig+0x476>
 800c0d0:	e01b      	b.n	800c10a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0d2:	4b10      	ldr	r3, [pc, #64]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a0f      	ldr	r2, [pc, #60]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c0d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0de:	f7fd fba3 	bl	8009828 <HAL_GetTick>
 800c0e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0e4:	e008      	b.n	800c0f8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c0e6:	f7fd fb9f 	bl	8009828 <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d901      	bls.n	800c0f8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e009      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c0f8:	4b06      	ldr	r3, [pc, #24]	; (800c114 <HAL_RCC_OscConfig+0x4d8>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1f0      	bne.n	800c0e6 <HAL_RCC_OscConfig+0x4aa>
 800c104:	e001      	b.n	800c10a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e000      	b.n	800c10c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	40023800 	.word	0x40023800
 800c118:	40007000 	.word	0x40007000

0800c11c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e0ce      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c134:	4b69      	ldr	r3, [pc, #420]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 030f 	and.w	r3, r3, #15
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d910      	bls.n	800c164 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c142:	4b66      	ldr	r3, [pc, #408]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f023 020f 	bic.w	r2, r3, #15
 800c14a:	4964      	ldr	r1, [pc, #400]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	4313      	orrs	r3, r2
 800c150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c152:	4b62      	ldr	r3, [pc, #392]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 030f 	and.w	r3, r3, #15
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d001      	beq.n	800c164 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	e0b6      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f003 0302 	and.w	r3, r3, #2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d020      	beq.n	800c1b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f003 0304 	and.w	r3, r3, #4
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c17c:	4b58      	ldr	r3, [pc, #352]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	4a57      	ldr	r2, [pc, #348]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0308 	and.w	r3, r3, #8
 800c190:	2b00      	cmp	r3, #0
 800c192:	d005      	beq.n	800c1a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c194:	4b52      	ldr	r3, [pc, #328]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	4a51      	ldr	r2, [pc, #324]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c19a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c19e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1a0:	4b4f      	ldr	r3, [pc, #316]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	494c      	ldr	r1, [pc, #304]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d040      	beq.n	800c240 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d107      	bne.n	800c1d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1c6:	4b46      	ldr	r3, [pc, #280]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d115      	bne.n	800c1fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e07d      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d107      	bne.n	800c1ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1de:	4b40      	ldr	r3, [pc, #256]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e071      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1ee:	4b3c      	ldr	r3, [pc, #240]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0302 	and.w	r3, r3, #2
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e069      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1fe:	4b38      	ldr	r3, [pc, #224]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	f023 0203 	bic.w	r2, r3, #3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4935      	ldr	r1, [pc, #212]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c210:	f7fd fb0a 	bl	8009828 <HAL_GetTick>
 800c214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c216:	e00a      	b.n	800c22e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c218:	f7fd fb06 	bl	8009828 <HAL_GetTick>
 800c21c:	4602      	mov	r2, r0
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	f241 3288 	movw	r2, #5000	; 0x1388
 800c226:	4293      	cmp	r3, r2
 800c228:	d901      	bls.n	800c22e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e051      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c22e:	4b2c      	ldr	r3, [pc, #176]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 020c 	and.w	r2, r3, #12
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d1eb      	bne.n	800c218 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c240:	4b26      	ldr	r3, [pc, #152]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d210      	bcs.n	800c270 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c24e:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f023 020f 	bic.w	r2, r3, #15
 800c256:	4921      	ldr	r1, [pc, #132]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c25e:	4b1f      	ldr	r3, [pc, #124]	; (800c2dc <HAL_RCC_ClockConfig+0x1c0>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 030f 	and.w	r3, r3, #15
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d001      	beq.n	800c270 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e030      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0304 	and.w	r3, r3, #4
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d008      	beq.n	800c28e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c27c:	4b18      	ldr	r3, [pc, #96]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	4915      	ldr	r1, [pc, #84]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0308 	and.w	r3, r3, #8
 800c296:	2b00      	cmp	r3, #0
 800c298:	d009      	beq.n	800c2ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c29a:	4b11      	ldr	r3, [pc, #68]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	00db      	lsls	r3, r3, #3
 800c2a8:	490d      	ldr	r1, [pc, #52]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c2ae:	f000 f81d 	bl	800c2ec <HAL_RCC_GetSysClockFreq>
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	4b0a      	ldr	r3, [pc, #40]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c4>)
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	091b      	lsrs	r3, r3, #4
 800c2ba:	f003 030f 	and.w	r3, r3, #15
 800c2be:	4a09      	ldr	r2, [pc, #36]	; (800c2e4 <HAL_RCC_ClockConfig+0x1c8>)
 800c2c0:	5cd3      	ldrb	r3, [r2, r3]
 800c2c2:	fa21 f303 	lsr.w	r3, r1, r3
 800c2c6:	4a08      	ldr	r2, [pc, #32]	; (800c2e8 <HAL_RCC_ClockConfig+0x1cc>)
 800c2c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f7fd fa68 	bl	80097a0 <HAL_InitTick>

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	40023c00 	.word	0x40023c00
 800c2e0:	40023800 	.word	0x40023800
 800c2e4:	0801916c 	.word	0x0801916c
 800c2e8:	20000018 	.word	0x20000018

0800c2ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	607b      	str	r3, [r7, #4]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c302:	4b50      	ldr	r3, [pc, #320]	; (800c444 <HAL_RCC_GetSysClockFreq+0x158>)
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	f003 030c 	and.w	r3, r3, #12
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d007      	beq.n	800c31e <HAL_RCC_GetSysClockFreq+0x32>
 800c30e:	2b08      	cmp	r3, #8
 800c310:	d008      	beq.n	800c324 <HAL_RCC_GetSysClockFreq+0x38>
 800c312:	2b00      	cmp	r3, #0
 800c314:	f040 808d 	bne.w	800c432 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c318:	4b4b      	ldr	r3, [pc, #300]	; (800c448 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c31a:	60bb      	str	r3, [r7, #8]
       break;
 800c31c:	e08c      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c31e:	4b4b      	ldr	r3, [pc, #300]	; (800c44c <HAL_RCC_GetSysClockFreq+0x160>)
 800c320:	60bb      	str	r3, [r7, #8]
      break;
 800c322:	e089      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c324:	4b47      	ldr	r3, [pc, #284]	; (800c444 <HAL_RCC_GetSysClockFreq+0x158>)
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c32c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c32e:	4b45      	ldr	r3, [pc, #276]	; (800c444 <HAL_RCC_GetSysClockFreq+0x158>)
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d023      	beq.n	800c382 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c33a:	4b42      	ldr	r3, [pc, #264]	; (800c444 <HAL_RCC_GetSysClockFreq+0x158>)
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	099b      	lsrs	r3, r3, #6
 800c340:	f04f 0400 	mov.w	r4, #0
 800c344:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c348:	f04f 0200 	mov.w	r2, #0
 800c34c:	ea03 0501 	and.w	r5, r3, r1
 800c350:	ea04 0602 	and.w	r6, r4, r2
 800c354:	4a3d      	ldr	r2, [pc, #244]	; (800c44c <HAL_RCC_GetSysClockFreq+0x160>)
 800c356:	fb02 f106 	mul.w	r1, r2, r6
 800c35a:	2200      	movs	r2, #0
 800c35c:	fb02 f205 	mul.w	r2, r2, r5
 800c360:	440a      	add	r2, r1
 800c362:	493a      	ldr	r1, [pc, #232]	; (800c44c <HAL_RCC_GetSysClockFreq+0x160>)
 800c364:	fba5 0101 	umull	r0, r1, r5, r1
 800c368:	1853      	adds	r3, r2, r1
 800c36a:	4619      	mov	r1, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f04f 0400 	mov.w	r4, #0
 800c372:	461a      	mov	r2, r3
 800c374:	4623      	mov	r3, r4
 800c376:	f7fb f9b1 	bl	80076dc <__aeabi_uldivmod>
 800c37a:	4603      	mov	r3, r0
 800c37c:	460c      	mov	r4, r1
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e049      	b.n	800c416 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c382:	4b30      	ldr	r3, [pc, #192]	; (800c444 <HAL_RCC_GetSysClockFreq+0x158>)
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	099b      	lsrs	r3, r3, #6
 800c388:	f04f 0400 	mov.w	r4, #0
 800c38c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c390:	f04f 0200 	mov.w	r2, #0
 800c394:	ea03 0501 	and.w	r5, r3, r1
 800c398:	ea04 0602 	and.w	r6, r4, r2
 800c39c:	4629      	mov	r1, r5
 800c39e:	4632      	mov	r2, r6
 800c3a0:	f04f 0300 	mov.w	r3, #0
 800c3a4:	f04f 0400 	mov.w	r4, #0
 800c3a8:	0154      	lsls	r4, r2, #5
 800c3aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c3ae:	014b      	lsls	r3, r1, #5
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	1b49      	subs	r1, r1, r5
 800c3b6:	eb62 0206 	sbc.w	r2, r2, r6
 800c3ba:	f04f 0300 	mov.w	r3, #0
 800c3be:	f04f 0400 	mov.w	r4, #0
 800c3c2:	0194      	lsls	r4, r2, #6
 800c3c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c3c8:	018b      	lsls	r3, r1, #6
 800c3ca:	1a5b      	subs	r3, r3, r1
 800c3cc:	eb64 0402 	sbc.w	r4, r4, r2
 800c3d0:	f04f 0100 	mov.w	r1, #0
 800c3d4:	f04f 0200 	mov.w	r2, #0
 800c3d8:	00e2      	lsls	r2, r4, #3
 800c3da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3de:	00d9      	lsls	r1, r3, #3
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	195b      	adds	r3, r3, r5
 800c3e6:	eb44 0406 	adc.w	r4, r4, r6
 800c3ea:	f04f 0100 	mov.w	r1, #0
 800c3ee:	f04f 0200 	mov.w	r2, #0
 800c3f2:	02a2      	lsls	r2, r4, #10
 800c3f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c3f8:	0299      	lsls	r1, r3, #10
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	4618      	mov	r0, r3
 800c400:	4621      	mov	r1, r4
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f04f 0400 	mov.w	r4, #0
 800c408:	461a      	mov	r2, r3
 800c40a:	4623      	mov	r3, r4
 800c40c:	f7fb f966 	bl	80076dc <__aeabi_uldivmod>
 800c410:	4603      	mov	r3, r0
 800c412:	460c      	mov	r4, r1
 800c414:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800c416:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <HAL_RCC_GetSysClockFreq+0x158>)
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	f003 0303 	and.w	r3, r3, #3
 800c420:	3301      	adds	r3, #1
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c42e:	60bb      	str	r3, [r7, #8]
      break;
 800c430:	e002      	b.n	800c438 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c432:	4b05      	ldr	r3, [pc, #20]	; (800c448 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c434:	60bb      	str	r3, [r7, #8]
      break;
 800c436:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c438:	68bb      	ldr	r3, [r7, #8]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c442:	bf00      	nop
 800c444:	40023800 	.word	0x40023800
 800c448:	00f42400 	.word	0x00f42400
 800c44c:	017d7840 	.word	0x017d7840

0800c450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	d012      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c478:	4b69      	ldr	r3, [pc, #420]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	4a68      	ldr	r2, [pc, #416]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c47e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c482:	6093      	str	r3, [r2, #8]
 800c484:	4b66      	ldr	r3, [pc, #408]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c486:	689a      	ldr	r2, [r3, #8]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48c:	4964      	ldr	r1, [pc, #400]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c48e:	4313      	orrs	r3, r2
 800c490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c49a:	2301      	movs	r3, #1
 800c49c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d017      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c4aa:	4b5d      	ldr	r3, [pc, #372]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b8:	4959      	ldr	r1, [pc, #356]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4c8:	d101      	bne.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d017      	beq.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c4e6:	4b4e      	ldr	r3, [pc, #312]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f4:	494a      	ldr	r1, [pc, #296]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c504:	d101      	bne.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c506:	2301      	movs	r3, #1
 800c508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c512:	2301      	movs	r3, #1
 800c514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c522:	2301      	movs	r3, #1
 800c524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0320 	and.w	r3, r3, #32
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 808b 	beq.w	800c64a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c534:	4b3a      	ldr	r3, [pc, #232]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c538:	4a39      	ldr	r2, [pc, #228]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c53a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c53e:	6413      	str	r3, [r2, #64]	; 0x40
 800c540:	4b37      	ldr	r3, [pc, #220]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c548:	60bb      	str	r3, [r7, #8]
 800c54a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c54c:	4b35      	ldr	r3, [pc, #212]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a34      	ldr	r2, [pc, #208]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c558:	f7fd f966 	bl	8009828 <HAL_GetTick>
 800c55c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c55e:	e008      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c560:	f7fd f962 	bl	8009828 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	2b64      	cmp	r3, #100	; 0x64
 800c56c:	d901      	bls.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e355      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c572:	4b2c      	ldr	r3, [pc, #176]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d0f0      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c57e:	4b28      	ldr	r3, [pc, #160]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d035      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d02e      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c59c:	4b20      	ldr	r3, [pc, #128]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c5a6:	4b1e      	ldr	r3, [pc, #120]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5aa:	4a1d      	ldr	r2, [pc, #116]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c5b2:	4b1b      	ldr	r3, [pc, #108]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b6:	4a1a      	ldr	r2, [pc, #104]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c5be:	4a18      	ldr	r2, [pc, #96]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c5c4:	4b16      	ldr	r3, [pc, #88]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c8:	f003 0301 	and.w	r3, r3, #1
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d014      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5d0:	f7fd f92a 	bl	8009828 <HAL_GetTick>
 800c5d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5d6:	e00a      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5d8:	f7fd f926 	bl	8009828 <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d901      	bls.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e317      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	f003 0302 	and.w	r3, r3, #2
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0ee      	beq.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c606:	d111      	bne.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c614:	4b04      	ldr	r3, [pc, #16]	; (800c628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c616:	400b      	ands	r3, r1
 800c618:	4901      	ldr	r1, [pc, #4]	; (800c620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	608b      	str	r3, [r1, #8]
 800c61e:	e00b      	b.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c620:	40023800 	.word	0x40023800
 800c624:	40007000 	.word	0x40007000
 800c628:	0ffffcff 	.word	0x0ffffcff
 800c62c:	4bb0      	ldr	r3, [pc, #704]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	4aaf      	ldr	r2, [pc, #700]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c632:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c636:	6093      	str	r3, [r2, #8]
 800c638:	4bad      	ldr	r3, [pc, #692]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c63a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c644:	49aa      	ldr	r1, [pc, #680]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c646:	4313      	orrs	r3, r2
 800c648:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0310 	and.w	r3, r3, #16
 800c652:	2b00      	cmp	r3, #0
 800c654:	d010      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c656:	4ba6      	ldr	r3, [pc, #664]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c65c:	4aa4      	ldr	r2, [pc, #656]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c65e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c662:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c666:	4ba2      	ldr	r3, [pc, #648]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c670:	499f      	ldr	r1, [pc, #636]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c672:	4313      	orrs	r3, r2
 800c674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c684:	4b9a      	ldr	r3, [pc, #616]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c68a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c692:	4997      	ldr	r1, [pc, #604]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c694:	4313      	orrs	r3, r2
 800c696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c6a6:	4b92      	ldr	r3, [pc, #584]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6b4:	498e      	ldr	r1, [pc, #568]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00a      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6c8:	4b89      	ldr	r3, [pc, #548]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6d6:	4986      	ldr	r1, [pc, #536]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c6ea:	4b81      	ldr	r3, [pc, #516]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f8:	497d      	ldr	r1, [pc, #500]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00a      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c70c:	4b78      	ldr	r3, [pc, #480]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c712:	f023 0203 	bic.w	r2, r3, #3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71a:	4975      	ldr	r1, [pc, #468]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c71c:	4313      	orrs	r3, r2
 800c71e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00a      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c72e:	4b70      	ldr	r3, [pc, #448]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c734:	f023 020c 	bic.w	r2, r3, #12
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c73c:	496c      	ldr	r1, [pc, #432]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00a      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c750:	4b67      	ldr	r3, [pc, #412]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75e:	4964      	ldr	r1, [pc, #400]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c760:	4313      	orrs	r3, r2
 800c762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00a      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c772:	4b5f      	ldr	r3, [pc, #380]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c778:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c780:	495b      	ldr	r1, [pc, #364]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00a      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c794:	4b56      	ldr	r3, [pc, #344]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c79a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a2:	4953      	ldr	r1, [pc, #332]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c7b6:	4b4e      	ldr	r3, [pc, #312]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c4:	494a      	ldr	r1, [pc, #296]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00a      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c7d8:	4b45      	ldr	r3, [pc, #276]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e6:	4942      	ldr	r1, [pc, #264]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00a      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c7fa:	4b3d      	ldr	r3, [pc, #244]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c808:	4939      	ldr	r1, [pc, #228]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c80a:	4313      	orrs	r3, r2
 800c80c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00a      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c81c:	4b34      	ldr	r3, [pc, #208]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c82a:	4931      	ldr	r1, [pc, #196]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d011      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c83e:	4b2c      	ldr	r3, [pc, #176]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c844:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84c:	4928      	ldr	r1, [pc, #160]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c85c:	d101      	bne.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c85e:	2301      	movs	r3, #1
 800c860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f003 0308 	and.w	r3, r3, #8
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c86e:	2301      	movs	r3, #1
 800c870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c87e:	4b1c      	ldr	r3, [pc, #112]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c884:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c88c:	4918      	ldr	r1, [pc, #96]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c88e:	4313      	orrs	r3, r2
 800c890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c8a0:	4b13      	ldr	r3, [pc, #76]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c8a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8b0:	490f      	ldr	r1, [pc, #60]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d005      	beq.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8c6:	f040 80d8 	bne.w	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a08      	ldr	r2, [pc, #32]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800c8d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8d6:	f7fc ffa7 	bl	8009828 <HAL_GetTick>
 800c8da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8dc:	e00a      	b.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c8de:	f7fc ffa3 	bl	8009828 <HAL_GetTick>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b64      	cmp	r3, #100	; 0x64
 800c8ea:	d903      	bls.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	e196      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800c8f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8f4:	4b6c      	ldr	r3, [pc, #432]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1ee      	bne.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d021      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c910:	2b00      	cmp	r3, #0
 800c912:	d11d      	bne.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c914:	4b64      	ldr	r3, [pc, #400]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c91a:	0c1b      	lsrs	r3, r3, #16
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c922:	4b61      	ldr	r3, [pc, #388]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c928:	0e1b      	lsrs	r3, r3, #24
 800c92a:	f003 030f 	and.w	r3, r3, #15
 800c92e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	019a      	lsls	r2, r3, #6
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	041b      	lsls	r3, r3, #16
 800c93a:	431a      	orrs	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	061b      	lsls	r3, r3, #24
 800c940:	431a      	orrs	r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	071b      	lsls	r3, r3, #28
 800c948:	4957      	ldr	r1, [pc, #348]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c94a:	4313      	orrs	r3, r2
 800c94c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c964:	d00a      	beq.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d02e      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c97a:	d129      	bne.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c97c:	4b4a      	ldr	r3, [pc, #296]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c982:	0c1b      	lsrs	r3, r3, #16
 800c984:	f003 0303 	and.w	r3, r3, #3
 800c988:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c98a:	4b47      	ldr	r3, [pc, #284]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c990:	0f1b      	lsrs	r3, r3, #28
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	019a      	lsls	r2, r3, #6
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	041b      	lsls	r3, r3, #16
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	431a      	orrs	r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	071b      	lsls	r3, r3, #28
 800c9b0:	493d      	ldr	r1, [pc, #244]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c9b8:	4b3b      	ldr	r3, [pc, #236]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c9ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9be:	f023 021f 	bic.w	r2, r3, #31
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	4937      	ldr	r1, [pc, #220]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d01d      	beq.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c9dc:	4b32      	ldr	r3, [pc, #200]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9e2:	0e1b      	lsrs	r3, r3, #24
 800c9e4:	f003 030f 	and.w	r3, r3, #15
 800c9e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c9ea:	4b2f      	ldr	r3, [pc, #188]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800c9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9f0:	0f1b      	lsrs	r3, r3, #28
 800c9f2:	f003 0307 	and.w	r3, r3, #7
 800c9f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	019a      	lsls	r2, r3, #6
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	041b      	lsls	r3, r3, #16
 800ca04:	431a      	orrs	r2, r3
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	061b      	lsls	r3, r3, #24
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	071b      	lsls	r3, r3, #28
 800ca10:	4925      	ldr	r1, [pc, #148]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca12:	4313      	orrs	r3, r2
 800ca14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d011      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	019a      	lsls	r2, r3, #6
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	041b      	lsls	r3, r3, #16
 800ca30:	431a      	orrs	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	061b      	lsls	r3, r3, #24
 800ca38:	431a      	orrs	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	071b      	lsls	r3, r3, #28
 800ca40:	4919      	ldr	r1, [pc, #100]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca42:	4313      	orrs	r3, r2
 800ca44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ca48:	4b17      	ldr	r3, [pc, #92]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a16      	ldr	r2, [pc, #88]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca54:	f7fc fee8 	bl	8009828 <HAL_GetTick>
 800ca58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca5a:	e008      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ca5c:	f7fc fee4 	bl	8009828 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b64      	cmp	r3, #100	; 0x64
 800ca68:	d901      	bls.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e0d7      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ca6e:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0f0      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	f040 80cd 	bne.w	800cc1c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ca82:	4b09      	ldr	r3, [pc, #36]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a08      	ldr	r2, [pc, #32]	; (800caa8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ca88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca8e:	f7fc fecb 	bl	8009828 <HAL_GetTick>
 800ca92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ca94:	e00a      	b.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ca96:	f7fc fec7 	bl	8009828 <HAL_GetTick>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	2b64      	cmp	r3, #100	; 0x64
 800caa2:	d903      	bls.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e0ba      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800caa8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800caac:	4b5e      	ldr	r3, [pc, #376]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab8:	d0ed      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d009      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d02e      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d12a      	bne.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cae2:	4b51      	ldr	r3, [pc, #324]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cae8:	0c1b      	lsrs	r3, r3, #16
 800caea:	f003 0303 	and.w	r3, r3, #3
 800caee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800caf0:	4b4d      	ldr	r3, [pc, #308]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800caf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caf6:	0f1b      	lsrs	r3, r3, #28
 800caf8:	f003 0307 	and.w	r3, r3, #7
 800cafc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	019a      	lsls	r2, r3, #6
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	041b      	lsls	r3, r3, #16
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	061b      	lsls	r3, r3, #24
 800cb10:	431a      	orrs	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	071b      	lsls	r3, r3, #28
 800cb16:	4944      	ldr	r1, [pc, #272]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800cb1e:	4b42      	ldr	r3, [pc, #264]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	493d      	ldr	r1, [pc, #244]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d022      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb4c:	d11d      	bne.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb4e:	4b36      	ldr	r3, [pc, #216]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb54:	0e1b      	lsrs	r3, r3, #24
 800cb56:	f003 030f 	and.w	r3, r3, #15
 800cb5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cb5c:	4b32      	ldr	r3, [pc, #200]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb62:	0f1b      	lsrs	r3, r3, #28
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	019a      	lsls	r2, r3, #6
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	041b      	lsls	r3, r3, #16
 800cb76:	431a      	orrs	r2, r3
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	061b      	lsls	r3, r3, #24
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	071b      	lsls	r3, r3, #28
 800cb82:	4929      	ldr	r1, [pc, #164]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb84:	4313      	orrs	r3, r2
 800cb86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d028      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb96:	4b24      	ldr	r3, [pc, #144]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb9c:	0e1b      	lsrs	r3, r3, #24
 800cb9e:	f003 030f 	and.w	r3, r3, #15
 800cba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800cba4:	4b20      	ldr	r3, [pc, #128]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbaa:	0c1b      	lsrs	r3, r3, #16
 800cbac:	f003 0303 	and.w	r3, r3, #3
 800cbb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	019a      	lsls	r2, r3, #6
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	041b      	lsls	r3, r3, #16
 800cbbc:	431a      	orrs	r2, r3
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	061b      	lsls	r3, r3, #24
 800cbc2:	431a      	orrs	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	69db      	ldr	r3, [r3, #28]
 800cbc8:	071b      	lsls	r3, r3, #28
 800cbca:	4917      	ldr	r1, [pc, #92]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cbd2:	4b15      	ldr	r3, [pc, #84]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cbd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe0:	4911      	ldr	r1, [pc, #68]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cbe8:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a0e      	ldr	r2, [pc, #56]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cbee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbf4:	f7fc fe18 	bl	8009828 <HAL_GetTick>
 800cbf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cbfa:	e008      	b.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800cbfc:	f7fc fe14 	bl	8009828 <HAL_GetTick>
 800cc00:	4602      	mov	r2, r0
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	2b64      	cmp	r3, #100	; 0x64
 800cc08:	d901      	bls.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	e007      	b.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cc0e:	4b06      	ldr	r3, [pc, #24]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc1a:	d1ef      	bne.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3720      	adds	r7, #32
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	40023800 	.word	0x40023800

0800cc2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e025      	b.n	800cc8c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d106      	bne.n	800cc5a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f81d 	bl	800cc94 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	f000 fd61 	bl	800d734 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	f000 fdcb 	bl	800d818 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2201      	movs	r2, #1
 800cc86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d101      	bne.n	800ccc4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	e018      	b.n	800ccf6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2202      	movs	r2, #2
 800ccc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	68b9      	ldr	r1, [r7, #8]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fe1f 	bl	800d918 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d104      	bne.n	800ccec <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2205      	movs	r2, #5
 800cce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ccea:	e003      	b.n	800ccf4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b082      	sub	sp, #8
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	d101      	bne.n	800cd18 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800cd14:	2302      	movs	r3, #2
 800cd16:	e00e      	b.n	800cd36 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 fe17 	bl	800d95a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e089      	b.n	800ce64 <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));

  if(hspi->State == HAL_SPI_STATE_RESET)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <HAL_SPI_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f005 ff18 	bl	8012b98 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd88:	d902      	bls.n	800cd90 <HAL_SPI_Init+0x52>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e002      	b.n	800cd96 <HAL_SPI_Init+0x58>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cd90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cd9e:	d007      	beq.n	800cdb0 <HAL_SPI_Init+0x72>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cda8:	d002      	beq.n	800cdb0 <HAL_SPI_Init+0x72>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10b      	bne.n	800cdd0 <HAL_SPI_Init+0x92>
  {
    /* CRC Length aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdc0:	d903      	bls.n	800cdca <HAL_SPI_Init+0x8c>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	631a      	str	r2, [r3, #48]	; 0x30
 800cdc8:	e002      	b.n	800cdd0 <HAL_SPI_Init+0x92>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	691b      	ldr	r3, [r3, #16]
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800cdde:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	431a      	orrs	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdee:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	69db      	ldr	r3, [r3, #28]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800cdf4:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	ea42 0103 	orr.w	r1, r2, r3
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800ce06:	430a      	orrs	r2, r1
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800ce08:	601a      	str	r2, [r3, #0]

  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d107      	bne.n	800ce22 <HAL_SPI_Init+0xe4>
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce20:	601a      	str	r2, [r3, #0]
  }

  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	0c1b      	lsrs	r3, r3, #16
 800ce28:	f003 0204 	and.w	r2, r3, #4
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce30:	431a      	orrs	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce36:	431a      	orrs	r2, r3
                         hspi->Init.DataSize ) | frxth;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68db      	ldr	r3, [r3, #12]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800ce3c:	ea42 0103 	orr.w	r1, r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
                         hspi->Init.DataSize ) | frxth;
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	430a      	orrs	r2, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800ce48:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ce52:	611a      	str	r2, [r3, #16]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d101      	bne.n	800ce8a <HAL_SPI_Transmit+0x1e>
 800ce86:	2302      	movs	r3, #2
 800ce88:	e118      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if(hspi->State != HAL_SPI_STATE_READY)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d009      	beq.n	800ceb0 <HAL_SPI_Transmit+0x44>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   /* Process Unlocked */
   __HAL_UNLOCK(hspi);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   return HAL_BUSY;
 800ceac:	2302      	movs	r3, #2
 800ceae:	e105      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
  }
  
  if((pData == NULL ) || (Size == 0))
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <HAL_SPI_Transmit+0x50>
 800ceb6:	88fb      	ldrh	r3, [r7, #6]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d109      	bne.n	800ced0 <HAL_SPI_Transmit+0x64>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   /* Process Unlocked */
   __HAL_UNLOCK(hspi);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	e0f5      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2203      	movs	r2, #3
 800ced4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = pData;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	88fa      	ldrh	r2, [r7, #6]
 800cee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	88fa      	ldrh	r2, [r7, #6]
 800ceee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf0e:	d107      	bne.n	800cf20 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf1e:	601a      	str	r2, [r3, #0]
  }

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf28:	d110      	bne.n	800cf4c <HAL_SPI_Transmit+0xe0>
  {
    SPI_RESET_CRC(hspi);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6819      	ldr	r1, [r3, #0]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800cf38:	400b      	ands	r3, r1
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf56:	2b40      	cmp	r3, #64	; 0x40
 800cf58:	d007      	beq.n	800cf6a <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cf72:	d96d      	bls.n	800d050 <HAL_SPI_Transmit+0x1e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0)
 800cf74:	e023      	b.n	800cfbe <HAL_SPI_Transmit+0x152>
    {
      /* Wait until TXE flag is set to send data */
      if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	2202      	movs	r2, #2
 800cf7a:	2102      	movs	r1, #2
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 fac0 	bl	800d502 <SPI_WaitFlagStateUntilTimeout>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d009      	beq.n	800cf9c <HAL_SPI_Transmit+0x130>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Process Unlocked */
       __HAL_UNLOCK(hspi);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e08f      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
      }
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa0:	881a      	ldrh	r2, [r3, #0]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfac:	1c9a      	adds	r2, r3, #2
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    while (hspi->TxXferCount > 0)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1d7      	bne.n	800cf76 <HAL_SPI_Transmit+0x10a>
 800cfc6:	e047      	b.n	800d058 <HAL_SPI_Transmit+0x1ec>
  /* Transmit data in 8 Bit mode */
  else
  {
    while (hspi->TxXferCount > 0)
    {
      if(hspi->TxXferCount != 0x1)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d024      	beq.n	800d01a <HAL_SPI_Transmit+0x1ae>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	2102      	movs	r1, #2
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f000 fa93 	bl	800d502 <SPI_WaitFlagStateUntilTimeout>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d009      	beq.n	800cff6 <HAL_SPI_Transmit+0x18a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 800cff2:	2303      	movs	r3, #3
 800cff4:	e062      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	881a      	ldrh	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d006:	1c9a      	adds	r2, r3, #2
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d010:	3b02      	subs	r3, #2
 800d012:	b29a      	uxth	r2, r3
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d018:	e01a      	b.n	800d050 <HAL_SPI_Transmit+0x1e4>
      }
      else
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)  
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2202      	movs	r2, #2
 800d01e:	2102      	movs	r1, #2
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f000 fa6e 	bl	800d502 <SPI_WaitFlagStateUntilTimeout>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <HAL_SPI_Transmit+0x1c4>
        {
          return HAL_TIMEOUT;
 800d02c:	2303      	movs	r3, #3
 800d02e:	e045      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
        }
        *((__IO uint8_t*)&hspi->Instance->DR) = (*hspi->pTxBuffPtr++);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d034:	1c59      	adds	r1, r3, #1
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	6391      	str	r1, [r2, #56]	; 0x38
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	320c      	adds	r2, #12
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;    
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d048:	3b01      	subs	r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	87da      	strh	r2, [r3, #62]	; 0x3e
    while (hspi->TxXferCount > 0)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1b7      	bne.n	800cfc8 <HAL_SPI_Transmit+0x15c>
      }
    }
  }

  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d060:	d107      	bne.n	800d072 <HAL_SPI_Transmit+0x206>
  {
     hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d070:	601a      	str	r2, [r3, #0]
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800d072:	6839      	ldr	r1, [r7, #0]
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f000 fb1e 	bl	800d6b6 <SPI_EndRxTxTransaction>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <HAL_SPI_Transmit+0x218>
  {
    return HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	e01b      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
  }
  
  /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d108      	bne.n	800d09e <HAL_SPI_Transmit+0x232>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	697b      	ldr	r3, [r7, #20]
  }
    
  hspi->State = HAL_SPI_STATE_READY; 
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <HAL_SPI_Transmit+0x24e>
  {   
    return HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e000      	b.n	800d0bc <HAL_SPI_Transmit+0x250>
  }
  else
  {
    return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
  }
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	807b      	strh	r3, [r7, #2]
  __IO uint16_t tmpreg = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	827b      	strh	r3, [r7, #18]
  uint32_t tickstart = HAL_GetTick();
 800d0d6:	f7fc fba7 	bl	8009828 <HAL_GetTick>
 800d0da:	6178      	str	r0, [r7, #20]
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d001      	beq.n	800d0ea <HAL_SPI_TransmitReceive+0x26>
  {
    return HAL_BUSY;
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	e207      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <HAL_SPI_TransmitReceive+0x38>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <HAL_SPI_TransmitReceive+0x38>
 800d0f6:	887b      	ldrh	r3, [r7, #2]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d101      	bne.n	800d100 <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e1fc      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
  }

  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d106:	2b01      	cmp	r3, #1
 800d108:	d101      	bne.n	800d10e <HAL_SPI_TransmitReceive+0x4a>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e1f5      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2205      	movs	r2, #5
 800d11a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2200      	movs	r2, #0
 800d122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = pRxData;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	887a      	ldrh	r2, [r7, #2]
 800d12e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	887a      	ldrh	r2, [r7, #2]
 800d136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	887a      	ldrh	r2, [r7, #2]
 800d144:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	887a      	ldrh	r2, [r7, #2]
 800d14a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d154:	d110      	bne.n	800d178 <HAL_SPI_TransmitReceive+0xb4>
  {
    SPI_RESET_CRC(hspi);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6819      	ldr	r1, [r3, #0]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d164:	400b      	ands	r3, r1
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d176:	601a      	str	r2, [r3, #0]
  }

  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d180:	d804      	bhi.n	800d18c <HAL_SPI_TransmitReceive+0xc8>
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d908      	bls.n	800d19e <HAL_SPI_TransmitReceive+0xda>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685a      	ldr	r2, [r3, #4]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d19a:	605a      	str	r2, [r3, #4]
 800d19c:	e007      	b.n	800d1ae <HAL_SPI_TransmitReceive+0xea>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d1ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b8:	2b40      	cmp	r3, #64	; 0x40
 800d1ba:	d007      	beq.n	800d1cc <HAL_SPI_TransmitReceive+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1d4:	f240 8113 	bls.w	800d3fe <HAL_SPI_TransmitReceive+0x33a>
  {
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800d1d8:	e065      	b.n	800d2a6 <HAL_SPI_TransmitReceive+0x1e2>
    {
      /* Check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d028      	beq.n	800d234 <HAL_SPI_TransmitReceive+0x170>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f003 0302 	and.w	r3, r3, #2
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d121      	bne.n	800d234 <HAL_SPI_TransmitReceive+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f4:	881a      	ldrh	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d200:	1c9a      	adds	r2, r3, #2
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	87da      	strh	r2, [r3, #62]	; 0x3e

        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10c      	bne.n	800d234 <HAL_SPI_TransmitReceive+0x170>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d222:	d107      	bne.n	800d234 <HAL_SPI_TransmitReceive+0x170>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d232:	601a      	str	r2, [r3, #0]
        } 
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d01a      	beq.n	800d274 <HAL_SPI_TransmitReceive+0x1b0>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d113      	bne.n	800d274 <HAL_SPI_TransmitReceive+0x1b0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d256:	b292      	uxth	r2, r2
 800d258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25e:	1c9a      	adds	r2, r3, #2
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d26a:	3b01      	subs	r3, #1
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d27a:	d014      	beq.n	800d2a6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d007      	beq.n	800d292 <HAL_SPI_TransmitReceive+0x1ce>
 800d282:	f7fc fad1 	bl	8009828 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	6a3a      	ldr	r2, [r7, #32]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d209      	bcs.n	800d2a6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e129      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d195      	bne.n	800d1da <HAL_SPI_TransmitReceive+0x116>
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d190      	bne.n	800d1da <HAL_SPI_TransmitReceive+0x116>
 800d2b8:	e0ac      	b.n	800d414 <HAL_SPI_TransmitReceive+0x350>
  else
  {
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d03d      	beq.n	800d33e <HAL_SPI_TransmitReceive+0x27a>
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f003 0302 	and.w	r3, r3, #2
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d136      	bne.n	800d33e <HAL_SPI_TransmitReceive+0x27a>
      {
        if(hspi->TxXferCount > 1)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d911      	bls.n	800d2fc <HAL_SPI_TransmitReceive+0x238>
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2dc:	881a      	ldrh	r2, [r3, #0]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e8:	1c9a      	adds	r2, r3, #2
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2f2:	3b02      	subs	r3, #2
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d2fa:	e00f      	b.n	800d31c <HAL_SPI_TransmitReceive+0x258>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	1c59      	adds	r1, r3, #1
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	6391      	str	r1, [r2, #56]	; 0x38
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	6812      	ldr	r2, [r2, #0]
 800d30a:	320c      	adds	r2, #12
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d314:	3b01      	subs	r3, #1
 800d316:	b29a      	uxth	r2, r3
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }

        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d320:	2b00      	cmp	r3, #0
 800d322:	d10c      	bne.n	800d33e <HAL_SPI_TransmitReceive+0x27a>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d32c:	d107      	bne.n	800d33e <HAL_SPI_TransmitReceive+0x27a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d33c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d344:	2b00      	cmp	r3, #0
 800d346:	d041      	beq.n	800d3cc <HAL_SPI_TransmitReceive+0x308>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b01      	cmp	r3, #1
 800d354:	d13a      	bne.n	800d3cc <HAL_SPI_TransmitReceive+0x308>
      {
        if(hspi->RxXferCount > 1)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d921      	bls.n	800d3a4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36a:	b292      	uxth	r2, r2
 800d36c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d372:	1c9a      	adds	r2, r3, #2
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d37e:	3b02      	subs	r3, #2
 800d380:	b29a      	uxth	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d81c      	bhi.n	800d3cc <HAL_SPI_TransmitReceive+0x308>
          {
            /* set fiforxthreshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d3a0:	605a      	str	r2, [r3, #4]
 800d3a2:	e013      	b.n	800d3cc <HAL_SPI_TransmitReceive+0x308>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f103 020c 	add.w	r2, r3, #12
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b0:	1c58      	adds	r0, r3, #1
 800d3b2:	68f9      	ldr	r1, [r7, #12]
 800d3b4:	6408      	str	r0, [r1, #64]	; 0x40
 800d3b6:	7812      	ldrb	r2, [r2, #0]
 800d3b8:	b2d2      	uxtb	r2, r2
 800d3ba:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	b29a      	uxth	r2, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3d2:	d014      	beq.n	800d3fe <HAL_SPI_TransmitReceive+0x33a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d007      	beq.n	800d3ea <HAL_SPI_TransmitReceive+0x326>
 800d3da:	f7fc fa25 	bl	8009828 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	6a3a      	ldr	r2, [r7, #32]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d209      	bcs.n	800d3fe <HAL_SPI_TransmitReceive+0x33a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e07d      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d402:	2b00      	cmp	r3, #0
 800d404:	f47f af59 	bne.w	800d2ba <HAL_SPI_TransmitReceive+0x1f6>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f47f af53 	bne.w	800d2ba <HAL_SPI_TransmitReceive+0x1f6>
      }
    }
  }

  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d41c:	d13d      	bne.n	800d49a <HAL_SPI_TransmitReceive+0x3d6>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	2201      	movs	r2, #1
 800d422:	2101      	movs	r1, #1
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f000 f86c 	bl	800d502 <SPI_WaitFlagStateUntilTimeout>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d005      	beq.n	800d43c <HAL_SPI_TransmitReceive+0x378>
    {
      /* Error on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d434:	f043 0202 	orr.w	r2, r3, #2
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d444:	d106      	bne.n	800d454 <HAL_SPI_TransmitReceive+0x390>
    {
      tmpreg = hspi->Instance->DR;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	827b      	strh	r3, [r7, #18]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800d450:	8a7b      	ldrh	r3, [r7, #18]
 800d452:	e022      	b.n	800d49a <HAL_SPI_TransmitReceive+0x3d6>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	330c      	adds	r3, #12
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	827b      	strh	r3, [r7, #18]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800d462:	8a7b      	ldrh	r3, [r7, #18]

      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d116      	bne.n	800d49a <HAL_SPI_TransmitReceive+0x3d6>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800d46c:	6a3b      	ldr	r3, [r7, #32]
 800d46e:	2201      	movs	r2, #1
 800d470:	2101      	movs	r1, #1
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f000 f845 	bl	800d502 <SPI_WaitFlagStateUntilTimeout>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <HAL_SPI_TransmitReceive+0x3c6>
        {
          /* Error on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d482:	f043 0202 	orr.w	r2, r3, #2
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	661a      	str	r2, [r3, #96]	; 0x60
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	330c      	adds	r3, #12
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	b2db      	uxtb	r3, r3
 800d494:	b29b      	uxth	r3, r3
 800d496:	827b      	strh	r3, [r7, #18]
        UNUSED(tmpreg); /* To avoid GCC warning */
 800d498:	8a7b      	ldrh	r3, [r7, #18]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800d49a:	6a39      	ldr	r1, [r7, #32]
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f000 f90a 	bl	800d6b6 <SPI_EndRxTxTransaction>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <HAL_SPI_TransmitReceive+0x3e8>
  {
    return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e026      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	f003 0310 	and.w	r3, r3, #16
 800d4be:	2b10      	cmp	r3, #16
 800d4c0:	d110      	bne.n	800d4e4 <HAL_SPI_TransmitReceive+0x420>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4c6:	f043 0202 	orr.w	r2, r3, #2
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d4d6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    
    return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e00a      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <HAL_SPI_TransmitReceive+0x434>
  {   
    return HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e000      	b.n	800d4fa <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
  }
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b086      	sub	sp, #24
 800d506:	af00      	add	r7, sp, #0
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	60b9      	str	r1, [r7, #8]
 800d50c:	607a      	str	r2, [r7, #4]
 800d50e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 800d510:	f7fc f98a 	bl	8009828 <HAL_GetTick>
 800d514:	6178      	str	r0, [r7, #20]

  while((hspi->Instance->SR & Flag) != State)
 800d516:	e04d      	b.n	800d5b4 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d51e:	d049      	beq.n	800d5b4 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d007      	beq.n	800d536 <SPI_WaitFlagStateUntilTimeout+0x34>
 800d526:	f7fc f97f 	bl	8009828 <HAL_GetTick>
 800d52a:	4602      	mov	r2, r0
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	429a      	cmp	r2, r3
 800d534:	d83e      	bhi.n	800d5b4 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d544:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d54e:	d111      	bne.n	800d574 <SPI_WaitFlagStateUntilTimeout+0x72>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d558:	d004      	beq.n	800d564 <SPI_WaitFlagStateUntilTimeout+0x62>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d562:	d107      	bne.n	800d574 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d57c:	d110      	bne.n	800d5a0 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d58c:	400b      	ands	r3, r1
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d59e:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        
        return HAL_TIMEOUT;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e008      	b.n	800d5c6 <SPI_WaitFlagStateUntilTimeout+0xc4>
  while((hspi->Instance->SR & Flag) != State)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	4013      	ands	r3, r2
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d1a9      	bne.n	800d518 <SPI_WaitFlagStateUntilTimeout+0x16>
      }
    }
  }
  
  return HAL_OK;      
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <SPI_WaitFifoStateUntilTimeout>:
  * @param State : Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State, uint32_t Timeout)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b086      	sub	sp, #24
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	60b9      	str	r1, [r7, #8]
 800d5d8:	607a      	str	r2, [r7, #4]
 800d5da:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 800d5dc:	f7fc f924 	bl	8009828 <HAL_GetTick>
 800d5e0:	6178      	str	r0, [r7, #20]

  while((hspi->Instance->SR & Fifo) != State)
 800d5e2:	e05b      	b.n	800d69c <SPI_WaitFifoStateUntilTimeout+0xce>
  {
    if((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d5ea:	d109      	bne.n	800d600 <SPI_WaitFifoStateUntilTimeout+0x32>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <SPI_WaitFifoStateUntilTimeout+0x32>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	330c      	adds	r3, #12
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	74fb      	strb	r3, [r7, #19]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800d5fe:	7cfb      	ldrb	r3, [r7, #19]
    }

    if(Timeout != HAL_MAX_DELAY)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d606:	d049      	beq.n	800d69c <SPI_WaitFifoStateUntilTimeout+0xce>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <SPI_WaitFifoStateUntilTimeout+0x50>
 800d60e:	f7fc f90b 	bl	8009828 <HAL_GetTick>
 800d612:	4602      	mov	r2, r0
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d83e      	bhi.n	800d69c <SPI_WaitFifoStateUntilTimeout+0xce>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
                  on both master and slave sides in order to resynchronize the master
                 and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	685a      	ldr	r2, [r3, #4]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d62c:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d636:	d111      	bne.n	800d65c <SPI_WaitFifoStateUntilTimeout+0x8e>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d640:	d004      	beq.n	800d64c <SPI_WaitFifoStateUntilTimeout+0x7e>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d64a:	d107      	bne.n	800d65c <SPI_WaitFifoStateUntilTimeout+0x8e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d65a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d664:	d110      	bne.n	800d688 <SPI_WaitFifoStateUntilTimeout+0xba>
        {
          SPI_RESET_CRC(hspi);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	6819      	ldr	r1, [r3, #0]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d674:	400b      	ands	r3, r1
 800d676:	6013      	str	r3, [r2, #0]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d686:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e008      	b.n	800d6ae <SPI_WaitFifoStateUntilTimeout+0xe0>
  while((hspi->Instance->SR & Fifo) != State)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	689a      	ldr	r2, [r3, #8]
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d19b      	bne.n	800d5e4 <SPI_WaitFifoStateUntilTimeout+0x16>
      }
    }
  }

  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	6039      	str	r1, [r7, #0]
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7ff ff80 	bl	800d5ce <SPI_WaitFifoStateUntilTimeout>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d007      	beq.n	800d6e4 <SPI_EndRxTxTransaction+0x2e>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6d8:	f043 0220 	orr.w	r2, r3, #32
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e023      	b.n	800d72c <SPI_EndRxTxTransaction+0x76>
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2180      	movs	r1, #128	; 0x80
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7ff ff09 	bl	800d502 <SPI_WaitFlagStateUntilTimeout>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d007      	beq.n	800d706 <SPI_EndRxTxTransaction+0x50>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6fa:	f043 0220 	orr.w	r2, r3, #32
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d702:	2303      	movs	r3, #3
 800d704:	e012      	b.n	800d72c <SPI_EndRxTxTransaction+0x76>
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2200      	movs	r2, #0
 800d70a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff ff5d 	bl	800d5ce <SPI_WaitFifoStateUntilTimeout>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d007      	beq.n	800d72a <SPI_EndRxTxTransaction+0x74>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d71e:	f043 0220 	orr.w	r2, r3, #32
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d726:	2303      	movs	r3, #3
 800d728:	e000      	b.n	800d72c <SPI_EndRxTxTransaction+0x76>
  }
  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d027      	beq.n	800d79e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	4b2f      	ldr	r3, [pc, #188]	; (800d814 <FMC_SDRAM_Init+0xe0>)
 800d758:	4013      	ands	r3, r2
 800d75a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d764:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800d76a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800d770:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800d776:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800d77c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800d782:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800d788:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d78e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d790:	68fa      	ldr	r2, [r7, #12]
 800d792:	4313      	orrs	r3, r2
 800d794:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	601a      	str	r2, [r3, #0]
 800d79c:	e032      	b.n	800d804 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d7aa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d7b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d7ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	4b12      	ldr	r3, [pc, #72]	; (800d814 <FMC_SDRAM_Init+0xe0>)
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d7d8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800d7de:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800d7e4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800d7ea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800d7f0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	ffff8000 	.word	0xffff8000

0800d818 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d818:	b480      	push	{r7}
 800d81a:	b087      	sub	sp, #28
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d02e      	beq.n	800d890 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d83e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d84e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	3b01      	subs	r3, #1
 800d856:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d858:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	3b01      	subs	r3, #1
 800d860:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d862:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	3b01      	subs	r3, #1
 800d86a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d86c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	695b      	ldr	r3, [r3, #20]
 800d872:	3b01      	subs	r3, #1
 800d874:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d876:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d880:	4313      	orrs	r3, r2
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	4313      	orrs	r3, r2
 800d886:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	609a      	str	r2, [r3, #8]
 800d88e:	e039      	b.n	800d904 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	4b1e      	ldr	r3, [pc, #120]	; (800d914 <FMC_SDRAM_Timing_Init+0xfc>)
 800d89a:	4013      	ands	r3, r2
 800d89c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d8c2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d8d2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d8dc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d8e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	371c      	adds	r7, #28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	ff0f0fff 	.word	0xff0f0fff

0800d918 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d918:	b480      	push	{r7}
 800d91a:	b087      	sub	sp, #28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800d924:	2300      	movs	r3, #0
 800d926:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800d930:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	3b01      	subs	r3, #1
 800d938:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800d93a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800d942:	4313      	orrs	r3, r2
 800d944:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	371c      	adds	r7, #28
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d95a:	b480      	push	{r7}
 800d95c:	b083      	sub	sp, #12
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	695a      	ldr	r2, [r3, #20]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	005b      	lsls	r3, r3, #1
 800d96c:	431a      	orrs	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <_ZN11JPEGDecoderC1Ev>:
#include "picojpeg.h"
#include <string.h>

JPEGDecoder JpegDec;

JPEGDecoder::JPEGDecoder() {
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  mcu_x = 0;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	635a      	str	r2, [r3, #52]	; 0x34
  mcu_y = 0;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	639a      	str	r2, [r3, #56]	; 0x38
  is_available = 0;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	631a      	str	r2, [r3, #48]	; 0x30
  thisPtr = this;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <_ZN11JPEGDecoderD1Ev>:

JPEGDecoder::~JPEGDecoder() {
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  if (pImage)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d008      	beq.n	800d9d8 <_ZN11JPEGDecoderD1Ev+0x22>
    delete[] pImage;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d004      	beq.n	800d9d8 <_ZN11JPEGDecoderD1Ev+0x22>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f005 fb4c 	bl	8013070 <_ZdaPv>
  pImage = NULL;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv>:

uint8_t JPEGDecoder::pjpeg_callback(uint8_t *pBuf, uint8_t buf_size,
                                    uint8_t *pBytes_actually_read,
                                    void *pCallback_data) {
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af02      	add	r7, sp, #8
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	607a      	str	r2, [r7, #4]
 800d9f2:	603b      	str	r3, [r7, #0]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	72fb      	strb	r3, [r7, #11]
  JPEGDecoder *thisPtr = JpegDec.thisPtr;
 800d9f8:	4b07      	ldr	r3, [pc, #28]	; (800da18 <_ZN11JPEGDecoder14pjpeg_callbackEPhhS0_Pv+0x30>)
 800d9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9fc:	617b      	str	r3, [r7, #20]
  thisPtr->pjpeg_need_bytes_callback(pBuf, buf_size, pBytes_actually_read,
 800d9fe:	7afa      	ldrb	r2, [r7, #11]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	68f9      	ldr	r1, [r7, #12]
 800da08:	6978      	ldr	r0, [r7, #20]
 800da0a:	f000 f807 	bl	800da1c <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv>
                                     pCallback_data);
  return 0;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20000c44 	.word	0x20000c44

0800da1c <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv>:

uint8_t JPEGDecoder::pjpeg_need_bytes_callback(uint8_t *pBuf, uint8_t buf_size,
                                               uint8_t *pBytes_actually_read,
                                               void *pCallback_data) {
 800da1c:	b480      	push	{r7}
 800da1e:	b087      	sub	sp, #28
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	603b      	str	r3, [r7, #0]
 800da28:	4613      	mov	r3, r2
 800da2a:	71fb      	strb	r3, [r7, #7]
  uint n;

  n = jpg_min(g_nInFileSize - g_nInFileOfs, buf_size);
 800da2c:	79fa      	ldrb	r2, [r7, #7]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da36:	1acb      	subs	r3, r1, r3
 800da38:	4293      	cmp	r3, r2
 800da3a:	bf28      	it	cs
 800da3c:	4613      	movcs	r3, r2
 800da3e:	613b      	str	r3, [r7, #16]

  if (jpg_source == JPEG_ARRAY) {
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da46:	2b00      	cmp	r3, #0
 800da48:	d113      	bne.n	800da72 <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv+0x56>
    for (int i = 0; i < n; i++) {
 800da4a:	2300      	movs	r3, #0
 800da4c:	617b      	str	r3, [r7, #20]
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	429a      	cmp	r2, r3
 800da54:	d90d      	bls.n	800da72 <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv+0x56>
      pBuf[i] = *jpg_data++;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da5a:	1c59      	adds	r1, r3, #1
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	65d1      	str	r1, [r2, #92]	; 0x5c
 800da60:	697a      	ldr	r2, [r7, #20]
 800da62:	68b9      	ldr	r1, [r7, #8]
 800da64:	440a      	add	r2, r1
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < n; i++) {
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	3301      	adds	r3, #1
 800da6e:	617b      	str	r3, [r7, #20]
 800da70:	e7ed      	b.n	800da4e <_ZN11JPEGDecoder25pjpeg_need_bytes_callbackEPhhS0_Pv+0x32>
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    g_pInFileSd.read(pBuf, n);
#endif

  *pBytes_actually_read = (uint8_t)(n);
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	b2da      	uxtb	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	701a      	strb	r2, [r3, #0]
  g_nInFileOfs += n;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	441a      	add	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	641a      	str	r2, [r3, #64]	; 0x40
  return 0;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	371c      	adds	r7, #28
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <_ZN11JPEGDecoder10decode_mcuEv>:

int JPEGDecoder::decode_mcu(void) {
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]

  status = pjpeg_decode_mcu();
 800da9c:	f004 fee8 	bl	8012870 <pjpeg_decode_mcu>
 800daa0:	4603      	mov	r3, r0
 800daa2:	461a      	mov	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  if (status) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00a      	beq.n	800daca <_ZN11JPEGDecoder10decode_mcuEv+0x36>
    is_available = 0;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	631a      	str	r2, [r3, #48]	; 0x30

    if (status != PJPG_NO_MORE_BLOCKS) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d002      	beq.n	800daca <_ZN11JPEGDecoder10decode_mcuEv+0x36>
#ifdef DEBUG
      Serial.print("pjpeg_decode_mcu() failed with status ");
      Serial.println(status);
#endif

      return -1;
 800dac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dac8:	e000      	b.n	800dacc <_ZN11JPEGDecoder10decode_mcuEv+0x38>
    }
  }
  return 1;
 800daca:	2301      	movs	r3, #1
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <_ZN11JPEGDecoder4readEv>:

int JPEGDecoder::read(void) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b092      	sub	sp, #72	; 0x48
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  int y, x;
  uint16_t *pDst_row;

  if (is_available == 0 || mcu_y >= image_info.m_MCUSPerCol) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d005      	beq.n	800daf0 <_ZN11JPEGDecoder4readEv+0x1c>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	429a      	cmp	r2, r3
 800daee:	db04      	blt.n	800dafa <_ZN11JPEGDecoder4readEv+0x26>
    abort();
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f9e7 	bl	800dec4 <_ZN11JPEGDecoder5abortEv>
    return 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e120      	b.n	800dd3c <_ZN11JPEGDecoder4readEv+0x268>
  }

  pDst_row = pImage;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dafe:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800db00:	2300      	movs	r3, #0
 800db02:	647b      	str	r3, [r7, #68]	; 0x44
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db0a:	429a      	cmp	r2, r3
 800db0c:	f280 80e9 	bge.w	800dce2 <_ZN11JPEGDecoder4readEv+0x20e>

    const int by_limit =
        jpg_min(8, image_info.m_height - (mcu_y * image_info.m_MCUHeight + y));
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	689a      	ldr	r2, [r3, #8]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db18:	6879      	ldr	r1, [r7, #4]
 800db1a:	6a09      	ldr	r1, [r1, #32]
 800db1c:	fb01 f103 	mul.w	r1, r1, r3
 800db20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db22:	440b      	add	r3, r1
 800db24:	1ad3      	subs	r3, r2, r3
    const int by_limit =
 800db26:	2b08      	cmp	r3, #8
 800db28:	bfa8      	it	ge
 800db2a:	2308      	movge	r3, #8
 800db2c:	613b      	str	r3, [r7, #16]

    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800db2e:	2300      	movs	r3, #0
 800db30:	643b      	str	r3, [r7, #64]	; 0x40
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69db      	ldr	r3, [r3, #28]
 800db36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db38:	429a      	cmp	r2, r3
 800db3a:	f280 80c8 	bge.w	800dcce <_ZN11JPEGDecoder4readEv+0x1fa>
      uint16_t *pDst_block = pDst_row + x;
 800db3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db44:	4413      	add	r3, r2
 800db46:	63bb      	str	r3, [r7, #56]	; 0x38

      uint src_ofs = (x * 8U) + (y * 16U);
 800db48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db4a:	005a      	lsls	r2, r3, #1
 800db4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db4e:	4413      	add	r3, r2
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	60fb      	str	r3, [r7, #12]
      const uint8_t *pSrcR = image_info.m_pMCUBufR + src_ofs;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	4413      	add	r3, r2
 800db5c:	637b      	str	r3, [r7, #52]	; 0x34
      const uint8_t *pSrcG = image_info.m_pMCUBufG + src_ofs;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	4413      	add	r3, r2
 800db66:	633b      	str	r3, [r7, #48]	; 0x30
      const uint8_t *pSrcB = image_info.m_pMCUBufB + src_ofs;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	4413      	add	r3, r2
 800db70:	62fb      	str	r3, [r7, #44]	; 0x2c

      const int bx_limit =
          jpg_min(8, image_info.m_width - (mcu_x * image_info.m_MCUWidth + x));
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	685a      	ldr	r2, [r3, #4]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7a:	6879      	ldr	r1, [r7, #4]
 800db7c:	69c9      	ldr	r1, [r1, #28]
 800db7e:	fb01 f103 	mul.w	r1, r1, r3
 800db82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db84:	440b      	add	r3, r1
 800db86:	1ad3      	subs	r3, r2, r3
      const int bx_limit =
 800db88:	2b08      	cmp	r3, #8
 800db8a:	bfa8      	it	ge
 800db8c:	2308      	movge	r3, #8
 800db8e:	60bb      	str	r3, [r7, #8]

      if (image_info.m_scanType == PJPG_GRAYSCALE) {
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7e1b      	ldrb	r3, [r3, #24]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d141      	bne.n	800dc1c <_ZN11JPEGDecoder4readEv+0x148>
        int bx, by;
        for (by = 0; by < by_limit; by++) {
 800db98:	2300      	movs	r3, #0
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24
 800db9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	f280 8090 	bge.w	800dcc6 <_ZN11JPEGDecoder4readEv+0x1f2>
          uint16_t *pDst = pDst_block;
 800dba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba8:	623b      	str	r3, [r7, #32]

          for (bx = 0; bx < bx_limit; bx++) {
 800dbaa:	2300      	movs	r3, #0
 800dbac:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	da21      	bge.n	800dbfa <_ZN11JPEGDecoder4readEv+0x126>
#ifdef SWAP_BYTES
            *pDst++ = (*pSrcR & 0xF8) | (*pSrcR & 0xE0) >> 5 |
                      (*pSrcR & 0xF8) << 5 | (*pSrcR & 0x1C) << 11;
#else
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcR & 0xFC) << 3 | *pSrcR >> 3;
 800dbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	021b      	lsls	r3, r3, #8
 800dbbc:	b21a      	sxth	r2, r3
 800dbbe:	4b61      	ldr	r3, [pc, #388]	; (800dd44 <_ZN11JPEGDecoder4readEv+0x270>)
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	b21a      	sxth	r2, r3
 800dbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	b21b      	sxth	r3, r3
 800dbcc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800dbd0:	b21b      	sxth	r3, r3
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	b21a      	sxth	r2, r3
 800dbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	10db      	asrs	r3, r3, #3
 800dbdc:	b21b      	sxth	r3, r3
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	b219      	sxth	r1, r3
 800dbe2:	6a3b      	ldr	r3, [r7, #32]
 800dbe4:	1c9a      	adds	r2, r3, #2
 800dbe6:	623a      	str	r2, [r7, #32]
 800dbe8:	b28a      	uxth	r2, r1
 800dbea:	801a      	strh	r2, [r3, #0]
#endif
            pSrcR++;
 800dbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbee:	3301      	adds	r3, #1
 800dbf0:	637b      	str	r3, [r7, #52]	; 0x34
          for (bx = 0; bx < bx_limit; bx++) {
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbf8:	e7d9      	b.n	800dbae <_ZN11JPEGDecoder4readEv+0xda>
          }

          pSrcR += (8 - bx_limit);
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	f1c3 0308 	rsb	r3, r3, #8
 800dc00:	461a      	mov	r2, r3
 800dc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc04:	4413      	add	r3, r2
 800dc06:	637b      	str	r3, [r7, #52]	; 0x34

          pDst_block += row_pitch;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc10:	4413      	add	r3, r2
 800dc12:	63bb      	str	r3, [r7, #56]	; 0x38
        for (by = 0; by < by_limit; by++) {
 800dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc16:	3301      	adds	r3, #1
 800dc18:	627b      	str	r3, [r7, #36]	; 0x24
 800dc1a:	e7bf      	b.n	800db9c <_ZN11JPEGDecoder4readEv+0xc8>
        }
      } else {
        int bx, by;
        for (by = 0; by < by_limit; by++) {
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61bb      	str	r3, [r7, #24]
 800dc20:	69ba      	ldr	r2, [r7, #24]
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	da4e      	bge.n	800dcc6 <_ZN11JPEGDecoder4readEv+0x1f2>
          uint16_t *pDst = pDst_block;
 800dc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2a:	617b      	str	r3, [r7, #20]

          for (bx = 0; bx < bx_limit; bx++) {
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	61fb      	str	r3, [r7, #28]
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	da27      	bge.n	800dc88 <_ZN11JPEGDecoder4readEv+0x1b4>
#ifdef SWAP_BYTES
            *pDst++ = (*pSrcR & 0xF8) | (*pSrcG & 0xE0) >> 5 |
                      (*pSrcB & 0xF8) << 5 | (*pSrcG & 0x1C) << 11;
#else
            *pDst++ = (*pSrcR & 0xF8) << 8 | (*pSrcG & 0xFC) << 3 | *pSrcB >> 3;
 800dc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	021b      	lsls	r3, r3, #8
 800dc3e:	b21a      	sxth	r2, r3
 800dc40:	4b40      	ldr	r3, [pc, #256]	; (800dd44 <_ZN11JPEGDecoder4readEv+0x270>)
 800dc42:	4013      	ands	r3, r2
 800dc44:	b21a      	sxth	r2, r3
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	00db      	lsls	r3, r3, #3
 800dc4c:	b21b      	sxth	r3, r3
 800dc4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800dc52:	b21b      	sxth	r3, r3
 800dc54:	4313      	orrs	r3, r2
 800dc56:	b21a      	sxth	r2, r3
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	10db      	asrs	r3, r3, #3
 800dc5e:	b21b      	sxth	r3, r3
 800dc60:	4313      	orrs	r3, r2
 800dc62:	b219      	sxth	r1, r3
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	1c9a      	adds	r2, r3, #2
 800dc68:	617a      	str	r2, [r7, #20]
 800dc6a:	b28a      	uxth	r2, r1
 800dc6c:	801a      	strh	r2, [r3, #0]
#endif
            pSrcR++;
 800dc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc70:	3301      	adds	r3, #1
 800dc72:	637b      	str	r3, [r7, #52]	; 0x34
            pSrcG++;
 800dc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc76:	3301      	adds	r3, #1
 800dc78:	633b      	str	r3, [r7, #48]	; 0x30
            pSrcB++;
 800dc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
          for (bx = 0; bx < bx_limit; bx++) {
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	3301      	adds	r3, #1
 800dc84:	61fb      	str	r3, [r7, #28]
 800dc86:	e7d3      	b.n	800dc30 <_ZN11JPEGDecoder4readEv+0x15c>
          }

          pSrcR += (8 - bx_limit);
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f1c3 0308 	rsb	r3, r3, #8
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc92:	4413      	add	r3, r2
 800dc94:	637b      	str	r3, [r7, #52]	; 0x34
          pSrcG += (8 - bx_limit);
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f1c3 0308 	rsb	r3, r3, #8
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	4413      	add	r3, r2
 800dca2:	633b      	str	r3, [r7, #48]	; 0x30
          pSrcB += (8 - bx_limit);
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	f1c3 0308 	rsb	r3, r3, #8
 800dcaa:	461a      	mov	r2, r3
 800dcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcae:	4413      	add	r3, r2
 800dcb0:	62fb      	str	r3, [r7, #44]	; 0x2c

          pDst_block += row_pitch;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcba:	4413      	add	r3, r2
 800dcbc:	63bb      	str	r3, [r7, #56]	; 0x38
        for (by = 0; by < by_limit; by++) {
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	61bb      	str	r3, [r7, #24]
 800dcc4:	e7ac      	b.n	800dc20 <_ZN11JPEGDecoder4readEv+0x14c>
    for (x = 0; x < image_info.m_MCUWidth; x += 8) {
 800dcc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc8:	3308      	adds	r3, #8
 800dcca:	643b      	str	r3, [r7, #64]	; 0x40
 800dccc:	e731      	b.n	800db32 <_ZN11JPEGDecoder4readEv+0x5e>
        }
      }
    }
    pDst_row += (row_pitch * 8);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcd2:	011b      	lsls	r3, r3, #4
 800dcd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcd6:	4413      	add	r3, r2
 800dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (y = 0; y < image_info.m_MCUHeight; y += 8) {
 800dcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcdc:	3308      	adds	r3, #8
 800dcde:	647b      	str	r3, [r7, #68]	; 0x44
 800dce0:	e710      	b.n	800db04 <_ZN11JPEGDecoder4readEv+0x30>
  }

  MCUx = mcu_x;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  MCUy = mcu_y;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  mcu_x++;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	635a      	str	r2, [r3, #52]	; 0x34
  if (mcu_x == image_info.m_MCUSPerRow) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d107      	bne.n	800dd1c <_ZN11JPEGDecoder4readEv+0x248>
    mcu_x = 0;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	635a      	str	r2, [r3, #52]	; 0x34
    mcu_y++;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (decode_mcu() == -1)
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f7ff feb9 	bl	800da94 <_ZN11JPEGDecoder10decode_mcuEv>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd28:	bf0c      	ite	eq
 800dd2a:	2301      	moveq	r3, #1
 800dd2c:	2300      	movne	r3, #0
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <_ZN11JPEGDecoder4readEv+0x266>
    is_available = 0;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	631a      	str	r2, [r3, #48]	; 0x30

  return 1;
 800dd3a:	2301      	movs	r3, #1
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3748      	adds	r7, #72	; 0x48
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	fffff800 	.word	0xfffff800

0800dd48 <_ZN11JPEGDecoder11decodeArrayEPKhm>:

  return decodeCommon();
}
#endif

int JPEGDecoder::decodeArray(const uint8_t array[], uint32_t array_size) {
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]

  jpg_source = JPEG_ARRAY;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  g_nInFileOfs = 0;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	641a      	str	r2, [r3, #64]	; 0x40

  jpg_data = (uint8_t *)array;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	65da      	str	r2, [r3, #92]	; 0x5c

  g_nInFileSize = array_size;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	63da      	str	r2, [r3, #60]	; 0x3c

  return decodeCommon();
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f000 f806 	bl	800dd80 <_ZN11JPEGDecoder12decodeCommonEv>
 800dd74:	4603      	mov	r3, r0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <_ZN11JPEGDecoder12decodeCommonEv>:

int JPEGDecoder::decodeCommon(void) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]

  width = 0;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	669a      	str	r2, [r3, #104]	; 0x68
  height = 0;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	66da      	str	r2, [r3, #108]	; 0x6c
  comps = 0;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	671a      	str	r2, [r3, #112]	; 0x70
  MCUSPerRow = 0;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	675a      	str	r2, [r3, #116]	; 0x74
  MCUSPerCol = 0;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	679a      	str	r2, [r3, #120]	; 0x78
  scanType = (pjpeg_scan_type_t)0;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  MCUWidth = 0;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MCUHeight = 0;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  status = pjpeg_decode_init(&image_info, pjpeg_callback, NULL, 0);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	1d18      	adds	r0, r3, #4
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	493d      	ldr	r1, [pc, #244]	; (800debc <_ZN11JPEGDecoder12decodeCommonEv+0x13c>)
 800ddc8:	f004 fd86 	bl	80128d8 <pjpeg_decode_init>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	461a      	mov	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  if (status) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d001      	beq.n	800dde4 <_ZN11JPEGDecoder12decodeCommonEv+0x64>
    if (status == PJPG_UNSUPPORTED_MODE) {
      Serial.println("Progressive JPEG files are not supported.");
    }
#endif

    return 0;
 800dde0:	2300      	movs	r3, #0
 800dde2:	e066      	b.n	800deb2 <_ZN11JPEGDecoder12decodeCommonEv+0x132>
  }

  decoded_width = image_info.m_width;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	461a      	mov	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	649a      	str	r2, [r3, #72]	; 0x48
  decoded_height = image_info.m_height;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	64da      	str	r2, [r3, #76]	; 0x4c

  row_pitch = image_info.m_MCUWidth;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	69db      	ldr	r3, [r3, #28]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	645a      	str	r2, [r3, #68]	; 0x44
  pImage = new uint16_t[image_info.m_MCUWidth * image_info.m_MCUHeight];
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	69db      	ldr	r3, [r3, #28]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	6a12      	ldr	r2, [r2, #32]
 800de0a:	fb02 f303 	mul.w	r3, r2, r3
 800de0e:	4a2c      	ldr	r2, [pc, #176]	; (800dec0 <_ZN11JPEGDecoder12decodeCommonEv+0x140>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d801      	bhi.n	800de18 <_ZN11JPEGDecoder12decodeCommonEv+0x98>
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	e001      	b.n	800de1c <_ZN11JPEGDecoder12decodeCommonEv+0x9c>
 800de18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de1c:	4618      	mov	r0, r3
 800de1e:	f005 f929 	bl	8013074 <_Znaj>
 800de22:	4603      	mov	r3, r0
 800de24:	461a      	mov	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	661a      	str	r2, [r3, #96]	; 0x60

  memset(pImage, 0,
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6e18      	ldr	r0, [r3, #96]	; 0x60
         image_info.m_MCUWidth * image_info.m_MCUHeight * sizeof(*pImage));
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	69db      	ldr	r3, [r3, #28]
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	6a12      	ldr	r2, [r2, #32]
 800de36:	fb02 f303 	mul.w	r3, r2, r3
  memset(pImage, 0,
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	461a      	mov	r2, r3
 800de3e:	2100      	movs	r1, #0
 800de40:	f006 fea9 	bl	8014b96 <memset>

  row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	69db      	ldr	r3, [r3, #28]
 800de48:	10db      	asrs	r3, r3, #3
 800de4a:	461a      	mov	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	651a      	str	r2, [r3, #80]	; 0x50
  col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a1b      	ldr	r3, [r3, #32]
 800de54:	10db      	asrs	r3, r3, #3
 800de56:	461a      	mov	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	655a      	str	r2, [r3, #84]	; 0x54

  is_available = 1;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2201      	movs	r2, #1
 800de60:	631a      	str	r2, [r3, #48]	; 0x30

  width = decoded_width;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de66:	461a      	mov	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	669a      	str	r2, [r3, #104]	; 0x68
  height = decoded_height;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de70:	461a      	mov	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	66da      	str	r2, [r3, #108]	; 0x6c
  comps = 1;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2201      	movs	r2, #1
 800de7a:	671a      	str	r2, [r3, #112]	; 0x70
  MCUSPerRow = image_info.m_MCUSPerRow;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691a      	ldr	r2, [r3, #16]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	675a      	str	r2, [r3, #116]	; 0x74
  MCUSPerCol = image_info.m_MCUSPerCol;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	695a      	ldr	r2, [r3, #20]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	679a      	str	r2, [r3, #120]	; 0x78
  scanType = image_info.m_scanType;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	7e1a      	ldrb	r2, [r3, #24]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  MCUWidth = image_info.m_MCUWidth;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	69da      	ldr	r2, [r3, #28]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MCUHeight = image_info.m_MCUHeight;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a1a      	ldr	r2, [r3, #32]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return decode_mcu();
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f7ff fdf2 	bl	800da94 <_ZN11JPEGDecoder10decode_mcuEv>
 800deb0:	4603      	mov	r3, r0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	0800d9e9 	.word	0x0800d9e9
 800dec0:	3ffffffc 	.word	0x3ffffffc

0800dec4 <_ZN11JPEGDecoder5abortEv>:

void JPEGDecoder::abort(void) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]

  mcu_x = 0;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	635a      	str	r2, [r3, #52]	; 0x34
  mcu_y = 0;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38
  is_available = 0;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	631a      	str	r2, [r3, #48]	; 0x30
  if (pImage)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d008      	beq.n	800def8 <_ZN11JPEGDecoder5abortEv+0x34>
    delete[] pImage;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800deea:	2b00      	cmp	r3, #0
 800deec:	d004      	beq.n	800def8 <_ZN11JPEGDecoder5abortEv+0x34>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def2:	4618      	mov	r0, r3
 800def4:	f005 f8bc 	bl	8013070 <_ZdaPv>
  pImage = NULL;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	661a      	str	r2, [r3, #96]	; 0x60
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <_Z41__static_initialization_and_destruction_0ii>:
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d107      	bne.n	800df28 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df1e:	4293      	cmp	r3, r2
 800df20:	d102      	bne.n	800df28 <_Z41__static_initialization_and_destruction_0ii+0x20>
JPEGDecoder JpegDec;
 800df22:	4809      	ldr	r0, [pc, #36]	; (800df48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800df24:	f7ff fd2c 	bl	800d980 <_ZN11JPEGDecoderC1Ev>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d107      	bne.n	800df3e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df34:	4293      	cmp	r3, r2
 800df36:	d102      	bne.n	800df3e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800df38:	4803      	ldr	r0, [pc, #12]	; (800df48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800df3a:	f7ff fd3c 	bl	800d9b6 <_ZN11JPEGDecoderD1Ev>
}
 800df3e:	bf00      	nop
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20000c44 	.word	0x20000c44

0800df4c <_GLOBAL__sub_I_JpegDec>:
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
 800df50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df54:	2001      	movs	r0, #1
 800df56:	f7ff ffd7 	bl	800df08 <_Z41__static_initialization_and_destruction_0ii>
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <_GLOBAL__sub_D_JpegDec>:
 800df5c:	b580      	push	{r7, lr}
 800df5e:	af00      	add	r7, sp, #0
 800df60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df64:	2000      	movs	r0, #0
 800df66:	f7ff ffcf 	bl	800df08 <_Z41__static_initialization_and_destruction_0ii>
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <_Z10flush_fifov>:
uint8_t imgBuf[5120];
uint32_t imgLength;
bool is_header = false;
static byte m_fmt = JPEG;

void flush_fifo(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800df6c:	b580      	push	{r7, lr}
 800df6e:	af00      	add	r7, sp, #0
 800df70:	2101      	movs	r1, #1
 800df72:	2004      	movs	r0, #4
 800df74:	f000 fc86 	bl	800e884 <_Z11camWriteReghh>
 800df78:	bf00      	nop
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <_Z15clear_fifo_flagv>:

void clear_fifo_flag(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK); }
 800df7c:	b580      	push	{r7, lr}
 800df7e:	af00      	add	r7, sp, #0
 800df80:	2101      	movs	r1, #1
 800df82:	2004      	movs	r0, #4
 800df84:	f000 fc7e 	bl	800e884 <_Z11camWriteReghh>
 800df88:	bf00      	nop
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <_Z13start_capturev>:

void start_capture(void) { camWriteReg(ARDUCHIP_FIFO, FIFO_START_MASK); }
 800df8c:	b580      	push	{r7, lr}
 800df8e:	af00      	add	r7, sp, #0
 800df90:	2102      	movs	r1, #2
 800df92:	2004      	movs	r0, #4
 800df94:	f000 fc76 	bl	800e884 <_Z11camWriteReghh>
 800df98:	bf00      	nop
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <_Z10initCamerav>:

void set_format(byte fmt) { m_fmt = fmt; }

int initCamera() {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
  int camrror = camSPISetup();
 800dfa2:	f000 fbc3 	bl	800e72c <_Z11camSPISetupv>
 800dfa6:	6078      	str	r0, [r7, #4]
  camrror += camI2CSetup();
 800dfa8:	f000 fad4 	bl	800e554 <_Z11camI2CSetupv>
 800dfac:	4602      	mov	r2, r0
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	607b      	str	r3, [r7, #4]

  wrSensorReg8_8(0xff, 0x01);
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	20ff      	movs	r0, #255	; 0xff
 800dfb8:	f000 fb30 	bl	800e61c <_Z14wrSensorReg8_8hh>

  wrSensorReg8_8(0x12, 0x80);
 800dfbc:	2180      	movs	r1, #128	; 0x80
 800dfbe:	2012      	movs	r0, #18
 800dfc0:	f000 fb2c 	bl	800e61c <_Z14wrSensorReg8_8hh>

  HAL_Delay(100);
 800dfc4:	2064      	movs	r0, #100	; 0x64
 800dfc6:	f7fb fc3b 	bl	8009840 <HAL_Delay>
  if (m_fmt == JPEG) {
 800dfca:	4b15      	ldr	r3, [pc, #84]	; (800e020 <_Z10initCamerav+0x84>)
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d117      	bne.n	800e002 <_Z10initCamerav+0x66>
    wrSensorRegs8_8(OV2640_JPEG_INIT);
 800dfd2:	4814      	ldr	r0, [pc, #80]	; (800e024 <_Z10initCamerav+0x88>)
 800dfd4:	f000 fb42 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_YUV422);
 800dfd8:	4813      	ldr	r0, [pc, #76]	; (800e028 <_Z10initCamerav+0x8c>)
 800dfda:	f000 fb3f 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorRegs8_8(OV2640_JPEG);
 800dfde:	4813      	ldr	r0, [pc, #76]	; (800e02c <_Z10initCamerav+0x90>)
 800dfe0:	f000 fb3c 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    wrSensorReg8_8(0xff, 0x01);
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	20ff      	movs	r0, #255	; 0xff
 800dfe8:	f000 fb18 	bl	800e61c <_Z14wrSensorReg8_8hh>
    wrSensorReg8_8(0x15, 0x00);
 800dfec:	2100      	movs	r1, #0
 800dfee:	2015      	movs	r0, #21
 800dff0:	f000 fb14 	bl	800e61c <_Z14wrSensorReg8_8hh>
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 800dff4:	480e      	ldr	r0, [pc, #56]	; (800e030 <_Z10initCamerav+0x94>)
 800dff6:	f000 fb31 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    HAL_Delay(100);
 800dffa:	2064      	movs	r0, #100	; 0x64
 800dffc:	f7fb fc20 	bl	8009840 <HAL_Delay>
 800e000:	e002      	b.n	800e008 <_Z10initCamerav+0x6c>

  } else {
    wrSensorRegs8_8(OV2640_QVGA);
 800e002:	480c      	ldr	r0, [pc, #48]	; (800e034 <_Z10initCamerav+0x98>)
 800e004:	f000 fb2a 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
  }

  OV2640_set_JPEG_size(OV2640_160x120);
 800e008:	2000      	movs	r0, #0
 800e00a:	f000 f815 	bl	800e038 <_Z20OV2640_set_JPEG_sizeh>

  HAL_Delay(100);
 800e00e:	2064      	movs	r0, #100	; 0x64
 800e010:	f7fb fc16 	bl	8009840 <HAL_Delay>
  return camrror;
 800e014:	687b      	ldr	r3, [r7, #4]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	20000015 	.word	0x20000015
 800e024:	08018c64 	.word	0x08018c64
 800e028:	08018de4 	.word	0x08018de4
 800e02c:	08018df8 	.word	0x08018df8
 800e030:	08018eac 	.word	0x08018eac
 800e034:	08018ae0 	.word	0x08018ae0

0800e038 <_Z20OV2640_set_JPEG_sizeh>:

void OV2640_set_JPEG_size(uint8_t size) {
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	71fb      	strb	r3, [r7, #7]
  switch (size) {
 800e042:	79fb      	ldrb	r3, [r7, #7]
 800e044:	2b08      	cmp	r3, #8
 800e046:	d839      	bhi.n	800e0bc <_Z20OV2640_set_JPEG_sizeh+0x84>
 800e048:	a201      	add	r2, pc, #4	; (adr r2, 800e050 <_Z20OV2640_set_JPEG_sizeh+0x18>)
 800e04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04e:	bf00      	nop
 800e050:	0800e075 	.word	0x0800e075
 800e054:	0800e07d 	.word	0x0800e07d
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	0800e08d 	.word	0x0800e08d
 800e060:	0800e095 	.word	0x0800e095
 800e064:	0800e09d 	.word	0x0800e09d
 800e068:	0800e0a5 	.word	0x0800e0a5
 800e06c:	0800e0ad 	.word	0x0800e0ad
 800e070:	0800e0b5 	.word	0x0800e0b5
  case OV2640_160x120:
    wrSensorRegs8_8(OV2640_160x120_JPEG);
 800e074:	4815      	ldr	r0, [pc, #84]	; (800e0cc <_Z20OV2640_set_JPEG_sizeh+0x94>)
 800e076:	f000 faf1 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e07a:	e023      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_176x144:
    wrSensorRegs8_8(OV2640_176x144_JPEG);
 800e07c:	4814      	ldr	r0, [pc, #80]	; (800e0d0 <_Z20OV2640_set_JPEG_sizeh+0x98>)
 800e07e:	f000 faed 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e082:	e01f      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_320x240:
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 800e084:	4813      	ldr	r0, [pc, #76]	; (800e0d4 <_Z20OV2640_set_JPEG_sizeh+0x9c>)
 800e086:	f000 fae9 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e08a:	e01b      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_352x288:
    wrSensorRegs8_8(OV2640_352x288_JPEG);
 800e08c:	4812      	ldr	r0, [pc, #72]	; (800e0d8 <_Z20OV2640_set_JPEG_sizeh+0xa0>)
 800e08e:	f000 fae5 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e092:	e017      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_640x480:
    wrSensorRegs8_8(OV2640_640x480_JPEG);
 800e094:	4811      	ldr	r0, [pc, #68]	; (800e0dc <_Z20OV2640_set_JPEG_sizeh+0xa4>)
 800e096:	f000 fae1 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e09a:	e013      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_800x600:
    wrSensorRegs8_8(OV2640_800x600_JPEG);
 800e09c:	4810      	ldr	r0, [pc, #64]	; (800e0e0 <_Z20OV2640_set_JPEG_sizeh+0xa8>)
 800e09e:	f000 fadd 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e0a2:	e00f      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_1024x768:
    wrSensorRegs8_8(OV2640_1024x768_JPEG);
 800e0a4:	480f      	ldr	r0, [pc, #60]	; (800e0e4 <_Z20OV2640_set_JPEG_sizeh+0xac>)
 800e0a6:	f000 fad9 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e0aa:	e00b      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_1280x1024:
    wrSensorRegs8_8(OV2640_1280x1024_JPEG);
 800e0ac:	480e      	ldr	r0, [pc, #56]	; (800e0e8 <_Z20OV2640_set_JPEG_sizeh+0xb0>)
 800e0ae:	f000 fad5 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e0b2:	e007      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  case OV2640_1600x1200:
    wrSensorRegs8_8(OV2640_1600x1200_JPEG);
 800e0b4:	480d      	ldr	r0, [pc, #52]	; (800e0ec <_Z20OV2640_set_JPEG_sizeh+0xb4>)
 800e0b6:	f000 fad1 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e0ba:	e003      	b.n	800e0c4 <_Z20OV2640_set_JPEG_sizeh+0x8c>
  default:
    wrSensorRegs8_8(OV2640_320x240_JPEG);
 800e0bc:	4805      	ldr	r0, [pc, #20]	; (800e0d4 <_Z20OV2640_set_JPEG_sizeh+0x9c>)
 800e0be:	f000 facd 	bl	800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>
    break;
 800e0c2:	bf00      	nop
  }
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	08018e0c 	.word	0x08018e0c
 800e0d0:	08018e5c 	.word	0x08018e5c
 800e0d4:	08018eac 	.word	0x08018eac
 800e0d8:	08018efc 	.word	0x08018efc
 800e0dc:	08018f4c 	.word	0x08018f4c
 800e0e0:	08018fa0 	.word	0x08018fa0
 800e0e4:	08018ff4 	.word	0x08018ff4
 800e0e8:	08019044 	.word	0x08019044
 800e0ec:	08019098 	.word	0x08019098

0800e0f0 <_Z16read_fifo_lengthv>:

uint32_t read_fifo_length(void) {
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
  uint32_t len1, len2, len3, length = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	60fb      	str	r3, [r7, #12]
  len1 = camReadReg(FIFO_SIZE1);
 800e0fa:	2042      	movs	r0, #66	; 0x42
 800e0fc:	f000 fc34 	bl	800e968 <_Z10camReadRegh>
 800e100:	4603      	mov	r3, r0
 800e102:	60bb      	str	r3, [r7, #8]
  len2 = camReadReg(FIFO_SIZE2);
 800e104:	2043      	movs	r0, #67	; 0x43
 800e106:	f000 fc2f 	bl	800e968 <_Z10camReadRegh>
 800e10a:	4603      	mov	r3, r0
 800e10c:	607b      	str	r3, [r7, #4]
  len3 = camReadReg(FIFO_SIZE3) & 0x7f;
 800e10e:	2044      	movs	r0, #68	; 0x44
 800e110:	f000 fc2a 	bl	800e968 <_Z10camReadRegh>
 800e114:	4603      	mov	r3, r0
 800e116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e11a:	603b      	str	r3, [r7, #0]
  length = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	041a      	lsls	r2, r3, #16
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	021b      	lsls	r3, r3, #8
 800e124:	431a      	orrs	r2, r3
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	4313      	orrs	r3, r2
 800e12a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e12e:	60fb      	str	r3, [r7, #12]
  return length;
 800e130:	68fb      	ldr	r3, [r7, #12]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
	...

0800e13c <_Z22DecodeandProcessAndRGBiiPaPti>:
  return 0;
}

int DecodeandProcessAndRGB(int image_width, int image_height,
                           int8_t *image_data, uint16_t *lcd_data,
                           int scale_factor) {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b09c      	sub	sp, #112	; 0x70
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]

  JpegDec.decodeArray(imgBuf, imgLength);
 800e14a:	4b27      	ldr	r3, [pc, #156]	; (800e1e8 <_Z22DecodeandProcessAndRGBiiPaPti+0xac>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	4926      	ldr	r1, [pc, #152]	; (800e1ec <_Z22DecodeandProcessAndRGBiiPaPti+0xb0>)
 800e152:	4827      	ldr	r0, [pc, #156]	; (800e1f0 <_Z22DecodeandProcessAndRGBiiPaPti+0xb4>)
 800e154:	f7ff fdf8 	bl	800dd48 <_ZN11JPEGDecoder11decodeArrayEPKhm>

  const int keep_x_mcus = image_width / JpegDec.MCUWidth;
 800e158:	4b25      	ldr	r3, [pc, #148]	; (800e1f0 <_Z22DecodeandProcessAndRGBiiPaPti+0xb4>)
 800e15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	fb92 f3f3 	sdiv	r3, r2, r3
 800e164:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int keep_y_mcus = image_height / JpegDec.MCUHeight;
 800e166:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <_Z22DecodeandProcessAndRGBiiPaPti+0xb4>)
 800e168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e172:	65bb      	str	r3, [r7, #88]	; 0x58

  const int skip_x_mcus = JpegDec.MCUSPerRow - keep_x_mcus;
 800e174:	4b1e      	ldr	r3, [pc, #120]	; (800e1f0 <_Z22DecodeandProcessAndRGBiiPaPti+0xb4>)
 800e176:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	657b      	str	r3, [r7, #84]	; 0x54

  const int skip_start_x_mcus = skip_x_mcus / 2;
 800e17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e180:	2b00      	cmp	r3, #0
 800e182:	da00      	bge.n	800e186 <_Z22DecodeandProcessAndRGBiiPaPti+0x4a>
 800e184:	3301      	adds	r3, #1
 800e186:	105b      	asrs	r3, r3, #1
 800e188:	653b      	str	r3, [r7, #80]	; 0x50

  const int skip_end_x_mcu_index = skip_start_x_mcus + keep_x_mcus;
 800e18a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e18c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e18e:	4413      	add	r3, r2
 800e190:	64fb      	str	r3, [r7, #76]	; 0x4c

  const int skip_y_mcus = JpegDec.MCUSPerCol - keep_y_mcus;
 800e192:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <_Z22DecodeandProcessAndRGBiiPaPti+0xb4>)
 800e194:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800e196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	64bb      	str	r3, [r7, #72]	; 0x48
  const int skip_start_y_mcus = skip_y_mcus / 2;
 800e19c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	da00      	bge.n	800e1a4 <_Z22DecodeandProcessAndRGBiiPaPti+0x68>
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	105b      	asrs	r3, r3, #1
 800e1a6:	647b      	str	r3, [r7, #68]	; 0x44
  const int skip_end_y_mcu_index = skip_start_y_mcus + keep_y_mcus;
 800e1a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1ac:	4413      	add	r3, r2
 800e1ae:	643b      	str	r3, [r7, #64]	; 0x40

  uint16_t *pImg;

  uint16_t color;

  for (int i = 0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	66bb      	str	r3, [r7, #104]	; 0x68
       i < (image_height / scale_factor) * (image_width / scale_factor) * 3;
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800e1bc:	68f9      	ldr	r1, [r7, #12]
 800e1be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1c0:	fb91 f2f2 	sdiv	r2, r1, r2
 800e1c4:	fb02 f203 	mul.w	r2, r2, r3
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	4413      	add	r3, r2
 800e1ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	da0f      	bge.n	800e1f4 <_Z22DecodeandProcessAndRGBiiPaPti+0xb8>
       i++)
    image_data[i] = -128;
 800e1d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	4413      	add	r3, r2
 800e1da:	2280      	movs	r2, #128	; 0x80
 800e1dc:	701a      	strb	r2, [r3, #0]
  for (int i = 0;
 800e1de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1e4:	e7e6      	b.n	800e1b4 <_Z22DecodeandProcessAndRGBiiPaPti+0x78>
 800e1e6:	bf00      	nop
 800e1e8:	200020d4 	.word	0x200020d4
 800e1ec:	20000cd4 	.word	0x20000cd4
 800e1f0:	20000c44 	.word	0x20000c44

  while (JpegDec.read()) {
 800e1f4:	489c      	ldr	r0, [pc, #624]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e1f6:	f7ff fc6d 	bl	800dad4 <_ZN11JPEGDecoder4readEv>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	bf14      	ite	ne
 800e200:	2301      	movne	r3, #1
 800e202:	2300      	moveq	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 8128 	beq.w	800e45c <_Z22DecodeandProcessAndRGBiiPaPti+0x320>

    if (JpegDec.MCUy < skip_start_y_mcus) {
 800e20c:	4b96      	ldr	r3, [pc, #600]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e214:	429a      	cmp	r2, r3
 800e216:	f300 811b 	bgt.w	800e450 <_Z22DecodeandProcessAndRGBiiPaPti+0x314>
      continue;
    }

    if (JpegDec.MCUx < skip_start_x_mcus ||
 800e21a:	4b93      	ldr	r3, [pc, #588]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e222:	429a      	cmp	r2, r3
 800e224:	f300 8116 	bgt.w	800e454 <_Z22DecodeandProcessAndRGBiiPaPti+0x318>
        JpegDec.MCUx >= skip_end_x_mcu_index) {
 800e228:	4b8f      	ldr	r3, [pc, #572]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    if (JpegDec.MCUx < skip_start_x_mcus ||
 800e22e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e230:	429a      	cmp	r2, r3
 800e232:	f340 810f 	ble.w	800e454 <_Z22DecodeandProcessAndRGBiiPaPti+0x318>
      continue;
    }

    if (JpegDec.MCUy >= skip_end_y_mcu_index) {
 800e236:	4b8c      	ldr	r3, [pc, #560]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e23c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e23e:	429a      	cmp	r2, r3
 800e240:	f340 810a 	ble.w	800e458 <_Z22DecodeandProcessAndRGBiiPaPti+0x31c>
      continue;
    }

    pImg = JpegDec.pImage;
 800e244:	4b88      	ldr	r3, [pc, #544]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e248:	66fb      	str	r3, [r7, #108]	; 0x6c

    int relative_mcu_x = JpegDec.MCUx - skip_start_x_mcus;
 800e24a:	4b87      	ldr	r3, [pc, #540]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e24c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
    int relative_mcu_y = JpegDec.MCUy - skip_start_y_mcus;
 800e256:	4b84      	ldr	r3, [pc, #528]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e258:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	63bb      	str	r3, [r7, #56]	; 0x38

    int x_origin = relative_mcu_x * JpegDec.MCUWidth;
 800e262:	4b81      	ldr	r3, [pc, #516]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e264:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800e268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e26a:	fb02 f303 	mul.w	r3, r2, r3
 800e26e:	637b      	str	r3, [r7, #52]	; 0x34
    int y_origin = relative_mcu_y * JpegDec.MCUHeight;
 800e270:	4b7d      	ldr	r3, [pc, #500]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e272:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	fb02 f303 	mul.w	r3, r2, r3
 800e27c:	633b      	str	r3, [r7, #48]	; 0x30

    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800e27e:	2300      	movs	r3, #0
 800e280:	667b      	str	r3, [r7, #100]	; 0x64
 800e282:	4b79      	ldr	r3, [pc, #484]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e28a:	429a      	cmp	r2, r3
 800e28c:	dab2      	bge.n	800e1f4 <_Z22DecodeandProcessAndRGBiiPaPti+0xb8>

      int current_y = y_origin + mcu_row;
 800e28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e292:	4413      	add	r3, r2
 800e294:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800e296:	2300      	movs	r3, #0
 800e298:	663b      	str	r3, [r7, #96]	; 0x60
 800e29a:	4b73      	ldr	r3, [pc, #460]	; (800e468 <_Z22DecodeandProcessAndRGBiiPaPti+0x32c>)
 800e29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	f280 80d0 	bge.w	800e448 <_Z22DecodeandProcessAndRGBiiPaPti+0x30c>

        color = *pImg++;
 800e2a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2aa:	1c9a      	adds	r2, r3, #2
 800e2ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e2ae:	881b      	ldrh	r3, [r3, #0]
 800e2b0:	857b      	strh	r3, [r7, #42]	; 0x2a

        uint8_t r, g, b;
        r = ((color & 0xF800) >> 11) * 8;
 800e2b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2b4:	0adb      	lsrs	r3, r3, #11
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        g = ((color & 0x07E0) >> 5) * 4;
 800e2c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2c2:	115b      	asrs	r3, r3, #5
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        b = ((color & 0x001F) >> 0) * 8;
 800e2d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	f003 031f 	and.w	r3, r3, #31
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	00db      	lsls	r3, r3, #3
 800e2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        int current_x = x_origin + mcu_col;
 800e2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2e6:	4413      	add	r3, r2
 800e2e8:	623b      	str	r3, [r7, #32]

        int index = (current_y * image_width) + current_x;
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	fb02 f303 	mul.w	r3, r2, r3
 800e2f2:	6a3a      	ldr	r2, [r7, #32]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	61fb      	str	r3, [r7, #28]
        int a_index = index * 3;
 800e2f8:	69fa      	ldr	r2, [r7, #28]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	005b      	lsls	r3, r3, #1
 800e2fe:	4413      	add	r3, r2
 800e300:	61bb      	str	r3, [r7, #24]

        if (current_y >= 120)
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	2b77      	cmp	r3, #119	; 0x77
 800e306:	f300 8096 	bgt.w	800e436 <_Z22DecodeandProcessAndRGBiiPaPti+0x2fa>
          continue;

        lcd_data[index] = color;
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	005b      	lsls	r3, r3, #1
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	4413      	add	r3, r2
 800e312:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e314:	801a      	strh	r2, [r3, #0]
        if (scale_factor == 1) {
 800e316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d12c      	bne.n	800e376 <_Z22DecodeandProcessAndRGBiiPaPti+0x23a>
          image_data[index * 3] = r - 128;
 800e31c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e320:	3b80      	subs	r3, #128	; 0x80
 800e322:	b2d9      	uxtb	r1, r3
 800e324:	69fa      	ldr	r2, [r7, #28]
 800e326:	4613      	mov	r3, r2
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	4413      	add	r3, r2
 800e32c:	461a      	mov	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4413      	add	r3, r2
 800e332:	b24a      	sxtb	r2, r1
 800e334:	701a      	strb	r2, [r3, #0]
          image_data[index * 3 + 1] = g - 128;
 800e336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e33a:	3b80      	subs	r3, #128	; 0x80
 800e33c:	b2d9      	uxtb	r1, r3
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	4613      	mov	r3, r2
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	4413      	add	r3, r2
 800e346:	3301      	adds	r3, #1
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	4413      	add	r3, r2
 800e34c:	b24a      	sxtb	r2, r1
 800e34e:	701a      	strb	r2, [r3, #0]
          image_data[index * 3 + 2] = b - 128;
 800e350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e354:	3b80      	subs	r3, #128	; 0x80
 800e356:	b2d9      	uxtb	r1, r3
 800e358:	69fa      	ldr	r2, [r7, #28]
 800e35a:	4613      	mov	r3, r2
 800e35c:	005b      	lsls	r3, r3, #1
 800e35e:	4413      	add	r3, r2
 800e360:	3302      	adds	r3, #2
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	4413      	add	r3, r2
 800e366:	b24a      	sxtb	r2, r1
 800e368:	701a      	strb	r2, [r3, #0]
          lcd_data[index] = color;
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	683a      	ldr	r2, [r7, #0]
 800e370:	4413      	add	r3, r2
 800e372:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e374:	801a      	strh	r2, [r3, #0]
        }
        if (scale_factor != 1 &&
 800e376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d013      	beq.n	800e3a4 <_Z22DecodeandProcessAndRGBiiPaPti+0x268>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e380:	fb93 f2f2 	sdiv	r2, r3, r2
 800e384:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e386:	fb01 f202 	mul.w	r2, r1, r2
 800e38a:	1a9b      	subs	r3, r3, r2
        if (scale_factor != 1 &&
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d154      	bne.n	800e43a <_Z22DecodeandProcessAndRGBiiPaPti+0x2fe>
            (current_y % scale_factor != 0 || current_x % scale_factor != 0))
 800e390:	6a3b      	ldr	r3, [r7, #32]
 800e392:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e394:	fb93 f2f2 	sdiv	r2, r3, r2
 800e398:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e39a:	fb01 f202 	mul.w	r2, r1, r2
 800e39e:	1a9b      	subs	r3, r3, r2
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d14a      	bne.n	800e43a <_Z22DecodeandProcessAndRGBiiPaPti+0x2fe>
          continue;

        if (image_width % scale_factor != 0)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e3a8:	fb93 f2f2 	sdiv	r2, r3, r2
 800e3ac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e3ae:	fb01 f202 	mul.w	r2, r1, r2
 800e3b2:	1a9b      	subs	r3, r3, r2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d142      	bne.n	800e43e <_Z22DecodeandProcessAndRGBiiPaPti+0x302>
          continue;
        int width = image_width;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	617b      	str	r3, [r7, #20]
        if (width > 120)
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	2b78      	cmp	r3, #120	; 0x78
 800e3c0:	dd01      	ble.n	800e3c6 <_Z22DecodeandProcessAndRGBiiPaPti+0x28a>
          width = 120;
 800e3c2:	2378      	movs	r3, #120	; 0x78
 800e3c4:	617b      	str	r3, [r7, #20]
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800e3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ca:	fb92 f3f3 	sdiv	r3, r2, r3
 800e3ce:	68f9      	ldr	r1, [r7, #12]
 800e3d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e3d2:	fb91 f2f2 	sdiv	r2, r1, r2
 800e3d6:	fb02 f203 	mul.w	r2, r2, r3
                     current_x / scale_factor;
 800e3da:	6a39      	ldr	r1, [r7, #32]
 800e3dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3de:	fb91 f3f3 	sdiv	r3, r1, r3
        int Iindex = (current_y / scale_factor) * (image_width / scale_factor) +
 800e3e2:	4413      	add	r3, r2
 800e3e4:	613b      	str	r3, [r7, #16]

        image_data[Iindex * 3] = r - 128;
 800e3e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e3ea:	3b80      	subs	r3, #128	; 0x80
 800e3ec:	b2d9      	uxtb	r1, r3
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	b24a      	sxtb	r2, r1
 800e3fe:	701a      	strb	r2, [r3, #0]
        image_data[Iindex * 3 + 1] = g - 128;
 800e400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e404:	3b80      	subs	r3, #128	; 0x80
 800e406:	b2d9      	uxtb	r1, r3
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	4613      	mov	r3, r2
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	4413      	add	r3, r2
 800e410:	3301      	adds	r3, #1
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	4413      	add	r3, r2
 800e416:	b24a      	sxtb	r2, r1
 800e418:	701a      	strb	r2, [r3, #0]
        image_data[Iindex * 3 + 2] = b - 128;
 800e41a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e41e:	3b80      	subs	r3, #128	; 0x80
 800e420:	b2d9      	uxtb	r1, r3
 800e422:	693a      	ldr	r2, [r7, #16]
 800e424:	4613      	mov	r3, r2
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	4413      	add	r3, r2
 800e42a:	3302      	adds	r3, #2
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	4413      	add	r3, r2
 800e430:	b24a      	sxtb	r2, r1
 800e432:	701a      	strb	r2, [r3, #0]
 800e434:	e004      	b.n	800e440 <_Z22DecodeandProcessAndRGBiiPaPti+0x304>
          continue;
 800e436:	bf00      	nop
 800e438:	e002      	b.n	800e440 <_Z22DecodeandProcessAndRGBiiPaPti+0x304>
          continue;
 800e43a:	bf00      	nop
 800e43c:	e000      	b.n	800e440 <_Z22DecodeandProcessAndRGBiiPaPti+0x304>
          continue;
 800e43e:	bf00      	nop
      for (int mcu_col = 0; mcu_col < JpegDec.MCUWidth; mcu_col++) {
 800e440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e442:	3301      	adds	r3, #1
 800e444:	663b      	str	r3, [r7, #96]	; 0x60
 800e446:	e728      	b.n	800e29a <_Z22DecodeandProcessAndRGBiiPaPti+0x15e>
    for (int mcu_row = 0; mcu_row < JpegDec.MCUHeight; mcu_row++) {
 800e448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e44a:	3301      	adds	r3, #1
 800e44c:	667b      	str	r3, [r7, #100]	; 0x64
 800e44e:	e718      	b.n	800e282 <_Z22DecodeandProcessAndRGBiiPaPti+0x146>
      continue;
 800e450:	bf00      	nop
 800e452:	e6cf      	b.n	800e1f4 <_Z22DecodeandProcessAndRGBiiPaPti+0xb8>
      continue;
 800e454:	bf00      	nop
 800e456:	e6cd      	b.n	800e1f4 <_Z22DecodeandProcessAndRGBiiPaPti+0xb8>
      continue;
 800e458:	bf00      	nop
  while (JpegDec.read()) {
 800e45a:	e6cb      	b.n	800e1f4 <_Z22DecodeandProcessAndRGBiiPaPti+0xb8>
      }
    }
  }
  return 0;
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3770      	adds	r7, #112	; 0x70
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	20000c44 	.word	0x20000c44

0800e46c <_Z12StartCapturev>:
  read_fifo_burst();

  return 0;
}

int StartCapture() {
 800e46c:	b580      	push	{r7, lr}
 800e46e:	af00      	add	r7, sp, #0

  flush_fifo();
 800e470:	f7ff fd7c 	bl	800df6c <_Z10flush_fifov>
  HAL_Delay(1);
 800e474:	2001      	movs	r0, #1
 800e476:	f7fb f9e3 	bl	8009840 <HAL_Delay>
  clear_fifo_flag();
 800e47a:	f7ff fd7f 	bl	800df7c <_Z15clear_fifo_flagv>
  HAL_Delay(1);
 800e47e:	2001      	movs	r0, #1
 800e480:	f7fb f9de 	bl	8009840 <HAL_Delay>

  start_capture();
 800e484:	f7ff fd82 	bl	800df8c <_Z13start_capturev>

  return 0;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <_Z11ReadCapturev>:

int ReadCapture() {
 800e48e:	b580      	push	{r7, lr}
 800e490:	af00      	add	r7, sp, #0

  while (!camReadRegBit(ARDUCHIP_TRIG, CAP_DONE_MASK)) {
 800e492:	2108      	movs	r1, #8
 800e494:	2041      	movs	r0, #65	; 0x41
 800e496:	f000 fa8d 	bl	800e9b4 <_Z13camReadRegBithh>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	bf0c      	ite	eq
 800e4a0:	2301      	moveq	r3, #1
 800e4a2:	2300      	movne	r3, #0
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d000      	beq.n	800e4ac <_Z11ReadCapturev+0x1e>
 800e4aa:	e7f2      	b.n	800e492 <_Z11ReadCapturev+0x4>
  }

  clear_fifo_flag();
 800e4ac:	f7ff fd66 	bl	800df7c <_Z15clear_fifo_flagv>
  read_fifo_burst();
 800e4b0:	f000 f804 	bl	800e4bc <_Z15read_fifo_burstv>

  return 0;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <_Z15read_fifo_burstv>:

uint8_t read_fifo_burst() {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
  uint32_t length = read_fifo_length();
 800e4c2:	f7ff fe15 	bl	800e0f0 <_Z16read_fifo_lengthv>
 800e4c6:	60b8      	str	r0, [r7, #8]
  if (length >= MAX_FIFO_SIZE) {
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	4a1d      	ldr	r2, [pc, #116]	; (800e540 <_Z15read_fifo_burstv+0x84>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d901      	bls.n	800e4d4 <_Z15read_fifo_burstv+0x18>

    return 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e031      	b.n	800e538 <_Z15read_fifo_burstv+0x7c>
  }
  if (length == 0) {
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <_Z15read_fifo_burstv+0x22>

    return 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e02c      	b.n	800e538 <_Z15read_fifo_burstv+0x7c>
  }
  ARDUCAM_CS_LOW;
 800e4de:	2200      	movs	r2, #0
 800e4e0:	2101      	movs	r1, #1
 800e4e2:	4818      	ldr	r0, [pc, #96]	; (800e544 <_Z15read_fifo_burstv+0x88>)
 800e4e4:	f7fc fb92 	bl	800ac0c <HAL_GPIO_WritePin>
  volatile uint8_t burst = camTransfer(BURST_FIFO_READ);
 800e4e8:	203c      	movs	r0, #60	; 0x3c
 800e4ea:	f000 f9f7 	bl	800e8dc <_Z11camTransferh>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	71fb      	strb	r3, [r7, #7]
  int index;

  camTransfers(imgBuf, length);
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	4814      	ldr	r0, [pc, #80]	; (800e548 <_Z15read_fifo_burstv+0x8c>)
 800e4f6:	f000 fa07 	bl	800e908 <_Z12camTransfersPhm>

  for (index = length - 1; index >= 0; index--) {
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	db0a      	blt.n	800e51c <_Z15read_fifo_burstv+0x60>
    if (imgBuf[index] != 0) {
 800e506:	4a10      	ldr	r2, [pc, #64]	; (800e548 <_Z15read_fifo_burstv+0x8c>)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	4413      	add	r3, r2
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d103      	bne.n	800e51a <_Z15read_fifo_burstv+0x5e>
  for (index = length - 1; index >= 0; index--) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	3b01      	subs	r3, #1
 800e516:	60fb      	str	r3, [r7, #12]
 800e518:	e7f2      	b.n	800e500 <_Z15read_fifo_burstv+0x44>
      break;
 800e51a:	bf00      	nop
    }
  }

  imgLength = index + 1;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3301      	adds	r3, #1
 800e520:	461a      	mov	r2, r3
 800e522:	4b0a      	ldr	r3, [pc, #40]	; (800e54c <_Z15read_fifo_burstv+0x90>)
 800e524:	601a      	str	r2, [r3, #0]

  ARDUCAM_CS_HIGH;
 800e526:	2201      	movs	r2, #1
 800e528:	2101      	movs	r1, #1
 800e52a:	4806      	ldr	r0, [pc, #24]	; (800e544 <_Z15read_fifo_burstv+0x88>)
 800e52c:	f7fc fb6e 	bl	800ac0c <HAL_GPIO_WritePin>

  is_header = false;
 800e530:	4b07      	ldr	r3, [pc, #28]	; (800e550 <_Z15read_fifo_burstv+0x94>)
 800e532:	2200      	movs	r2, #0
 800e534:	701a      	strb	r2, [r3, #0]
  return 1;
 800e536:	2301      	movs	r3, #1
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	0005fffe 	.word	0x0005fffe
 800e544:	40022000 	.word	0x40022000
 800e548:	20000cd4 	.word	0x20000cd4
 800e54c:	200020d4 	.word	0x200020d4
 800e550:	200020d8 	.word	0x200020d8

0800e554 <_Z11camI2CSetupv>:
  while (cycleCount--)
    ;
}

static I2C_HandleTypeDef I2cHandle;
int camI2CSetup() {
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
  int error = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	607b      	str	r3, [r7, #4]

  I2cHandle.Instance = I2Cx;
 800e55e:	4b1a      	ldr	r3, [pc, #104]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e560:	4a1a      	ldr	r2, [pc, #104]	; (800e5cc <_Z11camI2CSetupv+0x78>)
 800e562:	601a      	str	r2, [r3, #0]
  I2cHandle.Init.Timing = I2C_TIMING;
 800e564:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e566:	4a1a      	ldr	r2, [pc, #104]	; (800e5d0 <_Z11camI2CSetupv+0x7c>)
 800e568:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.OwnAddress1 = I2C_ADDRESS;
 800e56a:	4b17      	ldr	r3, [pc, #92]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e56c:	220f      	movs	r2, #15
 800e56e:	609a      	str	r2, [r3, #8]
  I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e570:	4b15      	ldr	r3, [pc, #84]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e572:	2201      	movs	r2, #1
 800e574:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e576:	4b14      	ldr	r3, [pc, #80]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e578:	2200      	movs	r2, #0
 800e57a:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.OwnAddress2 = 0xFF;
 800e57c:	4b12      	ldr	r3, [pc, #72]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e57e:	22ff      	movs	r2, #255	; 0xff
 800e580:	615a      	str	r2, [r3, #20]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e582:	4b11      	ldr	r3, [pc, #68]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e584:	2200      	movs	r2, #0
 800e586:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e588:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&I2cHandle) != HAL_OK) {
 800e58e:	480e      	ldr	r0, [pc, #56]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e590:	f7fc fb56 	bl	800ac40 <HAL_I2C_Init>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	bf14      	ite	ne
 800e59a:	2301      	movne	r3, #1
 800e59c:	2300      	moveq	r3, #0
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <_Z11camI2CSetupv+0x56>

    error++;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	607b      	str	r3, [r7, #4]
  }

  HAL_I2CEx_ConfigAnalogFilter(&I2cHandle, I2C_ANALOGFILTER_ENABLE);
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	4806      	ldr	r0, [pc, #24]	; (800e5c8 <_Z11camI2CSetupv+0x74>)
 800e5ae:	f7fc ffab 	bl	800b508 <HAL_I2CEx_ConfigAnalogFilter>

  error += camI2CErrorTest();
 800e5b2:	f000 f80f 	bl	800e5d4 <_Z15camI2CErrorTestv>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	607b      	str	r3, [r7, #4]
  return error;
 800e5be:	687b      	ldr	r3, [r7, #4]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	200020dc 	.word	0x200020dc
 800e5cc:	40005400 	.word	0x40005400
 800e5d0:	40912732 	.word	0x40912732

0800e5d4 <_Z15camI2CErrorTestv>:

int camI2CErrorTest() {
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
  int error = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	607b      	str	r3, [r7, #4]
  uint8_t vid, pid;

  wrSensorReg8_8(0xff, 0x01);
 800e5de:	2101      	movs	r1, #1
 800e5e0:	20ff      	movs	r0, #255	; 0xff
 800e5e2:	f000 f81b 	bl	800e61c <_Z14wrSensorReg8_8hh>
  rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid);
 800e5e6:	1cfb      	adds	r3, r7, #3
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	200a      	movs	r0, #10
 800e5ec:	f000 f866 	bl	800e6bc <_Z14rdSensorReg8_8hPh>
  rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);
 800e5f0:	1cbb      	adds	r3, r7, #2
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	200b      	movs	r0, #11
 800e5f6:	f000 f861 	bl	800e6bc <_Z14rdSensorReg8_8hPh>
  if ((vid != 0x26) && ((pid != 0x41) || (pid != 0x42))) {
 800e5fa:	78fb      	ldrb	r3, [r7, #3]
 800e5fc:	2b26      	cmp	r3, #38	; 0x26
 800e5fe:	d008      	beq.n	800e612 <_Z15camI2CErrorTestv+0x3e>
 800e600:	78bb      	ldrb	r3, [r7, #2]
 800e602:	2b41      	cmp	r3, #65	; 0x41
 800e604:	d102      	bne.n	800e60c <_Z15camI2CErrorTestv+0x38>
 800e606:	78bb      	ldrb	r3, [r7, #2]
 800e608:	2b42      	cmp	r3, #66	; 0x42
 800e60a:	d002      	beq.n	800e612 <_Z15camI2CErrorTestv+0x3e>
    error++;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3301      	adds	r3, #1
 800e610:	607b      	str	r3, [r7, #4]
  }

  return error;
 800e612:	687b      	ldr	r3, [r7, #4]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <_Z14wrSensorReg8_8hh>:

  return true;
}

#define TEST
int wrSensorReg8_8(uint8_t regID, uint8_t regDat) {
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af02      	add	r7, sp, #8
 800e622:	4603      	mov	r3, r0
 800e624:	460a      	mov	r2, r1
 800e626:	71fb      	strb	r3, [r7, #7]
 800e628:	4613      	mov	r3, r2
 800e62a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buffer[2];
  tx_buffer[0] = regID & 0xFF;
 800e62c:	79fb      	ldrb	r3, [r7, #7]
 800e62e:	733b      	strb	r3, [r7, #12]
  tx_buffer[1] = regDat & 0xFF;
 800e630:	79bb      	ldrb	r3, [r7, #6]
 800e632:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, (uint8_t *)tx_buffer,
 800e634:	f107 020c 	add.w	r2, r7, #12
 800e638:	230a      	movs	r3, #10
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	2302      	movs	r3, #2
 800e63e:	2160      	movs	r1, #96	; 0x60
 800e640:	4805      	ldr	r0, [pc, #20]	; (800e658 <_Z14wrSensorReg8_8hh+0x3c>)
 800e642:	f7fc fb8d 	bl	800ad60 <HAL_I2C_Master_Transmit>
                          sizeof(tx_buffer), SSCB_TIMEOUT);

  HAL_Delay(1);
 800e646:	2001      	movs	r0, #1
 800e648:	f7fb f8fa 	bl	8009840 <HAL_Delay>

  return 1;
 800e64c:	2301      	movs	r3, #1
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	200020dc 	.word	0x200020dc

0800e65c <_Z15wrSensorRegs8_8PK10sensor_reg>:

int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  const struct sensor_reg *next = reglist;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	60fb      	str	r3, [r7, #12]
  uint8_t reg_addr = 0;
 800e668:	2300      	movs	r3, #0
 800e66a:	72fb      	strb	r3, [r7, #11]
  uint8_t reg_val = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	72bb      	strb	r3, [r7, #10]
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 800e670:	7afb      	ldrb	r3, [r7, #11]
 800e672:	2bff      	cmp	r3, #255	; 0xff
 800e674:	bf0c      	ite	eq
 800e676:	2301      	moveq	r3, #1
 800e678:	2300      	movne	r3, #0
 800e67a:	b2da      	uxtb	r2, r3
 800e67c:	7abb      	ldrb	r3, [r7, #10]
 800e67e:	2bff      	cmp	r3, #255	; 0xff
 800e680:	bf0c      	ite	eq
 800e682:	2301      	moveq	r3, #1
 800e684:	2300      	movne	r3, #0
 800e686:	b2db      	uxtb	r3, r3
 800e688:	4013      	ands	r3, r2
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d10f      	bne.n	800e6b0 <_Z15wrSensorRegs8_8PK10sensor_reg+0x54>
    reg_addr = next->reg;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	72fb      	strb	r3, [r7, #11]
    reg_val = next->val;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	72bb      	strb	r3, [r7, #10]
    wrSensorReg8_8(reg_addr, reg_val);
 800e69c:	7aba      	ldrb	r2, [r7, #10]
 800e69e:	7afb      	ldrb	r3, [r7, #11]
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff ffba 	bl	800e61c <_Z14wrSensorReg8_8hh>
    next++;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3302      	adds	r3, #2
 800e6ac:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff)) {
 800e6ae:	e7df      	b.n	800e670 <_Z15wrSensorRegs8_8PK10sensor_reg+0x14>
  }

  return 1;
 800e6b0:	2301      	movs	r3, #1
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
	...

0800e6bc <_Z14rdSensorReg8_8hPh>:

int rdSensorReg8_8(uint8_t regID, uint8_t *regDat) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af02      	add	r7, sp, #8
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	6039      	str	r1, [r7, #0]
 800e6c6:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 800e6c8:	1dfa      	adds	r2, r7, #7
 800e6ca:	230a      	movs	r3, #10
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	2160      	movs	r1, #96	; 0x60
 800e6d2:	4815      	ldr	r0, [pc, #84]	; (800e728 <_Z14rdSensorReg8_8hPh+0x6c>)
 800e6d4:	f7fc fb44 	bl	800ad60 <HAL_I2C_Master_Transmit>
 800e6d8:	4603      	mov	r3, r0
                              SSCB_TIMEOUT) != HAL_OK)
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bf14      	ite	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	2300      	moveq	r3, #0
 800e6e2:	b2db      	uxtb	r3, r3
  if (HAL_I2C_Master_Transmit(&I2cHandle, CAM_WRITE_ADDRESS, &regID, 1,
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <_Z14rdSensorReg8_8hPh+0x30>
    return false;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	e018      	b.n	800e71e <_Z14rdSensorReg8_8hPh+0x62>

  HAL_Delay(1);
 800e6ec:	2001      	movs	r0, #1
 800e6ee:	f7fb f8a7 	bl	8009840 <HAL_Delay>

  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800e6f2:	230a      	movs	r3, #10
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	683a      	ldr	r2, [r7, #0]
 800e6fa:	2161      	movs	r1, #97	; 0x61
 800e6fc:	480a      	ldr	r0, [pc, #40]	; (800e728 <_Z14rdSensorReg8_8hPh+0x6c>)
 800e6fe:	f7fc fc2f 	bl	800af60 <HAL_I2C_Master_Receive>
 800e702:	4603      	mov	r3, r0
                             SSCB_TIMEOUT) != HAL_OK)
 800e704:	2b00      	cmp	r3, #0
 800e706:	bf14      	ite	ne
 800e708:	2301      	movne	r3, #1
 800e70a:	2300      	moveq	r3, #0
 800e70c:	b2db      	uxtb	r3, r3
  if (HAL_I2C_Master_Receive(&I2cHandle, CAM_READ_ADDRESS, (uint8_t *)regDat, 1,
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <_Z14rdSensorReg8_8hPh+0x5a>
    return false;
 800e712:	2300      	movs	r3, #0
 800e714:	e003      	b.n	800e71e <_Z14rdSensorReg8_8hPh+0x62>

  HAL_Delay(1);
 800e716:	2001      	movs	r0, #1
 800e718:	f7fb f892 	bl	8009840 <HAL_Delay>
  return 1;
 800e71c:	2301      	movs	r3, #1
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	200020dc 	.word	0x200020dc

0800e72c <_Z11camSPISetupv>:
  temp = temp & bit;
  return temp;
}

static SPI_HandleTypeDef SpiHandle;
int camSPISetup() {
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
  int error = 0;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]

  SpiHandle.Instance = SPIx;
 800e736:	4b27      	ldr	r3, [pc, #156]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e738:	4a27      	ldr	r2, [pc, #156]	; (800e7d8 <_Z11camSPISetupv+0xac>)
 800e73a:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800e73c:	4b25      	ldr	r3, [pc, #148]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e73e:	2210      	movs	r2, #16
 800e740:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800e742:	4b24      	ldr	r3, [pc, #144]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e744:	2200      	movs	r2, #0
 800e746:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e748:	4b22      	ldr	r3, [pc, #136]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e74a:	2200      	movs	r2, #0
 800e74c:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e74e:	4b21      	ldr	r3, [pc, #132]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e750:	2200      	movs	r2, #0
 800e752:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800e754:	4b1f      	ldr	r3, [pc, #124]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800e75a:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e75c:	4b1d      	ldr	r3, [pc, #116]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e75e:	2200      	movs	r2, #0
 800e760:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800e762:	4b1c      	ldr	r3, [pc, #112]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e764:	2200      	movs	r2, #0
 800e766:	625a      	str	r2, [r3, #36]	; 0x24
  SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e768:	4b1a      	ldr	r3, [pc, #104]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e76a:	2200      	movs	r2, #0
 800e76c:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial = 7;
 800e76e:	4b19      	ldr	r3, [pc, #100]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e770:	2207      	movs	r2, #7
 800e772:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800e774:	4b17      	ldr	r3, [pc, #92]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e77a:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800e77c:	4b15      	ldr	r3, [pc, #84]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e77e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e782:	605a      	str	r2, [r3, #4]

  if (HAL_SPI_Init(&SpiHandle) != HAL_OK) {
 800e784:	4813      	ldr	r0, [pc, #76]	; (800e7d4 <_Z11camSPISetupv+0xa8>)
 800e786:	f7fe fada 	bl	800cd3e <HAL_SPI_Init>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bf14      	ite	ne
 800e790:	2301      	movne	r3, #1
 800e792:	2300      	moveq	r3, #0
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <_Z11camSPISetupv+0x74>

    error++;
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	3301      	adds	r3, #1
 800e79e:	617b      	str	r3, [r7, #20]
  }

  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e7b0:	463b      	mov	r3, r7
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4809      	ldr	r0, [pc, #36]	; (800e7dc <_Z11camSPISetupv+0xb0>)
 800e7b6:	f7fc f867 	bl	800a888 <HAL_GPIO_Init>

  camSPIReset();
 800e7ba:	f000 f841 	bl	800e840 <_Z11camSPIResetv>
  error += camSPIErrorTest();
 800e7be:	f000 f80f 	bl	800e7e0 <_Z15camSPIErrorTestv>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	617b      	str	r3, [r7, #20]
  return error;
 800e7ca:	697b      	ldr	r3, [r7, #20]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	20002128 	.word	0x20002128
 800e7d8:	40003800 	.word	0x40003800
 800e7dc:	40022000 	.word	0x40022000

0800e7e0 <_Z15camSPIErrorTestv>:

int camSPIErrorTest() {
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
  uint8_t val = 0x55;
 800e7e6:	2355      	movs	r3, #85	; 0x55
 800e7e8:	73fb      	strb	r3, [r7, #15]
  volatile uint8_t rval;
  int error = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < 10; i++) {
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	607b      	str	r3, [r7, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b09      	cmp	r3, #9
 800e7f6:	dc1d      	bgt.n	800e834 <_Z15camSPIErrorTestv+0x54>
    val++;
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	73fb      	strb	r3, [r7, #15]
    camWriteReg(0x00, val);
 800e7fe:	7bfb      	ldrb	r3, [r7, #15]
 800e800:	4619      	mov	r1, r3
 800e802:	2000      	movs	r0, #0
 800e804:	f000 f83e 	bl	800e884 <_Z11camWriteReghh>
    rval = camReadReg(0x00);
 800e808:	2000      	movs	r0, #0
 800e80a:	f000 f8ad 	bl	800e968 <_Z10camReadRegh>
 800e80e:	4603      	mov	r3, r0
 800e810:	70fb      	strb	r3, [r7, #3]
    if (rval != val)
 800e812:	78fb      	ldrb	r3, [r7, #3]
 800e814:	b2db      	uxtb	r3, r3
 800e816:	7bfa      	ldrb	r2, [r7, #15]
 800e818:	429a      	cmp	r2, r3
 800e81a:	bf14      	ite	ne
 800e81c:	2301      	movne	r3, #1
 800e81e:	2300      	moveq	r3, #0
 800e820:	b2db      	uxtb	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d002      	beq.n	800e82c <_Z15camSPIErrorTestv+0x4c>
      error++;
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	3301      	adds	r3, #1
 800e82a:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < 10; i++) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	3301      	adds	r3, #1
 800e830:	607b      	str	r3, [r7, #4]
 800e832:	e7de      	b.n	800e7f2 <_Z15camSPIErrorTestv+0x12>
  }

  return error;
 800e834:	68bb      	ldr	r3, [r7, #8]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
	...

0800e840 <_Z11camSPIResetv>:

void camSPIReset() {
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
  uint8_t cmd1[2] = {0x07, 0x80};
 800e846:	4b0e      	ldr	r3, [pc, #56]	; (800e880 <_Z11camSPIResetv+0x40>)
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	80bb      	strh	r3, [r7, #4]
  uint8_t cmd2[2] = {0x07, 0x00};
 800e84c:	2307      	movs	r3, #7
 800e84e:	703b      	strb	r3, [r7, #0]
 800e850:	2300      	movs	r3, #0
 800e852:	707b      	strb	r3, [r7, #1]

  camWriteReg(cmd1[0], cmd1[1]);
 800e854:	793b      	ldrb	r3, [r7, #4]
 800e856:	797a      	ldrb	r2, [r7, #5]
 800e858:	4611      	mov	r1, r2
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 f812 	bl	800e884 <_Z11camWriteReghh>
  HAL_Delay(100);
 800e860:	2064      	movs	r0, #100	; 0x64
 800e862:	f7fa ffed 	bl	8009840 <HAL_Delay>
  camWriteReg(cmd2[0], cmd2[1]);
 800e866:	783b      	ldrb	r3, [r7, #0]
 800e868:	787a      	ldrb	r2, [r7, #1]
 800e86a:	4611      	mov	r1, r2
 800e86c:	4618      	mov	r0, r3
 800e86e:	f000 f809 	bl	800e884 <_Z11camWriteReghh>
  HAL_Delay(100);
 800e872:	2064      	movs	r0, #100	; 0x64
 800e874:	f7fa ffe4 	bl	8009840 <HAL_Delay>
}
 800e878:	bf00      	nop
 800e87a:	3708      	adds	r7, #8
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	08018300 	.word	0x08018300

0800e884 <_Z11camWriteReghh>:

void camWriteReg(const uint8_t reg, const uint8_t val) {
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	460a      	mov	r2, r1
 800e88e:	71fb      	strb	r3, [r7, #7]
 800e890:	4613      	mov	r3, r2
 800e892:	71bb      	strb	r3, [r7, #6]
  uint8_t buff[2] = {reg | 0x80, val};
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	733b      	strb	r3, [r7, #12]
 800e89e:	79bb      	ldrb	r3, [r7, #6]
 800e8a0:	737b      	strb	r3, [r7, #13]
  ARDUCAM_CS_LOW;
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	2101      	movs	r1, #1
 800e8a6:	480b      	ldr	r0, [pc, #44]	; (800e8d4 <_Z11camWriteReghh+0x50>)
 800e8a8:	f7fc f9b0 	bl	800ac0c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&buff, 2, 100);
 800e8ac:	f107 010c 	add.w	r1, r7, #12
 800e8b0:	2364      	movs	r3, #100	; 0x64
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	4808      	ldr	r0, [pc, #32]	; (800e8d8 <_Z11camWriteReghh+0x54>)
 800e8b6:	f7fe fad9 	bl	800ce6c <HAL_SPI_Transmit>
  ARDUCAM_CS_HIGH;
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	2101      	movs	r1, #1
 800e8be:	4805      	ldr	r0, [pc, #20]	; (800e8d4 <_Z11camWriteReghh+0x50>)
 800e8c0:	f7fc f9a4 	bl	800ac0c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	f7fa ffbb 	bl	8009840 <HAL_Delay>
}
 800e8ca:	bf00      	nop
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	40022000 	.word	0x40022000
 800e8d8:	20002128 	.word	0x20002128

0800e8dc <_Z11camTransferh>:

uint8_t camTransfer(const uint8_t val) {
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b086      	sub	sp, #24
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&val, (uint8_t *)&ret, 1, 100);
 800e8e6:	f107 020f 	add.w	r2, r7, #15
 800e8ea:	1df9      	adds	r1, r7, #7
 800e8ec:	2364      	movs	r3, #100	; 0x64
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	4804      	ldr	r0, [pc, #16]	; (800e904 <_Z11camTransferh+0x28>)
 800e8f4:	f7fe fbe6 	bl	800d0c4 <HAL_SPI_TransmitReceive>

  return ret;
 800e8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	20002128 	.word	0x20002128

0800e908 <_Z12camTransfersPhm>:
#define DummyLength 8096
#define DummyVal 0x00
uint8_t dummy[DummyLength];
static int dummyinit = 0;

uint8_t camTransfers(uint8_t *buf, const uint32_t length) {
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  if (!dummyinit) {
 800e912:	4b12      	ldr	r3, [pc, #72]	; (800e95c <_Z12camTransfersPhm+0x54>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d111      	bne.n	800e93e <_Z12camTransfersPhm+0x36>
    for (int i = 0; i < DummyLength; i++)
 800e91a:	2300      	movs	r3, #0
 800e91c:	60fb      	str	r3, [r7, #12]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f5b3 5ffd 	cmp.w	r3, #8096	; 0x1fa0
 800e924:	da08      	bge.n	800e938 <_Z12camTransfersPhm+0x30>
      dummy[i] = DummyVal;
 800e926:	4a0e      	ldr	r2, [pc, #56]	; (800e960 <_Z12camTransfersPhm+0x58>)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	4413      	add	r3, r2
 800e92c:	2200      	movs	r2, #0
 800e92e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DummyLength; i++)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	3301      	adds	r3, #1
 800e934:	60fb      	str	r3, [r7, #12]
 800e936:	e7f2      	b.n	800e91e <_Z12camTransfersPhm+0x16>
    dummyinit = 1;
 800e938:	4b08      	ldr	r3, [pc, #32]	; (800e95c <_Z12camTransfersPhm+0x54>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	601a      	str	r2, [r3, #0]
  }
  uint8_t ret;
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)dummy, (uint8_t *)buf, length,
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	b29a      	uxth	r2, r3
 800e942:	2364      	movs	r3, #100	; 0x64
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	4613      	mov	r3, r2
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	4905      	ldr	r1, [pc, #20]	; (800e960 <_Z12camTransfersPhm+0x58>)
 800e94c:	4805      	ldr	r0, [pc, #20]	; (800e964 <_Z12camTransfersPhm+0x5c>)
 800e94e:	f7fe fbb9 	bl	800d0c4 <HAL_SPI_TransmitReceive>
                          100);

  return ret;
 800e952:	7afb      	ldrb	r3, [r7, #11]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	2000412c 	.word	0x2000412c
 800e960:	2000218c 	.word	0x2000218c
 800e964:	20002128 	.word	0x20002128

0800e968 <_Z10camReadRegh>:

uint8_t camReadReg(const uint8_t reg) {
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af02      	add	r7, sp, #8
 800e96e:	4603      	mov	r3, r0
 800e970:	71fb      	strb	r3, [r7, #7]
  uint8_t buff[2] = {reg, 0x00};
 800e972:	2300      	movs	r3, #0
 800e974:	81bb      	strh	r3, [r7, #12]
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	733b      	strb	r3, [r7, #12]
  uint8_t rbuff[2];
  ARDUCAM_CS_LOW;
 800e97a:	2200      	movs	r2, #0
 800e97c:	2101      	movs	r1, #1
 800e97e:	480b      	ldr	r0, [pc, #44]	; (800e9ac <_Z10camReadRegh+0x44>)
 800e980:	f7fc f944 	bl	800ac0c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *)&buff, (uint8_t *)&rbuff, 2,
 800e984:	f107 0208 	add.w	r2, r7, #8
 800e988:	f107 010c 	add.w	r1, r7, #12
 800e98c:	2364      	movs	r3, #100	; 0x64
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	2302      	movs	r3, #2
 800e992:	4807      	ldr	r0, [pc, #28]	; (800e9b0 <_Z10camReadRegh+0x48>)
 800e994:	f7fe fb96 	bl	800d0c4 <HAL_SPI_TransmitReceive>
                          100);
  ARDUCAM_CS_HIGH;
 800e998:	2201      	movs	r2, #1
 800e99a:	2101      	movs	r1, #1
 800e99c:	4803      	ldr	r0, [pc, #12]	; (800e9ac <_Z10camReadRegh+0x44>)
 800e99e:	f7fc f935 	bl	800ac0c <HAL_GPIO_WritePin>

  return rbuff[1];
 800e9a2:	7a7b      	ldrb	r3, [r7, #9]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	40022000 	.word	0x40022000
 800e9b0:	20002128 	.word	0x20002128

0800e9b4 <_Z13camReadRegBithh>:

uint8_t camReadRegBit(uint8_t addr, uint8_t bit) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	460a      	mov	r2, r1
 800e9be:	71fb      	strb	r3, [r7, #7]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	71bb      	strb	r3, [r7, #6]
  uint8_t temp;
  temp = camReadReg(addr);
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff ffce 	bl	800e968 <_Z10camReadRegh>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	73fb      	strb	r3, [r7, #15]
  temp = temp & bit;
 800e9d0:	7bfa      	ldrb	r2, [r7, #15]
 800e9d2:	79bb      	ldrb	r3, [r7, #6]
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	73fb      	strb	r3, [r7, #15]
  return temp;
 800e9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b08a      	sub	sp, #40	; 0x28
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	60f8      	str	r0, [r7, #12]
 800e9ea:	60b9      	str	r1, [r7, #8]
 800e9ec:	607a      	str	r2, [r7, #4]
 800e9ee:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < height; i++) {
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d952      	bls.n	800eaa2 <_Z13loadRGB565LCDmmmmPth+0xc0>
    for (int j = 0; j < width; j++) {
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	623b      	str	r3, [r7, #32]
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d948      	bls.n	800ea9a <_Z13loadRGB565LCDmmmmPth+0xb8>

      uint16_t color = src[i * width + j];
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	fb02 f203 	mul.w	r2, r2, r3
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	4413      	add	r3, r2
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea18:	4413      	add	r3, r2
 800ea1a:	881b      	ldrh	r3, [r3, #0]
 800ea1c:	82fb      	strh	r3, [r7, #22]

      for (int ti = 0; ti < resize; ti++) {
 800ea1e:	2300      	movs	r3, #0
 800ea20:	61fb      	str	r3, [r7, #28]
 800ea22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ea26:	69fa      	ldr	r2, [r7, #28]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	da32      	bge.n	800ea92 <_Z13loadRGB565LCDmmmmPth+0xb0>
        for (int tj = 0; tj < resize; tj++) {
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	61bb      	str	r3, [r7, #24]
 800ea30:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ea34:	69ba      	ldr	r2, [r7, #24]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	da27      	bge.n	800ea8a <_Z13loadRGB565LCDmmmmPth+0xa8>
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800ea3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	6a3b      	ldr	r3, [r7, #32]
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	fb12 f303 	smulbb	r3, r2, r3
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	4413      	add	r3, r2
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	4413      	add	r3, r2
 800ea58:	b298      	uxth	r0, r3
 800ea5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	fb12 f303 	smulbb	r3, r2, r3
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	4413      	add	r3, r2
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	4413      	add	r3, r2
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	8afa      	ldrh	r2, [r7, #22]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f7fa fa55 	bl	8008f2c <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	3301      	adds	r3, #1
 800ea86:	61bb      	str	r3, [r7, #24]
 800ea88:	e7d2      	b.n	800ea30 <_Z13loadRGB565LCDmmmmPth+0x4e>
      for (int ti = 0; ti < resize; ti++) {
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	61fb      	str	r3, [r7, #28]
 800ea90:	e7c7      	b.n	800ea22 <_Z13loadRGB565LCDmmmmPth+0x40>
    for (int j = 0; j < width; j++) {
 800ea92:	6a3b      	ldr	r3, [r7, #32]
 800ea94:	3301      	adds	r3, #1
 800ea96:	623b      	str	r3, [r7, #32]
 800ea98:	e7b2      	b.n	800ea00 <_Z13loadRGB565LCDmmmmPth+0x1e>
  for (int i = 0; i < height; i++) {
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	627b      	str	r3, [r7, #36]	; 0x24
 800eaa0:	e7a8      	b.n	800e9f4 <_Z13loadRGB565LCDmmmmPth+0x12>
        }
      }
    }
  }
}
 800eaa2:	bf00      	nop
 800eaa4:	3728      	adds	r7, #40	; 0x28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <_Z19drawBlackBackgroundiiii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, blue);
    }
}

void drawBlackBackground(int x1, int x2, int y1, int y2) {
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b088      	sub	sp, #32
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	60f8      	str	r0, [r7, #12]
 800eab2:	60b9      	str	r1, [r7, #8]
 800eab4:	607a      	str	r2, [r7, #4]
 800eab6:	603b      	str	r3, [r7, #0]
  uint16_t black = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	82fb      	strh	r3, [r7, #22]

  for (int i = x1 - 1; i < x2; i++)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3b01      	subs	r3, #1
 800eac0:	61fb      	str	r3, [r7, #28]
 800eac2:	69fa      	ldr	r2, [r7, #28]
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	da16      	bge.n	800eaf8 <_Z19drawBlackBackgroundiiii+0x4e>
    for (int j = y1 - 1; j < y2; j++) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	3b01      	subs	r3, #1
 800eace:	61bb      	str	r3, [r7, #24]
 800ead0:	69ba      	ldr	r2, [r7, #24]
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	da0b      	bge.n	800eaf0 <_Z19drawBlackBackgroundiiii+0x46>
      BSP_LCD_DrawPixel(i, j, black);
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	b29b      	uxth	r3, r3
 800eadc:	69ba      	ldr	r2, [r7, #24]
 800eade:	b291      	uxth	r1, r2
 800eae0:	8afa      	ldrh	r2, [r7, #22]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fa fa22 	bl	8008f2c <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	3301      	adds	r3, #1
 800eaec:	61bb      	str	r3, [r7, #24]
 800eaee:	e7ef      	b.n	800ead0 <_Z19drawBlackBackgroundiiii+0x26>
  for (int i = x1 - 1; i < x2; i++)
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	61fb      	str	r3, [r7, #28]
 800eaf6:	e7e4      	b.n	800eac2 <_Z19drawBlackBackgroundiiii+0x18>
    }
}
 800eaf8:	bf00      	nop
 800eafa:	3720      	adds	r7, #32
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <_Z13displaystringPcii>:

void displaystring(char *buf, int x, int y) {
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	607a      	str	r2, [r7, #4]
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	b298      	uxth	r0, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	b299      	uxth	r1, r3
 800eb14:	2303      	movs	r3, #3
 800eb16:	68fa      	ldr	r2, [r7, #12]
 800eb18:	f7fa f944 	bl	8008da4 <BSP_LCD_DisplayStringAt>
}
 800eb1c:	bf00      	nop
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b0a3      	sub	sp, #140	; 0x8c
 800eb28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800eb2a:	2308      	movs	r3, #8
 800eb2c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800eb2e:	23c0      	movs	r3, #192	; 0xc0
 800eb30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800eb32:	2305      	movs	r3, #5
 800eb34:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800eb36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800eb3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800eb3c:	1d3b      	adds	r3, r7, #4
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fd fc86 	bl	800c450 <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 800eb44:	f7f9 ff76 	bl	8008a34 <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 800eb48:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	f7fa f809 	bl	8008b64 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 800eb52:	f7f9 ffdf 	bl	8008b14 <BSP_LCD_GetXSize>
 800eb56:	4604      	mov	r4, r0
 800eb58:	f7f9 fff0 	bl	8008b3c <BSP_LCD_GetYSize>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	fb03 f304 	mul.w	r3, r3, r4
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 800eb62:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4619      	mov	r1, r3
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	f7f9 fffa 	bl	8008b64 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 800eb70:	f7fa fa24 	bl	8008fbc <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 800eb74:	2000      	movs	r0, #0
 800eb76:	f7fa f855 	bl	8008c24 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800eb7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800eb7e:	f7fa f8a5 	bl	8008ccc <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 800eb82:	2001      	movs	r0, #1
 800eb84:	f7fa f84e 	bl	8008c24 <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800eb88:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800eb8c:	f7fa f89e 	bl	8008ccc <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 800eb90:	2100      	movs	r1, #0
 800eb92:	2000      	movs	r0, #0
 800eb94:	f7fa f856 	bl	8008c44 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 800eb98:	2164      	movs	r1, #100	; 0x64
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	f7fa f852 	bl	8008c44 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800eba0:	4803      	ldr	r0, [pc, #12]	; (800ebb0 <_Z8lcdsetupv+0x8c>)
 800eba2:	f7fa f861 	bl	8008c68 <BSP_LCD_SetTextColor>
}
 800eba6:	bf00      	nop
 800eba8:	378c      	adds	r7, #140	; 0x8c
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd90      	pop	{r4, r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	ff0000ff 	.word	0xff0000ff

0800ebb4 <_Z16SaveFrameToFlashmPtm>:
    out_int8[i] = output[i];
}

// this function save the fames to flash
void SaveFrameToFlash(uint32_t flashAddr, uint16_t *frame, uint32_t length)
{
 800ebb4:	b590      	push	{r4, r7, lr}
 800ebb6:	b08b      	sub	sp, #44	; 0x2c
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 800ebc0:	f7fb fc2e 	bl	800a420 <HAL_FLASH_Unlock>

    // Erase sector before writing
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	617b      	str	r3, [r7, #20]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ebc8:	2302      	movs	r3, #2
 800ebca:	623b      	str	r3, [r7, #32]
    EraseInitStruct.Sector = FLASH_SECTOR_5; // depends on your memory map
 800ebcc:	2305      	movs	r3, #5
 800ebce:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 800ebd4:	f107 0210 	add.w	r2, r7, #16
 800ebd8:	f107 0314 	add.w	r3, r7, #20
 800ebdc:	4611      	mov	r1, r2
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fb fd78 	bl	800a6d4 <HAL_FLASHEx_Erase>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
        // error handling
    }

    // Write halfwords (16 bits)
    for (uint32_t i = 0; i < length; i++) {
 800ebe8:	2300      	movs	r3, #0
 800ebea:	627b      	str	r3, [r7, #36]	; 0x24
 800ebec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d216      	bcs.n	800ec22 <_Z16SaveFrameToFlashmPtm+0x6e>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
                              flashAddr + i*2,
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	005a      	lsls	r2, r3, #1
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	18d1      	adds	r1, r2, r3
                              frame[i]) != HAL_OK) {
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfe:	005b      	lsls	r3, r3, #1
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	4413      	add	r3, r2
 800ec04:	881b      	ldrh	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	f04f 0400 	mov.w	r4, #0
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	4623      	mov	r3, r4
 800ec10:	2001      	movs	r0, #1
 800ec12:	f7fb fba9 	bl	800a368 <HAL_FLASH_Program>
 800ec16:	4603      	mov	r3, r0
                              frame[i]) != HAL_OK) {
 800ec18:	2b00      	cmp	r3, #0
    for (uint32_t i = 0; i < length; i++) {
 800ec1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec20:	e7e4      	b.n	800ebec <_Z16SaveFrameToFlashmPtm+0x38>
            // error handling
        }
    }

    HAL_FLASH_Lock();
 800ec22:	f7fb fc1f 	bl	800a464 <HAL_FLASH_Lock>
}
 800ec26:	bf00      	nop
 800ec28:	372c      	adds	r7, #44	; 0x2c
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd90      	pop	{r4, r7, pc}
	...

0800ec30 <main>:
#define RES_H 120

// global pointer to
uint16_t *RGBbuf;

int main(void) {
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b0dc      	sub	sp, #368	; 0x170
 800ec34:	af02      	add	r7, sp, #8
  // reserved space, visible only inside main()
  char buf[150];
  char showbuf[150];

  // stm32f7 features init
  CPU_CACHE_Enable();
 800ec36:	f000 fa17 	bl	800f068 <_ZL16CPU_CACHE_Enablev>
  HAL_Init();
 800ec3a:	f7fa fd8d 	bl	8009758 <HAL_Init>
  SystemClock_Config();
 800ec3e:	f000 f9c5 	bl	800efcc <_ZL18SystemClock_Configv>
  MX_GPIO_Init();
 800ec42:	f000 fa87 	bl	800f154 <_ZL12MX_GPIO_Initv>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800ec46:	2100      	movs	r1, #0
 800ec48:	2002      	movs	r0, #2
 800ec4a:	f7f9 fe4d 	bl	80088e8 <BSP_PB_Init>
  lcdsetup();
 800ec4e:	f7ff ff69 	bl	800eb24 <_Z8lcdsetupv>

  // ArduCam init
  int camErr = initCamera();
 800ec52:	f7ff f9a3 	bl	800df9c <_Z10initCamerav>
 800ec56:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
  uint32_t start, end, starti, endi;
  StartCapture();
 800ec5a:	f7ff fc07 	bl	800e46c <_Z12StartCapturev>

  // input points to the address where memory for a tensor of 128 * 128 * 4 is allocated
  // RGBbuf points to the address immediately after and tells that some tensor of uint16_t will be stored there
  signed char *input = getInput();
 800ec5e:	f004 f92b 	bl	8012eb8 <getInput>
 800ec62:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
  RGBbuf = (uint16_t *)&input[128 * 128 * 4];
 800ec66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ec6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ec6e:	4ace      	ldr	r2, [pc, #824]	; (800efa8 <main+0x378>)
 800ec70:	6013      	str	r3, [r2, #0]

  // Init variables that will be useful later
  int t_mode = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  while (1) {

	// This should be repeated 10 times and images should be stored in flash to be used for training

	//  After these lines RGBbuf will contain the image captured by ArduCam
    starti = HAL_GetTick();
 800ec78:	f7fa fdd6 	bl	8009828 <HAL_GetTick>
 800ec7c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
    StartCapture();
 800ec80:	f7ff fbf4 	bl	800e46c <_Z12StartCapturev>
    ReadCapture();
 800ec84:	f7ff fc03 	bl	800e48e <_Z11ReadCapturev>
    DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800ec88:	4bc7      	ldr	r3, [pc, #796]	; (800efa8 <main+0x378>)
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	4613      	mov	r3, r2
 800ec92:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ec96:	2178      	movs	r1, #120	; 0x78
 800ec98:	2080      	movs	r0, #128	; 0x80
 800ec9a:	f7ff fa4f 	bl	800e13c <_Z22DecodeandProcessAndRGBiiPaPti>

    // This is a padding strategy (but it is to be understood better)
    // All this block of code prepare RGBbuf to be displayed on the screen and input for the neural network
    for (int i = 0; i < 128 * 8 * 3; i++) {
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800eca4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ecac:	da0f      	bge.n	800ecce <main+0x9e>
      input[120 * 128 * 3 + i] = -128;
 800ecae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ecb2:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ecbc:	4413      	add	r3, r2
 800ecbe:	2280      	movs	r2, #128	; 0x80
 800ecc0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 128 * 8 * 3; i++) {
 800ecc2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800eccc:	e7ea      	b.n	800eca4 <main+0x74>
    }
    for (int i = 0; i < RES_W; i++) {
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800ecd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ecd8:	2b7f      	cmp	r3, #127	; 0x7f
 800ecda:	dc76      	bgt.n	800edca <main+0x19a>
      for (int j = 0; j < RES_W; j++) {
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800ece2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ece6:	2b7f      	cmp	r3, #127	; 0x7f
 800ece8:	dc69      	bgt.n	800edbe <main+0x18e>
        uint8_t red = (int32_t)input[(128 * i + j) * 3] + 128;
 800ecea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ecee:	01da      	lsls	r2, r3, #7
 800ecf0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ecf4:	441a      	add	r2, r3
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	4413      	add	r3, r2
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ed02:	4413      	add	r3, r2
 800ed04:	f993 3000 	ldrsb.w	r3, [r3]
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	3b80      	subs	r3, #128	; 0x80
 800ed0c:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
        uint8_t green = (int32_t)input[(128 * i + j) * 3 + 1] + 128;
 800ed10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ed14:	01da      	lsls	r2, r3, #7
 800ed16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ed1a:	441a      	add	r2, r3
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	4413      	add	r3, r2
 800ed22:	3301      	adds	r3, #1
 800ed24:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ed28:	4413      	add	r3, r2
 800ed2a:	f993 3000 	ldrsb.w	r3, [r3]
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	3b80      	subs	r3, #128	; 0x80
 800ed32:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
        uint8_t blue = (int32_t)input[(128 * i + j) * 3 + 2] + 128;
 800ed36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ed3a:	01da      	lsls	r2, r3, #7
 800ed3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ed40:	441a      	add	r2, r3
 800ed42:	4613      	mov	r3, r2
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	4413      	add	r3, r2
 800ed48:	3302      	adds	r3, #2
 800ed4a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ed4e:	4413      	add	r3, r2
 800ed50:	f993 3000 	ldrsb.w	r3, [r3]
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	3b80      	subs	r3, #128	; 0x80
 800ed58:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149

        uint16_t b = (blue >> 3) & 0x1f;
 800ed5c:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 800ed60:	08db      	lsrs	r3, r3, #3
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
        uint16_t g = ((green >> 2) & 0x3f) << 5;
 800ed68:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 800ed6c:	089b      	lsrs	r3, r3, #2
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	015b      	lsls	r3, r3, #5
 800ed74:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
        uint16_t r = ((red >> 3) & 0x1f) << 11;
 800ed78:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800ed7c:	08db      	lsrs	r3, r3, #3
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	02db      	lsls	r3, r3, #11
 800ed84:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

        RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 800ed88:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800ed8c:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 800ed90:	4313      	orrs	r3, r2
 800ed92:	b299      	uxth	r1, r3
 800ed94:	4b84      	ldr	r3, [pc, #528]	; (800efa8 <main+0x378>)
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800ed9c:	01d8      	lsls	r0, r3, #7
 800ed9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800eda2:	4403      	add	r3, r0
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	4413      	add	r3, r2
 800eda8:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800edac:	430a      	orrs	r2, r1
 800edae:	b292      	uxth	r2, r2
 800edb0:	801a      	strh	r2, [r3, #0]
      for (int j = 0; j < RES_W; j++) {
 800edb2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800edb6:	3301      	adds	r3, #1
 800edb8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800edbc:	e791      	b.n	800ece2 <main+0xb2>
    for (int i = 0; i < RES_W; i++) {
 800edbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800edc2:	3301      	adds	r3, #1
 800edc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800edc8:	e784      	b.n	800ecd4 <main+0xa4>
      }
    }
    // This function just shows the image on display
    loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 2);
 800edca:	4b77      	ldr	r3, [pc, #476]	; (800efa8 <main+0x378>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2202      	movs	r2, #2
 800edd0:	9201      	str	r2, [sp, #4]
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	2380      	movs	r3, #128	; 0x80
 800edd6:	2280      	movs	r2, #128	; 0x80
 800edd8:	210a      	movs	r1, #10
 800edda:	200a      	movs	r0, #10
 800eddc:	f7ff fe01 	bl	800e9e2 <_Z13loadRGB565LCDmmmmPth>
    endi = HAL_GetTick();
 800ede0:	f7fa fd22 	bl	8009828 <HAL_GetTick>
 800ede4:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

    button0 = BSP_PB_GetState(BUTTON_KEY) == GPIO_PIN_SET;
 800ede8:	2002      	movs	r0, #2
 800edea:	f7f9 fe09 	bl	8008a00 <BSP_PB_GetState>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	bf0c      	ite	eq
 800edf4:	2301      	moveq	r3, #1
 800edf6:	2300      	movne	r3, #0
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    if (button0 == 1){
 800edfe:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	f47f af38 	bne.w	800ec78 <main+0x48>

    	// Reset black screen
    	drawBlackBackground(270, 481, 1, 273);
 800ee08:	f240 1311 	movw	r3, #273	; 0x111
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f240 11e1 	movw	r1, #481	; 0x1e1
 800ee12:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800ee16:	f7ff fe48 	bl	800eaaa <_Z19drawBlackBackgroundiiii>
    	// Show instruction 1
    	sprintf(showbuf, "Collect 3");
 800ee1a:	1d3b      	adds	r3, r7, #4
 800ee1c:	4a63      	ldr	r2, [pc, #396]	; (800efac <main+0x37c>)
 800ee1e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee20:	c303      	stmia	r3!, {r0, r1}
 800ee22:	801a      	strh	r2, [r3, #0]
    	displaystring(showbuf, 273, 10);
 800ee24:	1d3b      	adds	r3, r7, #4
 800ee26:	220a      	movs	r2, #10
 800ee28:	f240 1111 	movw	r1, #273	; 0x111
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fe67 	bl	800eb00 <_Z13displaystringPcii>
    	sprintf(showbuf, "frames");
 800ee32:	1d3b      	adds	r3, r7, #4
 800ee34:	4a5e      	ldr	r2, [pc, #376]	; (800efb0 <main+0x380>)
 800ee36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee3a:	6018      	str	r0, [r3, #0]
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	8019      	strh	r1, [r3, #0]
 800ee40:	3302      	adds	r3, #2
 800ee42:	0c0a      	lsrs	r2, r1, #16
 800ee44:	701a      	strb	r2, [r3, #0]
    	displaystring(showbuf, 273, 40);
 800ee46:	1d3b      	adds	r3, r7, #4
 800ee48:	2228      	movs	r2, #40	; 0x28
 800ee4a:	f240 1111 	movw	r1, #273	; 0x111
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff fe56 	bl	800eb00 <_Z13displaystringPcii>
    	//
    	sprintf(showbuf, "Frame 1");
 800ee54:	1d3b      	adds	r3, r7, #4
 800ee56:	4a57      	ldr	r2, [pc, #348]	; (800efb4 <main+0x384>)
 800ee58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee5c:	e883 0003 	stmia.w	r3, {r0, r1}
    	displaystring(showbuf, 273, 80);
 800ee60:	1d3b      	adds	r3, r7, #4
 800ee62:	2250      	movs	r2, #80	; 0x50
 800ee64:	f240 1111 	movw	r1, #273	; 0x111
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7ff fe49 	bl	800eb00 <_Z13displaystringPcii>
    	HAL_Delay(1000);
 800ee6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ee72:	f7fa fce5 	bl	8009840 <HAL_Delay>
    	StartCapture();
 800ee76:	f7ff faf9 	bl	800e46c <_Z12StartCapturev>
    	ReadCapture();
 800ee7a:	f7ff fb08 	bl	800e48e <_Z11ReadCapturev>
    	DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800ee7e:	4b4a      	ldr	r3, [pc, #296]	; (800efa8 <main+0x378>)
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	2301      	movs	r3, #1
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	4613      	mov	r3, r2
 800ee88:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ee8c:	2178      	movs	r1, #120	; 0x78
 800ee8e:	2080      	movs	r0, #128	; 0x80
 800ee90:	f7ff f954 	bl	800e13c <_Z22DecodeandProcessAndRGBiiPaPti>

    	// Save the frame to flash
    	SaveFrameToFlash(IMAGE1_ADDR, RGBbuf, RES_W * RES_W);
 800ee94:	4b44      	ldr	r3, [pc, #272]	; (800efa8 <main+0x378>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	4846      	ldr	r0, [pc, #280]	; (800efb8 <main+0x388>)
 800eea0:	f7ff fe88 	bl	800ebb4 <_Z16SaveFrameToFlashmPtm>
    	// Retrive from flash for testing
    	uint16_t* flash_frame = (uint16_t*)IMAGE1_ADDR;
 800eea4:	4b44      	ldr	r3, [pc, #272]	; (800efb8 <main+0x388>)
 800eea6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	// Show on screen for testing
    	loadRGB565LCD(10, 10, RES_W, RES_W, flash_frame, 2);
 800eeaa:	2302      	movs	r3, #2
 800eeac:	9301      	str	r3, [sp, #4]
 800eeae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	2380      	movs	r3, #128	; 0x80
 800eeb6:	2280      	movs	r2, #128	; 0x80
 800eeb8:	210a      	movs	r1, #10
 800eeba:	200a      	movs	r0, #10
 800eebc:	f7ff fd91 	bl	800e9e2 <_Z13loadRGB565LCDmmmmPth>

    	//
    	sprintf(showbuf, "Frame 2");
 800eec0:	1d3b      	adds	r3, r7, #4
 800eec2:	4a3e      	ldr	r2, [pc, #248]	; (800efbc <main+0x38c>)
 800eec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eec8:	e883 0003 	stmia.w	r3, {r0, r1}
    	displaystring(showbuf, 273, 80);
 800eecc:	1d3b      	adds	r3, r7, #4
 800eece:	2250      	movs	r2, #80	; 0x50
 800eed0:	f240 1111 	movw	r1, #273	; 0x111
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7ff fe13 	bl	800eb00 <_Z13displaystringPcii>
    	HAL_Delay(1000);
 800eeda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800eede:	f7fa fcaf 	bl	8009840 <HAL_Delay>
    	StartCapture();
 800eee2:	f7ff fac3 	bl	800e46c <_Z12StartCapturev>
    	ReadCapture();
 800eee6:	f7ff fad2 	bl	800e48e <_Z11ReadCapturev>
    	DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800eeea:	4b2f      	ldr	r3, [pc, #188]	; (800efa8 <main+0x378>)
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	2301      	movs	r3, #1
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	4613      	mov	r3, r2
 800eef4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800eef8:	2178      	movs	r1, #120	; 0x78
 800eefa:	2080      	movs	r0, #128	; 0x80
 800eefc:	f7ff f91e 	bl	800e13c <_Z22DecodeandProcessAndRGBiiPaPti>
    	loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 2);
 800ef00:	4b29      	ldr	r3, [pc, #164]	; (800efa8 <main+0x378>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2202      	movs	r2, #2
 800ef06:	9201      	str	r2, [sp, #4]
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	2380      	movs	r3, #128	; 0x80
 800ef0c:	2280      	movs	r2, #128	; 0x80
 800ef0e:	210a      	movs	r1, #10
 800ef10:	200a      	movs	r0, #10
 800ef12:	f7ff fd66 	bl	800e9e2 <_Z13loadRGB565LCDmmmmPth>
    	SaveFrameToFlash(IMAGE2_ADDR, RGBbuf, RES_W * RES_W);
 800ef16:	4b24      	ldr	r3, [pc, #144]	; (800efa8 <main+0x378>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ef1e:	4619      	mov	r1, r3
 800ef20:	4827      	ldr	r0, [pc, #156]	; (800efc0 <main+0x390>)
 800ef22:	f7ff fe47 	bl	800ebb4 <_Z16SaveFrameToFlashmPtm>
    	//
    	sprintf(showbuf, "Frame 3");
 800ef26:	1d3b      	adds	r3, r7, #4
 800ef28:	4a26      	ldr	r2, [pc, #152]	; (800efc4 <main+0x394>)
 800ef2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef2e:	e883 0003 	stmia.w	r3, {r0, r1}
    	displaystring(showbuf, 273, 80);
 800ef32:	1d3b      	adds	r3, r7, #4
 800ef34:	2250      	movs	r2, #80	; 0x50
 800ef36:	f240 1111 	movw	r1, #273	; 0x111
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff fde0 	bl	800eb00 <_Z13displaystringPcii>
    	HAL_Delay(1000);
 800ef40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ef44:	f7fa fc7c 	bl	8009840 <HAL_Delay>
    	StartCapture();
 800ef48:	f7ff fa90 	bl	800e46c <_Z12StartCapturev>
    	ReadCapture();
 800ef4c:	f7ff fa9f 	bl	800e48e <_Z11ReadCapturev>
    	DecodeandProcessAndRGB(RES_W, RES_H, input, RGBbuf, 1);
 800ef50:	4b15      	ldr	r3, [pc, #84]	; (800efa8 <main+0x378>)
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	2301      	movs	r3, #1
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800ef5e:	2178      	movs	r1, #120	; 0x78
 800ef60:	2080      	movs	r0, #128	; 0x80
 800ef62:	f7ff f8eb 	bl	800e13c <_Z22DecodeandProcessAndRGBiiPaPti>
    	loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 2);
 800ef66:	4b10      	ldr	r3, [pc, #64]	; (800efa8 <main+0x378>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	9201      	str	r2, [sp, #4]
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	2380      	movs	r3, #128	; 0x80
 800ef72:	2280      	movs	r2, #128	; 0x80
 800ef74:	210a      	movs	r1, #10
 800ef76:	200a      	movs	r0, #10
 800ef78:	f7ff fd33 	bl	800e9e2 <_Z13loadRGB565LCDmmmmPth>
    	SaveFrameToFlash(IMAGE3_ADDR, RGBbuf, RES_W * RES_W);
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <main+0x378>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ef84:	4619      	mov	r1, r3
 800ef86:	4810      	ldr	r0, [pc, #64]	; (800efc8 <main+0x398>)
 800ef88:	f7ff fe14 	bl	800ebb4 <_Z16SaveFrameToFlashmPtm>

    	button0 = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    	drawBlackBackground(270, 481, 1, 273);
 800ef92:	f240 1311 	movw	r3, #273	; 0x111
 800ef96:	2201      	movs	r2, #1
 800ef98:	f240 11e1 	movw	r1, #481	; 0x1e1
 800ef9c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800efa0:	f7ff fd83 	bl	800eaaa <_Z19drawBlackBackgroundiiii>
//		displaystring(showbuf, 273, 10);
//		detectResponse(answer_right, end - start, t_mode, p, label);
//		drawBlackBackground(270, 481, 1, 273);
//    }

  }// end of while(1)
 800efa4:	e668      	b.n	800ec78 <main+0x48>
 800efa6:	bf00      	nop
 800efa8:	20004130 	.word	0x20004130
 800efac:	08018304 	.word	0x08018304
 800efb0:	08018310 	.word	0x08018310
 800efb4:	08018318 	.word	0x08018318
 800efb8:	08040000 	.word	0x08040000
 800efbc:	08018320 	.word	0x08018320
 800efc0:	08048000 	.word	0x08048000
 800efc4:	08018328 	.word	0x08018328
 800efc8:	08050000 	.word	0x08050000

0800efcc <_ZL18SystemClock_Configv>:

}// end of main()

// HW configurations
void SystemClock_Config(void) {
 800efcc:	b580      	push	{r7, lr}
 800efce:	b092      	sub	sp, #72	; 0x48
 800efd0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800efd2:	2300      	movs	r3, #0
 800efd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800efd8:	2301      	movs	r3, #1
 800efda:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800efdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800efe0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800efe2:	2302      	movs	r3, #2
 800efe4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800efe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800efea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 800efec:	2319      	movs	r3, #25
 800efee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800eff0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800eff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800eff6:	2302      	movs	r3, #2
 800eff8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800effa:	2309      	movs	r3, #9
 800effc:	62fb      	str	r3, [r7, #44]	; 0x2c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800effe:	463b      	mov	r3, r7
 800f000:	4618      	mov	r0, r3
 800f002:	f7fc fe1b 	bl	800bc3c <HAL_RCC_OscConfig>
 800f006:	4603      	mov	r3, r0
 800f008:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (ret != HAL_OK) {
 800f00c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f010:	2b00      	cmp	r3, #0
 800f012:	d000      	beq.n	800f016 <_ZL18SystemClock_Configv+0x4a>
    while (1) {
 800f014:	e7fe      	b.n	800f014 <_ZL18SystemClock_Configv+0x48>
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 800f016:	f7fc fdc1 	bl	800bb9c <HAL_PWREx_EnableOverDrive>
 800f01a:	4603      	mov	r3, r0
 800f01c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (ret != HAL_OK) {
 800f020:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f024:	2b00      	cmp	r3, #0
 800f026:	d000      	beq.n	800f02a <_ZL18SystemClock_Configv+0x5e>
    while (1) {
 800f028:	e7fe      	b.n	800f028 <_ZL18SystemClock_Configv+0x5c>
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800f02a:	230f      	movs	r3, #15
 800f02c:	633b      	str	r3, [r7, #48]	; 0x30
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f02e:	2302      	movs	r3, #2
 800f030:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f032:	2300      	movs	r3, #0
 800f034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f036:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f03a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f040:	643b      	str	r3, [r7, #64]	; 0x40

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800f042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f046:	2107      	movs	r1, #7
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fd f867 	bl	800c11c <HAL_RCC_ClockConfig>
 800f04e:	4603      	mov	r3, r0
 800f050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (ret != HAL_OK) {
 800f054:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d000      	beq.n	800f05e <_ZL18SystemClock_Configv+0x92>
    while (1) {
 800f05c:	e7fe      	b.n	800f05c <_ZL18SystemClock_Configv+0x90>
      ;
    }
  }
}
 800f05e:	bf00      	nop
 800f060:	3748      	adds	r7, #72	; 0x48
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <_ZL16CPU_CACHE_Enablev>:
  BSP_LED_On(LED1);
  while (1) {
  }
}

static void CPU_CACHE_Enable(void) {
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800f06e:	4b38      	ldr	r3, [pc, #224]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f070:	695b      	ldr	r3, [r3, #20]
 800f072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f076:	2b00      	cmp	r3, #0
 800f078:	bf14      	ite	ne
 800f07a:	2301      	movne	r3, #1
 800f07c:	2300      	moveq	r3, #0
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b00      	cmp	r3, #0
 800f082:	d115      	bne.n	800f0b0 <_ZL16CPU_CACHE_Enablev+0x48>
 800f084:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f088:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800f08c:	4b30      	ldr	r3, [pc, #192]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f08e:	2200      	movs	r2, #0
 800f090:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800f094:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f098:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800f09c:	4b2c      	ldr	r3, [pc, #176]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	4a2b      	ldr	r2, [pc, #172]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f0a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800f0a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f0ac:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800f0b0:	4b27      	ldr	r3, [pc, #156]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f0b2:	695b      	ldr	r3, [r3, #20]
 800f0b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	bf14      	ite	ne
 800f0bc:	2301      	movne	r3, #1
 800f0be:	2300      	moveq	r3, #0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d13e      	bne.n	800f144 <_ZL16CPU_CACHE_Enablev+0xdc>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800f0c6:	4b22      	ldr	r3, [pc, #136]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f0ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800f0d2:	4b1f      	ldr	r3, [pc, #124]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0d8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	0b5b      	lsrs	r3, r3, #13
 800f0de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f0e2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	08db      	lsrs	r3, r3, #3
 800f0e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0ec:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	015a      	lsls	r2, r3, #5
 800f0f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800f0f6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800f0fc:	4914      	ldr	r1, [pc, #80]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f0fe:	4313      	orrs	r3, r2
 800f100:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	1e5a      	subs	r2, r3, #1
 800f108:	607a      	str	r2, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	bf14      	ite	ne
 800f10e:	2301      	movne	r3, #1
 800f110:	2300      	moveq	r3, #0
 800f112:	b2db      	uxtb	r3, r3
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1ea      	bne.n	800f0ee <_ZL16CPU_CACHE_Enablev+0x86>
    } while(sets-- != 0U);
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	1e5a      	subs	r2, r3, #1
 800f11c:	60ba      	str	r2, [r7, #8]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bf14      	ite	ne
 800f122:	2301      	movne	r3, #1
 800f124:	2300      	moveq	r3, #0
 800f126:	b2db      	uxtb	r3, r3
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1db      	bne.n	800f0e4 <_ZL16CPU_CACHE_Enablev+0x7c>
 800f12c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f132:	695b      	ldr	r3, [r3, #20]
 800f134:	4a06      	ldr	r2, [pc, #24]	; (800f150 <_ZL16CPU_CACHE_Enablev+0xe8>)
 800f136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f13a:	6153      	str	r3, [r2, #20]
 800f13c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f140:	f3bf 8f6f 	isb	sy

  SCB_EnableICache();

  SCB_EnableDCache();
}
 800f144:	bf00      	nop
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	e000ed00 	.word	0xe000ed00

0800f154 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void) {
 800f154:	b580      	push	{r7, lr}
 800f156:	b090      	sub	sp, #64	; 0x40
 800f158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f15a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	605a      	str	r2, [r3, #4]
 800f164:	609a      	str	r2, [r3, #8]
 800f166:	60da      	str	r2, [r3, #12]
 800f168:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 800f16a:	4baf      	ldr	r3, [pc, #700]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f16e:	4aae      	ldr	r2, [pc, #696]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f170:	f043 0310 	orr.w	r3, r3, #16
 800f174:	6313      	str	r3, [r2, #48]	; 0x30
 800f176:	4bac      	ldr	r3, [pc, #688]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f17a:	f003 0310 	and.w	r3, r3, #16
 800f17e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f180:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800f182:	4ba9      	ldr	r3, [pc, #676]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f186:	4aa8      	ldr	r2, [pc, #672]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f18c:	6313      	str	r3, [r2, #48]	; 0x30
 800f18e:	4ba6      	ldr	r3, [pc, #664]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f196:	627b      	str	r3, [r7, #36]	; 0x24
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f19a:	4ba3      	ldr	r3, [pc, #652]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f19e:	4aa2      	ldr	r2, [pc, #648]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1a0:	f043 0302 	orr.w	r3, r3, #2
 800f1a4:	6313      	str	r3, [r2, #48]	; 0x30
 800f1a6:	4ba0      	ldr	r3, [pc, #640]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1aa:	f003 0302 	and.w	r3, r3, #2
 800f1ae:	623b      	str	r3, [r7, #32]
 800f1b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f1b2:	4b9d      	ldr	r3, [pc, #628]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1b6:	4a9c      	ldr	r2, [pc, #624]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1b8:	f043 0308 	orr.w	r3, r3, #8
 800f1bc:	6313      	str	r3, [r2, #48]	; 0x30
 800f1be:	4b9a      	ldr	r3, [pc, #616]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1c2:	f003 0308 	and.w	r3, r3, #8
 800f1c6:	61fb      	str	r3, [r7, #28]
 800f1c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f1ca:	4b97      	ldr	r3, [pc, #604]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ce:	4a96      	ldr	r2, [pc, #600]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1d0:	f043 0304 	orr.w	r3, r3, #4
 800f1d4:	6313      	str	r3, [r2, #48]	; 0x30
 800f1d6:	4b94      	ldr	r3, [pc, #592]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1da:	f003 0304 	and.w	r3, r3, #4
 800f1de:	61bb      	str	r3, [r7, #24]
 800f1e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1e2:	4b91      	ldr	r3, [pc, #580]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e6:	4a90      	ldr	r2, [pc, #576]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1e8:	f043 0301 	orr.w	r3, r3, #1
 800f1ec:	6313      	str	r3, [r2, #48]	; 0x30
 800f1ee:	4b8e      	ldr	r3, [pc, #568]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1f2:	f003 0301 	and.w	r3, r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800f1fa:	4b8b      	ldr	r3, [pc, #556]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fe:	4a8a      	ldr	r2, [pc, #552]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f204:	6313      	str	r3, [r2, #48]	; 0x30
 800f206:	4b88      	ldr	r3, [pc, #544]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f20e:	613b      	str	r3, [r7, #16]
 800f210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800f212:	4b85      	ldr	r3, [pc, #532]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f216:	4a84      	ldr	r2, [pc, #528]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f21c:	6313      	str	r3, [r2, #48]	; 0x30
 800f21e:	4b82      	ldr	r3, [pc, #520]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800f22a:	4b7f      	ldr	r3, [pc, #508]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f22e:	4a7e      	ldr	r2, [pc, #504]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f234:	6313      	str	r3, [r2, #48]	; 0x30
 800f236:	4b7c      	ldr	r3, [pc, #496]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f23a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f23e:	60bb      	str	r3, [r7, #8]
 800f240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800f242:	4b79      	ldr	r3, [pc, #484]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f246:	4a78      	ldr	r2, [pc, #480]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f248:	f043 0320 	orr.w	r3, r3, #32
 800f24c:	6313      	str	r3, [r2, #48]	; 0x30
 800f24e:	4b76      	ldr	r3, [pc, #472]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f252:	f003 0320 	and.w	r3, r3, #32
 800f256:	607b      	str	r3, [r7, #4]
 800f258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f25a:	4b73      	ldr	r3, [pc, #460]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f25e:	4a72      	ldr	r2, [pc, #456]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f264:	6313      	str	r3, [r2, #48]	; 0x30
 800f266:	4b70      	ldr	r3, [pc, #448]	; (800f428 <_ZL12MX_GPIO_Initv+0x2d4>)
 800f268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800f272:	2201      	movs	r2, #1
 800f274:	2120      	movs	r1, #32
 800f276:	486d      	ldr	r0, [pc, #436]	; (800f42c <_ZL12MX_GPIO_Initv+0x2d8>)
 800f278:	f7fb fcc8 	bl	800ac0c <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);

  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800f27c:	2200      	movs	r2, #0
 800f27e:	210c      	movs	r1, #12
 800f280:	486b      	ldr	r0, [pc, #428]	; (800f430 <_ZL12MX_GPIO_Initv+0x2dc>)
 800f282:	f7fb fcc3 	bl	800ac0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800f286:	2201      	movs	r2, #1
 800f288:	2108      	movs	r1, #8
 800f28a:	486a      	ldr	r0, [pc, #424]	; (800f434 <_ZL12MX_GPIO_Initv+0x2e0>)
 800f28c:	f7fb fcbe 	bl	800ac0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800f290:	2201      	movs	r2, #1
 800f292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f296:	4866      	ldr	r0, [pc, #408]	; (800f430 <_ZL12MX_GPIO_Initv+0x2dc>)
 800f298:	f7fb fcb8 	bl	800ac0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800f29c:	2200      	movs	r2, #0
 800f29e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f2a2:	4865      	ldr	r0, [pc, #404]	; (800f438 <_ZL12MX_GPIO_Initv+0x2e4>)
 800f2a4:	f7fb fcb2 	bl	800ac0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	21c8      	movs	r1, #200	; 0xc8
 800f2ac:	4863      	ldr	r0, [pc, #396]	; (800f43c <_ZL12MX_GPIO_Initv+0x2e8>)
 800f2ae:	f7fb fcad 	bl	800ac0c <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800f2b2:	2308      	movs	r3, #8
 800f2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f2be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	485e      	ldr	r0, [pc, #376]	; (800f440 <_ZL12MX_GPIO_Initv+0x2ec>)
 800f2c6:	f7fb fadf 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800f2ca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800f2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f2dc:	230b      	movs	r3, #11
 800f2de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f2e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4855      	ldr	r0, [pc, #340]	; (800f43c <_ZL12MX_GPIO_Initv+0x2e8>)
 800f2e8:	f7fb face 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800f2ec:	f643 4323 	movw	r3, #15395	; 0x3c23
 800f2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2f2:	2302      	movs	r3, #2
 800f2f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f2fa:	2303      	movs	r3, #3
 800f2fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f2fe:	230a      	movs	r3, #10
 800f300:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f306:	4619      	mov	r1, r3
 800f308:	484e      	ldr	r0, [pc, #312]	; (800f444 <_ZL12MX_GPIO_Initv+0x2f0>)
 800f30a:	f7fb fabd 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800f30e:	2380      	movs	r3, #128	; 0x80
 800f310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f312:	2302      	movs	r3, #2
 800f314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f316:	2300      	movs	r3, #0
 800f318:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f31a:	2300      	movs	r3, #0
 800f31c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800f31e:	2308      	movs	r3, #8
 800f320:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f326:	4619      	mov	r1, r3
 800f328:	4840      	ldr	r0, [pc, #256]	; (800f42c <_ZL12MX_GPIO_Initv+0x2d8>)
 800f32a:	f7fb faad 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f32e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f334:	2300      	movs	r3, #0
 800f336:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f338:	2300      	movs	r3, #0
 800f33a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f33c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f340:	4619      	mov	r1, r3
 800f342:	4841      	ldr	r0, [pc, #260]	; (800f448 <_ZL12MX_GPIO_Initv+0x2f4>)
 800f344:	f7fb faa0 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f348:	2340      	movs	r3, #64	; 0x40
 800f34a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f34c:	4b3f      	ldr	r3, [pc, #252]	; (800f44c <_ZL12MX_GPIO_Initv+0x2f8>)
 800f34e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f350:	2300      	movs	r3, #0
 800f352:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f358:	4619      	mov	r1, r3
 800f35a:	4834      	ldr	r0, [pc, #208]	; (800f42c <_ZL12MX_GPIO_Initv+0x2d8>)
 800f35c:	f7fb fa94 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800f360:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f366:	2302      	movs	r3, #2
 800f368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f36e:	2303      	movs	r3, #3
 800f370:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f372:	230a      	movs	r3, #10
 800f374:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f37a:	4619      	mov	r1, r3
 800f37c:	4834      	ldr	r0, [pc, #208]	; (800f450 <_ZL12MX_GPIO_Initv+0x2fc>)
 800f37e:	f7fb fa83 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f382:	2320      	movs	r3, #32
 800f384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f386:	2301      	movs	r3, #1
 800f388:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f38a:	2300      	movs	r3, #0
 800f38c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f38e:	2300      	movs	r3, #0
 800f390:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f396:	4619      	mov	r1, r3
 800f398:	4824      	ldr	r0, [pc, #144]	; (800f42c <_ZL12MX_GPIO_Initv+0x2d8>)
 800f39a:	f7fb fa75 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800f39e:	f241 030c 	movw	r3, #4108	; 0x100c
 800f3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f3b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	481e      	ldr	r0, [pc, #120]	; (800f430 <_ZL12MX_GPIO_Initv+0x2dc>)
 800f3b8:	f7fb fa66 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f3bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f3ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4820      	ldr	r0, [pc, #128]	; (800f454 <_ZL12MX_GPIO_Initv+0x300>)
 800f3d2:	f7fb fa59 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800f3d6:	2308      	movs	r3, #8
 800f3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f3e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4811      	ldr	r0, [pc, #68]	; (800f434 <_ZL12MX_GPIO_Initv+0x2e0>)
 800f3ee:	f7fb fa4b 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f3f2:	2310      	movs	r3, #16
 800f3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f3fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f402:	4619      	mov	r1, r3
 800f404:	4809      	ldr	r0, [pc, #36]	; (800f42c <_ZL12MX_GPIO_Initv+0x2d8>)
 800f406:	f7fb fa3f 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800f40a:	f248 0304 	movw	r3, #32772	; 0x8004
 800f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f410:	2300      	movs	r3, #0
 800f412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f414:	2300      	movs	r3, #0
 800f416:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f41c:	4619      	mov	r1, r3
 800f41e:	4806      	ldr	r0, [pc, #24]	; (800f438 <_ZL12MX_GPIO_Initv+0x2e4>)
 800f420:	f7fb fa32 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800f424:	2302      	movs	r3, #2
 800f426:	e017      	b.n	800f458 <_ZL12MX_GPIO_Initv+0x304>
 800f428:	40023800 	.word	0x40023800
 800f42c:	40020c00 	.word	0x40020c00
 800f430:	40022000 	.word	0x40022000
 800f434:	40022800 	.word	0x40022800
 800f438:	40021c00 	.word	0x40021c00
 800f43c:	40021800 	.word	0x40021800
 800f440:	40021000 	.word	0x40021000
 800f444:	40020400 	.word	0x40020400
 800f448:	40022400 	.word	0x40022400
 800f44c:	10120000 	.word	0x10120000
 800f450:	40020000 	.word	0x40020000
 800f454:	40020800 	.word	0x40020800
 800f458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f45a:	2302      	movs	r3, #2
 800f45c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f462:	2300      	movs	r3, #0
 800f464:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f466:	2305      	movs	r3, #5
 800f468:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800f46a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f46e:	4619      	mov	r1, r3
 800f470:	4855      	ldr	r0, [pc, #340]	; (800f5c8 <_ZL12MX_GPIO_Initv+0x474>)
 800f472:	f7fb fa09 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800f476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f47c:	2301      	movs	r3, #1
 800f47e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f480:	2300      	movs	r3, #0
 800f482:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f484:	2300      	movs	r3, #0
 800f486:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f48c:	4619      	mov	r1, r3
 800f48e:	484f      	ldr	r0, [pc, #316]	; (800f5cc <_ZL12MX_GPIO_Initv+0x478>)
 800f490:	f7fb f9fa 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800f494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f49a:	2303      	movs	r3, #3
 800f49c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f4a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4847      	ldr	r0, [pc, #284]	; (800f5c8 <_ZL12MX_GPIO_Initv+0x474>)
 800f4aa:	f7fb f9ed 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800f4ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f4b4:	4b46      	ldr	r3, [pc, #280]	; (800f5d0 <_ZL12MX_GPIO_Initv+0x47c>)
 800f4b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f4bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	4841      	ldr	r0, [pc, #260]	; (800f5c8 <_ZL12MX_GPIO_Initv+0x474>)
 800f4c4:	f7fb f9e0 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f4c8:	2310      	movs	r3, #16
 800f4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4d4:	2303      	movs	r3, #3
 800f4d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f4d8:	230a      	movs	r3, #10
 800f4da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f4dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	483a      	ldr	r0, [pc, #232]	; (800f5cc <_ZL12MX_GPIO_Initv+0x478>)
 800f4e4:	f7fb f9d0 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800f4e8:	23c8      	movs	r3, #200	; 0xc8
 800f4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f4f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4835      	ldr	r0, [pc, #212]	; (800f5d4 <_ZL12MX_GPIO_Initv+0x480>)
 800f500:	f7fb f9c2 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800f504:	2305      	movs	r3, #5
 800f506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f508:	2302      	movs	r3, #2
 800f50a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f50c:	2300      	movs	r3, #0
 800f50e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f510:	2303      	movs	r3, #3
 800f512:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f514:	230a      	movs	r3, #10
 800f516:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f51c:	4619      	mov	r1, r3
 800f51e:	482e      	ldr	r0, [pc, #184]	; (800f5d8 <_ZL12MX_GPIO_Initv+0x484>)
 800f520:	f7fb f9b2 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800f524:	2332      	movs	r3, #50	; 0x32
 800f526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f528:	2302      	movs	r3, #2
 800f52a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f52c:	2300      	movs	r3, #0
 800f52e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f530:	2303      	movs	r3, #3
 800f532:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f534:	230b      	movs	r3, #11
 800f536:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f53c:	4619      	mov	r1, r3
 800f53e:	4826      	ldr	r0, [pc, #152]	; (800f5d8 <_ZL12MX_GPIO_Initv+0x484>)
 800f540:	f7fb f9a2 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f544:	2304      	movs	r3, #4
 800f546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f548:	2300      	movs	r3, #0
 800f54a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f54c:	2300      	movs	r3, #0
 800f54e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f554:	4619      	mov	r1, r3
 800f556:	481f      	ldr	r0, [pc, #124]	; (800f5d4 <_ZL12MX_GPIO_Initv+0x480>)
 800f558:	f7fb f996 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800f55c:	2386      	movs	r3, #134	; 0x86
 800f55e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f560:	2302      	movs	r3, #2
 800f562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f564:	2300      	movs	r3, #0
 800f566:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f568:	2303      	movs	r3, #3
 800f56a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f56c:	230b      	movs	r3, #11
 800f56e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f574:	4619      	mov	r1, r3
 800f576:	4819      	ldr	r0, [pc, #100]	; (800f5dc <_ZL12MX_GPIO_Initv+0x488>)
 800f578:	f7fb f986 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800f57c:	2328      	movs	r3, #40	; 0x28
 800f57e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f580:	2302      	movs	r3, #2
 800f582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f584:	2300      	movs	r3, #0
 800f586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f588:	2303      	movs	r3, #3
 800f58a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f58c:	230a      	movs	r3, #10
 800f58e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f594:	4619      	mov	r1, r3
 800f596:	4811      	ldr	r0, [pc, #68]	; (800f5dc <_ZL12MX_GPIO_Initv+0x488>)
 800f598:	f7fb f976 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800f59c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800f5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f5ae:	2305      	movs	r3, #5
 800f5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	4809      	ldr	r0, [pc, #36]	; (800f5e0 <_ZL12MX_GPIO_Initv+0x48c>)
 800f5ba:	f7fb f965 	bl	800a888 <HAL_GPIO_Init>

}
 800f5be:	bf00      	nop
 800f5c0:	3740      	adds	r7, #64	; 0x40
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	40022000 	.word	0x40022000
 800f5cc:	40021c00 	.word	0x40021c00
 800f5d0:	10120000 	.word	0x10120000
 800f5d4:	40021800 	.word	0x40021800
 800f5d8:	40020800 	.word	0x40020800
 800f5dc:	40020000 	.word	0x40020000
 800f5e0:	40020400 	.word	0x40020400

0800f5e4 <replicateSignBit16>:
typedef unsigned short uint16;
typedef signed char int8;
typedef signed short int16;

#if PJPG_RIGHT_SHIFT_IS_ALWAYS_UNSIGNED
static int16 replicateSignBit16(int8 n) {
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	71fb      	strb	r3, [r7, #7]
  switch (n) {
 800f5ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5f2:	2b0f      	cmp	r3, #15
 800f5f4:	d84a      	bhi.n	800f68c <replicateSignBit16+0xa8>
 800f5f6:	a201      	add	r2, pc, #4	; (adr r2, 800f5fc <replicateSignBit16+0x18>)
 800f5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fc:	0800f63d 	.word	0x0800f63d
 800f600:	0800f641 	.word	0x0800f641
 800f604:	0800f645 	.word	0x0800f645
 800f608:	0800f649 	.word	0x0800f649
 800f60c:	0800f64d 	.word	0x0800f64d
 800f610:	0800f651 	.word	0x0800f651
 800f614:	0800f655 	.word	0x0800f655
 800f618:	0800f659 	.word	0x0800f659
 800f61c:	0800f65d 	.word	0x0800f65d
 800f620:	0800f663 	.word	0x0800f663
 800f624:	0800f669 	.word	0x0800f669
 800f628:	0800f66f 	.word	0x0800f66f
 800f62c:	0800f675 	.word	0x0800f675
 800f630:	0800f67b 	.word	0x0800f67b
 800f634:	0800f681 	.word	0x0800f681
 800f638:	0800f687 	.word	0x0800f687
  case 0:
    return 0x0000;
 800f63c:	2300      	movs	r3, #0
 800f63e:	e027      	b.n	800f690 <replicateSignBit16+0xac>
  case 1:
    return 0x8000;
 800f640:	4b16      	ldr	r3, [pc, #88]	; (800f69c <replicateSignBit16+0xb8>)
 800f642:	e025      	b.n	800f690 <replicateSignBit16+0xac>
  case 2:
    return 0xC000;
 800f644:	4b16      	ldr	r3, [pc, #88]	; (800f6a0 <replicateSignBit16+0xbc>)
 800f646:	e023      	b.n	800f690 <replicateSignBit16+0xac>
  case 3:
    return 0xE000;
 800f648:	4b16      	ldr	r3, [pc, #88]	; (800f6a4 <replicateSignBit16+0xc0>)
 800f64a:	e021      	b.n	800f690 <replicateSignBit16+0xac>
  case 4:
    return 0xF000;
 800f64c:	4b16      	ldr	r3, [pc, #88]	; (800f6a8 <replicateSignBit16+0xc4>)
 800f64e:	e01f      	b.n	800f690 <replicateSignBit16+0xac>
  case 5:
    return 0xF800;
 800f650:	4b16      	ldr	r3, [pc, #88]	; (800f6ac <replicateSignBit16+0xc8>)
 800f652:	e01d      	b.n	800f690 <replicateSignBit16+0xac>
  case 6:
    return 0xFC00;
 800f654:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <replicateSignBit16+0xcc>)
 800f656:	e01b      	b.n	800f690 <replicateSignBit16+0xac>
  case 7:
    return 0xFE00;
 800f658:	4b16      	ldr	r3, [pc, #88]	; (800f6b4 <replicateSignBit16+0xd0>)
 800f65a:	e019      	b.n	800f690 <replicateSignBit16+0xac>
  case 8:
    return 0xFF00;
 800f65c:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800f660:	e016      	b.n	800f690 <replicateSignBit16+0xac>
  case 9:
    return 0xFF80;
 800f662:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800f666:	e013      	b.n	800f690 <replicateSignBit16+0xac>
  case 10:
    return 0xFFC0;
 800f668:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800f66c:	e010      	b.n	800f690 <replicateSignBit16+0xac>
  case 11:
    return 0xFFE0;
 800f66e:	f06f 031f 	mvn.w	r3, #31
 800f672:	e00d      	b.n	800f690 <replicateSignBit16+0xac>
  case 12:
    return 0xFFF0;
 800f674:	f06f 030f 	mvn.w	r3, #15
 800f678:	e00a      	b.n	800f690 <replicateSignBit16+0xac>
  case 13:
    return 0xFFF8;
 800f67a:	f06f 0307 	mvn.w	r3, #7
 800f67e:	e007      	b.n	800f690 <replicateSignBit16+0xac>
  case 14:
    return 0xFFFC;
 800f680:	f06f 0303 	mvn.w	r3, #3
 800f684:	e004      	b.n	800f690 <replicateSignBit16+0xac>
  case 15:
    return 0xFFFE;
 800f686:	f06f 0301 	mvn.w	r3, #1
 800f68a:	e001      	b.n	800f690 <replicateSignBit16+0xac>
  default:
    return 0xFFFF;
 800f68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800f690:	4618      	mov	r0, r3
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr
 800f69c:	ffff8000 	.word	0xffff8000
 800f6a0:	ffffc000 	.word	0xffffc000
 800f6a4:	ffffe000 	.word	0xffffe000
 800f6a8:	fffff000 	.word	0xfffff000
 800f6ac:	fffff800 	.word	0xfffff800
 800f6b0:	fffffc00 	.word	0xfffffc00
 800f6b4:	fffffe00 	.word	0xfffffe00

0800f6b8 <arithmeticRightShiftN16>:
static PJPG_INLINE int16 arithmeticRightShiftN16(int16 x, int8 n) {
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	460a      	mov	r2, r1
 800f6c2:	80fb      	strh	r3, [r7, #6]
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	717b      	strb	r3, [r7, #5]
  int16 r = (uint16)x >> (uint8)n;
 800f6c8:	88fb      	ldrh	r3, [r7, #6]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	797b      	ldrb	r3, [r7, #5]
 800f6ce:	fa42 f303 	asr.w	r3, r2, r3
 800f6d2:	81fb      	strh	r3, [r7, #14]
  if (x < 0)
 800f6d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	da09      	bge.n	800f6f0 <arithmeticRightShiftN16+0x38>
    r |= replicateSignBit16(n);
 800f6dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff ff7f 	bl	800f5e4 <replicateSignBit16>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	89fb      	ldrh	r3, [r7, #14]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	81fb      	strh	r3, [r7, #14]
  return r;
 800f6f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <arithmeticRightShift8L>:
static PJPG_INLINE long arithmeticRightShift8L(long x) {
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  long r = (unsigned long)x >> 8U;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	0a1b      	lsrs	r3, r3, #8
 800f708:	60fb      	str	r3, [r7, #12]
  if (x < 0)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	da03      	bge.n	800f718 <arithmeticRightShift8L+0x1c>
    r |= ~(~(unsigned long)0U >> 8U);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f716:	60fb      	str	r3, [r7, #12]
  return r;
 800f718:	68fb      	ldr	r3, [r7, #12]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3714      	adds	r7, #20
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr
	...

0800f728 <fillInBuf>:
static pjpeg_need_bytes_callback_t g_pNeedBytesCallback;
static void *g_pCallback_data;
static uint8 gCallbackStatus;
static uint8 gReduce;

static void fillInBuf(void) {
 800f728:	b590      	push	{r4, r7, lr}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
  unsigned char status;

  gInBufOfs = 4;
 800f72e:	4b10      	ldr	r3, [pc, #64]	; (800f770 <fillInBuf+0x48>)
 800f730:	2204      	movs	r2, #4
 800f732:	701a      	strb	r2, [r3, #0]
  gInBufLeft = 0;
 800f734:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <fillInBuf+0x4c>)
 800f736:	2200      	movs	r2, #0
 800f738:	701a      	strb	r2, [r3, #0]

  status = (*g_pNeedBytesCallback)(gInBuf + gInBufOfs,
 800f73a:	4b0f      	ldr	r3, [pc, #60]	; (800f778 <fillInBuf+0x50>)
 800f73c:	681c      	ldr	r4, [r3, #0]
 800f73e:	4b0c      	ldr	r3, [pc, #48]	; (800f770 <fillInBuf+0x48>)
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	4b0d      	ldr	r3, [pc, #52]	; (800f77c <fillInBuf+0x54>)
 800f746:	18d0      	adds	r0, r2, r3
 800f748:	4b09      	ldr	r3, [pc, #36]	; (800f770 <fillInBuf+0x48>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	425b      	negs	r3, r3
 800f74e:	b2d9      	uxtb	r1, r3
 800f750:	4b0b      	ldr	r3, [pc, #44]	; (800f780 <fillInBuf+0x58>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a07      	ldr	r2, [pc, #28]	; (800f774 <fillInBuf+0x4c>)
 800f756:	47a0      	blx	r4
 800f758:	4603      	mov	r3, r0
 800f75a:	71fb      	strb	r3, [r7, #7]
                                   PJPG_MAX_IN_BUF_SIZE - gInBufOfs,
                                   &gInBufLeft, g_pCallback_data);
  if (status) {
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <fillInBuf+0x40>

    gCallbackStatus = status;
 800f762:	4a08      	ldr	r2, [pc, #32]	; (800f784 <fillInBuf+0x5c>)
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	7013      	strb	r3, [r2, #0]
  }
}
 800f768:	bf00      	nop
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd90      	pop	{r4, r7, pc}
 800f770:	20004a20 	.word	0x20004a20
 800f774:	20004a21 	.word	0x20004a21
 800f778:	20004a64 	.word	0x20004a64
 800f77c:	20004920 	.word	0x20004920
 800f780:	20004a68 	.word	0x20004a68
 800f784:	20004a6c 	.word	0x20004a6c

0800f788 <getChar>:

static PJPG_INLINE uint8 getChar(void) {
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
  if (!gInBufLeft) {
 800f78c:	4b14      	ldr	r3, [pc, #80]	; (800f7e0 <getChar+0x58>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d113      	bne.n	800f7bc <getChar+0x34>
    fillInBuf();
 800f794:	f7ff ffc8 	bl	800f728 <fillInBuf>
    if (!gInBufLeft) {
 800f798:	4b11      	ldr	r3, [pc, #68]	; (800f7e0 <getChar+0x58>)
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10d      	bne.n	800f7bc <getChar+0x34>
      gTemFlag = ~gTemFlag;
 800f7a0:	4b10      	ldr	r3, [pc, #64]	; (800f7e4 <getChar+0x5c>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	43db      	mvns	r3, r3
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	4b0e      	ldr	r3, [pc, #56]	; (800f7e4 <getChar+0x5c>)
 800f7aa:	701a      	strb	r2, [r3, #0]
      return gTemFlag ? 0xFF : 0xD9;
 800f7ac:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <getChar+0x5c>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <getChar+0x30>
 800f7b4:	23ff      	movs	r3, #255	; 0xff
 800f7b6:	e010      	b.n	800f7da <getChar+0x52>
 800f7b8:	23d9      	movs	r3, #217	; 0xd9
 800f7ba:	e00e      	b.n	800f7da <getChar+0x52>
    }
  }

  gInBufLeft--;
 800f7bc:	4b08      	ldr	r3, [pc, #32]	; (800f7e0 <getChar+0x58>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	4b06      	ldr	r3, [pc, #24]	; (800f7e0 <getChar+0x58>)
 800f7c6:	701a      	strb	r2, [r3, #0]
  return gInBuf[gInBufOfs++];
 800f7c8:	4b07      	ldr	r3, [pc, #28]	; (800f7e8 <getChar+0x60>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	b2d1      	uxtb	r1, r2
 800f7d0:	4a05      	ldr	r2, [pc, #20]	; (800f7e8 <getChar+0x60>)
 800f7d2:	7011      	strb	r1, [r2, #0]
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	4b05      	ldr	r3, [pc, #20]	; (800f7ec <getChar+0x64>)
 800f7d8:	5c9b      	ldrb	r3, [r3, r2]
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	20004a21 	.word	0x20004a21
 800f7e4:	2000491e 	.word	0x2000491e
 800f7e8:	20004a20 	.word	0x20004a20
 800f7ec:	20004920 	.word	0x20004920

0800f7f0 <stuffChar>:

static PJPG_INLINE void stuffChar(uint8 i) {
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	71fb      	strb	r3, [r7, #7]
  gInBufOfs--;
 800f7fa:	4b0c      	ldr	r3, [pc, #48]	; (800f82c <stuffChar+0x3c>)
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	3b01      	subs	r3, #1
 800f800:	b2da      	uxtb	r2, r3
 800f802:	4b0a      	ldr	r3, [pc, #40]	; (800f82c <stuffChar+0x3c>)
 800f804:	701a      	strb	r2, [r3, #0]
  gInBuf[gInBufOfs] = i;
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <stuffChar+0x3c>)
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	4619      	mov	r1, r3
 800f80c:	4a08      	ldr	r2, [pc, #32]	; (800f830 <stuffChar+0x40>)
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	5453      	strb	r3, [r2, r1]
  gInBufLeft++;
 800f812:	4b08      	ldr	r3, [pc, #32]	; (800f834 <stuffChar+0x44>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	3301      	adds	r3, #1
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	4b06      	ldr	r3, [pc, #24]	; (800f834 <stuffChar+0x44>)
 800f81c:	701a      	strb	r2, [r3, #0]
}
 800f81e:	bf00      	nop
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	20004a20 	.word	0x20004a20
 800f830:	20004920 	.word	0x20004920
 800f834:	20004a21 	.word	0x20004a21

0800f838 <getOctet>:

static PJPG_INLINE uint8 getOctet(uint8 FFCheck) {
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	4603      	mov	r3, r0
 800f840:	71fb      	strb	r3, [r7, #7]
  uint8 c = getChar();
 800f842:	f7ff ffa1 	bl	800f788 <getChar>
 800f846:	4603      	mov	r3, r0
 800f848:	73fb      	strb	r3, [r7, #15]

  if ((FFCheck) && (c == 0xFF)) {
 800f84a:	79fb      	ldrb	r3, [r7, #7]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d010      	beq.n	800f872 <getOctet+0x3a>
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	2bff      	cmp	r3, #255	; 0xff
 800f854:	d10d      	bne.n	800f872 <getOctet+0x3a>
    uint8 n = getChar();
 800f856:	f7ff ff97 	bl	800f788 <getChar>
 800f85a:	4603      	mov	r3, r0
 800f85c:	73bb      	strb	r3, [r7, #14]

    if (n) {
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d006      	beq.n	800f872 <getOctet+0x3a>
      stuffChar(n);
 800f864:	7bbb      	ldrb	r3, [r7, #14]
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff ffc2 	bl	800f7f0 <stuffChar>
      stuffChar(0xFF);
 800f86c:	20ff      	movs	r0, #255	; 0xff
 800f86e:	f7ff ffbf 	bl	800f7f0 <stuffChar>
    }
  }

  return c;
 800f872:	7bfb      	ldrb	r3, [r7, #15]
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <getBits>:

static uint16 getBits(uint8 numBits, uint8 FFCheck) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	4603      	mov	r3, r0
 800f884:	460a      	mov	r2, r1
 800f886:	71fb      	strb	r3, [r7, #7]
 800f888:	4613      	mov	r3, r2
 800f88a:	71bb      	strb	r3, [r7, #6]
  uint8 origBits = numBits;
 800f88c:	79fb      	ldrb	r3, [r7, #7]
 800f88e:	737b      	strb	r3, [r7, #13]
  uint16 ret = gBitBuf;
 800f890:	4b41      	ldr	r3, [pc, #260]	; (800f998 <getBits+0x11c>)
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	81fb      	strh	r3, [r7, #14]

  if (numBits > 8) {
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	2b08      	cmp	r3, #8
 800f89a:	d931      	bls.n	800f900 <getBits+0x84>
    numBits -= 8;
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	3b08      	subs	r3, #8
 800f8a0:	71fb      	strb	r3, [r7, #7]

    gBitBuf <<= gBitsLeft;
 800f8a2:	4b3d      	ldr	r3, [pc, #244]	; (800f998 <getBits+0x11c>)
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	4b3c      	ldr	r3, [pc, #240]	; (800f99c <getBits+0x120>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	4b39      	ldr	r3, [pc, #228]	; (800f998 <getBits+0x11c>)
 800f8b4:	801a      	strh	r2, [r3, #0]

    gBitBuf |= getOctet(FFCheck);
 800f8b6:	79bb      	ldrb	r3, [r7, #6]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7ff ffbd 	bl	800f838 <getOctet>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	b29a      	uxth	r2, r3
 800f8c2:	4b35      	ldr	r3, [pc, #212]	; (800f998 <getBits+0x11c>)
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	4b33      	ldr	r3, [pc, #204]	; (800f998 <getBits+0x11c>)
 800f8cc:	801a      	strh	r2, [r3, #0]

    gBitBuf <<= (8 - gBitsLeft);
 800f8ce:	4b32      	ldr	r3, [pc, #200]	; (800f998 <getBits+0x11c>)
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	4b31      	ldr	r3, [pc, #196]	; (800f99c <getBits+0x120>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	f1c3 0308 	rsb	r3, r3, #8
 800f8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	4b2d      	ldr	r3, [pc, #180]	; (800f998 <getBits+0x11c>)
 800f8e4:	801a      	strh	r2, [r3, #0]

    ret = (ret & 0xFF00) | (gBitBuf >> 8);
 800f8e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f8ee:	b21a      	sxth	r2, r3
 800f8f0:	4b29      	ldr	r3, [pc, #164]	; (800f998 <getBits+0x11c>)
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	0a1b      	lsrs	r3, r3, #8
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	b21b      	sxth	r3, r3
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	b21b      	sxth	r3, r3
 800f8fe:	81fb      	strh	r3, [r7, #14]
  }

  if (gBitsLeft < numBits) {
 800f900:	4b26      	ldr	r3, [pc, #152]	; (800f99c <getBits+0x120>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	79fa      	ldrb	r2, [r7, #7]
 800f906:	429a      	cmp	r2, r3
 800f908:	d92b      	bls.n	800f962 <getBits+0xe6>
    gBitBuf <<= gBitsLeft;
 800f90a:	4b23      	ldr	r3, [pc, #140]	; (800f998 <getBits+0x11c>)
 800f90c:	881b      	ldrh	r3, [r3, #0]
 800f90e:	461a      	mov	r2, r3
 800f910:	4b22      	ldr	r3, [pc, #136]	; (800f99c <getBits+0x120>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	fa02 f303 	lsl.w	r3, r2, r3
 800f918:	b29a      	uxth	r2, r3
 800f91a:	4b1f      	ldr	r3, [pc, #124]	; (800f998 <getBits+0x11c>)
 800f91c:	801a      	strh	r2, [r3, #0]

    gBitBuf |= getOctet(FFCheck);
 800f91e:	79bb      	ldrb	r3, [r7, #6]
 800f920:	4618      	mov	r0, r3
 800f922:	f7ff ff89 	bl	800f838 <getOctet>
 800f926:	4603      	mov	r3, r0
 800f928:	b29a      	uxth	r2, r3
 800f92a:	4b1b      	ldr	r3, [pc, #108]	; (800f998 <getBits+0x11c>)
 800f92c:	881b      	ldrh	r3, [r3, #0]
 800f92e:	4313      	orrs	r3, r2
 800f930:	b29a      	uxth	r2, r3
 800f932:	4b19      	ldr	r3, [pc, #100]	; (800f998 <getBits+0x11c>)
 800f934:	801a      	strh	r2, [r3, #0]

    gBitBuf <<= (numBits - gBitsLeft);
 800f936:	4b18      	ldr	r3, [pc, #96]	; (800f998 <getBits+0x11c>)
 800f938:	881b      	ldrh	r3, [r3, #0]
 800f93a:	4619      	mov	r1, r3
 800f93c:	79fb      	ldrb	r3, [r7, #7]
 800f93e:	4a17      	ldr	r2, [pc, #92]	; (800f99c <getBits+0x120>)
 800f940:	7812      	ldrb	r2, [r2, #0]
 800f942:	1a9b      	subs	r3, r3, r2
 800f944:	fa01 f303 	lsl.w	r3, r1, r3
 800f948:	b29a      	uxth	r2, r3
 800f94a:	4b13      	ldr	r3, [pc, #76]	; (800f998 <getBits+0x11c>)
 800f94c:	801a      	strh	r2, [r3, #0]

    gBitsLeft = 8 - (numBits - gBitsLeft);
 800f94e:	4b13      	ldr	r3, [pc, #76]	; (800f99c <getBits+0x120>)
 800f950:	781a      	ldrb	r2, [r3, #0]
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	b2db      	uxtb	r3, r3
 800f958:	3308      	adds	r3, #8
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	4b0f      	ldr	r3, [pc, #60]	; (800f99c <getBits+0x120>)
 800f95e:	701a      	strb	r2, [r3, #0]
 800f960:	e00f      	b.n	800f982 <getBits+0x106>
  } else {
    gBitsLeft = (uint8)(gBitsLeft - numBits);
 800f962:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <getBits+0x120>)
 800f964:	781a      	ldrb	r2, [r3, #0]
 800f966:	79fb      	ldrb	r3, [r7, #7]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	4b0b      	ldr	r3, [pc, #44]	; (800f99c <getBits+0x120>)
 800f96e:	701a      	strb	r2, [r3, #0]
    gBitBuf <<= numBits;
 800f970:	4b09      	ldr	r3, [pc, #36]	; (800f998 <getBits+0x11c>)
 800f972:	881b      	ldrh	r3, [r3, #0]
 800f974:	461a      	mov	r2, r3
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	fa02 f303 	lsl.w	r3, r2, r3
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	4b06      	ldr	r3, [pc, #24]	; (800f998 <getBits+0x11c>)
 800f980:	801a      	strh	r2, [r3, #0]
  }

  return ret >> (16 - origBits);
 800f982:	89fa      	ldrh	r2, [r7, #14]
 800f984:	7b7b      	ldrb	r3, [r7, #13]
 800f986:	f1c3 0310 	rsb	r3, r3, #16
 800f98a:	fa42 f303 	asr.w	r3, r2, r3
 800f98e:	b29b      	uxth	r3, r3
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	20004a22 	.word	0x20004a22
 800f99c:	20004a24 	.word	0x20004a24

0800f9a0 <getBits1>:

static PJPG_INLINE uint16 getBits1(uint8 numBits) {
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	71fb      	strb	r3, [r7, #7]
  return getBits(numBits, 0);
 800f9aa:	79fb      	ldrb	r3, [r7, #7]
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7ff ff64 	bl	800f87c <getBits>
 800f9b4:	4603      	mov	r3, r0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <getBits2>:

static PJPG_INLINE uint16 getBits2(uint8 numBits) {
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	71fb      	strb	r3, [r7, #7]
  return getBits(numBits, 1);
 800f9c8:	79fb      	ldrb	r3, [r7, #7]
 800f9ca:	2101      	movs	r1, #1
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7ff ff55 	bl	800f87c <getBits>
 800f9d2:	4603      	mov	r3, r0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <getBit>:

static PJPG_INLINE uint8 getBit(void) {
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
  uint8 ret = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	71fb      	strb	r3, [r7, #7]
  if (gBitBuf & 0x8000)
 800f9e6:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <getBit+0x64>)
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	b21b      	sxth	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	da01      	bge.n	800f9f4 <getBit+0x18>
    ret = 1;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	71fb      	strb	r3, [r7, #7]

  if (!gBitsLeft) {
 800f9f4:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <getBit+0x68>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d110      	bne.n	800fa1e <getBit+0x42>
    gBitBuf |= getOctet(1);
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	f7ff ff1b 	bl	800f838 <getOctet>
 800fa02:	4603      	mov	r3, r0
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	4b0e      	ldr	r3, [pc, #56]	; (800fa40 <getBit+0x64>)
 800fa08:	881b      	ldrh	r3, [r3, #0]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <getBit+0x64>)
 800fa10:	801a      	strh	r2, [r3, #0]

    gBitsLeft += 8;
 800fa12:	4b0c      	ldr	r3, [pc, #48]	; (800fa44 <getBit+0x68>)
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	3308      	adds	r3, #8
 800fa18:	b2da      	uxtb	r2, r3
 800fa1a:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <getBit+0x68>)
 800fa1c:	701a      	strb	r2, [r3, #0]
  }

  gBitsLeft--;
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <getBit+0x68>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	3b01      	subs	r3, #1
 800fa24:	b2da      	uxtb	r2, r3
 800fa26:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <getBit+0x68>)
 800fa28:	701a      	strb	r2, [r3, #0]
  gBitBuf <<= 1;
 800fa2a:	4b05      	ldr	r3, [pc, #20]	; (800fa40 <getBit+0x64>)
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	4b03      	ldr	r3, [pc, #12]	; (800fa40 <getBit+0x64>)
 800fa34:	801a      	strh	r2, [r3, #0]

  return ret;
 800fa36:	79fb      	ldrb	r3, [r7, #7]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	20004a22 	.word	0x20004a22
 800fa44:	20004a24 	.word	0x20004a24

0800fa48 <getExtendTest>:

static uint16 getExtendTest(uint8 i) {
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	71fb      	strb	r3, [r7, #7]
  switch (i) {
 800fa52:	79fb      	ldrb	r3, [r7, #7]
 800fa54:	2b0f      	cmp	r3, #15
 800fa56:	d84a      	bhi.n	800faee <getExtendTest+0xa6>
 800fa58:	a201      	add	r2, pc, #4	; (adr r2, 800fa60 <getExtendTest+0x18>)
 800fa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5e:	bf00      	nop
 800fa60:	0800faa1 	.word	0x0800faa1
 800fa64:	0800faa5 	.word	0x0800faa5
 800fa68:	0800faa9 	.word	0x0800faa9
 800fa6c:	0800faad 	.word	0x0800faad
 800fa70:	0800fab1 	.word	0x0800fab1
 800fa74:	0800fab5 	.word	0x0800fab5
 800fa78:	0800fab9 	.word	0x0800fab9
 800fa7c:	0800fabd 	.word	0x0800fabd
 800fa80:	0800fac1 	.word	0x0800fac1
 800fa84:	0800fac5 	.word	0x0800fac5
 800fa88:	0800facb 	.word	0x0800facb
 800fa8c:	0800fad1 	.word	0x0800fad1
 800fa90:	0800fad7 	.word	0x0800fad7
 800fa94:	0800fadd 	.word	0x0800fadd
 800fa98:	0800fae3 	.word	0x0800fae3
 800fa9c:	0800fae9 	.word	0x0800fae9
  case 0:
    return 0;
 800faa0:	2300      	movs	r3, #0
 800faa2:	e025      	b.n	800faf0 <getExtendTest+0xa8>
  case 1:
    return 0x0001;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e023      	b.n	800faf0 <getExtendTest+0xa8>
  case 2:
    return 0x0002;
 800faa8:	2302      	movs	r3, #2
 800faaa:	e021      	b.n	800faf0 <getExtendTest+0xa8>
  case 3:
    return 0x0004;
 800faac:	2304      	movs	r3, #4
 800faae:	e01f      	b.n	800faf0 <getExtendTest+0xa8>
  case 4:
    return 0x0008;
 800fab0:	2308      	movs	r3, #8
 800fab2:	e01d      	b.n	800faf0 <getExtendTest+0xa8>
  case 5:
    return 0x0010;
 800fab4:	2310      	movs	r3, #16
 800fab6:	e01b      	b.n	800faf0 <getExtendTest+0xa8>
  case 6:
    return 0x0020;
 800fab8:	2320      	movs	r3, #32
 800faba:	e019      	b.n	800faf0 <getExtendTest+0xa8>
  case 7:
    return 0x0040;
 800fabc:	2340      	movs	r3, #64	; 0x40
 800fabe:	e017      	b.n	800faf0 <getExtendTest+0xa8>
  case 8:
    return 0x0080;
 800fac0:	2380      	movs	r3, #128	; 0x80
 800fac2:	e015      	b.n	800faf0 <getExtendTest+0xa8>
  case 9:
    return 0x0100;
 800fac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fac8:	e012      	b.n	800faf0 <getExtendTest+0xa8>
  case 10:
    return 0x0200;
 800faca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800face:	e00f      	b.n	800faf0 <getExtendTest+0xa8>
  case 11:
    return 0x0400;
 800fad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fad4:	e00c      	b.n	800faf0 <getExtendTest+0xa8>
  case 12:
    return 0x0800;
 800fad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fada:	e009      	b.n	800faf0 <getExtendTest+0xa8>
  case 13:
    return 0x1000;
 800fadc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fae0:	e006      	b.n	800faf0 <getExtendTest+0xa8>
  case 14:
    return 0x2000;
 800fae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fae6:	e003      	b.n	800faf0 <getExtendTest+0xa8>
  case 15:
    return 0x4000;
 800fae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800faec:	e000      	b.n	800faf0 <getExtendTest+0xa8>
  default:
    return 0;
 800faee:	2300      	movs	r3, #0
  }
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <getExtendOffset>:

static int16 getExtendOffset(uint8 i) {
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	4603      	mov	r3, r0
 800fb04:	71fb      	strb	r3, [r7, #7]
  switch (i) {
 800fb06:	79fb      	ldrb	r3, [r7, #7]
 800fb08:	2b0f      	cmp	r3, #15
 800fb0a:	d84c      	bhi.n	800fba6 <getExtendOffset+0xaa>
 800fb0c:	a201      	add	r2, pc, #4	; (adr r2, 800fb14 <getExtendOffset+0x18>)
 800fb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb12:	bf00      	nop
 800fb14:	0800fb55 	.word	0x0800fb55
 800fb18:	0800fb59 	.word	0x0800fb59
 800fb1c:	0800fb5f 	.word	0x0800fb5f
 800fb20:	0800fb65 	.word	0x0800fb65
 800fb24:	0800fb6b 	.word	0x0800fb6b
 800fb28:	0800fb71 	.word	0x0800fb71
 800fb2c:	0800fb77 	.word	0x0800fb77
 800fb30:	0800fb7d 	.word	0x0800fb7d
 800fb34:	0800fb83 	.word	0x0800fb83
 800fb38:	0800fb89 	.word	0x0800fb89
 800fb3c:	0800fb8f 	.word	0x0800fb8f
 800fb40:	0800fb93 	.word	0x0800fb93
 800fb44:	0800fb97 	.word	0x0800fb97
 800fb48:	0800fb9b 	.word	0x0800fb9b
 800fb4c:	0800fb9f 	.word	0x0800fb9f
 800fb50:	0800fba3 	.word	0x0800fba3
  case 0:
    return 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	e027      	b.n	800fba8 <getExtendOffset+0xac>
  case 1:
    return ((-1) << 1) + 1;
 800fb58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb5c:	e024      	b.n	800fba8 <getExtendOffset+0xac>
  case 2:
    return ((-1) << 2) + 1;
 800fb5e:	f06f 0302 	mvn.w	r3, #2
 800fb62:	e021      	b.n	800fba8 <getExtendOffset+0xac>
  case 3:
    return ((-1) << 3) + 1;
 800fb64:	f06f 0306 	mvn.w	r3, #6
 800fb68:	e01e      	b.n	800fba8 <getExtendOffset+0xac>
  case 4:
    return ((-1) << 4) + 1;
 800fb6a:	f06f 030e 	mvn.w	r3, #14
 800fb6e:	e01b      	b.n	800fba8 <getExtendOffset+0xac>
  case 5:
    return ((-1) << 5) + 1;
 800fb70:	f06f 031e 	mvn.w	r3, #30
 800fb74:	e018      	b.n	800fba8 <getExtendOffset+0xac>
  case 6:
    return ((-1) << 6) + 1;
 800fb76:	f06f 033e 	mvn.w	r3, #62	; 0x3e
 800fb7a:	e015      	b.n	800fba8 <getExtendOffset+0xac>
  case 7:
    return ((-1) << 7) + 1;
 800fb7c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800fb80:	e012      	b.n	800fba8 <getExtendOffset+0xac>
  case 8:
    return ((-1) << 8) + 1;
 800fb82:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 800fb86:	e00f      	b.n	800fba8 <getExtendOffset+0xac>
  case 9:
    return ((-1) << 9) + 1;
 800fb88:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800fb8c:	e00c      	b.n	800fba8 <getExtendOffset+0xac>
  case 10:
    return ((-1) << 10) + 1;
 800fb8e:	4b09      	ldr	r3, [pc, #36]	; (800fbb4 <getExtendOffset+0xb8>)
 800fb90:	e00a      	b.n	800fba8 <getExtendOffset+0xac>
  case 11:
    return ((-1) << 11) + 1;
 800fb92:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <getExtendOffset+0xbc>)
 800fb94:	e008      	b.n	800fba8 <getExtendOffset+0xac>
  case 12:
    return ((-1) << 12) + 1;
 800fb96:	4b09      	ldr	r3, [pc, #36]	; (800fbbc <getExtendOffset+0xc0>)
 800fb98:	e006      	b.n	800fba8 <getExtendOffset+0xac>
  case 13:
    return ((-1) << 13) + 1;
 800fb9a:	4b09      	ldr	r3, [pc, #36]	; (800fbc0 <getExtendOffset+0xc4>)
 800fb9c:	e004      	b.n	800fba8 <getExtendOffset+0xac>
  case 14:
    return ((-1) << 14) + 1;
 800fb9e:	4b09      	ldr	r3, [pc, #36]	; (800fbc4 <getExtendOffset+0xc8>)
 800fba0:	e002      	b.n	800fba8 <getExtendOffset+0xac>
  case 15:
    return ((-1) << 15) + 1;
 800fba2:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <getExtendOffset+0xcc>)
 800fba4:	e000      	b.n	800fba8 <getExtendOffset+0xac>
  default:
    return 0;
 800fba6:	2300      	movs	r3, #0
  }
};
 800fba8:	4618      	mov	r0, r3
 800fbaa:	370c      	adds	r7, #12
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr
 800fbb4:	fffffc01 	.word	0xfffffc01
 800fbb8:	fffff801 	.word	0xfffff801
 800fbbc:	fffff001 	.word	0xfffff001
 800fbc0:	ffffe001 	.word	0xffffe001
 800fbc4:	ffffc001 	.word	0xffffc001
 800fbc8:	ffff8001 	.word	0xffff8001

0800fbcc <huffExtend>:

static PJPG_INLINE int16 huffExtend(uint16 x, uint8 s) {
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	460a      	mov	r2, r1
 800fbd6:	80fb      	strh	r3, [r7, #6]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	717b      	strb	r3, [r7, #5]
  return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
 800fbdc:	797b      	ldrb	r3, [r7, #5]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff ff32 	bl	800fa48 <getExtendTest>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	88fb      	ldrh	r3, [r7, #6]
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d20a      	bcs.n	800fc04 <huffExtend+0x38>
 800fbee:	797b      	ldrb	r3, [r7, #5]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff ff83 	bl	800fafc <getExtendOffset>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	88fb      	ldrh	r3, [r7, #6]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	b21b      	sxth	r3, r3
 800fc02:	e001      	b.n	800fc08 <huffExtend+0x3c>
 800fc04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <huffDecode>:

static PJPG_INLINE uint8 huffDecode(const HuffTable *pHuffTable,
                                    const uint8 *pHuffVal) {
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  uint8 i = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	73fb      	strb	r3, [r7, #15]
  uint8 j;
  uint16 code = getBit();
 800fc1e:	f7ff fedd 	bl	800f9dc <getBit>
 800fc22:	4603      	mov	r3, r0
 800fc24:	81bb      	strh	r3, [r7, #12]

  for (;;) {
    uint16 maxCode;

    if (i == 16)
 800fc26:	7bfb      	ldrb	r3, [r7, #15]
 800fc28:	2b10      	cmp	r3, #16
 800fc2a:	d101      	bne.n	800fc30 <huffDecode+0x20>
      return 0;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e033      	b.n	800fc98 <huffDecode+0x88>

    maxCode = pHuffTable->mMaxCode[i];
 800fc30:	7bfa      	ldrb	r2, [r7, #15]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	3210      	adds	r2, #16
 800fc36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fc3a:	817b      	strh	r3, [r7, #10]
    if ((code <= maxCode) && (maxCode != 0xFFFF))
 800fc3c:	89ba      	ldrh	r2, [r7, #12]
 800fc3e:	897b      	ldrh	r3, [r7, #10]
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d804      	bhi.n	800fc4e <huffDecode+0x3e>
 800fc44:	897b      	ldrh	r3, [r7, #10]
 800fc46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d10d      	bne.n	800fc6a <huffDecode+0x5a>
      break;

    i++;
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
 800fc50:	3301      	adds	r3, #1
 800fc52:	73fb      	strb	r3, [r7, #15]
    code <<= 1;
 800fc54:	89bb      	ldrh	r3, [r7, #12]
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	81bb      	strh	r3, [r7, #12]
    code |= getBit();
 800fc5a:	f7ff febf 	bl	800f9dc <getBit>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	89bb      	ldrh	r3, [r7, #12]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	81bb      	strh	r3, [r7, #12]
  for (;;) {
 800fc68:	e7dd      	b.n	800fc26 <huffDecode+0x16>
      break;
 800fc6a:	bf00      	nop
  }

  j = pHuffTable->mValPtr[i];
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	4413      	add	r3, r2
 800fc72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc76:	727b      	strb	r3, [r7, #9]
  j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
 800fc78:	89bb      	ldrh	r3, [r7, #12]
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	7bf9      	ldrb	r1, [r7, #15]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	7a7b      	ldrb	r3, [r7, #9]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	727b      	strb	r3, [r7, #9]

  return pHuffVal[j];
 800fc90:	7a7b      	ldrb	r3, [r7, #9]
 800fc92:	683a      	ldr	r2, [r7, #0]
 800fc94:	4413      	add	r3, r2
 800fc96:	781b      	ldrb	r3, [r3, #0]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <huffCreate>:

static void huffCreate(const uint8 *pBits, HuffTable *pHuffTable) {
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
  uint8 i = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	73fb      	strb	r3, [r7, #15]
  uint8 j = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	73bb      	strb	r3, [r7, #14]

  uint16 code = 0;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	81bb      	strh	r3, [r7, #12]

  for (;;) {
    uint8 num = pBits[i];
 800fcb6:	7bfb      	ldrb	r3, [r7, #15]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	4413      	add	r3, r2
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	72fb      	strb	r3, [r7, #11]

    if (!num) {
 800fcc0:	7afb      	ldrb	r3, [r7, #11]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d112      	bne.n	800fcec <huffCreate+0x4c>
      pHuffTable->mMinCode[i] = 0x0000;
 800fcc6:	7bfa      	ldrb	r2, [r7, #15]
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2100      	movs	r1, #0
 800fccc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      pHuffTable->mMaxCode[i] = 0xFFFF;
 800fcd0:	7bfa      	ldrb	r2, [r7, #15]
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	3210      	adds	r2, #16
 800fcd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fcda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      pHuffTable->mValPtr[i] = 0;
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
 800fce0:	683a      	ldr	r2, [r7, #0]
 800fce2:	4413      	add	r3, r2
 800fce4:	2200      	movs	r2, #0
 800fce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcea:	e01f      	b.n	800fd2c <huffCreate+0x8c>
    } else {
      pHuffTable->mMinCode[i] = code;
 800fcec:	7bfa      	ldrb	r2, [r7, #15]
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	89b9      	ldrh	r1, [r7, #12]
 800fcf2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      pHuffTable->mMaxCode[i] = code + num - 1;
 800fcf6:	7afb      	ldrb	r3, [r7, #11]
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	89bb      	ldrh	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	7bfa      	ldrb	r2, [r7, #15]
 800fd02:	3b01      	subs	r3, #1
 800fd04:	b299      	uxth	r1, r3
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	3210      	adds	r2, #16
 800fd0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      pHuffTable->mValPtr[i] = j;
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	4413      	add	r3, r2
 800fd14:	7bba      	ldrb	r2, [r7, #14]
 800fd16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      j = (uint8)(j + num);
 800fd1a:	7bba      	ldrb	r2, [r7, #14]
 800fd1c:	7afb      	ldrb	r3, [r7, #11]
 800fd1e:	4413      	add	r3, r2
 800fd20:	73bb      	strb	r3, [r7, #14]

      code = (uint16)(code + num);
 800fd22:	7afb      	ldrb	r3, [r7, #11]
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	89bb      	ldrh	r3, [r7, #12]
 800fd28:	4413      	add	r3, r2
 800fd2a:	81bb      	strh	r3, [r7, #12]
    }

    code <<= 1;
 800fd2c:	89bb      	ldrh	r3, [r7, #12]
 800fd2e:	005b      	lsls	r3, r3, #1
 800fd30:	81bb      	strh	r3, [r7, #12]

    i++;
 800fd32:	7bfb      	ldrb	r3, [r7, #15]
 800fd34:	3301      	adds	r3, #1
 800fd36:	73fb      	strb	r3, [r7, #15]
    if (i > 15)
 800fd38:	7bfb      	ldrb	r3, [r7, #15]
 800fd3a:	2b0f      	cmp	r3, #15
 800fd3c:	d800      	bhi.n	800fd40 <huffCreate+0xa0>
  for (;;) {
 800fd3e:	e7ba      	b.n	800fcb6 <huffCreate+0x16>
      break;
 800fd40:	bf00      	nop
  }
}
 800fd42:	bf00      	nop
 800fd44:	3714      	adds	r7, #20
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
	...

0800fd50 <getHuffTable>:

static HuffTable *getHuffTable(uint8 index) {
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	4603      	mov	r3, r0
 800fd58:	71fb      	strb	r3, [r7, #7]

  switch (index) {
 800fd5a:	79fb      	ldrb	r3, [r7, #7]
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d813      	bhi.n	800fd88 <getHuffTable+0x38>
 800fd60:	a201      	add	r2, pc, #4	; (adr r2, 800fd68 <getHuffTable+0x18>)
 800fd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd66:	bf00      	nop
 800fd68:	0800fd79 	.word	0x0800fd79
 800fd6c:	0800fd7d 	.word	0x0800fd7d
 800fd70:	0800fd81 	.word	0x0800fd81
 800fd74:	0800fd85 	.word	0x0800fd85
  case 0:
    return &gHuffTab0;
 800fd78:	4b07      	ldr	r3, [pc, #28]	; (800fd98 <getHuffTable+0x48>)
 800fd7a:	e006      	b.n	800fd8a <getHuffTable+0x3a>
  case 1:
    return &gHuffTab1;
 800fd7c:	4b07      	ldr	r3, [pc, #28]	; (800fd9c <getHuffTable+0x4c>)
 800fd7e:	e004      	b.n	800fd8a <getHuffTable+0x3a>
  case 2:
    return &gHuffTab2;
 800fd80:	4b07      	ldr	r3, [pc, #28]	; (800fda0 <getHuffTable+0x50>)
 800fd82:	e002      	b.n	800fd8a <getHuffTable+0x3a>
  case 3:
    return &gHuffTab3;
 800fd84:	4b07      	ldr	r3, [pc, #28]	; (800fda4 <getHuffTable+0x54>)
 800fd86:	e000      	b.n	800fd8a <getHuffTable+0x3a>
  default:
    return 0;
 800fd88:	2300      	movs	r3, #0
  }
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	200045bc 	.word	0x200045bc
 800fd9c:	2000461c 	.word	0x2000461c
 800fda0:	2000467c 	.word	0x2000467c
 800fda4:	200047cc 	.word	0x200047cc

0800fda8 <getHuffVal>:

static uint8 *getHuffVal(uint8 index) {
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	4603      	mov	r3, r0
 800fdb0:	71fb      	strb	r3, [r7, #7]

  switch (index) {
 800fdb2:	79fb      	ldrb	r3, [r7, #7]
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d813      	bhi.n	800fde0 <getHuffVal+0x38>
 800fdb8:	a201      	add	r2, pc, #4	; (adr r2, 800fdc0 <getHuffVal+0x18>)
 800fdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbe:	bf00      	nop
 800fdc0:	0800fdd1 	.word	0x0800fdd1
 800fdc4:	0800fdd5 	.word	0x0800fdd5
 800fdc8:	0800fdd9 	.word	0x0800fdd9
 800fdcc:	0800fddd 	.word	0x0800fddd
  case 0:
    return gHuffVal0;
 800fdd0:	4b07      	ldr	r3, [pc, #28]	; (800fdf0 <getHuffVal+0x48>)
 800fdd2:	e006      	b.n	800fde2 <getHuffVal+0x3a>
  case 1:
    return gHuffVal1;
 800fdd4:	4b07      	ldr	r3, [pc, #28]	; (800fdf4 <getHuffVal+0x4c>)
 800fdd6:	e004      	b.n	800fde2 <getHuffVal+0x3a>
  case 2:
    return gHuffVal2;
 800fdd8:	4b07      	ldr	r3, [pc, #28]	; (800fdf8 <getHuffVal+0x50>)
 800fdda:	e002      	b.n	800fde2 <getHuffVal+0x3a>
  case 3:
    return gHuffVal3;
 800fddc:	4b07      	ldr	r3, [pc, #28]	; (800fdfc <getHuffVal+0x54>)
 800fdde:	e000      	b.n	800fde2 <getHuffVal+0x3a>
  default:
    return 0;
 800fde0:	2300      	movs	r3, #0
  }
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	370c      	adds	r7, #12
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr
 800fdee:	bf00      	nop
 800fdf0:	2000460c 	.word	0x2000460c
 800fdf4:	2000466c 	.word	0x2000466c
 800fdf8:	200046cc 	.word	0x200046cc
 800fdfc:	2000481c 	.word	0x2000481c

0800fe00 <getMaxHuffCodes>:

static uint16 getMaxHuffCodes(uint8 index) { return (index < 2) ? 12 : 255; }
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	4603      	mov	r3, r0
 800fe08:	71fb      	strb	r3, [r7, #7]
 800fe0a:	79fb      	ldrb	r3, [r7, #7]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d801      	bhi.n	800fe14 <getMaxHuffCodes+0x14>
 800fe10:	230c      	movs	r3, #12
 800fe12:	e000      	b.n	800fe16 <getMaxHuffCodes+0x16>
 800fe14:	23ff      	movs	r3, #255	; 0xff
 800fe16:	4618      	mov	r0, r3
 800fe18:	370c      	adds	r7, #12
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
	...

0800fe24 <readDHTMarker>:

static uint8 readDHTMarker(void) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b08a      	sub	sp, #40	; 0x28
 800fe28:	af00      	add	r7, sp, #0
  uint8 bits[16];
  uint16 left = getBits1(16);
 800fe2a:	2010      	movs	r0, #16
 800fe2c:	f7ff fdb8 	bl	800f9a0 <getBits1>
 800fe30:	4603      	mov	r3, r0
 800fe32:	84fb      	strh	r3, [r7, #38]	; 0x26

  if (left < 2)
 800fe34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d801      	bhi.n	800fe3e <readDHTMarker+0x1a>
    return PJPG_BAD_DHT_MARKER;
 800fe3a:	2304      	movs	r3, #4
 800fe3c:	e0a0      	b.n	800ff80 <readDHTMarker+0x15c>

  left -= 2;
 800fe3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe40:	3b02      	subs	r3, #2
 800fe42:	84fb      	strh	r3, [r7, #38]	; 0x26

  while (left) {
 800fe44:	e097      	b.n	800ff76 <readDHTMarker+0x152>
    uint8 i, tableIndex, index;
    uint8 *pHuffVal;
    HuffTable *pHuffTable;
    uint16 count, totalRead;

    index = (uint8)getBits1(8);
 800fe46:	2008      	movs	r0, #8
 800fe48:	f7ff fdaa 	bl	800f9a0 <getBits1>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    if (((index & 0xF) > 1) || ((index & 0xF0) > 0x10))
 800fe52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fe56:	f003 030f 	and.w	r3, r3, #15
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	dc05      	bgt.n	800fe6a <readDHTMarker+0x46>
 800fe5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fe62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe66:	2b10      	cmp	r3, #16
 800fe68:	dd01      	ble.n	800fe6e <readDHTMarker+0x4a>
      return PJPG_BAD_DHT_INDEX;
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	e088      	b.n	800ff80 <readDHTMarker+0x15c>

    tableIndex = ((index >> 3) & 2) + (index & 1);
 800fe6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fe72:	08db      	lsrs	r3, r3, #3
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	b25b      	sxtb	r3, r3
 800fe78:	f003 0302 	and.w	r3, r3, #2
 800fe7c:	b25a      	sxtb	r2, r3
 800fe7e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800fe82:	f003 0301 	and.w	r3, r3, #1
 800fe86:	b25b      	sxtb	r3, r3
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	b25b      	sxtb	r3, r3
 800fe8c:	f887 3020 	strb.w	r3, [r7, #32]

    pHuffTable = getHuffTable(tableIndex);
 800fe90:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7ff ff5b 	bl	800fd50 <getHuffTable>
 800fe9a:	61f8      	str	r0, [r7, #28]
    pHuffVal = getHuffVal(tableIndex);
 800fe9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff ff81 	bl	800fda8 <getHuffVal>
 800fea6:	61b8      	str	r0, [r7, #24]

    gValidHuffTables |= (1 << tableIndex);
 800fea8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800feac:	2201      	movs	r2, #1
 800feae:	fa02 f303 	lsl.w	r3, r2, r3
 800feb2:	b25a      	sxtb	r2, r3
 800feb4:	4b34      	ldr	r3, [pc, #208]	; (800ff88 <readDHTMarker+0x164>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	b25b      	sxtb	r3, r3
 800feba:	4313      	orrs	r3, r2
 800febc:	b25b      	sxtb	r3, r3
 800febe:	b2da      	uxtb	r2, r3
 800fec0:	4b31      	ldr	r3, [pc, #196]	; (800ff88 <readDHTMarker+0x164>)
 800fec2:	701a      	strb	r2, [r3, #0]

    count = 0;
 800fec4:	2300      	movs	r3, #0
 800fec6:	847b      	strh	r3, [r7, #34]	; 0x22
    for (i = 0; i <= 15; i++) {
 800fec8:	2300      	movs	r3, #0
 800feca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fece:	e016      	b.n	800fefe <readDHTMarker+0xda>
      uint8 n = (uint8)getBits1(8);
 800fed0:	2008      	movs	r0, #8
 800fed2:	f7ff fd65 	bl	800f9a0 <getBits1>
 800fed6:	4603      	mov	r3, r0
 800fed8:	757b      	strb	r3, [r7, #21]
      bits[i] = n;
 800feda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fee2:	4413      	add	r3, r2
 800fee4:	7d7a      	ldrb	r2, [r7, #21]
 800fee6:	f803 2c24 	strb.w	r2, [r3, #-36]
      count = (uint16)(count + n);
 800feea:	7d7b      	ldrb	r3, [r7, #21]
 800feec:	b29a      	uxth	r2, r3
 800feee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fef0:	4413      	add	r3, r2
 800fef2:	847b      	strh	r3, [r7, #34]	; 0x22
    for (i = 0; i <= 15; i++) {
 800fef4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fef8:	3301      	adds	r3, #1
 800fefa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fefe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ff02:	2b0f      	cmp	r3, #15
 800ff04:	d9e4      	bls.n	800fed0 <readDHTMarker+0xac>
    }

    if (count > getMaxHuffCodes(tableIndex))
 800ff06:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7ff ff78 	bl	800fe00 <getMaxHuffCodes>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d901      	bls.n	800ff1e <readDHTMarker+0xfa>
      return PJPG_BAD_DHT_COUNTS;
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	e030      	b.n	800ff80 <readDHTMarker+0x15c>

    for (i = 0; i < count; i++)
 800ff1e:	2300      	movs	r3, #0
 800ff20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ff24:	e00f      	b.n	800ff46 <readDHTMarker+0x122>
      pHuffVal[i] = (uint8)getBits1(8);
 800ff26:	2008      	movs	r0, #8
 800ff28:	f7ff fd3a 	bl	800f9a0 <getBits1>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	4619      	mov	r1, r3
 800ff30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	4413      	add	r3, r2
 800ff38:	b2ca      	uxtb	r2, r1
 800ff3a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 800ff3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ff40:	3301      	adds	r3, #1
 800ff42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ff46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d8e9      	bhi.n	800ff26 <readDHTMarker+0x102>

    totalRead = 1 + 16 + count;
 800ff52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff54:	3311      	adds	r3, #17
 800ff56:	82fb      	strh	r3, [r7, #22]

    if (left < totalRead)
 800ff58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ff5a:	8afb      	ldrh	r3, [r7, #22]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d201      	bcs.n	800ff64 <readDHTMarker+0x140>
      return PJPG_BAD_DHT_MARKER;
 800ff60:	2304      	movs	r3, #4
 800ff62:	e00d      	b.n	800ff80 <readDHTMarker+0x15c>

    left = (uint16)(left - totalRead);
 800ff64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ff66:	8afb      	ldrh	r3, [r7, #22]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	84fb      	strh	r3, [r7, #38]	; 0x26

    huffCreate(bits, pHuffTable);
 800ff6c:	1d3b      	adds	r3, r7, #4
 800ff6e:	69f9      	ldr	r1, [r7, #28]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff fe95 	bl	800fca0 <huffCreate>
  while (left) {
 800ff76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f47f af64 	bne.w	800fe46 <readDHTMarker+0x22>
  }

  return 0;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3728      	adds	r7, #40	; 0x28
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	2000491c 	.word	0x2000491c

0800ff8c <readDQTMarker>:

static void createWinogradQuant(int16 *pQuant);

static uint8 readDQTMarker(void) {
 800ff8c:	b590      	push	{r4, r7, lr}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
  uint16 left = getBits1(16);
 800ff92:	2010      	movs	r0, #16
 800ff94:	f7ff fd04 	bl	800f9a0 <getBits1>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	81fb      	strh	r3, [r7, #14]

  if (left < 2)
 800ff9c:	89fb      	ldrh	r3, [r7, #14]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d801      	bhi.n	800ffa6 <readDQTMarker+0x1a>
    return PJPG_BAD_DQT_MARKER;
 800ffa2:	2305      	movs	r3, #5
 800ffa4:	e06b      	b.n	801007e <readDQTMarker+0xf2>

  left -= 2;
 800ffa6:	89fb      	ldrh	r3, [r7, #14]
 800ffa8:	3b02      	subs	r3, #2
 800ffaa:	81fb      	strh	r3, [r7, #14]

  while (left) {
 800ffac:	e063      	b.n	8010076 <readDQTMarker+0xea>
    uint8 i;
    uint8 n = (uint8)getBits1(8);
 800ffae:	2008      	movs	r0, #8
 800ffb0:	f7ff fcf6 	bl	800f9a0 <getBits1>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	71fb      	strb	r3, [r7, #7]
    uint8 prec = n >> 4;
 800ffb8:	79fb      	ldrb	r3, [r7, #7]
 800ffba:	091b      	lsrs	r3, r3, #4
 800ffbc:	71bb      	strb	r3, [r7, #6]
    uint16 totalRead;

    n &= 0x0F;
 800ffbe:	79fb      	ldrb	r3, [r7, #7]
 800ffc0:	f003 030f 	and.w	r3, r3, #15
 800ffc4:	71fb      	strb	r3, [r7, #7]

    if (n > 1)
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d901      	bls.n	800ffd0 <readDQTMarker+0x44>
      return PJPG_BAD_DQT_TABLE;
 800ffcc:	2306      	movs	r3, #6
 800ffce:	e056      	b.n	801007e <readDQTMarker+0xf2>

    gValidQuantTables |= (n ? 2 : 1);
 800ffd0:	79fb      	ldrb	r3, [r7, #7]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d001      	beq.n	800ffda <readDQTMarker+0x4e>
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	e000      	b.n	800ffdc <readDQTMarker+0x50>
 800ffda:	2201      	movs	r2, #1
 800ffdc:	4b2a      	ldr	r3, [pc, #168]	; (8010088 <readDQTMarker+0xfc>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	b25b      	sxtb	r3, r3
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	b25b      	sxtb	r3, r3
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	4b27      	ldr	r3, [pc, #156]	; (8010088 <readDQTMarker+0xfc>)
 800ffea:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < 64; i++) {
 800ffec:	2300      	movs	r3, #0
 800ffee:	737b      	strb	r3, [r7, #13]
 800fff0:	e023      	b.n	801003a <readDQTMarker+0xae>
      uint16 temp = getBits1(8);
 800fff2:	2008      	movs	r0, #8
 800fff4:	f7ff fcd4 	bl	800f9a0 <getBits1>
 800fff8:	4603      	mov	r3, r0
 800fffa:	813b      	strh	r3, [r7, #8]

      if (prec)
 800fffc:	79bb      	ldrb	r3, [r7, #6]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d008      	beq.n	8010014 <readDQTMarker+0x88>
        temp = (temp << 8) + getBits1(8);
 8010002:	893b      	ldrh	r3, [r7, #8]
 8010004:	021b      	lsls	r3, r3, #8
 8010006:	b29c      	uxth	r4, r3
 8010008:	2008      	movs	r0, #8
 801000a:	f7ff fcc9 	bl	800f9a0 <getBits1>
 801000e:	4603      	mov	r3, r0
 8010010:	4423      	add	r3, r4
 8010012:	813b      	strh	r3, [r7, #8]

      if (n)
 8010014:	79fb      	ldrb	r3, [r7, #7]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d006      	beq.n	8010028 <readDQTMarker+0x9c>
        gQuant1[i] = (int16)temp;
 801001a:	7b7b      	ldrb	r3, [r7, #13]
 801001c:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8010020:	4a1a      	ldr	r2, [pc, #104]	; (801008c <readDQTMarker+0x100>)
 8010022:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8010026:	e005      	b.n	8010034 <readDQTMarker+0xa8>
      else
        gQuant0[i] = (int16)temp;
 8010028:	7b7b      	ldrb	r3, [r7, #13]
 801002a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801002e:	4a18      	ldr	r2, [pc, #96]	; (8010090 <readDQTMarker+0x104>)
 8010030:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < 64; i++) {
 8010034:	7b7b      	ldrb	r3, [r7, #13]
 8010036:	3301      	adds	r3, #1
 8010038:	737b      	strb	r3, [r7, #13]
 801003a:	7b7b      	ldrb	r3, [r7, #13]
 801003c:	2b3f      	cmp	r3, #63	; 0x3f
 801003e:	d9d8      	bls.n	800fff2 <readDQTMarker+0x66>
    }

    createWinogradQuant(n ? gQuant1 : gQuant0);
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d001      	beq.n	801004a <readDQTMarker+0xbe>
 8010046:	4b11      	ldr	r3, [pc, #68]	; (801008c <readDQTMarker+0x100>)
 8010048:	e000      	b.n	801004c <readDQTMarker+0xc0>
 801004a:	4b11      	ldr	r3, [pc, #68]	; (8010090 <readDQTMarker+0x104>)
 801004c:	4618      	mov	r0, r3
 801004e:	f000 fd2b 	bl	8010aa8 <createWinogradQuant>

    totalRead = 64 + 1;
 8010052:	2341      	movs	r3, #65	; 0x41
 8010054:	817b      	strh	r3, [r7, #10]

    if (prec)
 8010056:	79bb      	ldrb	r3, [r7, #6]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <readDQTMarker+0xd6>
      totalRead += 64;
 801005c:	897b      	ldrh	r3, [r7, #10]
 801005e:	3340      	adds	r3, #64	; 0x40
 8010060:	817b      	strh	r3, [r7, #10]

    if (left < totalRead)
 8010062:	89fa      	ldrh	r2, [r7, #14]
 8010064:	897b      	ldrh	r3, [r7, #10]
 8010066:	429a      	cmp	r2, r3
 8010068:	d201      	bcs.n	801006e <readDQTMarker+0xe2>
      return PJPG_BAD_DQT_LENGTH;
 801006a:	2315      	movs	r3, #21
 801006c:	e007      	b.n	801007e <readDQTMarker+0xf2>

    left = (uint16)(left - totalRead);
 801006e:	89fa      	ldrh	r2, [r7, #14]
 8010070:	897b      	ldrh	r3, [r7, #10]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	81fb      	strh	r3, [r7, #14]
  while (left) {
 8010076:	89fb      	ldrh	r3, [r7, #14]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d198      	bne.n	800ffae <readDQTMarker+0x22>
  }

  return 0;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	bd90      	pop	{r4, r7, pc}
 8010086:	bf00      	nop
 8010088:	2000491d 	.word	0x2000491d
 801008c:	20004534 	.word	0x20004534
 8010090:	200044b4 	.word	0x200044b4

08010094 <readSOFMarker>:

static uint8 readSOFMarker(void) {
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
  uint8 i;
  uint16 left = getBits1(16);
 801009a:	2010      	movs	r0, #16
 801009c:	f7ff fc80 	bl	800f9a0 <getBits1>
 80100a0:	4603      	mov	r3, r0
 80100a2:	80bb      	strh	r3, [r7, #4]

  if (getBits1(8) != 8)
 80100a4:	2008      	movs	r0, #8
 80100a6:	f7ff fc7b 	bl	800f9a0 <getBits1>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b08      	cmp	r3, #8
 80100ae:	d001      	beq.n	80100b4 <readSOFMarker+0x20>
    return PJPG_BAD_PRECISION;
 80100b0:	2307      	movs	r3, #7
 80100b2:	e073      	b.n	801019c <readSOFMarker+0x108>

  gImageYSize = getBits1(16);
 80100b4:	2010      	movs	r0, #16
 80100b6:	f7ff fc73 	bl	800f9a0 <getBits1>
 80100ba:	4603      	mov	r3, r0
 80100bc:	461a      	mov	r2, r3
 80100be:	4b39      	ldr	r3, [pc, #228]	; (80101a4 <readSOFMarker+0x110>)
 80100c0:	801a      	strh	r2, [r3, #0]

  if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
 80100c2:	4b38      	ldr	r3, [pc, #224]	; (80101a4 <readSOFMarker+0x110>)
 80100c4:	881b      	ldrh	r3, [r3, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d004      	beq.n	80100d4 <readSOFMarker+0x40>
 80100ca:	4b36      	ldr	r3, [pc, #216]	; (80101a4 <readSOFMarker+0x110>)
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100d2:	d901      	bls.n	80100d8 <readSOFMarker+0x44>
    return PJPG_BAD_HEIGHT;
 80100d4:	2308      	movs	r3, #8
 80100d6:	e061      	b.n	801019c <readSOFMarker+0x108>

  gImageXSize = getBits1(16);
 80100d8:	2010      	movs	r0, #16
 80100da:	f7ff fc61 	bl	800f9a0 <getBits1>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
 80100e2:	4b31      	ldr	r3, [pc, #196]	; (80101a8 <readSOFMarker+0x114>)
 80100e4:	801a      	strh	r2, [r3, #0]

  if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
 80100e6:	4b30      	ldr	r3, [pc, #192]	; (80101a8 <readSOFMarker+0x114>)
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d004      	beq.n	80100f8 <readSOFMarker+0x64>
 80100ee:	4b2e      	ldr	r3, [pc, #184]	; (80101a8 <readSOFMarker+0x114>)
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100f6:	d901      	bls.n	80100fc <readSOFMarker+0x68>
    return PJPG_BAD_WIDTH;
 80100f8:	2309      	movs	r3, #9
 80100fa:	e04f      	b.n	801019c <readSOFMarker+0x108>

  gCompsInFrame = (uint8)getBits1(8);
 80100fc:	2008      	movs	r0, #8
 80100fe:	f7ff fc4f 	bl	800f9a0 <getBits1>
 8010102:	4603      	mov	r3, r0
 8010104:	b2da      	uxtb	r2, r3
 8010106:	4b29      	ldr	r3, [pc, #164]	; (80101ac <readSOFMarker+0x118>)
 8010108:	701a      	strb	r2, [r3, #0]

  if (gCompsInFrame > 3)
 801010a:	4b28      	ldr	r3, [pc, #160]	; (80101ac <readSOFMarker+0x118>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	2b03      	cmp	r3, #3
 8010110:	d901      	bls.n	8010116 <readSOFMarker+0x82>
    return PJPG_TOO_MANY_COMPONENTS;
 8010112:	230a      	movs	r3, #10
 8010114:	e042      	b.n	801019c <readSOFMarker+0x108>

  if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
 8010116:	88ba      	ldrh	r2, [r7, #4]
 8010118:	4b24      	ldr	r3, [pc, #144]	; (80101ac <readSOFMarker+0x118>)
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	4619      	mov	r1, r3
 801011e:	460b      	mov	r3, r1
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	440b      	add	r3, r1
 8010124:	3308      	adds	r3, #8
 8010126:	429a      	cmp	r2, r3
 8010128:	d001      	beq.n	801012e <readSOFMarker+0x9a>
    return PJPG_BAD_SOF_LENGTH;
 801012a:	230b      	movs	r3, #11
 801012c:	e036      	b.n	801019c <readSOFMarker+0x108>

  for (i = 0; i < gCompsInFrame; i++) {
 801012e:	2300      	movs	r3, #0
 8010130:	71fb      	strb	r3, [r7, #7]
 8010132:	e02d      	b.n	8010190 <readSOFMarker+0xfc>
    gCompIdent[i] = (uint8)getBits1(8);
 8010134:	2008      	movs	r0, #8
 8010136:	f7ff fc33 	bl	800f9a0 <getBits1>
 801013a:	4603      	mov	r3, r0
 801013c:	461a      	mov	r2, r3
 801013e:	79fb      	ldrb	r3, [r7, #7]
 8010140:	b2d1      	uxtb	r1, r2
 8010142:	4a1b      	ldr	r2, [pc, #108]	; (80101b0 <readSOFMarker+0x11c>)
 8010144:	54d1      	strb	r1, [r2, r3]
    gCompHSamp[i] = (uint8)getBits1(4);
 8010146:	2004      	movs	r0, #4
 8010148:	f7ff fc2a 	bl	800f9a0 <getBits1>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	79fb      	ldrb	r3, [r7, #7]
 8010152:	b2d1      	uxtb	r1, r2
 8010154:	4a17      	ldr	r2, [pc, #92]	; (80101b4 <readSOFMarker+0x120>)
 8010156:	54d1      	strb	r1, [r2, r3]
    gCompVSamp[i] = (uint8)getBits1(4);
 8010158:	2004      	movs	r0, #4
 801015a:	f7ff fc21 	bl	800f9a0 <getBits1>
 801015e:	4603      	mov	r3, r0
 8010160:	461a      	mov	r2, r3
 8010162:	79fb      	ldrb	r3, [r7, #7]
 8010164:	b2d1      	uxtb	r1, r2
 8010166:	4a14      	ldr	r2, [pc, #80]	; (80101b8 <readSOFMarker+0x124>)
 8010168:	54d1      	strb	r1, [r2, r3]
    gCompQuant[i] = (uint8)getBits1(8);
 801016a:	2008      	movs	r0, #8
 801016c:	f7ff fc18 	bl	800f9a0 <getBits1>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	79fb      	ldrb	r3, [r7, #7]
 8010176:	b2d1      	uxtb	r1, r2
 8010178:	4a10      	ldr	r2, [pc, #64]	; (80101bc <readSOFMarker+0x128>)
 801017a:	54d1      	strb	r1, [r2, r3]

    if (gCompQuant[i] > 1)
 801017c:	79fb      	ldrb	r3, [r7, #7]
 801017e:	4a0f      	ldr	r2, [pc, #60]	; (80101bc <readSOFMarker+0x128>)
 8010180:	5cd3      	ldrb	r3, [r2, r3]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d901      	bls.n	801018a <readSOFMarker+0xf6>
      return PJPG_UNSUPPORTED_QUANT_TABLE;
 8010186:	2324      	movs	r3, #36	; 0x24
 8010188:	e008      	b.n	801019c <readSOFMarker+0x108>
  for (i = 0; i < gCompsInFrame; i++) {
 801018a:	79fb      	ldrb	r3, [r7, #7]
 801018c:	3301      	adds	r3, #1
 801018e:	71fb      	strb	r3, [r7, #7]
 8010190:	4b06      	ldr	r3, [pc, #24]	; (80101ac <readSOFMarker+0x118>)
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	79fa      	ldrb	r2, [r7, #7]
 8010196:	429a      	cmp	r2, r3
 8010198:	d3cc      	bcc.n	8010134 <readSOFMarker+0xa0>
  }

  return 0;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	20004a28 	.word	0x20004a28
 80101a8:	20004a26 	.word	0x20004a26
 80101ac:	20004a2a 	.word	0x20004a2a
 80101b0:	20004a2c 	.word	0x20004a2c
 80101b4:	20004a30 	.word	0x20004a30
 80101b8:	20004a34 	.word	0x20004a34
 80101bc:	20004a38 	.word	0x20004a38

080101c0 <skipVariableMarker>:

static uint8 skipVariableMarker(void) {
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
  uint16 left = getBits1(16);
 80101c6:	2010      	movs	r0, #16
 80101c8:	f7ff fbea 	bl	800f9a0 <getBits1>
 80101cc:	4603      	mov	r3, r0
 80101ce:	80fb      	strh	r3, [r7, #6]

  if (left < 2)
 80101d0:	88fb      	ldrh	r3, [r7, #6]
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d801      	bhi.n	80101da <skipVariableMarker+0x1a>
    return PJPG_BAD_VARIABLE_MARKER;
 80101d6:	230c      	movs	r3, #12
 80101d8:	e00d      	b.n	80101f6 <skipVariableMarker+0x36>

  left -= 2;
 80101da:	88fb      	ldrh	r3, [r7, #6]
 80101dc:	3b02      	subs	r3, #2
 80101de:	80fb      	strh	r3, [r7, #6]

  while (left) {
 80101e0:	e005      	b.n	80101ee <skipVariableMarker+0x2e>
    getBits1(8);
 80101e2:	2008      	movs	r0, #8
 80101e4:	f7ff fbdc 	bl	800f9a0 <getBits1>
    left--;
 80101e8:	88fb      	ldrh	r3, [r7, #6]
 80101ea:	3b01      	subs	r3, #1
 80101ec:	80fb      	strh	r3, [r7, #6]
  while (left) {
 80101ee:	88fb      	ldrh	r3, [r7, #6]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1f6      	bne.n	80101e2 <skipVariableMarker+0x22>
  }

  return 0;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <readDRIMarker>:

static uint8 readDRIMarker(void) {
 8010200:	b580      	push	{r7, lr}
 8010202:	af00      	add	r7, sp, #0
  if (getBits1(16) != 4)
 8010204:	2010      	movs	r0, #16
 8010206:	f7ff fbcb 	bl	800f9a0 <getBits1>
 801020a:	4603      	mov	r3, r0
 801020c:	2b04      	cmp	r3, #4
 801020e:	d001      	beq.n	8010214 <readDRIMarker+0x14>
    return PJPG_BAD_DRI_LENGTH;
 8010210:	230d      	movs	r3, #13
 8010212:	e007      	b.n	8010224 <readDRIMarker+0x24>

  gRestartInterval = getBits1(16);
 8010214:	2010      	movs	r0, #16
 8010216:	f7ff fbc3 	bl	800f9a0 <getBits1>
 801021a:	4603      	mov	r3, r0
 801021c:	461a      	mov	r2, r3
 801021e:	4b02      	ldr	r3, [pc, #8]	; (8010228 <readDRIMarker+0x28>)
 8010220:	801a      	strh	r2, [r3, #0]

  return 0;
 8010222:	2300      	movs	r3, #0
}
 8010224:	4618      	mov	r0, r3
 8010226:	bd80      	pop	{r7, pc}
 8010228:	20004a3c 	.word	0x20004a3c

0801022c <readSOSMarker>:

static uint8 readSOSMarker(void) {
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
  uint8 i;
  uint16 left = getBits1(16);
 8010232:	2010      	movs	r0, #16
 8010234:	f7ff fbb4 	bl	800f9a0 <getBits1>
 8010238:	4603      	mov	r3, r0
 801023a:	81bb      	strh	r3, [r7, #12]
  uint8 spectral_start, spectral_end, successive_high, successive_low;

  gCompsInScan = (uint8)getBits1(8);
 801023c:	2008      	movs	r0, #8
 801023e:	f7ff fbaf 	bl	800f9a0 <getBits1>
 8010242:	4603      	mov	r3, r0
 8010244:	b2da      	uxtb	r2, r3
 8010246:	4b3f      	ldr	r3, [pc, #252]	; (8010344 <readSOSMarker+0x118>)
 8010248:	701a      	strb	r2, [r3, #0]

  left -= 3;
 801024a:	89bb      	ldrh	r3, [r7, #12]
 801024c:	3b03      	subs	r3, #3
 801024e:	81bb      	strh	r3, [r7, #12]

  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 8010250:	89ba      	ldrh	r2, [r7, #12]
 8010252:	4b3c      	ldr	r3, [pc, #240]	; (8010344 <readSOSMarker+0x118>)
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	005b      	lsls	r3, r3, #1
 8010258:	3303      	adds	r3, #3
 801025a:	429a      	cmp	r2, r3
 801025c:	d107      	bne.n	801026e <readSOSMarker+0x42>
 801025e:	4b39      	ldr	r3, [pc, #228]	; (8010344 <readSOSMarker+0x118>)
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d003      	beq.n	801026e <readSOSMarker+0x42>
      (gCompsInScan > PJPG_MAXCOMPSINSCAN))
 8010266:	4b37      	ldr	r3, [pc, #220]	; (8010344 <readSOSMarker+0x118>)
 8010268:	781b      	ldrb	r3, [r3, #0]
  if ((left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) ||
 801026a:	2b03      	cmp	r3, #3
 801026c:	d901      	bls.n	8010272 <readSOSMarker+0x46>
    return PJPG_BAD_SOS_LENGTH;
 801026e:	230e      	movs	r3, #14
 8010270:	e064      	b.n	801033c <readSOSMarker+0x110>

  for (i = 0; i < gCompsInScan; i++) {
 8010272:	2300      	movs	r3, #0
 8010274:	73fb      	strb	r3, [r7, #15]
 8010276:	e03a      	b.n	80102ee <readSOSMarker+0xc2>
    uint8 cc = (uint8)getBits1(8);
 8010278:	2008      	movs	r0, #8
 801027a:	f7ff fb91 	bl	800f9a0 <getBits1>
 801027e:	4603      	mov	r3, r0
 8010280:	71bb      	strb	r3, [r7, #6]
    uint8 c = (uint8)getBits1(8);
 8010282:	2008      	movs	r0, #8
 8010284:	f7ff fb8c 	bl	800f9a0 <getBits1>
 8010288:	4603      	mov	r3, r0
 801028a:	717b      	strb	r3, [r7, #5]
    uint8 ci;

    left -= 2;
 801028c:	89bb      	ldrh	r3, [r7, #12]
 801028e:	3b02      	subs	r3, #2
 8010290:	81bb      	strh	r3, [r7, #12]

    for (ci = 0; ci < gCompsInFrame; ci++)
 8010292:	2300      	movs	r3, #0
 8010294:	72fb      	strb	r3, [r7, #11]
 8010296:	e008      	b.n	80102aa <readSOSMarker+0x7e>
      if (cc == gCompIdent[ci])
 8010298:	7afb      	ldrb	r3, [r7, #11]
 801029a:	4a2b      	ldr	r2, [pc, #172]	; (8010348 <readSOSMarker+0x11c>)
 801029c:	5cd3      	ldrb	r3, [r2, r3]
 801029e:	79ba      	ldrb	r2, [r7, #6]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d008      	beq.n	80102b6 <readSOSMarker+0x8a>
    for (ci = 0; ci < gCompsInFrame; ci++)
 80102a4:	7afb      	ldrb	r3, [r7, #11]
 80102a6:	3301      	adds	r3, #1
 80102a8:	72fb      	strb	r3, [r7, #11]
 80102aa:	4b28      	ldr	r3, [pc, #160]	; (801034c <readSOSMarker+0x120>)
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	7afa      	ldrb	r2, [r7, #11]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d3f1      	bcc.n	8010298 <readSOSMarker+0x6c>
 80102b4:	e000      	b.n	80102b8 <readSOSMarker+0x8c>
        break;
 80102b6:	bf00      	nop

    if (ci >= gCompsInFrame)
 80102b8:	4b24      	ldr	r3, [pc, #144]	; (801034c <readSOSMarker+0x120>)
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	7afa      	ldrb	r2, [r7, #11]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d301      	bcc.n	80102c6 <readSOSMarker+0x9a>
      return PJPG_BAD_SOS_COMP_ID;
 80102c2:	230f      	movs	r3, #15
 80102c4:	e03a      	b.n	801033c <readSOSMarker+0x110>

    gCompList[i] = ci;
 80102c6:	7bfb      	ldrb	r3, [r7, #15]
 80102c8:	4921      	ldr	r1, [pc, #132]	; (8010350 <readSOSMarker+0x124>)
 80102ca:	7afa      	ldrb	r2, [r7, #11]
 80102cc:	54ca      	strb	r2, [r1, r3]
    gCompDCTab[ci] = (c >> 4) & 15;
 80102ce:	7afb      	ldrb	r3, [r7, #11]
 80102d0:	797a      	ldrb	r2, [r7, #5]
 80102d2:	0912      	lsrs	r2, r2, #4
 80102d4:	b2d1      	uxtb	r1, r2
 80102d6:	4a1f      	ldr	r2, [pc, #124]	; (8010354 <readSOSMarker+0x128>)
 80102d8:	54d1      	strb	r1, [r2, r3]
    gCompACTab[ci] = (c & 15);
 80102da:	7afb      	ldrb	r3, [r7, #11]
 80102dc:	797a      	ldrb	r2, [r7, #5]
 80102de:	f002 020f 	and.w	r2, r2, #15
 80102e2:	b2d1      	uxtb	r1, r2
 80102e4:	4a1c      	ldr	r2, [pc, #112]	; (8010358 <readSOSMarker+0x12c>)
 80102e6:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < gCompsInScan; i++) {
 80102e8:	7bfb      	ldrb	r3, [r7, #15]
 80102ea:	3301      	adds	r3, #1
 80102ec:	73fb      	strb	r3, [r7, #15]
 80102ee:	4b15      	ldr	r3, [pc, #84]	; (8010344 <readSOSMarker+0x118>)
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	7bfa      	ldrb	r2, [r7, #15]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d3bf      	bcc.n	8010278 <readSOSMarker+0x4c>
  }

  spectral_start = (uint8)getBits1(8);
 80102f8:	2008      	movs	r0, #8
 80102fa:	f7ff fb51 	bl	800f9a0 <getBits1>
 80102fe:	4603      	mov	r3, r0
 8010300:	72bb      	strb	r3, [r7, #10]
  spectral_end = (uint8)getBits1(8);
 8010302:	2008      	movs	r0, #8
 8010304:	f7ff fb4c 	bl	800f9a0 <getBits1>
 8010308:	4603      	mov	r3, r0
 801030a:	727b      	strb	r3, [r7, #9]
  successive_high = (uint8)getBits1(4);
 801030c:	2004      	movs	r0, #4
 801030e:	f7ff fb47 	bl	800f9a0 <getBits1>
 8010312:	4603      	mov	r3, r0
 8010314:	723b      	strb	r3, [r7, #8]
  successive_low = (uint8)getBits1(4);
 8010316:	2004      	movs	r0, #4
 8010318:	f7ff fb42 	bl	800f9a0 <getBits1>
 801031c:	4603      	mov	r3, r0
 801031e:	71fb      	strb	r3, [r7, #7]

  left -= 3;
 8010320:	89bb      	ldrh	r3, [r7, #12]
 8010322:	3b03      	subs	r3, #3
 8010324:	81bb      	strh	r3, [r7, #12]

  while (left) {
 8010326:	e005      	b.n	8010334 <readSOSMarker+0x108>
    getBits1(8);
 8010328:	2008      	movs	r0, #8
 801032a:	f7ff fb39 	bl	800f9a0 <getBits1>
    left--;
 801032e:	89bb      	ldrh	r3, [r7, #12]
 8010330:	3b01      	subs	r3, #1
 8010332:	81bb      	strh	r3, [r7, #12]
  while (left) {
 8010334:	89bb      	ldrh	r3, [r7, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1f6      	bne.n	8010328 <readSOSMarker+0xfc>
  }

  return 0;
 801033a:	2300      	movs	r3, #0
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	20004a42 	.word	0x20004a42
 8010348:	20004a2c 	.word	0x20004a2c
 801034c:	20004a2a 	.word	0x20004a2a
 8010350:	20004a44 	.word	0x20004a44
 8010354:	20004a48 	.word	0x20004a48
 8010358:	20004a4c 	.word	0x20004a4c

0801035c <nextMarker>:

static uint8 nextMarker(void) {
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
  uint8 c;
  uint8 bytes = 0;
 8010362:	2300      	movs	r3, #0
 8010364:	71fb      	strb	r3, [r7, #7]

  do {
    do {
      bytes++;
 8010366:	79fb      	ldrb	r3, [r7, #7]
 8010368:	3301      	adds	r3, #1
 801036a:	71fb      	strb	r3, [r7, #7]

      c = (uint8)getBits1(8);
 801036c:	2008      	movs	r0, #8
 801036e:	f7ff fb17 	bl	800f9a0 <getBits1>
 8010372:	4603      	mov	r3, r0
 8010374:	71bb      	strb	r3, [r7, #6]

    } while (c != 0xFF);
 8010376:	79bb      	ldrb	r3, [r7, #6]
 8010378:	2bff      	cmp	r3, #255	; 0xff
 801037a:	d1f4      	bne.n	8010366 <nextMarker+0xa>

    do {
      c = (uint8)getBits1(8);
 801037c:	2008      	movs	r0, #8
 801037e:	f7ff fb0f 	bl	800f9a0 <getBits1>
 8010382:	4603      	mov	r3, r0
 8010384:	71bb      	strb	r3, [r7, #6]

    } while (c == 0xFF);
 8010386:	79bb      	ldrb	r3, [r7, #6]
 8010388:	2bff      	cmp	r3, #255	; 0xff
 801038a:	d0f7      	beq.n	801037c <nextMarker+0x20>

  } while (c == 0);
 801038c:	79bb      	ldrb	r3, [r7, #6]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d0e9      	beq.n	8010366 <nextMarker+0xa>

  return c;
 8010392:	79bb      	ldrb	r3, [r7, #6]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <processMarkers>:

static uint8 processMarkers(uint8 *pMarker) {
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  for (;;) {
    uint8 c = nextMarker();
 80103a4:	f7ff ffda 	bl	801035c <nextMarker>
 80103a8:	4603      	mov	r3, r0
 80103aa:	73fb      	strb	r3, [r7, #15]

    switch (c) {
 80103ac:	7bfb      	ldrb	r3, [r7, #15]
 80103ae:	2bcb      	cmp	r3, #203	; 0xcb
 80103b0:	dc0f      	bgt.n	80103d2 <processMarkers+0x36>
 80103b2:	2bc9      	cmp	r3, #201	; 0xc9
 80103b4:	da1b      	bge.n	80103ee <processMarkers+0x52>
 80103b6:	2bc4      	cmp	r3, #196	; 0xc4
 80103b8:	d01e      	beq.n	80103f8 <processMarkers+0x5c>
 80103ba:	2bc4      	cmp	r3, #196	; 0xc4
 80103bc:	dc06      	bgt.n	80103cc <processMarkers+0x30>
 80103be:	2b01      	cmp	r3, #1
 80103c0:	d025      	beq.n	801040e <processMarkers+0x72>
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	db25      	blt.n	8010412 <processMarkers+0x76>
 80103c6:	2bc0      	cmp	r3, #192	; 0xc0
 80103c8:	db23      	blt.n	8010412 <processMarkers+0x76>
 80103ca:	e010      	b.n	80103ee <processMarkers+0x52>
 80103cc:	2bc7      	cmp	r3, #199	; 0xc7
 80103ce:	dd0e      	ble.n	80103ee <processMarkers+0x52>
 80103d0:	e01d      	b.n	801040e <processMarkers+0x72>
 80103d2:	2bd7      	cmp	r3, #215	; 0xd7
 80103d4:	dc04      	bgt.n	80103e0 <processMarkers+0x44>
 80103d6:	2bd0      	cmp	r3, #208	; 0xd0
 80103d8:	da19      	bge.n	801040e <processMarkers+0x72>
 80103da:	2bcc      	cmp	r3, #204	; 0xcc
 80103dc:	d00f      	beq.n	80103fe <processMarkers+0x62>
 80103de:	e006      	b.n	80103ee <processMarkers+0x52>
 80103e0:	2bdb      	cmp	r3, #219	; 0xdb
 80103e2:	d00e      	beq.n	8010402 <processMarkers+0x66>
 80103e4:	2bdb      	cmp	r3, #219	; 0xdb
 80103e6:	db02      	blt.n	80103ee <processMarkers+0x52>
 80103e8:	2bdd      	cmp	r3, #221	; 0xdd
 80103ea:	d00d      	beq.n	8010408 <processMarkers+0x6c>
 80103ec:	e011      	b.n	8010412 <processMarkers+0x76>
    case M_SOF14:
    case M_SOF15:
    case M_SOI:
    case M_EOI:
    case M_SOS: {
      *pMarker = c;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	7bfa      	ldrb	r2, [r7, #15]
 80103f2:	701a      	strb	r2, [r3, #0]
      return 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	e010      	b.n	801041a <processMarkers+0x7e>
    }
    case M_DHT: {
      readDHTMarker();
 80103f8:	f7ff fd14 	bl	800fe24 <readDHTMarker>
      break;
 80103fc:	e00c      	b.n	8010418 <processMarkers+0x7c>
    }

    case M_DAC: {
      return PJPG_NO_ARITHMITIC_SUPPORT;
 80103fe:	2311      	movs	r3, #17
 8010400:	e00b      	b.n	801041a <processMarkers+0x7e>
    }
    case M_DQT: {
      readDQTMarker();
 8010402:	f7ff fdc3 	bl	800ff8c <readDQTMarker>
      break;
 8010406:	e007      	b.n	8010418 <processMarkers+0x7c>
    }
    case M_DRI: {
      readDRIMarker();
 8010408:	f7ff fefa 	bl	8010200 <readDRIMarker>
      break;
 801040c:	e004      	b.n	8010418 <processMarkers+0x7c>
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM: {
      return PJPG_UNEXPECTED_MARKER;
 801040e:	2312      	movs	r3, #18
 8010410:	e003      	b.n	801041a <processMarkers+0x7e>
    }
    default: {
      skipVariableMarker();
 8010412:	f7ff fed5 	bl	80101c0 <skipVariableMarker>
      break;
 8010416:	bf00      	nop
  for (;;) {
 8010418:	e7c4      	b.n	80103a4 <processMarkers+0x8>
    }
    }
  }
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
	...

08010424 <locateSOIMarker>:

static uint8 locateSOIMarker(void) {
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
  uint16 bytesleft;

  uint8 lastchar = (uint8)getBits1(8);
 801042a:	2008      	movs	r0, #8
 801042c:	f7ff fab8 	bl	800f9a0 <getBits1>
 8010430:	4603      	mov	r3, r0
 8010432:	713b      	strb	r3, [r7, #4]

  uint8 thischar = (uint8)getBits1(8);
 8010434:	2008      	movs	r0, #8
 8010436:	f7ff fab3 	bl	800f9a0 <getBits1>
 801043a:	4603      	mov	r3, r0
 801043c:	717b      	strb	r3, [r7, #5]

  if ((lastchar == 0xFF) && (thischar == M_SOI))
 801043e:	793b      	ldrb	r3, [r7, #4]
 8010440:	2bff      	cmp	r3, #255	; 0xff
 8010442:	d104      	bne.n	801044e <locateSOIMarker+0x2a>
 8010444:	797b      	ldrb	r3, [r7, #5]
 8010446:	2bd8      	cmp	r3, #216	; 0xd8
 8010448:	d101      	bne.n	801044e <locateSOIMarker+0x2a>
    return 0;
 801044a:	2300      	movs	r3, #0
 801044c:	e028      	b.n	80104a0 <locateSOIMarker+0x7c>

  bytesleft = 4096;
 801044e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010452:	80fb      	strh	r3, [r7, #6]

  for (;;) {
    if (--bytesleft == 0)
 8010454:	88fb      	ldrh	r3, [r7, #6]
 8010456:	3b01      	subs	r3, #1
 8010458:	80fb      	strh	r3, [r7, #6]
 801045a:	88fb      	ldrh	r3, [r7, #6]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d101      	bne.n	8010464 <locateSOIMarker+0x40>
      return PJPG_NOT_JPEG;
 8010460:	2313      	movs	r3, #19
 8010462:	e01d      	b.n	80104a0 <locateSOIMarker+0x7c>

    lastchar = thischar;
 8010464:	797b      	ldrb	r3, [r7, #5]
 8010466:	713b      	strb	r3, [r7, #4]

    thischar = (uint8)getBits1(8);
 8010468:	2008      	movs	r0, #8
 801046a:	f7ff fa99 	bl	800f9a0 <getBits1>
 801046e:	4603      	mov	r3, r0
 8010470:	717b      	strb	r3, [r7, #5]

    if (lastchar == 0xFF) {
 8010472:	793b      	ldrb	r3, [r7, #4]
 8010474:	2bff      	cmp	r3, #255	; 0xff
 8010476:	d1ed      	bne.n	8010454 <locateSOIMarker+0x30>
      if (thischar == M_SOI)
 8010478:	797b      	ldrb	r3, [r7, #5]
 801047a:	2bd8      	cmp	r3, #216	; 0xd8
 801047c:	d004      	beq.n	8010488 <locateSOIMarker+0x64>
        break;
      else if (thischar == M_EOI)
 801047e:	797b      	ldrb	r3, [r7, #5]
 8010480:	2bd9      	cmp	r3, #217	; 0xd9
 8010482:	d1e7      	bne.n	8010454 <locateSOIMarker+0x30>
        return PJPG_NOT_JPEG;
 8010484:	2313      	movs	r3, #19
 8010486:	e00b      	b.n	80104a0 <locateSOIMarker+0x7c>
        break;
 8010488:	bf00      	nop
    }
  }

  thischar = (uint8)((gBitBuf >> 8) & 0xFF);
 801048a:	4b07      	ldr	r3, [pc, #28]	; (80104a8 <locateSOIMarker+0x84>)
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	0a1b      	lsrs	r3, r3, #8
 8010490:	b29b      	uxth	r3, r3
 8010492:	717b      	strb	r3, [r7, #5]

  if (thischar != 0xFF)
 8010494:	797b      	ldrb	r3, [r7, #5]
 8010496:	2bff      	cmp	r3, #255	; 0xff
 8010498:	d001      	beq.n	801049e <locateSOIMarker+0x7a>
    return PJPG_NOT_JPEG;
 801049a:	2313      	movs	r3, #19
 801049c:	e000      	b.n	80104a0 <locateSOIMarker+0x7c>

  return 0;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	20004a22 	.word	0x20004a22

080104ac <locateSOFMarker>:

static uint8 locateSOFMarker(void) {
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
  uint8 c;

  uint8 status = locateSOIMarker();
 80104b2:	f7ff ffb7 	bl	8010424 <locateSOIMarker>
 80104b6:	4603      	mov	r3, r0
 80104b8:	71fb      	strb	r3, [r7, #7]
  if (status)
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d001      	beq.n	80104c4 <locateSOFMarker+0x18>
    return status;
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	e023      	b.n	801050c <locateSOFMarker+0x60>

  status = processMarkers(&c);
 80104c4:	1dbb      	adds	r3, r7, #6
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff ff68 	bl	801039c <processMarkers>
 80104cc:	4603      	mov	r3, r0
 80104ce:	71fb      	strb	r3, [r7, #7]
  if (status)
 80104d0:	79fb      	ldrb	r3, [r7, #7]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d001      	beq.n	80104da <locateSOFMarker+0x2e>
    return status;
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	e018      	b.n	801050c <locateSOFMarker+0x60>

  switch (c) {
 80104da:	79bb      	ldrb	r3, [r7, #6]
 80104dc:	2bc2      	cmp	r3, #194	; 0xc2
 80104de:	d004      	beq.n	80104ea <locateSOFMarker+0x3e>
 80104e0:	2bc9      	cmp	r3, #201	; 0xc9
 80104e2:	d00d      	beq.n	8010500 <locateSOFMarker+0x54>
 80104e4:	2bc0      	cmp	r3, #192	; 0xc0
 80104e6:	d002      	beq.n	80104ee <locateSOFMarker+0x42>
 80104e8:	e00c      	b.n	8010504 <locateSOFMarker+0x58>
  case M_SOF2: {

    return PJPG_UNSUPPORTED_MODE;
 80104ea:	2325      	movs	r3, #37	; 0x25
 80104ec:	e00e      	b.n	801050c <locateSOFMarker+0x60>
  }
  case M_SOF0: {
    status = readSOFMarker();
 80104ee:	f7ff fdd1 	bl	8010094 <readSOFMarker>
 80104f2:	4603      	mov	r3, r0
 80104f4:	71fb      	strb	r3, [r7, #7]
    if (status)
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d005      	beq.n	8010508 <locateSOFMarker+0x5c>
      return status;
 80104fc:	79fb      	ldrb	r3, [r7, #7]
 80104fe:	e005      	b.n	801050c <locateSOFMarker+0x60>

    break;
  }
  case M_SOF9: {
    return PJPG_NO_ARITHMITIC_SUPPORT;
 8010500:	2311      	movs	r3, #17
 8010502:	e003      	b.n	801050c <locateSOFMarker+0x60>
  }
  case M_SOF1:
  default: {
    return PJPG_UNSUPPORTED_MARKER;
 8010504:	2314      	movs	r3, #20
 8010506:	e001      	b.n	801050c <locateSOFMarker+0x60>
    break;
 8010508:	bf00      	nop
  }
  }

  return 0;
 801050a:	2300      	movs	r3, #0
}
 801050c:	4618      	mov	r0, r3
 801050e:	3708      	adds	r7, #8
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <locateSOSMarker>:

static uint8 locateSOSMarker(uint8 *pFoundEOI) {
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  uint8 c;
  uint8 status;

  *pFoundEOI = 0;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	701a      	strb	r2, [r3, #0]

  status = processMarkers(&c);
 8010522:	f107 030e 	add.w	r3, r7, #14
 8010526:	4618      	mov	r0, r3
 8010528:	f7ff ff38 	bl	801039c <processMarkers>
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]
  if (status)
 8010530:	7bfb      	ldrb	r3, [r7, #15]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d001      	beq.n	801053a <locateSOSMarker+0x26>
    return status;
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	e00f      	b.n	801055a <locateSOSMarker+0x46>

  if (c == M_EOI) {
 801053a:	7bbb      	ldrb	r3, [r7, #14]
 801053c:	2bd9      	cmp	r3, #217	; 0xd9
 801053e:	d104      	bne.n	801054a <locateSOSMarker+0x36>
    *pFoundEOI = 1;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2201      	movs	r2, #1
 8010544:	701a      	strb	r2, [r3, #0]
    return 0;
 8010546:	2300      	movs	r3, #0
 8010548:	e007      	b.n	801055a <locateSOSMarker+0x46>
  } else if (c != M_SOS)
 801054a:	7bbb      	ldrb	r3, [r7, #14]
 801054c:	2bda      	cmp	r3, #218	; 0xda
 801054e:	d001      	beq.n	8010554 <locateSOSMarker+0x40>
    return PJPG_UNEXPECTED_MARKER;
 8010550:	2312      	movs	r3, #18
 8010552:	e002      	b.n	801055a <locateSOSMarker+0x46>

  return readSOSMarker();
 8010554:	f7ff fe6a 	bl	801022c <readSOSMarker>
 8010558:	4603      	mov	r3, r0
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
	...

08010564 <init>:

static uint8 init(void) {
 8010564:	b580      	push	{r7, lr}
 8010566:	af00      	add	r7, sp, #0
  gImageXSize = 0;
 8010568:	4b16      	ldr	r3, [pc, #88]	; (80105c4 <init+0x60>)
 801056a:	2200      	movs	r2, #0
 801056c:	801a      	strh	r2, [r3, #0]
  gImageYSize = 0;
 801056e:	4b16      	ldr	r3, [pc, #88]	; (80105c8 <init+0x64>)
 8010570:	2200      	movs	r2, #0
 8010572:	801a      	strh	r2, [r3, #0]
  gCompsInFrame = 0;
 8010574:	4b15      	ldr	r3, [pc, #84]	; (80105cc <init+0x68>)
 8010576:	2200      	movs	r2, #0
 8010578:	701a      	strb	r2, [r3, #0]
  gRestartInterval = 0;
 801057a:	4b15      	ldr	r3, [pc, #84]	; (80105d0 <init+0x6c>)
 801057c:	2200      	movs	r2, #0
 801057e:	801a      	strh	r2, [r3, #0]
  gCompsInScan = 0;
 8010580:	4b14      	ldr	r3, [pc, #80]	; (80105d4 <init+0x70>)
 8010582:	2200      	movs	r2, #0
 8010584:	701a      	strb	r2, [r3, #0]
  gValidHuffTables = 0;
 8010586:	4b14      	ldr	r3, [pc, #80]	; (80105d8 <init+0x74>)
 8010588:	2200      	movs	r2, #0
 801058a:	701a      	strb	r2, [r3, #0]
  gValidQuantTables = 0;
 801058c:	4b13      	ldr	r3, [pc, #76]	; (80105dc <init+0x78>)
 801058e:	2200      	movs	r2, #0
 8010590:	701a      	strb	r2, [r3, #0]
  gTemFlag = 0;
 8010592:	4b13      	ldr	r3, [pc, #76]	; (80105e0 <init+0x7c>)
 8010594:	2200      	movs	r2, #0
 8010596:	701a      	strb	r2, [r3, #0]
  gInBufOfs = 0;
 8010598:	4b12      	ldr	r3, [pc, #72]	; (80105e4 <init+0x80>)
 801059a:	2200      	movs	r2, #0
 801059c:	701a      	strb	r2, [r3, #0]
  gInBufLeft = 0;
 801059e:	4b12      	ldr	r3, [pc, #72]	; (80105e8 <init+0x84>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
  gBitBuf = 0;
 80105a4:	4b11      	ldr	r3, [pc, #68]	; (80105ec <init+0x88>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	801a      	strh	r2, [r3, #0]
  gBitsLeft = 8;
 80105aa:	4b11      	ldr	r3, [pc, #68]	; (80105f0 <init+0x8c>)
 80105ac:	2208      	movs	r2, #8
 80105ae:	701a      	strb	r2, [r3, #0]

  getBits1(8);
 80105b0:	2008      	movs	r0, #8
 80105b2:	f7ff f9f5 	bl	800f9a0 <getBits1>
  getBits1(8);
 80105b6:	2008      	movs	r0, #8
 80105b8:	f7ff f9f2 	bl	800f9a0 <getBits1>

  return 0;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	20004a26 	.word	0x20004a26
 80105c8:	20004a28 	.word	0x20004a28
 80105cc:	20004a2a 	.word	0x20004a2a
 80105d0:	20004a3c 	.word	0x20004a3c
 80105d4:	20004a42 	.word	0x20004a42
 80105d8:	2000491c 	.word	0x2000491c
 80105dc:	2000491d 	.word	0x2000491d
 80105e0:	2000491e 	.word	0x2000491e
 80105e4:	20004a20 	.word	0x20004a20
 80105e8:	20004a21 	.word	0x20004a21
 80105ec:	20004a22 	.word	0x20004a22
 80105f0:	20004a24 	.word	0x20004a24

080105f4 <fixInBuffer>:

static void fixInBuffer(void) {
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0

  if (gBitsLeft > 0)
 80105f8:	4b0e      	ldr	r3, [pc, #56]	; (8010634 <fixInBuffer+0x40>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d005      	beq.n	801060c <fixInBuffer+0x18>
    stuffChar((uint8)gBitBuf);
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <fixInBuffer+0x44>)
 8010602:	881b      	ldrh	r3, [r3, #0]
 8010604:	b2db      	uxtb	r3, r3
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff f8f2 	bl	800f7f0 <stuffChar>

  stuffChar((uint8)(gBitBuf >> 8));
 801060c:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <fixInBuffer+0x44>)
 801060e:	881b      	ldrh	r3, [r3, #0]
 8010610:	0a1b      	lsrs	r3, r3, #8
 8010612:	b29b      	uxth	r3, r3
 8010614:	b2db      	uxtb	r3, r3
 8010616:	4618      	mov	r0, r3
 8010618:	f7ff f8ea 	bl	800f7f0 <stuffChar>

  gBitsLeft = 8;
 801061c:	4b05      	ldr	r3, [pc, #20]	; (8010634 <fixInBuffer+0x40>)
 801061e:	2208      	movs	r2, #8
 8010620:	701a      	strb	r2, [r3, #0]
  getBits2(8);
 8010622:	2008      	movs	r0, #8
 8010624:	f7ff f9cb 	bl	800f9be <getBits2>
  getBits2(8);
 8010628:	2008      	movs	r0, #8
 801062a:	f7ff f9c8 	bl	800f9be <getBits2>
}
 801062e:	bf00      	nop
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	20004a24 	.word	0x20004a24
 8010638:	20004a22 	.word	0x20004a22

0801063c <processRestart>:

static uint8 processRestart(void) {
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0

  uint16 i;
  uint8 c = 0;
 8010642:	2300      	movs	r3, #0
 8010644:	717b      	strb	r3, [r7, #5]

  for (i = 1536; i > 0; i--)
 8010646:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801064a:	80fb      	strh	r3, [r7, #6]
 801064c:	e007      	b.n	801065e <processRestart+0x22>
    if (getChar() == 0xFF)
 801064e:	f7ff f89b 	bl	800f788 <getChar>
 8010652:	4603      	mov	r3, r0
 8010654:	2bff      	cmp	r3, #255	; 0xff
 8010656:	d006      	beq.n	8010666 <processRestart+0x2a>
  for (i = 1536; i > 0; i--)
 8010658:	88fb      	ldrh	r3, [r7, #6]
 801065a:	3b01      	subs	r3, #1
 801065c:	80fb      	strh	r3, [r7, #6]
 801065e:	88fb      	ldrh	r3, [r7, #6]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1f4      	bne.n	801064e <processRestart+0x12>
 8010664:	e000      	b.n	8010668 <processRestart+0x2c>
      break;
 8010666:	bf00      	nop

  if (i == 0)
 8010668:	88fb      	ldrh	r3, [r7, #6]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10b      	bne.n	8010686 <processRestart+0x4a>
    return PJPG_BAD_RESTART_MARKER;
 801066e:	231d      	movs	r3, #29
 8010670:	e03b      	b.n	80106ea <processRestart+0xae>

  for (; i > 0; i--)
    if ((c = getChar()) != 0xFF)
 8010672:	f7ff f889 	bl	800f788 <getChar>
 8010676:	4603      	mov	r3, r0
 8010678:	717b      	strb	r3, [r7, #5]
 801067a:	797b      	ldrb	r3, [r7, #5]
 801067c:	2bff      	cmp	r3, #255	; 0xff
 801067e:	d106      	bne.n	801068e <processRestart+0x52>
  for (; i > 0; i--)
 8010680:	88fb      	ldrh	r3, [r7, #6]
 8010682:	3b01      	subs	r3, #1
 8010684:	80fb      	strh	r3, [r7, #6]
 8010686:	88fb      	ldrh	r3, [r7, #6]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1f2      	bne.n	8010672 <processRestart+0x36>
 801068c:	e000      	b.n	8010690 <processRestart+0x54>
      break;
 801068e:	bf00      	nop

  if (i == 0)
 8010690:	88fb      	ldrh	r3, [r7, #6]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <processRestart+0x5e>
    return PJPG_BAD_RESTART_MARKER;
 8010696:	231d      	movs	r3, #29
 8010698:	e027      	b.n	80106ea <processRestart+0xae>

  if (c != (gNextRestartNum + M_RST0))
 801069a:	797a      	ldrb	r2, [r7, #5]
 801069c:	4b15      	ldr	r3, [pc, #84]	; (80106f4 <processRestart+0xb8>)
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	33d0      	adds	r3, #208	; 0xd0
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d001      	beq.n	80106aa <processRestart+0x6e>
    return PJPG_BAD_RESTART_MARKER;
 80106a6:	231d      	movs	r3, #29
 80106a8:	e01f      	b.n	80106ea <processRestart+0xae>

  gLastDC[0] = 0;
 80106aa:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <processRestart+0xbc>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	801a      	strh	r2, [r3, #0]
  gLastDC[1] = 0;
 80106b0:	4b11      	ldr	r3, [pc, #68]	; (80106f8 <processRestart+0xbc>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	805a      	strh	r2, [r3, #2]
  gLastDC[2] = 0;
 80106b6:	4b10      	ldr	r3, [pc, #64]	; (80106f8 <processRestart+0xbc>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	809a      	strh	r2, [r3, #4]

  gRestartsLeft = gRestartInterval;
 80106bc:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <processRestart+0xc0>)
 80106be:	881a      	ldrh	r2, [r3, #0]
 80106c0:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <processRestart+0xc4>)
 80106c2:	801a      	strh	r2, [r3, #0]

  gNextRestartNum = (gNextRestartNum + 1) & 7;
 80106c4:	4b0b      	ldr	r3, [pc, #44]	; (80106f4 <processRestart+0xb8>)
 80106c6:	881b      	ldrh	r3, [r3, #0]
 80106c8:	3301      	adds	r3, #1
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	f003 0307 	and.w	r3, r3, #7
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	4b08      	ldr	r3, [pc, #32]	; (80106f4 <processRestart+0xb8>)
 80106d4:	801a      	strh	r2, [r3, #0]

  gBitsLeft = 8;
 80106d6:	4b0b      	ldr	r3, [pc, #44]	; (8010704 <processRestart+0xc8>)
 80106d8:	2208      	movs	r2, #8
 80106da:	701a      	strb	r2, [r3, #0]
  getBits2(8);
 80106dc:	2008      	movs	r0, #8
 80106de:	f7ff f96e 	bl	800f9be <getBits2>
  getBits2(8);
 80106e2:	2008      	movs	r0, #8
 80106e4:	f7ff f96b 	bl	800f9be <getBits2>

  return 0;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3708      	adds	r7, #8
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	20004a3e 	.word	0x20004a3e
 80106f8:	200045b4 	.word	0x200045b4
 80106fc:	20004a3c 	.word	0x20004a3c
 8010700:	20004a40 	.word	0x20004a40
 8010704:	20004a24 	.word	0x20004a24

08010708 <checkHuffTables>:
    return PJPG_UNEXPECTED_MARKER;

  return 0;
}

static uint8 checkHuffTables(void) {
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
  uint8 i;

  for (i = 0; i < gCompsInScan; i++) {
 801070e:	2300      	movs	r3, #0
 8010710:	71fb      	strb	r3, [r7, #7]
 8010712:	e027      	b.n	8010764 <checkHuffTables+0x5c>
    uint8 compDCTab = gCompDCTab[gCompList[i]];
 8010714:	79fb      	ldrb	r3, [r7, #7]
 8010716:	4a19      	ldr	r2, [pc, #100]	; (801077c <checkHuffTables+0x74>)
 8010718:	5cd3      	ldrb	r3, [r2, r3]
 801071a:	461a      	mov	r2, r3
 801071c:	4b18      	ldr	r3, [pc, #96]	; (8010780 <checkHuffTables+0x78>)
 801071e:	5c9b      	ldrb	r3, [r3, r2]
 8010720:	71bb      	strb	r3, [r7, #6]
    uint8 compACTab = gCompACTab[gCompList[i]] + 2;
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	4a15      	ldr	r2, [pc, #84]	; (801077c <checkHuffTables+0x74>)
 8010726:	5cd3      	ldrb	r3, [r2, r3]
 8010728:	461a      	mov	r2, r3
 801072a:	4b16      	ldr	r3, [pc, #88]	; (8010784 <checkHuffTables+0x7c>)
 801072c:	5c9b      	ldrb	r3, [r3, r2]
 801072e:	3302      	adds	r3, #2
 8010730:	717b      	strb	r3, [r7, #5]

    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010732:	4b15      	ldr	r3, [pc, #84]	; (8010788 <checkHuffTables+0x80>)
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	79bb      	ldrb	r3, [r7, #6]
 801073a:	fa42 f303 	asr.w	r3, r2, r3
 801073e:	f003 0301 	and.w	r3, r3, #1
 8010742:	2b00      	cmp	r3, #0
 8010744:	d009      	beq.n	801075a <checkHuffTables+0x52>
        ((gValidHuffTables & (1 << compACTab)) == 0))
 8010746:	4b10      	ldr	r3, [pc, #64]	; (8010788 <checkHuffTables+0x80>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	461a      	mov	r2, r3
 801074c:	797b      	ldrb	r3, [r7, #5]
 801074e:	fa42 f303 	asr.w	r3, r2, r3
 8010752:	f003 0301 	and.w	r3, r3, #1
    if (((gValidHuffTables & (1 << compDCTab)) == 0) ||
 8010756:	2b00      	cmp	r3, #0
 8010758:	d101      	bne.n	801075e <checkHuffTables+0x56>
      return PJPG_UNDEFINED_HUFF_TABLE;
 801075a:	2318      	movs	r3, #24
 801075c:	e008      	b.n	8010770 <checkHuffTables+0x68>
  for (i = 0; i < gCompsInScan; i++) {
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	3301      	adds	r3, #1
 8010762:	71fb      	strb	r3, [r7, #7]
 8010764:	4b09      	ldr	r3, [pc, #36]	; (801078c <checkHuffTables+0x84>)
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	79fa      	ldrb	r2, [r7, #7]
 801076a:	429a      	cmp	r2, r3
 801076c:	d3d2      	bcc.n	8010714 <checkHuffTables+0xc>
  }

  return 0;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	20004a44 	.word	0x20004a44
 8010780:	20004a48 	.word	0x20004a48
 8010784:	20004a4c 	.word	0x20004a4c
 8010788:	2000491c 	.word	0x2000491c
 801078c:	20004a42 	.word	0x20004a42

08010790 <checkQuantTables>:

static uint8 checkQuantTables(void) {
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
  uint8 i;

  for (i = 0; i < gCompsInScan; i++) {
 8010796:	2300      	movs	r3, #0
 8010798:	71fb      	strb	r3, [r7, #7]
 801079a:	e017      	b.n	80107cc <checkQuantTables+0x3c>
    uint8 compQuantMask = gCompQuant[gCompList[i]] ? 2 : 1;
 801079c:	79fb      	ldrb	r3, [r7, #7]
 801079e:	4a11      	ldr	r2, [pc, #68]	; (80107e4 <checkQuantTables+0x54>)
 80107a0:	5cd3      	ldrb	r3, [r2, r3]
 80107a2:	461a      	mov	r2, r3
 80107a4:	4b10      	ldr	r3, [pc, #64]	; (80107e8 <checkQuantTables+0x58>)
 80107a6:	5c9b      	ldrb	r3, [r3, r2]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d001      	beq.n	80107b0 <checkQuantTables+0x20>
 80107ac:	2302      	movs	r3, #2
 80107ae:	e000      	b.n	80107b2 <checkQuantTables+0x22>
 80107b0:	2301      	movs	r3, #1
 80107b2:	71bb      	strb	r3, [r7, #6]

    if ((gValidQuantTables & compQuantMask) == 0)
 80107b4:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <checkQuantTables+0x5c>)
 80107b6:	781a      	ldrb	r2, [r3, #0]
 80107b8:	79bb      	ldrb	r3, [r7, #6]
 80107ba:	4013      	ands	r3, r2
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d101      	bne.n	80107c6 <checkQuantTables+0x36>
      return PJPG_UNDEFINED_QUANT_TABLE;
 80107c2:	2317      	movs	r3, #23
 80107c4:	e008      	b.n	80107d8 <checkQuantTables+0x48>
  for (i = 0; i < gCompsInScan; i++) {
 80107c6:	79fb      	ldrb	r3, [r7, #7]
 80107c8:	3301      	adds	r3, #1
 80107ca:	71fb      	strb	r3, [r7, #7]
 80107cc:	4b08      	ldr	r3, [pc, #32]	; (80107f0 <checkQuantTables+0x60>)
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	79fa      	ldrb	r2, [r7, #7]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d3e2      	bcc.n	801079c <checkQuantTables+0xc>
  }

  return 0;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr
 80107e4:	20004a44 	.word	0x20004a44
 80107e8:	20004a38 	.word	0x20004a38
 80107ec:	2000491d 	.word	0x2000491d
 80107f0:	20004a42 	.word	0x20004a42

080107f4 <initScan>:

static uint8 initScan(void) {
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
  uint8 foundEOI;
  uint8 status = locateSOSMarker(&foundEOI);
 80107fa:	1dbb      	adds	r3, r7, #6
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fe89 	bl	8010514 <locateSOSMarker>
 8010802:	4603      	mov	r3, r0
 8010804:	71fb      	strb	r3, [r7, #7]
  if (status)
 8010806:	79fb      	ldrb	r3, [r7, #7]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d001      	beq.n	8010810 <initScan+0x1c>
    return status;
 801080c:	79fb      	ldrb	r3, [r7, #7]
 801080e:	e02d      	b.n	801086c <initScan+0x78>
  if (foundEOI)
 8010810:	79bb      	ldrb	r3, [r7, #6]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d001      	beq.n	801081a <initScan+0x26>
    return PJPG_UNEXPECTED_MARKER;
 8010816:	2312      	movs	r3, #18
 8010818:	e028      	b.n	801086c <initScan+0x78>

  status = checkHuffTables();
 801081a:	f7ff ff75 	bl	8010708 <checkHuffTables>
 801081e:	4603      	mov	r3, r0
 8010820:	71fb      	strb	r3, [r7, #7]
  if (status)
 8010822:	79fb      	ldrb	r3, [r7, #7]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <initScan+0x38>
    return status;
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	e01f      	b.n	801086c <initScan+0x78>

  status = checkQuantTables();
 801082c:	f7ff ffb0 	bl	8010790 <checkQuantTables>
 8010830:	4603      	mov	r3, r0
 8010832:	71fb      	strb	r3, [r7, #7]
  if (status)
 8010834:	79fb      	ldrb	r3, [r7, #7]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <initScan+0x4a>
    return status;
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	e016      	b.n	801086c <initScan+0x78>

  gLastDC[0] = 0;
 801083e:	4b0d      	ldr	r3, [pc, #52]	; (8010874 <initScan+0x80>)
 8010840:	2200      	movs	r2, #0
 8010842:	801a      	strh	r2, [r3, #0]
  gLastDC[1] = 0;
 8010844:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <initScan+0x80>)
 8010846:	2200      	movs	r2, #0
 8010848:	805a      	strh	r2, [r3, #2]
  gLastDC[2] = 0;
 801084a:	4b0a      	ldr	r3, [pc, #40]	; (8010874 <initScan+0x80>)
 801084c:	2200      	movs	r2, #0
 801084e:	809a      	strh	r2, [r3, #4]

  if (gRestartInterval) {
 8010850:	4b09      	ldr	r3, [pc, #36]	; (8010878 <initScan+0x84>)
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d006      	beq.n	8010866 <initScan+0x72>
    gRestartsLeft = gRestartInterval;
 8010858:	4b07      	ldr	r3, [pc, #28]	; (8010878 <initScan+0x84>)
 801085a:	881a      	ldrh	r2, [r3, #0]
 801085c:	4b07      	ldr	r3, [pc, #28]	; (801087c <initScan+0x88>)
 801085e:	801a      	strh	r2, [r3, #0]
    gNextRestartNum = 0;
 8010860:	4b07      	ldr	r3, [pc, #28]	; (8010880 <initScan+0x8c>)
 8010862:	2200      	movs	r2, #0
 8010864:	801a      	strh	r2, [r3, #0]
  }

  fixInBuffer();
 8010866:	f7ff fec5 	bl	80105f4 <fixInBuffer>

  return 0;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	200045b4 	.word	0x200045b4
 8010878:	20004a3c 	.word	0x20004a3c
 801087c:	20004a40 	.word	0x20004a40
 8010880:	20004a3e 	.word	0x20004a3e

08010884 <initFrame>:

static uint8 initFrame(void) {
 8010884:	b480      	push	{r7}
 8010886:	af00      	add	r7, sp, #0
  if (gCompsInFrame == 1) {
 8010888:	4b7a      	ldr	r3, [pc, #488]	; (8010a74 <initFrame+0x1f0>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d119      	bne.n	80108c4 <initFrame+0x40>
    if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
 8010890:	4b79      	ldr	r3, [pc, #484]	; (8010a78 <initFrame+0x1f4>)
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d103      	bne.n	80108a0 <initFrame+0x1c>
 8010898:	4b78      	ldr	r3, [pc, #480]	; (8010a7c <initFrame+0x1f8>)
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	2b01      	cmp	r3, #1
 801089e:	d001      	beq.n	80108a4 <initFrame+0x20>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 80108a0:	231b      	movs	r3, #27
 80108a2:	e0e1      	b.n	8010a68 <initFrame+0x1e4>

    gScanType = PJPG_GRAYSCALE;
 80108a4:	4b76      	ldr	r3, [pc, #472]	; (8010a80 <initFrame+0x1fc>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	701a      	strb	r2, [r3, #0]

    gMaxBlocksPerMCU = 1;
 80108aa:	4b76      	ldr	r3, [pc, #472]	; (8010a84 <initFrame+0x200>)
 80108ac:	2201      	movs	r2, #1
 80108ae:	701a      	strb	r2, [r3, #0]
    gMCUOrg[0] = 0;
 80108b0:	4b75      	ldr	r3, [pc, #468]	; (8010a88 <initFrame+0x204>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	701a      	strb	r2, [r3, #0]

    gMaxMCUXSize = 8;
 80108b6:	4b75      	ldr	r3, [pc, #468]	; (8010a8c <initFrame+0x208>)
 80108b8:	2208      	movs	r2, #8
 80108ba:	701a      	strb	r2, [r3, #0]
    gMaxMCUYSize = 8;
 80108bc:	4b74      	ldr	r3, [pc, #464]	; (8010a90 <initFrame+0x20c>)
 80108be:	2208      	movs	r2, #8
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	e0a1      	b.n	8010a08 <initFrame+0x184>
  } else if (gCompsInFrame == 3) {
 80108c4:	4b6b      	ldr	r3, [pc, #428]	; (8010a74 <initFrame+0x1f0>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2b03      	cmp	r3, #3
 80108ca:	f040 809b 	bne.w	8010a04 <initFrame+0x180>
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 80108ce:	4b6a      	ldr	r3, [pc, #424]	; (8010a78 <initFrame+0x1f4>)
 80108d0:	785b      	ldrb	r3, [r3, #1]
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d10b      	bne.n	80108ee <initFrame+0x6a>
 80108d6:	4b69      	ldr	r3, [pc, #420]	; (8010a7c <initFrame+0x1f8>)
 80108d8:	785b      	ldrb	r3, [r3, #1]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d107      	bne.n	80108ee <initFrame+0x6a>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 80108de:	4b66      	ldr	r3, [pc, #408]	; (8010a78 <initFrame+0x1f4>)
 80108e0:	789b      	ldrb	r3, [r3, #2]
    if (((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d103      	bne.n	80108ee <initFrame+0x6a>
        ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)))
 80108e6:	4b65      	ldr	r3, [pc, #404]	; (8010a7c <initFrame+0x1f8>)
 80108e8:	789b      	ldrb	r3, [r3, #2]
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d001      	beq.n	80108f2 <initFrame+0x6e>
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 80108ee:	231b      	movs	r3, #27
 80108f0:	e0ba      	b.n	8010a68 <initFrame+0x1e4>

    if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1)) {
 80108f2:	4b61      	ldr	r3, [pc, #388]	; (8010a78 <initFrame+0x1f4>)
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d119      	bne.n	801092e <initFrame+0xaa>
 80108fa:	4b60      	ldr	r3, [pc, #384]	; (8010a7c <initFrame+0x1f8>)
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d115      	bne.n	801092e <initFrame+0xaa>
      gScanType = PJPG_YH1V1;
 8010902:	4b5f      	ldr	r3, [pc, #380]	; (8010a80 <initFrame+0x1fc>)
 8010904:	2201      	movs	r2, #1
 8010906:	701a      	strb	r2, [r3, #0]

      gMaxBlocksPerMCU = 3;
 8010908:	4b5e      	ldr	r3, [pc, #376]	; (8010a84 <initFrame+0x200>)
 801090a:	2203      	movs	r2, #3
 801090c:	701a      	strb	r2, [r3, #0]
      gMCUOrg[0] = 0;
 801090e:	4b5e      	ldr	r3, [pc, #376]	; (8010a88 <initFrame+0x204>)
 8010910:	2200      	movs	r2, #0
 8010912:	701a      	strb	r2, [r3, #0]
      gMCUOrg[1] = 1;
 8010914:	4b5c      	ldr	r3, [pc, #368]	; (8010a88 <initFrame+0x204>)
 8010916:	2201      	movs	r2, #1
 8010918:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 2;
 801091a:	4b5b      	ldr	r3, [pc, #364]	; (8010a88 <initFrame+0x204>)
 801091c:	2202      	movs	r2, #2
 801091e:	709a      	strb	r2, [r3, #2]

      gMaxMCUXSize = 8;
 8010920:	4b5a      	ldr	r3, [pc, #360]	; (8010a8c <initFrame+0x208>)
 8010922:	2208      	movs	r2, #8
 8010924:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 8;
 8010926:	4b5a      	ldr	r3, [pc, #360]	; (8010a90 <initFrame+0x20c>)
 8010928:	2208      	movs	r2, #8
 801092a:	701a      	strb	r2, [r3, #0]
 801092c:	e06c      	b.n	8010a08 <initFrame+0x184>
    } else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2)) {
 801092e:	4b52      	ldr	r3, [pc, #328]	; (8010a78 <initFrame+0x1f4>)
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d11c      	bne.n	8010970 <initFrame+0xec>
 8010936:	4b51      	ldr	r3, [pc, #324]	; (8010a7c <initFrame+0x1f8>)
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	2b02      	cmp	r3, #2
 801093c:	d118      	bne.n	8010970 <initFrame+0xec>
      gScanType = PJPG_YH1V2;
 801093e:	4b50      	ldr	r3, [pc, #320]	; (8010a80 <initFrame+0x1fc>)
 8010940:	2203      	movs	r2, #3
 8010942:	701a      	strb	r2, [r3, #0]

      gMaxBlocksPerMCU = 4;
 8010944:	4b4f      	ldr	r3, [pc, #316]	; (8010a84 <initFrame+0x200>)
 8010946:	2204      	movs	r2, #4
 8010948:	701a      	strb	r2, [r3, #0]
      gMCUOrg[0] = 0;
 801094a:	4b4f      	ldr	r3, [pc, #316]	; (8010a88 <initFrame+0x204>)
 801094c:	2200      	movs	r2, #0
 801094e:	701a      	strb	r2, [r3, #0]
      gMCUOrg[1] = 0;
 8010950:	4b4d      	ldr	r3, [pc, #308]	; (8010a88 <initFrame+0x204>)
 8010952:	2200      	movs	r2, #0
 8010954:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 1;
 8010956:	4b4c      	ldr	r3, [pc, #304]	; (8010a88 <initFrame+0x204>)
 8010958:	2201      	movs	r2, #1
 801095a:	709a      	strb	r2, [r3, #2]
      gMCUOrg[3] = 2;
 801095c:	4b4a      	ldr	r3, [pc, #296]	; (8010a88 <initFrame+0x204>)
 801095e:	2202      	movs	r2, #2
 8010960:	70da      	strb	r2, [r3, #3]

      gMaxMCUXSize = 8;
 8010962:	4b4a      	ldr	r3, [pc, #296]	; (8010a8c <initFrame+0x208>)
 8010964:	2208      	movs	r2, #8
 8010966:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 16;
 8010968:	4b49      	ldr	r3, [pc, #292]	; (8010a90 <initFrame+0x20c>)
 801096a:	2210      	movs	r2, #16
 801096c:	701a      	strb	r2, [r3, #0]
 801096e:	e04b      	b.n	8010a08 <initFrame+0x184>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1)) {
 8010970:	4b41      	ldr	r3, [pc, #260]	; (8010a78 <initFrame+0x1f4>)
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d11c      	bne.n	80109b2 <initFrame+0x12e>
 8010978:	4b40      	ldr	r3, [pc, #256]	; (8010a7c <initFrame+0x1f8>)
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d118      	bne.n	80109b2 <initFrame+0x12e>
      gScanType = PJPG_YH2V1;
 8010980:	4b3f      	ldr	r3, [pc, #252]	; (8010a80 <initFrame+0x1fc>)
 8010982:	2202      	movs	r2, #2
 8010984:	701a      	strb	r2, [r3, #0]

      gMaxBlocksPerMCU = 4;
 8010986:	4b3f      	ldr	r3, [pc, #252]	; (8010a84 <initFrame+0x200>)
 8010988:	2204      	movs	r2, #4
 801098a:	701a      	strb	r2, [r3, #0]
      gMCUOrg[0] = 0;
 801098c:	4b3e      	ldr	r3, [pc, #248]	; (8010a88 <initFrame+0x204>)
 801098e:	2200      	movs	r2, #0
 8010990:	701a      	strb	r2, [r3, #0]
      gMCUOrg[1] = 0;
 8010992:	4b3d      	ldr	r3, [pc, #244]	; (8010a88 <initFrame+0x204>)
 8010994:	2200      	movs	r2, #0
 8010996:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 1;
 8010998:	4b3b      	ldr	r3, [pc, #236]	; (8010a88 <initFrame+0x204>)
 801099a:	2201      	movs	r2, #1
 801099c:	709a      	strb	r2, [r3, #2]
      gMCUOrg[3] = 2;
 801099e:	4b3a      	ldr	r3, [pc, #232]	; (8010a88 <initFrame+0x204>)
 80109a0:	2202      	movs	r2, #2
 80109a2:	70da      	strb	r2, [r3, #3]

      gMaxMCUXSize = 16;
 80109a4:	4b39      	ldr	r3, [pc, #228]	; (8010a8c <initFrame+0x208>)
 80109a6:	2210      	movs	r2, #16
 80109a8:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 8;
 80109aa:	4b39      	ldr	r3, [pc, #228]	; (8010a90 <initFrame+0x20c>)
 80109ac:	2208      	movs	r2, #8
 80109ae:	701a      	strb	r2, [r3, #0]
 80109b0:	e02a      	b.n	8010a08 <initFrame+0x184>
    } else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2)) {
 80109b2:	4b31      	ldr	r3, [pc, #196]	; (8010a78 <initFrame+0x1f4>)
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	2b02      	cmp	r3, #2
 80109b8:	d122      	bne.n	8010a00 <initFrame+0x17c>
 80109ba:	4b30      	ldr	r3, [pc, #192]	; (8010a7c <initFrame+0x1f8>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b02      	cmp	r3, #2
 80109c0:	d11e      	bne.n	8010a00 <initFrame+0x17c>
      gScanType = PJPG_YH2V2;
 80109c2:	4b2f      	ldr	r3, [pc, #188]	; (8010a80 <initFrame+0x1fc>)
 80109c4:	2204      	movs	r2, #4
 80109c6:	701a      	strb	r2, [r3, #0]

      gMaxBlocksPerMCU = 6;
 80109c8:	4b2e      	ldr	r3, [pc, #184]	; (8010a84 <initFrame+0x200>)
 80109ca:	2206      	movs	r2, #6
 80109cc:	701a      	strb	r2, [r3, #0]
      gMCUOrg[0] = 0;
 80109ce:	4b2e      	ldr	r3, [pc, #184]	; (8010a88 <initFrame+0x204>)
 80109d0:	2200      	movs	r2, #0
 80109d2:	701a      	strb	r2, [r3, #0]
      gMCUOrg[1] = 0;
 80109d4:	4b2c      	ldr	r3, [pc, #176]	; (8010a88 <initFrame+0x204>)
 80109d6:	2200      	movs	r2, #0
 80109d8:	705a      	strb	r2, [r3, #1]
      gMCUOrg[2] = 0;
 80109da:	4b2b      	ldr	r3, [pc, #172]	; (8010a88 <initFrame+0x204>)
 80109dc:	2200      	movs	r2, #0
 80109de:	709a      	strb	r2, [r3, #2]
      gMCUOrg[3] = 0;
 80109e0:	4b29      	ldr	r3, [pc, #164]	; (8010a88 <initFrame+0x204>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	70da      	strb	r2, [r3, #3]
      gMCUOrg[4] = 1;
 80109e6:	4b28      	ldr	r3, [pc, #160]	; (8010a88 <initFrame+0x204>)
 80109e8:	2201      	movs	r2, #1
 80109ea:	711a      	strb	r2, [r3, #4]
      gMCUOrg[5] = 2;
 80109ec:	4b26      	ldr	r3, [pc, #152]	; (8010a88 <initFrame+0x204>)
 80109ee:	2202      	movs	r2, #2
 80109f0:	715a      	strb	r2, [r3, #5]

      gMaxMCUXSize = 16;
 80109f2:	4b26      	ldr	r3, [pc, #152]	; (8010a8c <initFrame+0x208>)
 80109f4:	2210      	movs	r2, #16
 80109f6:	701a      	strb	r2, [r3, #0]
      gMaxMCUYSize = 16;
 80109f8:	4b25      	ldr	r3, [pc, #148]	; (8010a90 <initFrame+0x20c>)
 80109fa:	2210      	movs	r2, #16
 80109fc:	701a      	strb	r2, [r3, #0]
 80109fe:	e003      	b.n	8010a08 <initFrame+0x184>
    } else
      return PJPG_UNSUPPORTED_SAMP_FACTORS;
 8010a00:	231b      	movs	r3, #27
 8010a02:	e031      	b.n	8010a68 <initFrame+0x1e4>
  } else
    return PJPG_UNSUPPORTED_COLORSPACE;
 8010a04:	231a      	movs	r3, #26
 8010a06:	e02f      	b.n	8010a68 <initFrame+0x1e4>

  gMaxMCUSPerRow =
      (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
 8010a08:	4b22      	ldr	r3, [pc, #136]	; (8010a94 <initFrame+0x210>)
 8010a0a:	881b      	ldrh	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	4b1f      	ldr	r3, [pc, #124]	; (8010a8c <initFrame+0x208>)
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	3b01      	subs	r3, #1
 8010a14:	441a      	add	r2, r3
 8010a16:	4b1d      	ldr	r3, [pc, #116]	; (8010a8c <initFrame+0x208>)
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	2b08      	cmp	r3, #8
 8010a1c:	d101      	bne.n	8010a22 <initFrame+0x19e>
 8010a1e:	2303      	movs	r3, #3
 8010a20:	e000      	b.n	8010a24 <initFrame+0x1a0>
 8010a22:	2304      	movs	r3, #4
 8010a24:	fa42 f303 	asr.w	r3, r2, r3
  gMaxMCUSPerRow =
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	4b1b      	ldr	r3, [pc, #108]	; (8010a98 <initFrame+0x214>)
 8010a2c:	801a      	strh	r2, [r3, #0]
  gMaxMCUSPerCol =
      (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
 8010a2e:	4b1b      	ldr	r3, [pc, #108]	; (8010a9c <initFrame+0x218>)
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	461a      	mov	r2, r3
 8010a34:	4b16      	ldr	r3, [pc, #88]	; (8010a90 <initFrame+0x20c>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	3b01      	subs	r3, #1
 8010a3a:	441a      	add	r2, r3
 8010a3c:	4b14      	ldr	r3, [pc, #80]	; (8010a90 <initFrame+0x20c>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	2b08      	cmp	r3, #8
 8010a42:	d101      	bne.n	8010a48 <initFrame+0x1c4>
 8010a44:	2303      	movs	r3, #3
 8010a46:	e000      	b.n	8010a4a <initFrame+0x1c6>
 8010a48:	2304      	movs	r3, #4
 8010a4a:	fa42 f303 	asr.w	r3, r2, r3
  gMaxMCUSPerCol =
 8010a4e:	b29a      	uxth	r2, r3
 8010a50:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <initFrame+0x21c>)
 8010a52:	801a      	strh	r2, [r3, #0]

  gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
 8010a54:	4b10      	ldr	r3, [pc, #64]	; (8010a98 <initFrame+0x214>)
 8010a56:	881a      	ldrh	r2, [r3, #0]
 8010a58:	4b11      	ldr	r3, [pc, #68]	; (8010aa0 <initFrame+0x21c>)
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	fb12 f303 	smulbb	r3, r2, r3
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	4b10      	ldr	r3, [pc, #64]	; (8010aa4 <initFrame+0x220>)
 8010a64:	801a      	strh	r2, [r3, #0]

  return 0;
 8010a66:	2300      	movs	r3, #0
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	20004a2a 	.word	0x20004a2a
 8010a78:	20004a30 	.word	0x20004a30
 8010a7c:	20004a34 	.word	0x20004a34
 8010a80:	20004a4f 	.word	0x20004a4f
 8010a84:	20004a50 	.word	0x20004a50
 8010a88:	20004a5c 	.word	0x20004a5c
 8010a8c:	20004a51 	.word	0x20004a51
 8010a90:	20004a52 	.word	0x20004a52
 8010a94:	20004a26 	.word	0x20004a26
 8010a98:	20004a54 	.word	0x20004a54
 8010a9c:	20004a28 	.word	0x20004a28
 8010aa0:	20004a56 	.word	0x20004a56
 8010aa4:	20004a58 	.word	0x20004a58

08010aa8 <createWinogradQuant>:
    139, 69,  35,  96,  131, 151, 151, 131, 96,  35,  49,  91,  118,
    128, 118, 91,  49,  46,  81,  101, 101, 81,  46,  42,  69,  79,
    69,  42,  35,  54,  54,  35,  28,  37,  28,  19,  19,  10,
};

static void createWinogradQuant(int16 *pQuant) {
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  uint8 i;

  for (i = 0; i < 64; i++) {
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	73fb      	strb	r3, [r7, #15]
 8010ab4:	e01a      	b.n	8010aec <createWinogradQuant+0x44>
    long x = pQuant[i];
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
 8010ab8:	005b      	lsls	r3, r3, #1
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	4413      	add	r3, r2
 8010abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ac2:	60bb      	str	r3, [r7, #8]
    x *= gWinogradQuant[i];
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
 8010ac6:	4a0e      	ldr	r2, [pc, #56]	; (8010b00 <createWinogradQuant+0x58>)
 8010ac8:	5cd3      	ldrb	r3, [r2, r3]
 8010aca:	461a      	mov	r2, r3
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	fb02 f303 	mul.w	r3, r2, r3
 8010ad2:	60bb      	str	r3, [r7, #8]
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	3304      	adds	r3, #4
                                    PJPG_DCT_SCALE_BITS - 1))) >>
 8010ad8:	10d9      	asrs	r1, r3, #3
    pQuant[i] = (int16)((x + (1 << (PJPG_WINOGRAD_QUANT_SCALE_BITS -
 8010ada:	7bfb      	ldrb	r3, [r7, #15]
 8010adc:	005b      	lsls	r3, r3, #1
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b20a      	sxth	r2, r1
 8010ae4:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < 64; i++) {
 8010ae6:	7bfb      	ldrb	r3, [r7, #15]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	73fb      	strb	r3, [r7, #15]
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	2b3f      	cmp	r3, #63	; 0x3f
 8010af0:	d9e1      	bls.n	8010ab6 <createWinogradQuant+0xe>
                        (PJPG_WINOGRAD_QUANT_SCALE_BITS - PJPG_DCT_SCALE_BITS));
  }
}
 8010af2:	bf00      	nop
 8010af4:	3714      	adds	r7, #20
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop
 8010b00:	0801912c 	.word	0x0801912c

08010b04 <imul_b1_b3>:

static PJPG_INLINE int16 imul_b1_b3(int16 w) {
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	80fb      	strh	r3, [r7, #6]
  long x = (w * 362L);
 8010b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b12:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8010b16:	fb02 f303 	mul.w	r3, r2, r3
 8010b1a:	60fb      	str	r3, [r7, #12]
  x += 128L;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3380      	adds	r3, #128	; 0x80
 8010b20:	60fb      	str	r3, [r7, #12]
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f7fe fdea 	bl	800f6fc <arithmeticRightShift8L>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	b21b      	sxth	r3, r3
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3710      	adds	r7, #16
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <imul_b2>:

static PJPG_INLINE int16 imul_b2(int16 w) {
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	80fb      	strh	r3, [r7, #6]
  long x = (w * 669L);
 8010b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b42:	f240 229d 	movw	r2, #669	; 0x29d
 8010b46:	fb02 f303 	mul.w	r3, r2, r3
 8010b4a:	60fb      	str	r3, [r7, #12]
  x += 128L;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	3380      	adds	r3, #128	; 0x80
 8010b50:	60fb      	str	r3, [r7, #12]
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f7fe fdd2 	bl	800f6fc <arithmeticRightShift8L>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	b21b      	sxth	r3, r3
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <imul_b4>:

static PJPG_INLINE int16 imul_b4(int16 w) {
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	80fb      	strh	r3, [r7, #6]
  long x = (w * 277L);
 8010b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b72:	f240 1215 	movw	r2, #277	; 0x115
 8010b76:	fb02 f303 	mul.w	r3, r2, r3
 8010b7a:	60fb      	str	r3, [r7, #12]
  x += 128L;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	3380      	adds	r3, #128	; 0x80
 8010b80:	60fb      	str	r3, [r7, #12]
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 8010b82:	68f8      	ldr	r0, [r7, #12]
 8010b84:	f7fe fdba 	bl	800f6fc <arithmeticRightShift8L>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	b21b      	sxth	r3, r3
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3710      	adds	r7, #16
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <imul_b5>:

static PJPG_INLINE int16 imul_b5(int16 w) {
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b084      	sub	sp, #16
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	80fb      	strh	r3, [r7, #6]
  long x = (w * 196L);
 8010b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ba2:	22c4      	movs	r2, #196	; 0xc4
 8010ba4:	fb02 f303 	mul.w	r3, r2, r3
 8010ba8:	60fb      	str	r3, [r7, #12]
  x += 128L;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	3380      	adds	r3, #128	; 0x80
 8010bae:	60fb      	str	r3, [r7, #12]
  return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f7fe fda3 	bl	800f6fc <arithmeticRightShift8L>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	b21b      	sxth	r3, r3
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <clamp>:

static PJPG_INLINE uint8 clamp(int16 s) {
 8010bc2:	b480      	push	{r7}
 8010bc4:	b083      	sub	sp, #12
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	4603      	mov	r3, r0
 8010bca:	80fb      	strh	r3, [r7, #6]
  if ((uint16)s > 255U) {
 8010bcc:	88fb      	ldrh	r3, [r7, #6]
 8010bce:	2bff      	cmp	r3, #255	; 0xff
 8010bd0:	d90b      	bls.n	8010bea <clamp+0x28>
    if (s < 0)
 8010bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	da01      	bge.n	8010bde <clamp+0x1c>
      return 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e007      	b.n	8010bee <clamp+0x2c>
    else if (s > 255)
 8010bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010be2:	2bff      	cmp	r3, #255	; 0xff
 8010be4:	dd01      	ble.n	8010bea <clamp+0x28>
      return 255;
 8010be6:	23ff      	movs	r3, #255	; 0xff
 8010be8:	e001      	b.n	8010bee <clamp+0x2c>
  }

  return (uint8)s;
 8010bea:	88fb      	ldrh	r3, [r7, #6]
 8010bec:	b2db      	uxtb	r3, r3
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	370c      	adds	r7, #12
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr
	...

08010bfc <idctRows>:

static void idctRows(void) {
 8010bfc:	b590      	push	{r4, r7, lr}
 8010bfe:	b093      	sub	sp, #76	; 0x4c
 8010c00:	af00      	add	r7, sp, #0
  uint8 i;
  int16 *pSrc = gCoeffBuf;
 8010c02:	4b28      	ldr	r3, [pc, #160]	; (8010ca4 <idctRows+0xa8>)
 8010c04:	643b      	str	r3, [r7, #64]	; 0x40

  for (i = 0; i < 8; i++) {
 8010c06:	2300      	movs	r3, #0
 8010c08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010c0c:	e131      	b.n	8010e72 <idctRows+0x276>
    if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) ==
 8010c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c10:	3302      	adds	r3, #2
 8010c12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c18:	3304      	adds	r3, #4
 8010c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	b21a      	sxth	r2, r3
 8010c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c24:	3306      	adds	r3, #6
 8010c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	b21a      	sxth	r2, r3
 8010c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c30:	3308      	adds	r3, #8
 8010c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c36:	4313      	orrs	r3, r2
 8010c38:	b21a      	sxth	r2, r3
 8010c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c3c:	330a      	adds	r3, #10
 8010c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	b21a      	sxth	r2, r3
 8010c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c48:	330c      	adds	r3, #12
 8010c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	b21a      	sxth	r2, r3
 8010c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c54:	330e      	adds	r3, #14
 8010c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	b21b      	sxth	r3, r3
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d122      	bne.n	8010ca8 <idctRows+0xac>
        0) {

      int16 src0 = *pSrc;
 8010c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	80bb      	strh	r3, [r7, #4]

      *(pSrc + 1) = src0;
 8010c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c6a:	3302      	adds	r3, #2
 8010c6c:	88ba      	ldrh	r2, [r7, #4]
 8010c6e:	801a      	strh	r2, [r3, #0]
      *(pSrc + 2) = src0;
 8010c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c72:	3304      	adds	r3, #4
 8010c74:	88ba      	ldrh	r2, [r7, #4]
 8010c76:	801a      	strh	r2, [r3, #0]
      *(pSrc + 3) = src0;
 8010c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c7a:	3306      	adds	r3, #6
 8010c7c:	88ba      	ldrh	r2, [r7, #4]
 8010c7e:	801a      	strh	r2, [r3, #0]
      *(pSrc + 4) = src0;
 8010c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c82:	3308      	adds	r3, #8
 8010c84:	88ba      	ldrh	r2, [r7, #4]
 8010c86:	801a      	strh	r2, [r3, #0]
      *(pSrc + 5) = src0;
 8010c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c8a:	330a      	adds	r3, #10
 8010c8c:	88ba      	ldrh	r2, [r7, #4]
 8010c8e:	801a      	strh	r2, [r3, #0]
      *(pSrc + 6) = src0;
 8010c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c92:	330c      	adds	r3, #12
 8010c94:	88ba      	ldrh	r2, [r7, #4]
 8010c96:	801a      	strh	r2, [r3, #0]
      *(pSrc + 7) = src0;
 8010c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c9a:	330e      	adds	r3, #14
 8010c9c:	88ba      	ldrh	r2, [r7, #4]
 8010c9e:	801a      	strh	r2, [r3, #0]
 8010ca0:	e0df      	b.n	8010e62 <idctRows+0x266>
 8010ca2:	bf00      	nop
 8010ca4:	20004134 	.word	0x20004134
    } else {
      int16 src4 = *(pSrc + 5);
 8010ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010caa:	895b      	ldrh	r3, [r3, #10]
 8010cac:	87fb      	strh	r3, [r7, #62]	; 0x3e
      int16 src7 = *(pSrc + 3);
 8010cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cb0:	88db      	ldrh	r3, [r3, #6]
 8010cb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
      int16 x4 = src4 - src7;
 8010cb4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010cb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	877b      	strh	r3, [r7, #58]	; 0x3a
      int16 x7 = src4 + src7;
 8010cbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010cc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cc2:	4413      	add	r3, r2
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	873b      	strh	r3, [r7, #56]	; 0x38

      int16 src5 = *(pSrc + 1);
 8010cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cca:	885b      	ldrh	r3, [r3, #2]
 8010ccc:	86fb      	strh	r3, [r7, #54]	; 0x36
      int16 src6 = *(pSrc + 7);
 8010cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010cd0:	89db      	ldrh	r3, [r3, #14]
 8010cd2:	86bb      	strh	r3, [r7, #52]	; 0x34
      int16 x5 = src5 + src6;
 8010cd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010cd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010cd8:	4413      	add	r3, r2
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	867b      	strh	r3, [r7, #50]	; 0x32
      int16 x6 = src5 - src6;
 8010cde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010ce0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	863b      	strh	r3, [r7, #48]	; 0x30

      int16 tmp1 = imul_b5(x4 - x6);
 8010ce8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010cea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	b21b      	sxth	r3, r3
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff ff4e 	bl	8010b94 <imul_b5>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
      int16 stg26 = imul_b4(x6) - tmp1;
 8010cfc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff ff2f 	bl	8010b64 <imul_b4>
 8010d06:	4603      	mov	r3, r0
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	85bb      	strh	r3, [r7, #44]	; 0x2c

      int16 x24 = tmp1 - imul_b2(x4);
 8010d12:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8010d14:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff ff0b 	bl	8010b34 <imul_b2>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	1ae3      	subs	r3, r4, r3
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	857b      	strh	r3, [r7, #42]	; 0x2a

      int16 x15 = x5 - x7;
 8010d28:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010d2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	853b      	strh	r3, [r7, #40]	; 0x28
      int16 x17 = x5 + x7;
 8010d32:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010d34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010d36:	4413      	add	r3, r2
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	84fb      	strh	r3, [r7, #38]	; 0x26

      int16 tmp2 = stg26 - x17;
 8010d3c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010d3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010d40:	1ad3      	subs	r3, r2, r3
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	84bb      	strh	r3, [r7, #36]	; 0x24
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 8010d46:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7ff feda 	bl	8010b04 <imul_b1_b3>
 8010d50:	4603      	mov	r3, r0
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d56:	1ad3      	subs	r3, r2, r3
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	847b      	strh	r3, [r7, #34]	; 0x22
      int16 x44 = tmp3 + x24;
 8010d5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d60:	4413      	add	r3, r2
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	843b      	strh	r3, [r7, #32]

      int16 src0 = *(pSrc + 0);
 8010d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d68:	881b      	ldrh	r3, [r3, #0]
 8010d6a:	83fb      	strh	r3, [r7, #30]
      int16 src1 = *(pSrc + 4);
 8010d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d6e:	891b      	ldrh	r3, [r3, #8]
 8010d70:	83bb      	strh	r3, [r7, #28]
      int16 x30 = src0 + src1;
 8010d72:	8bfa      	ldrh	r2, [r7, #30]
 8010d74:	8bbb      	ldrh	r3, [r7, #28]
 8010d76:	4413      	add	r3, r2
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	837b      	strh	r3, [r7, #26]
      int16 x31 = src0 - src1;
 8010d7c:	8bfa      	ldrh	r2, [r7, #30]
 8010d7e:	8bbb      	ldrh	r3, [r7, #28]
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	833b      	strh	r3, [r7, #24]

      int16 src2 = *(pSrc + 2);
 8010d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d88:	889b      	ldrh	r3, [r3, #4]
 8010d8a:	82fb      	strh	r3, [r7, #22]
      int16 src3 = *(pSrc + 6);
 8010d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d8e:	899b      	ldrh	r3, [r3, #12]
 8010d90:	82bb      	strh	r3, [r7, #20]
      int16 x12 = src2 - src3;
 8010d92:	8afa      	ldrh	r2, [r7, #22]
 8010d94:	8abb      	ldrh	r3, [r7, #20]
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	827b      	strh	r3, [r7, #18]
      int16 x13 = src2 + src3;
 8010d9c:	8afa      	ldrh	r2, [r7, #22]
 8010d9e:	8abb      	ldrh	r3, [r7, #20]
 8010da0:	4413      	add	r3, r2
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	823b      	strh	r3, [r7, #16]

      int16 x32 = imul_b1_b3(x12) - x13;
 8010da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7ff feaa 	bl	8010b04 <imul_b1_b3>
 8010db0:	4603      	mov	r3, r0
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	8a3b      	ldrh	r3, [r7, #16]
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	81fb      	strh	r3, [r7, #14]

      int16 x40 = x30 + x13;
 8010dbc:	8b7a      	ldrh	r2, [r7, #26]
 8010dbe:	8a3b      	ldrh	r3, [r7, #16]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	81bb      	strh	r3, [r7, #12]
      int16 x43 = x30 - x13;
 8010dc6:	8b7a      	ldrh	r2, [r7, #26]
 8010dc8:	8a3b      	ldrh	r3, [r7, #16]
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	817b      	strh	r3, [r7, #10]
      int16 x41 = x31 + x32;
 8010dd0:	8b3a      	ldrh	r2, [r7, #24]
 8010dd2:	89fb      	ldrh	r3, [r7, #14]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	813b      	strh	r3, [r7, #8]
      int16 x42 = x31 - x32;
 8010dda:	8b3a      	ldrh	r2, [r7, #24]
 8010ddc:	89fb      	ldrh	r3, [r7, #14]
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	80fb      	strh	r3, [r7, #6]

      *(pSrc + 0) = x40 + x17;
 8010de4:	89ba      	ldrh	r2, [r7, #12]
 8010de6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010de8:	4413      	add	r3, r2
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	b21a      	sxth	r2, r3
 8010dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010df0:	801a      	strh	r2, [r3, #0]
      *(pSrc + 1) = x41 + tmp2;
 8010df2:	893a      	ldrh	r2, [r7, #8]
 8010df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010df6:	4413      	add	r3, r2
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dfc:	3302      	adds	r3, #2
 8010dfe:	b212      	sxth	r2, r2
 8010e00:	801a      	strh	r2, [r3, #0]
      *(pSrc + 2) = x42 + tmp3;
 8010e02:	88fa      	ldrh	r2, [r7, #6]
 8010e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e06:	4413      	add	r3, r2
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e0c:	3304      	adds	r3, #4
 8010e0e:	b212      	sxth	r2, r2
 8010e10:	801a      	strh	r2, [r3, #0]
      *(pSrc + 3) = x43 - x44;
 8010e12:	897a      	ldrh	r2, [r7, #10]
 8010e14:	8c3b      	ldrh	r3, [r7, #32]
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e1c:	3306      	adds	r3, #6
 8010e1e:	b212      	sxth	r2, r2
 8010e20:	801a      	strh	r2, [r3, #0]
      *(pSrc + 4) = x43 + x44;
 8010e22:	897a      	ldrh	r2, [r7, #10]
 8010e24:	8c3b      	ldrh	r3, [r7, #32]
 8010e26:	4413      	add	r3, r2
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e2c:	3308      	adds	r3, #8
 8010e2e:	b212      	sxth	r2, r2
 8010e30:	801a      	strh	r2, [r3, #0]
      *(pSrc + 5) = x42 - tmp3;
 8010e32:	88fa      	ldrh	r2, [r7, #6]
 8010e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e3c:	330a      	adds	r3, #10
 8010e3e:	b212      	sxth	r2, r2
 8010e40:	801a      	strh	r2, [r3, #0]
      *(pSrc + 6) = x41 - tmp2;
 8010e42:	893a      	ldrh	r2, [r7, #8]
 8010e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e4c:	330c      	adds	r3, #12
 8010e4e:	b212      	sxth	r2, r2
 8010e50:	801a      	strh	r2, [r3, #0]
      *(pSrc + 7) = x40 - x17;
 8010e52:	89ba      	ldrh	r2, [r7, #12]
 8010e54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e5c:	330e      	adds	r3, #14
 8010e5e:	b212      	sxth	r2, r2
 8010e60:	801a      	strh	r2, [r3, #0]
    }

    pSrc += 8;
 8010e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e64:	3310      	adds	r3, #16
 8010e66:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < 8; i++) {
 8010e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010e72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010e76:	2b07      	cmp	r3, #7
 8010e78:	f67f aec9 	bls.w	8010c0e <idctRows+0x12>
  }
}
 8010e7c:	bf00      	nop
 8010e7e:	374c      	adds	r7, #76	; 0x4c
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd90      	pop	{r4, r7, pc}

08010e84 <idctCols>:

static void idctCols(void) {
 8010e84:	b590      	push	{r4, r7, lr}
 8010e86:	b093      	sub	sp, #76	; 0x4c
 8010e88:	af00      	add	r7, sp, #0
  uint8 i;

  int16 *pSrc = gCoeffBuf;
 8010e8a:	4b36      	ldr	r3, [pc, #216]	; (8010f64 <idctCols+0xe0>)
 8010e8c:	643b      	str	r3, [r7, #64]	; 0x40

  for (i = 0; i < 8; i++) {
 8010e8e:	2300      	movs	r3, #0
 8010e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010e94:	e1d8      	b.n	8011248 <idctCols+0x3c4>
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 8010e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e98:	3310      	adds	r3, #16
 8010e9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ea0:	3320      	adds	r3, #32
 8010ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	b21a      	sxth	r2, r3
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 8010eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eac:	3330      	adds	r3, #48	; 0x30
 8010eae:	f9b3 3000 	ldrsh.w	r3, [r3]
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	b21a      	sxth	r2, r3
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 8010eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eb8:	3340      	adds	r3, #64	; 0x40
 8010eba:	f9b3 3000 	ldrsh.w	r3, [r3]
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	b21a      	sxth	r2, r3
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 8010ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ec4:	3350      	adds	r3, #80	; 0x50
 8010ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
         pSrc[6 * 8] | pSrc[7 * 8]) == 0) {
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	b21a      	sxth	r2, r3
 8010ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ed0:	3360      	adds	r3, #96	; 0x60
 8010ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	b21a      	sxth	r2, r3
 8010eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010edc:	3370      	adds	r3, #112	; 0x70
 8010ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	b21b      	sxth	r3, r3
    if ((pSrc[1 * 8] | pSrc[2 * 8] | pSrc[3 * 8] | pSrc[4 * 8] | pSrc[5 * 8] |
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d13e      	bne.n	8010f68 <idctCols+0xe4>

      uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
 8010eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	3340      	adds	r3, #64	; 0x40
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	b21b      	sxth	r3, r3
 8010ef8:	2107      	movs	r1, #7
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fe fbdc 	bl	800f6b8 <arithmeticRightShiftN16>
 8010f00:	4603      	mov	r3, r0
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	3380      	adds	r3, #128	; 0x80
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	b21b      	sxth	r3, r3
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff fe59 	bl	8010bc2 <clamp>
 8010f10:	4603      	mov	r3, r0
 8010f12:	717b      	strb	r3, [r7, #5]
      *(pSrc + 0 * 8) = c;
 8010f14:	797b      	ldrb	r3, [r7, #5]
 8010f16:	b21a      	sxth	r2, r3
 8010f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f1a:	801a      	strh	r2, [r3, #0]
      *(pSrc + 1 * 8) = c;
 8010f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f1e:	3310      	adds	r3, #16
 8010f20:	797a      	ldrb	r2, [r7, #5]
 8010f22:	b212      	sxth	r2, r2
 8010f24:	801a      	strh	r2, [r3, #0]
      *(pSrc + 2 * 8) = c;
 8010f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f28:	3320      	adds	r3, #32
 8010f2a:	797a      	ldrb	r2, [r7, #5]
 8010f2c:	b212      	sxth	r2, r2
 8010f2e:	801a      	strh	r2, [r3, #0]
      *(pSrc + 3 * 8) = c;
 8010f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f32:	3330      	adds	r3, #48	; 0x30
 8010f34:	797a      	ldrb	r2, [r7, #5]
 8010f36:	b212      	sxth	r2, r2
 8010f38:	801a      	strh	r2, [r3, #0]
      *(pSrc + 4 * 8) = c;
 8010f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f3c:	3340      	adds	r3, #64	; 0x40
 8010f3e:	797a      	ldrb	r2, [r7, #5]
 8010f40:	b212      	sxth	r2, r2
 8010f42:	801a      	strh	r2, [r3, #0]
      *(pSrc + 5 * 8) = c;
 8010f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f46:	3350      	adds	r3, #80	; 0x50
 8010f48:	797a      	ldrb	r2, [r7, #5]
 8010f4a:	b212      	sxth	r2, r2
 8010f4c:	801a      	strh	r2, [r3, #0]
      *(pSrc + 6 * 8) = c;
 8010f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f50:	3360      	adds	r3, #96	; 0x60
 8010f52:	797a      	ldrb	r2, [r7, #5]
 8010f54:	b212      	sxth	r2, r2
 8010f56:	801a      	strh	r2, [r3, #0]
      *(pSrc + 7 * 8) = c;
 8010f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5a:	3370      	adds	r3, #112	; 0x70
 8010f5c:	797a      	ldrb	r2, [r7, #5]
 8010f5e:	b212      	sxth	r2, r2
 8010f60:	801a      	strh	r2, [r3, #0]
 8010f62:	e169      	b.n	8011238 <idctCols+0x3b4>
 8010f64:	20004134 	.word	0x20004134
    } else {
      int16 src4 = *(pSrc + 5 * 8);
 8010f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      int16 src7 = *(pSrc + 3 * 8);
 8010f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f72:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8010f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
      int16 x4 = src4 - src7;
 8010f76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010f78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	877b      	strh	r3, [r7, #58]	; 0x3a
      int16 x7 = src4 + src7;
 8010f80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f84:	4413      	add	r3, r2
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	873b      	strh	r3, [r7, #56]	; 0x38

      int16 src5 = *(pSrc + 1 * 8);
 8010f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f8c:	8a1b      	ldrh	r3, [r3, #16]
 8010f8e:	86fb      	strh	r3, [r7, #54]	; 0x36
      int16 src6 = *(pSrc + 7 * 8);
 8010f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f92:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8010f96:	86bb      	strh	r3, [r7, #52]	; 0x34
      int16 x5 = src5 + src6;
 8010f98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010f9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010f9c:	4413      	add	r3, r2
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	867b      	strh	r3, [r7, #50]	; 0x32
      int16 x6 = src5 - src6;
 8010fa2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010fa4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010fa6:	1ad3      	subs	r3, r2, r3
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	863b      	strh	r3, [r7, #48]	; 0x30

      int16 tmp1 = imul_b5(x4 - x6);
 8010fac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	b21b      	sxth	r3, r3
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff fdec 	bl	8010b94 <imul_b5>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      int16 stg26 = imul_b4(x6) - tmp1;
 8010fc0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fdcd 	bl	8010b64 <imul_b4>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	85bb      	strh	r3, [r7, #44]	; 0x2c

      int16 x24 = tmp1 - imul_b2(x4);
 8010fd6:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8010fd8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff fda9 	bl	8010b34 <imul_b2>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	1ae3      	subs	r3, r4, r3
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	857b      	strh	r3, [r7, #42]	; 0x2a

      int16 x15 = x5 - x7;
 8010fec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010fee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	853b      	strh	r3, [r7, #40]	; 0x28
      int16 x17 = x5 + x7;
 8010ff6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010ffa:	4413      	add	r3, r2
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	84fb      	strh	r3, [r7, #38]	; 0x26

      int16 tmp2 = stg26 - x17;
 8011000:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8011002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	b29b      	uxth	r3, r3
 8011008:	84bb      	strh	r3, [r7, #36]	; 0x24
      int16 tmp3 = imul_b1_b3(x15) - tmp2;
 801100a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff fd78 	bl	8010b04 <imul_b1_b3>
 8011014:	4603      	mov	r3, r0
 8011016:	b29a      	uxth	r2, r3
 8011018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801101a:	1ad3      	subs	r3, r2, r3
 801101c:	b29b      	uxth	r3, r3
 801101e:	847b      	strh	r3, [r7, #34]	; 0x22
      int16 x44 = tmp3 + x24;
 8011020:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011022:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011024:	4413      	add	r3, r2
 8011026:	b29b      	uxth	r3, r3
 8011028:	843b      	strh	r3, [r7, #32]

      int16 src0 = *(pSrc + 0 * 8);
 801102a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801102c:	881b      	ldrh	r3, [r3, #0]
 801102e:	83fb      	strh	r3, [r7, #30]
      int16 src1 = *(pSrc + 4 * 8);
 8011030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011032:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011036:	83bb      	strh	r3, [r7, #28]
      int16 x30 = src0 + src1;
 8011038:	8bfa      	ldrh	r2, [r7, #30]
 801103a:	8bbb      	ldrh	r3, [r7, #28]
 801103c:	4413      	add	r3, r2
 801103e:	b29b      	uxth	r3, r3
 8011040:	837b      	strh	r3, [r7, #26]
      int16 x31 = src0 - src1;
 8011042:	8bfa      	ldrh	r2, [r7, #30]
 8011044:	8bbb      	ldrh	r3, [r7, #28]
 8011046:	1ad3      	subs	r3, r2, r3
 8011048:	b29b      	uxth	r3, r3
 801104a:	833b      	strh	r3, [r7, #24]

      int16 src2 = *(pSrc + 2 * 8);
 801104c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801104e:	8c1b      	ldrh	r3, [r3, #32]
 8011050:	82fb      	strh	r3, [r7, #22]
      int16 src3 = *(pSrc + 6 * 8);
 8011052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011054:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011058:	82bb      	strh	r3, [r7, #20]
      int16 x12 = src2 - src3;
 801105a:	8afa      	ldrh	r2, [r7, #22]
 801105c:	8abb      	ldrh	r3, [r7, #20]
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	b29b      	uxth	r3, r3
 8011062:	827b      	strh	r3, [r7, #18]
      int16 x13 = src2 + src3;
 8011064:	8afa      	ldrh	r2, [r7, #22]
 8011066:	8abb      	ldrh	r3, [r7, #20]
 8011068:	4413      	add	r3, r2
 801106a:	b29b      	uxth	r3, r3
 801106c:	823b      	strh	r3, [r7, #16]

      int16 x32 = imul_b1_b3(x12) - x13;
 801106e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011072:	4618      	mov	r0, r3
 8011074:	f7ff fd46 	bl	8010b04 <imul_b1_b3>
 8011078:	4603      	mov	r3, r0
 801107a:	b29a      	uxth	r2, r3
 801107c:	8a3b      	ldrh	r3, [r7, #16]
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	b29b      	uxth	r3, r3
 8011082:	81fb      	strh	r3, [r7, #14]

      int16 x40 = x30 + x13;
 8011084:	8b7a      	ldrh	r2, [r7, #26]
 8011086:	8a3b      	ldrh	r3, [r7, #16]
 8011088:	4413      	add	r3, r2
 801108a:	b29b      	uxth	r3, r3
 801108c:	81bb      	strh	r3, [r7, #12]
      int16 x43 = x30 - x13;
 801108e:	8b7a      	ldrh	r2, [r7, #26]
 8011090:	8a3b      	ldrh	r3, [r7, #16]
 8011092:	1ad3      	subs	r3, r2, r3
 8011094:	b29b      	uxth	r3, r3
 8011096:	817b      	strh	r3, [r7, #10]
      int16 x41 = x31 + x32;
 8011098:	8b3a      	ldrh	r2, [r7, #24]
 801109a:	89fb      	ldrh	r3, [r7, #14]
 801109c:	4413      	add	r3, r2
 801109e:	b29b      	uxth	r3, r3
 80110a0:	813b      	strh	r3, [r7, #8]
      int16 x42 = x31 - x32;
 80110a2:	8b3a      	ldrh	r2, [r7, #24]
 80110a4:	89fb      	ldrh	r3, [r7, #14]
 80110a6:	1ad3      	subs	r3, r2, r3
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	80fb      	strh	r3, [r7, #6]

      *(pSrc + 0 * 8) = clamp(PJPG_DESCALE(x40 + x17) + 128);
 80110ac:	89ba      	ldrh	r2, [r7, #12]
 80110ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80110b0:	4413      	add	r3, r2
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	3340      	adds	r3, #64	; 0x40
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	b21b      	sxth	r3, r3
 80110ba:	2107      	movs	r1, #7
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fe fafb 	bl	800f6b8 <arithmeticRightShiftN16>
 80110c2:	4603      	mov	r3, r0
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	3380      	adds	r3, #128	; 0x80
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	b21b      	sxth	r3, r3
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7ff fd78 	bl	8010bc2 <clamp>
 80110d2:	4603      	mov	r3, r0
 80110d4:	b21a      	sxth	r2, r3
 80110d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110d8:	801a      	strh	r2, [r3, #0]
      *(pSrc + 1 * 8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
 80110da:	893a      	ldrh	r2, [r7, #8]
 80110dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110de:	4413      	add	r3, r2
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	3340      	adds	r3, #64	; 0x40
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	b21b      	sxth	r3, r3
 80110e8:	2107      	movs	r1, #7
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe fae4 	bl	800f6b8 <arithmeticRightShiftN16>
 80110f0:	4603      	mov	r3, r0
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	3380      	adds	r3, #128	; 0x80
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7ff fd61 	bl	8010bc2 <clamp>
 8011100:	4603      	mov	r3, r0
 8011102:	461a      	mov	r2, r3
 8011104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011106:	3310      	adds	r3, #16
 8011108:	b212      	sxth	r2, r2
 801110a:	801a      	strh	r2, [r3, #0]
      *(pSrc + 2 * 8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
 801110c:	88fa      	ldrh	r2, [r7, #6]
 801110e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011110:	4413      	add	r3, r2
 8011112:	b29b      	uxth	r3, r3
 8011114:	3340      	adds	r3, #64	; 0x40
 8011116:	b29b      	uxth	r3, r3
 8011118:	b21b      	sxth	r3, r3
 801111a:	2107      	movs	r1, #7
 801111c:	4618      	mov	r0, r3
 801111e:	f7fe facb 	bl	800f6b8 <arithmeticRightShiftN16>
 8011122:	4603      	mov	r3, r0
 8011124:	b29b      	uxth	r3, r3
 8011126:	3380      	adds	r3, #128	; 0x80
 8011128:	b29b      	uxth	r3, r3
 801112a:	b21b      	sxth	r3, r3
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff fd48 	bl	8010bc2 <clamp>
 8011132:	4603      	mov	r3, r0
 8011134:	461a      	mov	r2, r3
 8011136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011138:	3320      	adds	r3, #32
 801113a:	b212      	sxth	r2, r2
 801113c:	801a      	strh	r2, [r3, #0]
      *(pSrc + 3 * 8) = clamp(PJPG_DESCALE(x43 - x44) + 128);
 801113e:	897a      	ldrh	r2, [r7, #10]
 8011140:	8c3b      	ldrh	r3, [r7, #32]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	b29b      	uxth	r3, r3
 8011146:	3340      	adds	r3, #64	; 0x40
 8011148:	b29b      	uxth	r3, r3
 801114a:	b21b      	sxth	r3, r3
 801114c:	2107      	movs	r1, #7
 801114e:	4618      	mov	r0, r3
 8011150:	f7fe fab2 	bl	800f6b8 <arithmeticRightShiftN16>
 8011154:	4603      	mov	r3, r0
 8011156:	b29b      	uxth	r3, r3
 8011158:	3380      	adds	r3, #128	; 0x80
 801115a:	b29b      	uxth	r3, r3
 801115c:	b21b      	sxth	r3, r3
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff fd2f 	bl	8010bc2 <clamp>
 8011164:	4603      	mov	r3, r0
 8011166:	461a      	mov	r2, r3
 8011168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801116a:	3330      	adds	r3, #48	; 0x30
 801116c:	b212      	sxth	r2, r2
 801116e:	801a      	strh	r2, [r3, #0]
      *(pSrc + 4 * 8) = clamp(PJPG_DESCALE(x43 + x44) + 128);
 8011170:	897a      	ldrh	r2, [r7, #10]
 8011172:	8c3b      	ldrh	r3, [r7, #32]
 8011174:	4413      	add	r3, r2
 8011176:	b29b      	uxth	r3, r3
 8011178:	3340      	adds	r3, #64	; 0x40
 801117a:	b29b      	uxth	r3, r3
 801117c:	b21b      	sxth	r3, r3
 801117e:	2107      	movs	r1, #7
 8011180:	4618      	mov	r0, r3
 8011182:	f7fe fa99 	bl	800f6b8 <arithmeticRightShiftN16>
 8011186:	4603      	mov	r3, r0
 8011188:	b29b      	uxth	r3, r3
 801118a:	3380      	adds	r3, #128	; 0x80
 801118c:	b29b      	uxth	r3, r3
 801118e:	b21b      	sxth	r3, r3
 8011190:	4618      	mov	r0, r3
 8011192:	f7ff fd16 	bl	8010bc2 <clamp>
 8011196:	4603      	mov	r3, r0
 8011198:	461a      	mov	r2, r3
 801119a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801119c:	3340      	adds	r3, #64	; 0x40
 801119e:	b212      	sxth	r2, r2
 80111a0:	801a      	strh	r2, [r3, #0]
      *(pSrc + 5 * 8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
 80111a2:	88fa      	ldrh	r2, [r7, #6]
 80111a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	3340      	adds	r3, #64	; 0x40
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	b21b      	sxth	r3, r3
 80111b0:	2107      	movs	r1, #7
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fe fa80 	bl	800f6b8 <arithmeticRightShiftN16>
 80111b8:	4603      	mov	r3, r0
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	3380      	adds	r3, #128	; 0x80
 80111be:	b29b      	uxth	r3, r3
 80111c0:	b21b      	sxth	r3, r3
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff fcfd 	bl	8010bc2 <clamp>
 80111c8:	4603      	mov	r3, r0
 80111ca:	461a      	mov	r2, r3
 80111cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111ce:	3350      	adds	r3, #80	; 0x50
 80111d0:	b212      	sxth	r2, r2
 80111d2:	801a      	strh	r2, [r3, #0]
      *(pSrc + 6 * 8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
 80111d4:	893a      	ldrh	r2, [r7, #8]
 80111d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	b29b      	uxth	r3, r3
 80111dc:	3340      	adds	r3, #64	; 0x40
 80111de:	b29b      	uxth	r3, r3
 80111e0:	b21b      	sxth	r3, r3
 80111e2:	2107      	movs	r1, #7
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fe fa67 	bl	800f6b8 <arithmeticRightShiftN16>
 80111ea:	4603      	mov	r3, r0
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	3380      	adds	r3, #128	; 0x80
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	b21b      	sxth	r3, r3
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7ff fce4 	bl	8010bc2 <clamp>
 80111fa:	4603      	mov	r3, r0
 80111fc:	461a      	mov	r2, r3
 80111fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011200:	3360      	adds	r3, #96	; 0x60
 8011202:	b212      	sxth	r2, r2
 8011204:	801a      	strh	r2, [r3, #0]
      *(pSrc + 7 * 8) = clamp(PJPG_DESCALE(x40 - x17) + 128);
 8011206:	89ba      	ldrh	r2, [r7, #12]
 8011208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	b29b      	uxth	r3, r3
 801120e:	3340      	adds	r3, #64	; 0x40
 8011210:	b29b      	uxth	r3, r3
 8011212:	b21b      	sxth	r3, r3
 8011214:	2107      	movs	r1, #7
 8011216:	4618      	mov	r0, r3
 8011218:	f7fe fa4e 	bl	800f6b8 <arithmeticRightShiftN16>
 801121c:	4603      	mov	r3, r0
 801121e:	b29b      	uxth	r3, r3
 8011220:	3380      	adds	r3, #128	; 0x80
 8011222:	b29b      	uxth	r3, r3
 8011224:	b21b      	sxth	r3, r3
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff fccb 	bl	8010bc2 <clamp>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011232:	3370      	adds	r3, #112	; 0x70
 8011234:	b212      	sxth	r2, r2
 8011236:	801a      	strh	r2, [r3, #0]
    }

    pSrc++;
 8011238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801123a:	3302      	adds	r3, #2
 801123c:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < 8; i++) {
 801123e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011242:	3301      	adds	r3, #1
 8011244:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011248:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801124c:	2b07      	cmp	r3, #7
 801124e:	f67f ae22 	bls.w	8010e96 <idctCols+0x12>
  }
}
 8011252:	bf00      	nop
 8011254:	374c      	adds	r7, #76	; 0x4c
 8011256:	46bd      	mov	sp, r7
 8011258:	bd90      	pop	{r4, r7, pc}
 801125a:	bf00      	nop

0801125c <addAndClamp>:

static PJPG_INLINE uint8 addAndClamp(uint8 a, int16 b) {
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	4603      	mov	r3, r0
 8011264:	460a      	mov	r2, r1
 8011266:	71fb      	strb	r3, [r7, #7]
 8011268:	4613      	mov	r3, r2
 801126a:	80bb      	strh	r3, [r7, #4]
  b = a + b;
 801126c:	79fb      	ldrb	r3, [r7, #7]
 801126e:	b29a      	uxth	r2, r3
 8011270:	88bb      	ldrh	r3, [r7, #4]
 8011272:	4413      	add	r3, r2
 8011274:	b29b      	uxth	r3, r3
 8011276:	80bb      	strh	r3, [r7, #4]

  if ((uint16)b > 255U) {
 8011278:	88bb      	ldrh	r3, [r7, #4]
 801127a:	2bff      	cmp	r3, #255	; 0xff
 801127c:	d90b      	bls.n	8011296 <addAndClamp+0x3a>
    if (b < 0)
 801127e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	da01      	bge.n	801128a <addAndClamp+0x2e>
      return 0;
 8011286:	2300      	movs	r3, #0
 8011288:	e007      	b.n	801129a <addAndClamp+0x3e>
    else if (b > 255)
 801128a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801128e:	2bff      	cmp	r3, #255	; 0xff
 8011290:	dd01      	ble.n	8011296 <addAndClamp+0x3a>
      return 255;
 8011292:	23ff      	movs	r3, #255	; 0xff
 8011294:	e001      	b.n	801129a <addAndClamp+0x3e>
  }

  return (uint8)b;
 8011296:	88bb      	ldrh	r3, [r7, #4]
 8011298:	b2db      	uxtb	r3, r3
}
 801129a:	4618      	mov	r0, r3
 801129c:	370c      	adds	r7, #12
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr

080112a6 <subAndClamp>:

static PJPG_INLINE uint8 subAndClamp(uint8 a, int16 b) {
 80112a6:	b480      	push	{r7}
 80112a8:	b083      	sub	sp, #12
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	4603      	mov	r3, r0
 80112ae:	460a      	mov	r2, r1
 80112b0:	71fb      	strb	r3, [r7, #7]
 80112b2:	4613      	mov	r3, r2
 80112b4:	80bb      	strh	r3, [r7, #4]
  b = a - b;
 80112b6:	79fb      	ldrb	r3, [r7, #7]
 80112b8:	b29a      	uxth	r2, r3
 80112ba:	88bb      	ldrh	r3, [r7, #4]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	b29b      	uxth	r3, r3
 80112c0:	80bb      	strh	r3, [r7, #4]

  if ((uint16)b > 255U) {
 80112c2:	88bb      	ldrh	r3, [r7, #4]
 80112c4:	2bff      	cmp	r3, #255	; 0xff
 80112c6:	d90b      	bls.n	80112e0 <subAndClamp+0x3a>
    if (b < 0)
 80112c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	da01      	bge.n	80112d4 <subAndClamp+0x2e>
      return 0;
 80112d0:	2300      	movs	r3, #0
 80112d2:	e007      	b.n	80112e4 <subAndClamp+0x3e>
    else if (b > 255)
 80112d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80112d8:	2bff      	cmp	r3, #255	; 0xff
 80112da:	dd01      	ble.n	80112e0 <subAndClamp+0x3a>
      return 255;
 80112dc:	23ff      	movs	r3, #255	; 0xff
 80112de:	e001      	b.n	80112e4 <subAndClamp+0x3e>
  }

  return (uint8)b;
 80112e0:	88bb      	ldrh	r3, [r7, #4]
 80112e2:	b2db      	uxtb	r3, r3
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <upsampleCb>:
static void upsampleCb(uint8 srcOfs, uint8 dstOfs) {
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b089      	sub	sp, #36	; 0x24
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	4603      	mov	r3, r0
 80112f8:	460a      	mov	r2, r1
 80112fa:	71fb      	strb	r3, [r7, #7]
 80112fc:	4613      	mov	r3, r2
 80112fe:	71bb      	strb	r3, [r7, #6]

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 8011300:	79fb      	ldrb	r3, [r7, #7]
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	4a5b      	ldr	r2, [pc, #364]	; (8011474 <upsampleCb+0x184>)
 8011306:	4413      	add	r3, r2
 8011308:	61bb      	str	r3, [r7, #24]
  uint8 *pDstG = gMCUBufG + dstOfs;
 801130a:	79bb      	ldrb	r3, [r7, #6]
 801130c:	4a5a      	ldr	r2, [pc, #360]	; (8011478 <upsampleCb+0x188>)
 801130e:	4413      	add	r3, r2
 8011310:	617b      	str	r3, [r7, #20]
  uint8 *pDstB = gMCUBufB + dstOfs;
 8011312:	79bb      	ldrb	r3, [r7, #6]
 8011314:	4a59      	ldr	r2, [pc, #356]	; (801147c <upsampleCb+0x18c>)
 8011316:	4413      	add	r3, r2
 8011318:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 801131a:	2300      	movs	r3, #0
 801131c:	77bb      	strb	r3, [r7, #30]
 801131e:	e0a1      	b.n	8011464 <upsampleCb+0x174>
    for (x = 0; x < 4; x++) {
 8011320:	2300      	movs	r3, #0
 8011322:	77fb      	strb	r3, [r7, #31]
 8011324:	e08e      	b.n	8011444 <upsampleCb+0x154>
      uint8 cb = (uint8)*pSrc++;
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	1c9a      	adds	r2, r3, #2
 801132a:	61ba      	str	r2, [r7, #24]
 801132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011330:	73fb      	strb	r3, [r7, #15]
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 8011332:	7bfb      	ldrb	r3, [r7, #15]
 8011334:	2258      	movs	r2, #88	; 0x58
 8011336:	fb02 f303 	mul.w	r3, r2, r3
 801133a:	0a1b      	lsrs	r3, r3, #8
 801133c:	b29b      	uxth	r3, r3
 801133e:	3b2c      	subs	r3, #44	; 0x2c
 8011340:	b29b      	uxth	r3, r3
 8011342:	81bb      	strh	r3, [r7, #12]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801134c:	4611      	mov	r1, r2
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff ffa9 	bl	80112a6 <subAndClamp>
 8011354:	4603      	mov	r3, r0
 8011356:	461a      	mov	r2, r3
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	701a      	strb	r2, [r3, #0]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	3301      	adds	r3, #1
 8011360:	781a      	ldrb	r2, [r3, #0]
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	1c5c      	adds	r4, r3, #1
 8011366:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801136a:	4619      	mov	r1, r3
 801136c:	4610      	mov	r0, r2
 801136e:	f7ff ff9a 	bl	80112a6 <subAndClamp>
 8011372:	4603      	mov	r3, r0
 8011374:	7023      	strb	r3, [r4, #0]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	3308      	adds	r3, #8
 801137a:	781a      	ldrb	r2, [r3, #0]
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	f103 0408 	add.w	r4, r3, #8
 8011382:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011386:	4619      	mov	r1, r3
 8011388:	4610      	mov	r0, r2
 801138a:	f7ff ff8c 	bl	80112a6 <subAndClamp>
 801138e:	4603      	mov	r3, r0
 8011390:	7023      	strb	r3, [r4, #0]
      pDstG[9] = subAndClamp(pDstG[9], cbG);
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	3309      	adds	r3, #9
 8011396:	781a      	ldrb	r2, [r3, #0]
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f103 0409 	add.w	r4, r3, #9
 801139e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80113a2:	4619      	mov	r1, r3
 80113a4:	4610      	mov	r0, r2
 80113a6:	f7ff ff7e 	bl	80112a6 <subAndClamp>
 80113aa:	4603      	mov	r3, r0
 80113ac:	7023      	strb	r3, [r4, #0]

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	b29a      	uxth	r2, r3
 80113b2:	7bfb      	ldrb	r3, [r7, #15]
 80113b4:	21c6      	movs	r1, #198	; 0xc6
 80113b6:	fb01 f303 	mul.w	r3, r1, r3
 80113ba:	0a1b      	lsrs	r3, r3, #8
 80113bc:	b29b      	uxth	r3, r3
 80113be:	4413      	add	r3, r2
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	3be3      	subs	r3, #227	; 0xe3
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	817b      	strh	r3, [r7, #10]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80113d0:	4611      	mov	r1, r2
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7ff ff42 	bl	801125c <addAndClamp>
 80113d8:	4603      	mov	r3, r0
 80113da:	461a      	mov	r2, r3
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	701a      	strb	r2, [r3, #0]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	3301      	adds	r3, #1
 80113e4:	781a      	ldrb	r2, [r3, #0]
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	1c5c      	adds	r4, r3, #1
 80113ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80113ee:	4619      	mov	r1, r3
 80113f0:	4610      	mov	r0, r2
 80113f2:	f7ff ff33 	bl	801125c <addAndClamp>
 80113f6:	4603      	mov	r3, r0
 80113f8:	7023      	strb	r3, [r4, #0]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	3308      	adds	r3, #8
 80113fe:	781a      	ldrb	r2, [r3, #0]
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	f103 0408 	add.w	r4, r3, #8
 8011406:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801140a:	4619      	mov	r1, r3
 801140c:	4610      	mov	r0, r2
 801140e:	f7ff ff25 	bl	801125c <addAndClamp>
 8011412:	4603      	mov	r3, r0
 8011414:	7023      	strb	r3, [r4, #0]
      pDstB[9] = addAndClamp(pDstB[9], cbB);
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	3309      	adds	r3, #9
 801141a:	781a      	ldrb	r2, [r3, #0]
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	f103 0409 	add.w	r4, r3, #9
 8011422:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011426:	4619      	mov	r1, r3
 8011428:	4610      	mov	r0, r2
 801142a:	f7ff ff17 	bl	801125c <addAndClamp>
 801142e:	4603      	mov	r3, r0
 8011430:	7023      	strb	r3, [r4, #0]

      pDstG += 2;
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	3302      	adds	r3, #2
 8011436:	617b      	str	r3, [r7, #20]
      pDstB += 2;
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	3302      	adds	r3, #2
 801143c:	613b      	str	r3, [r7, #16]
    for (x = 0; x < 4; x++) {
 801143e:	7ffb      	ldrb	r3, [r7, #31]
 8011440:	3301      	adds	r3, #1
 8011442:	77fb      	strb	r3, [r7, #31]
 8011444:	7ffb      	ldrb	r3, [r7, #31]
 8011446:	2b03      	cmp	r3, #3
 8011448:	f67f af6d 	bls.w	8011326 <upsampleCb+0x36>
    }

    pSrc = pSrc - 4 + 8;
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	3308      	adds	r3, #8
 8011450:	61bb      	str	r3, [r7, #24]
    pDstG = pDstG - 8 + 16;
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	3308      	adds	r3, #8
 8011456:	617b      	str	r3, [r7, #20]
    pDstB = pDstB - 8 + 16;
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	3308      	adds	r3, #8
 801145c:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 801145e:	7fbb      	ldrb	r3, [r7, #30]
 8011460:	3301      	adds	r3, #1
 8011462:	77bb      	strb	r3, [r7, #30]
 8011464:	7fbb      	ldrb	r3, [r7, #30]
 8011466:	2b03      	cmp	r3, #3
 8011468:	f67f af5a 	bls.w	8011320 <upsampleCb+0x30>
  }
}
 801146c:	bf00      	nop
 801146e:	3724      	adds	r7, #36	; 0x24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd90      	pop	{r4, r7, pc}
 8011474:	20004134 	.word	0x20004134
 8011478:	200042b4 	.word	0x200042b4
 801147c:	200043b4 	.word	0x200043b4

08011480 <upsampleCbH>:

static void upsampleCbH(uint8 srcOfs, uint8 dstOfs) {
 8011480:	b590      	push	{r4, r7, lr}
 8011482:	b089      	sub	sp, #36	; 0x24
 8011484:	af00      	add	r7, sp, #0
 8011486:	4603      	mov	r3, r0
 8011488:	460a      	mov	r2, r1
 801148a:	71fb      	strb	r3, [r7, #7]
 801148c:	4613      	mov	r3, r2
 801148e:	71bb      	strb	r3, [r7, #6]

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	4a3b      	ldr	r2, [pc, #236]	; (8011584 <upsampleCbH+0x104>)
 8011496:	4413      	add	r3, r2
 8011498:	61bb      	str	r3, [r7, #24]
  uint8 *pDstG = gMCUBufG + dstOfs;
 801149a:	79bb      	ldrb	r3, [r7, #6]
 801149c:	4a3a      	ldr	r2, [pc, #232]	; (8011588 <upsampleCbH+0x108>)
 801149e:	4413      	add	r3, r2
 80114a0:	617b      	str	r3, [r7, #20]
  uint8 *pDstB = gMCUBufB + dstOfs;
 80114a2:	79bb      	ldrb	r3, [r7, #6]
 80114a4:	4a39      	ldr	r2, [pc, #228]	; (801158c <upsampleCbH+0x10c>)
 80114a6:	4413      	add	r3, r2
 80114a8:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 8; y++) {
 80114aa:	2300      	movs	r3, #0
 80114ac:	77bb      	strb	r3, [r7, #30]
 80114ae:	e062      	b.n	8011576 <upsampleCbH+0xf6>
    for (x = 0; x < 4; x++) {
 80114b0:	2300      	movs	r3, #0
 80114b2:	77fb      	strb	r3, [r7, #31]
 80114b4:	e056      	b.n	8011564 <upsampleCbH+0xe4>
      uint8 cb = (uint8)*pSrc++;
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	1c9a      	adds	r2, r3, #2
 80114ba:	61ba      	str	r2, [r7, #24]
 80114bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114c0:	73fb      	strb	r3, [r7, #15]
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 80114c2:	7bfb      	ldrb	r3, [r7, #15]
 80114c4:	2258      	movs	r2, #88	; 0x58
 80114c6:	fb02 f303 	mul.w	r3, r2, r3
 80114ca:	0a1b      	lsrs	r3, r3, #8
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	3b2c      	subs	r3, #44	; 0x2c
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	81bb      	strh	r3, [r7, #12]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80114dc:	4611      	mov	r1, r2
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff fee1 	bl	80112a6 <subAndClamp>
 80114e4:	4603      	mov	r3, r0
 80114e6:	461a      	mov	r2, r3
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	701a      	strb	r2, [r3, #0]
      pDstG[1] = subAndClamp(pDstG[1], cbG);
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	3301      	adds	r3, #1
 80114f0:	781a      	ldrb	r2, [r3, #0]
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	1c5c      	adds	r4, r3, #1
 80114f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80114fa:	4619      	mov	r1, r3
 80114fc:	4610      	mov	r0, r2
 80114fe:	f7ff fed2 	bl	80112a6 <subAndClamp>
 8011502:	4603      	mov	r3, r0
 8011504:	7023      	strb	r3, [r4, #0]

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 8011506:	7bfb      	ldrb	r3, [r7, #15]
 8011508:	b29a      	uxth	r2, r3
 801150a:	7bfb      	ldrb	r3, [r7, #15]
 801150c:	21c6      	movs	r1, #198	; 0xc6
 801150e:	fb01 f303 	mul.w	r3, r1, r3
 8011512:	0a1b      	lsrs	r3, r3, #8
 8011514:	b29b      	uxth	r3, r3
 8011516:	4413      	add	r3, r2
 8011518:	b29b      	uxth	r3, r3
 801151a:	3be3      	subs	r3, #227	; 0xe3
 801151c:	b29b      	uxth	r3, r3
 801151e:	817b      	strh	r3, [r7, #10]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011528:	4611      	mov	r1, r2
 801152a:	4618      	mov	r0, r3
 801152c:	f7ff fe96 	bl	801125c <addAndClamp>
 8011530:	4603      	mov	r3, r0
 8011532:	461a      	mov	r2, r3
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	701a      	strb	r2, [r3, #0]
      pDstB[1] = addAndClamp(pDstB[1], cbB);
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	3301      	adds	r3, #1
 801153c:	781a      	ldrb	r2, [r3, #0]
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	1c5c      	adds	r4, r3, #1
 8011542:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011546:	4619      	mov	r1, r3
 8011548:	4610      	mov	r0, r2
 801154a:	f7ff fe87 	bl	801125c <addAndClamp>
 801154e:	4603      	mov	r3, r0
 8011550:	7023      	strb	r3, [r4, #0]

      pDstG += 2;
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	3302      	adds	r3, #2
 8011556:	617b      	str	r3, [r7, #20]
      pDstB += 2;
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	3302      	adds	r3, #2
 801155c:	613b      	str	r3, [r7, #16]
    for (x = 0; x < 4; x++) {
 801155e:	7ffb      	ldrb	r3, [r7, #31]
 8011560:	3301      	adds	r3, #1
 8011562:	77fb      	strb	r3, [r7, #31]
 8011564:	7ffb      	ldrb	r3, [r7, #31]
 8011566:	2b03      	cmp	r3, #3
 8011568:	d9a5      	bls.n	80114b6 <upsampleCbH+0x36>
    }

    pSrc = pSrc - 4 + 8;
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	3308      	adds	r3, #8
 801156e:	61bb      	str	r3, [r7, #24]
  for (y = 0; y < 8; y++) {
 8011570:	7fbb      	ldrb	r3, [r7, #30]
 8011572:	3301      	adds	r3, #1
 8011574:	77bb      	strb	r3, [r7, #30]
 8011576:	7fbb      	ldrb	r3, [r7, #30]
 8011578:	2b07      	cmp	r3, #7
 801157a:	d999      	bls.n	80114b0 <upsampleCbH+0x30>
  }
}
 801157c:	bf00      	nop
 801157e:	3724      	adds	r7, #36	; 0x24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd90      	pop	{r4, r7, pc}
 8011584:	20004134 	.word	0x20004134
 8011588:	200042b4 	.word	0x200042b4
 801158c:	200043b4 	.word	0x200043b4

08011590 <upsampleCbV>:

static void upsampleCbV(uint8 srcOfs, uint8 dstOfs) {
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b089      	sub	sp, #36	; 0x24
 8011594:	af00      	add	r7, sp, #0
 8011596:	4603      	mov	r3, r0
 8011598:	460a      	mov	r2, r1
 801159a:	71fb      	strb	r3, [r7, #7]
 801159c:	4613      	mov	r3, r2
 801159e:	71bb      	strb	r3, [r7, #6]

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 80115a0:	79fb      	ldrb	r3, [r7, #7]
 80115a2:	005b      	lsls	r3, r3, #1
 80115a4:	4a3e      	ldr	r2, [pc, #248]	; (80116a0 <upsampleCbV+0x110>)
 80115a6:	4413      	add	r3, r2
 80115a8:	61bb      	str	r3, [r7, #24]
  uint8 *pDstG = gMCUBufG + dstOfs;
 80115aa:	79bb      	ldrb	r3, [r7, #6]
 80115ac:	4a3d      	ldr	r2, [pc, #244]	; (80116a4 <upsampleCbV+0x114>)
 80115ae:	4413      	add	r3, r2
 80115b0:	617b      	str	r3, [r7, #20]
  uint8 *pDstB = gMCUBufB + dstOfs;
 80115b2:	79bb      	ldrb	r3, [r7, #6]
 80115b4:	4a3c      	ldr	r2, [pc, #240]	; (80116a8 <upsampleCbV+0x118>)
 80115b6:	4413      	add	r3, r2
 80115b8:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 80115ba:	2300      	movs	r3, #0
 80115bc:	77bb      	strb	r3, [r7, #30]
 80115be:	e067      	b.n	8011690 <upsampleCbV+0x100>
    for (x = 0; x < 8; x++) {
 80115c0:	2300      	movs	r3, #0
 80115c2:	77fb      	strb	r3, [r7, #31]
 80115c4:	e058      	b.n	8011678 <upsampleCbV+0xe8>
      uint8 cb = (uint8)*pSrc++;
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	1c9a      	adds	r2, r3, #2
 80115ca:	61ba      	str	r2, [r7, #24]
 80115cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115d0:	73fb      	strb	r3, [r7, #15]
      int16 cbG, cbB;

      cbG = ((cb * 88U) >> 8U) - 44U;
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
 80115d4:	2258      	movs	r2, #88	; 0x58
 80115d6:	fb02 f303 	mul.w	r3, r2, r3
 80115da:	0a1b      	lsrs	r3, r3, #8
 80115dc:	b29b      	uxth	r3, r3
 80115de:	3b2c      	subs	r3, #44	; 0x2c
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	81bb      	strh	r3, [r7, #12]
      pDstG[0] = subAndClamp(pDstG[0], cbG);
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80115ec:	4611      	mov	r1, r2
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7ff fe59 	bl	80112a6 <subAndClamp>
 80115f4:	4603      	mov	r3, r0
 80115f6:	461a      	mov	r2, r3
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	701a      	strb	r2, [r3, #0]
      pDstG[8] = subAndClamp(pDstG[8], cbG);
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	3308      	adds	r3, #8
 8011600:	781a      	ldrb	r2, [r3, #0]
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	f103 0408 	add.w	r4, r3, #8
 8011608:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801160c:	4619      	mov	r1, r3
 801160e:	4610      	mov	r0, r2
 8011610:	f7ff fe49 	bl	80112a6 <subAndClamp>
 8011614:	4603      	mov	r3, r0
 8011616:	7023      	strb	r3, [r4, #0]

      cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	b29a      	uxth	r2, r3
 801161c:	7bfb      	ldrb	r3, [r7, #15]
 801161e:	21c6      	movs	r1, #198	; 0xc6
 8011620:	fb01 f303 	mul.w	r3, r1, r3
 8011624:	0a1b      	lsrs	r3, r3, #8
 8011626:	b29b      	uxth	r3, r3
 8011628:	4413      	add	r3, r2
 801162a:	b29b      	uxth	r3, r3
 801162c:	3be3      	subs	r3, #227	; 0xe3
 801162e:	b29b      	uxth	r3, r3
 8011630:	817b      	strh	r3, [r7, #10]
      pDstB[0] = addAndClamp(pDstB[0], cbB);
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801163a:	4611      	mov	r1, r2
 801163c:	4618      	mov	r0, r3
 801163e:	f7ff fe0d 	bl	801125c <addAndClamp>
 8011642:	4603      	mov	r3, r0
 8011644:	461a      	mov	r2, r3
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	701a      	strb	r2, [r3, #0]
      pDstB[8] = addAndClamp(pDstB[8], cbB);
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	3308      	adds	r3, #8
 801164e:	781a      	ldrb	r2, [r3, #0]
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	f103 0408 	add.w	r4, r3, #8
 8011656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801165a:	4619      	mov	r1, r3
 801165c:	4610      	mov	r0, r2
 801165e:	f7ff fdfd 	bl	801125c <addAndClamp>
 8011662:	4603      	mov	r3, r0
 8011664:	7023      	strb	r3, [r4, #0]

      ++pDstG;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	3301      	adds	r3, #1
 801166a:	617b      	str	r3, [r7, #20]
      ++pDstB;
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	3301      	adds	r3, #1
 8011670:	613b      	str	r3, [r7, #16]
    for (x = 0; x < 8; x++) {
 8011672:	7ffb      	ldrb	r3, [r7, #31]
 8011674:	3301      	adds	r3, #1
 8011676:	77fb      	strb	r3, [r7, #31]
 8011678:	7ffb      	ldrb	r3, [r7, #31]
 801167a:	2b07      	cmp	r3, #7
 801167c:	d9a3      	bls.n	80115c6 <upsampleCbV+0x36>
    }

    pDstG = pDstG - 8 + 16;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	3308      	adds	r3, #8
 8011682:	617b      	str	r3, [r7, #20]
    pDstB = pDstB - 8 + 16;
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	3308      	adds	r3, #8
 8011688:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 801168a:	7fbb      	ldrb	r3, [r7, #30]
 801168c:	3301      	adds	r3, #1
 801168e:	77bb      	strb	r3, [r7, #30]
 8011690:	7fbb      	ldrb	r3, [r7, #30]
 8011692:	2b03      	cmp	r3, #3
 8011694:	d994      	bls.n	80115c0 <upsampleCbV+0x30>
  }
}
 8011696:	bf00      	nop
 8011698:	3724      	adds	r7, #36	; 0x24
 801169a:	46bd      	mov	sp, r7
 801169c:	bd90      	pop	{r4, r7, pc}
 801169e:	bf00      	nop
 80116a0:	20004134 	.word	0x20004134
 80116a4:	200042b4 	.word	0x200042b4
 80116a8:	200043b4 	.word	0x200043b4

080116ac <upsampleCr>:
static void upsampleCr(uint8 srcOfs, uint8 dstOfs) {
 80116ac:	b590      	push	{r4, r7, lr}
 80116ae:	b089      	sub	sp, #36	; 0x24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	460a      	mov	r2, r1
 80116b6:	71fb      	strb	r3, [r7, #7]
 80116b8:	4613      	mov	r3, r2
 80116ba:	71bb      	strb	r3, [r7, #6]

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 80116bc:	79fb      	ldrb	r3, [r7, #7]
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	4a5b      	ldr	r2, [pc, #364]	; (8011830 <upsampleCr+0x184>)
 80116c2:	4413      	add	r3, r2
 80116c4:	61bb      	str	r3, [r7, #24]
  uint8 *pDstR = gMCUBufR + dstOfs;
 80116c6:	79bb      	ldrb	r3, [r7, #6]
 80116c8:	4a5a      	ldr	r2, [pc, #360]	; (8011834 <upsampleCr+0x188>)
 80116ca:	4413      	add	r3, r2
 80116cc:	617b      	str	r3, [r7, #20]
  uint8 *pDstG = gMCUBufG + dstOfs;
 80116ce:	79bb      	ldrb	r3, [r7, #6]
 80116d0:	4a59      	ldr	r2, [pc, #356]	; (8011838 <upsampleCr+0x18c>)
 80116d2:	4413      	add	r3, r2
 80116d4:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 80116d6:	2300      	movs	r3, #0
 80116d8:	77bb      	strb	r3, [r7, #30]
 80116da:	e0a1      	b.n	8011820 <upsampleCr+0x174>
    for (x = 0; x < 4; x++) {
 80116dc:	2300      	movs	r3, #0
 80116de:	77fb      	strb	r3, [r7, #31]
 80116e0:	e08e      	b.n	8011800 <upsampleCr+0x154>
      uint8 cr = (uint8)*pSrc++;
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	1c9a      	adds	r2, r3, #2
 80116e6:	61ba      	str	r2, [r7, #24]
 80116e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116ec:	73fb      	strb	r3, [r7, #15]
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 80116ee:	7bfb      	ldrb	r3, [r7, #15]
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
 80116f4:	2167      	movs	r1, #103	; 0x67
 80116f6:	fb01 f303 	mul.w	r3, r1, r3
 80116fa:	0a1b      	lsrs	r3, r3, #8
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	4413      	add	r3, r2
 8011700:	b29b      	uxth	r3, r3
 8011702:	3bb3      	subs	r3, #179	; 0xb3
 8011704:	b29b      	uxth	r3, r3
 8011706:	81bb      	strh	r3, [r7, #12]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011710:	4611      	mov	r1, r2
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff fda2 	bl	801125c <addAndClamp>
 8011718:	4603      	mov	r3, r0
 801171a:	461a      	mov	r2, r3
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	701a      	strb	r2, [r3, #0]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	3301      	adds	r3, #1
 8011724:	781a      	ldrb	r2, [r3, #0]
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	1c5c      	adds	r4, r3, #1
 801172a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801172e:	4619      	mov	r1, r3
 8011730:	4610      	mov	r0, r2
 8011732:	f7ff fd93 	bl	801125c <addAndClamp>
 8011736:	4603      	mov	r3, r0
 8011738:	7023      	strb	r3, [r4, #0]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	3308      	adds	r3, #8
 801173e:	781a      	ldrb	r2, [r3, #0]
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	f103 0408 	add.w	r4, r3, #8
 8011746:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801174a:	4619      	mov	r1, r3
 801174c:	4610      	mov	r0, r2
 801174e:	f7ff fd85 	bl	801125c <addAndClamp>
 8011752:	4603      	mov	r3, r0
 8011754:	7023      	strb	r3, [r4, #0]
      pDstR[9] = addAndClamp(pDstR[9], crR);
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	3309      	adds	r3, #9
 801175a:	781a      	ldrb	r2, [r3, #0]
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	f103 0409 	add.w	r4, r3, #9
 8011762:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011766:	4619      	mov	r1, r3
 8011768:	4610      	mov	r0, r2
 801176a:	f7ff fd77 	bl	801125c <addAndClamp>
 801176e:	4603      	mov	r3, r0
 8011770:	7023      	strb	r3, [r4, #0]

      crG = ((cr * 183U) >> 8U) - 91;
 8011772:	7bfb      	ldrb	r3, [r7, #15]
 8011774:	22b7      	movs	r2, #183	; 0xb7
 8011776:	fb02 f303 	mul.w	r3, r2, r3
 801177a:	0a1b      	lsrs	r3, r3, #8
 801177c:	b29b      	uxth	r3, r3
 801177e:	3b5b      	subs	r3, #91	; 0x5b
 8011780:	b29b      	uxth	r3, r3
 8011782:	817b      	strh	r3, [r7, #10]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801178c:	4611      	mov	r1, r2
 801178e:	4618      	mov	r0, r3
 8011790:	f7ff fd89 	bl	80112a6 <subAndClamp>
 8011794:	4603      	mov	r3, r0
 8011796:	461a      	mov	r2, r3
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	701a      	strb	r2, [r3, #0]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	3301      	adds	r3, #1
 80117a0:	781a      	ldrb	r2, [r3, #0]
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	1c5c      	adds	r4, r3, #1
 80117a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80117aa:	4619      	mov	r1, r3
 80117ac:	4610      	mov	r0, r2
 80117ae:	f7ff fd7a 	bl	80112a6 <subAndClamp>
 80117b2:	4603      	mov	r3, r0
 80117b4:	7023      	strb	r3, [r4, #0]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	3308      	adds	r3, #8
 80117ba:	781a      	ldrb	r2, [r3, #0]
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	f103 0408 	add.w	r4, r3, #8
 80117c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80117c6:	4619      	mov	r1, r3
 80117c8:	4610      	mov	r0, r2
 80117ca:	f7ff fd6c 	bl	80112a6 <subAndClamp>
 80117ce:	4603      	mov	r3, r0
 80117d0:	7023      	strb	r3, [r4, #0]
      pDstG[9] = subAndClamp(pDstG[9], crG);
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	3309      	adds	r3, #9
 80117d6:	781a      	ldrb	r2, [r3, #0]
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	f103 0409 	add.w	r4, r3, #9
 80117de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80117e2:	4619      	mov	r1, r3
 80117e4:	4610      	mov	r0, r2
 80117e6:	f7ff fd5e 	bl	80112a6 <subAndClamp>
 80117ea:	4603      	mov	r3, r0
 80117ec:	7023      	strb	r3, [r4, #0]

      pDstR += 2;
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	3302      	adds	r3, #2
 80117f2:	617b      	str	r3, [r7, #20]
      pDstG += 2;
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	3302      	adds	r3, #2
 80117f8:	613b      	str	r3, [r7, #16]
    for (x = 0; x < 4; x++) {
 80117fa:	7ffb      	ldrb	r3, [r7, #31]
 80117fc:	3301      	adds	r3, #1
 80117fe:	77fb      	strb	r3, [r7, #31]
 8011800:	7ffb      	ldrb	r3, [r7, #31]
 8011802:	2b03      	cmp	r3, #3
 8011804:	f67f af6d 	bls.w	80116e2 <upsampleCr+0x36>
    }

    pSrc = pSrc - 4 + 8;
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	3308      	adds	r3, #8
 801180c:	61bb      	str	r3, [r7, #24]
    pDstR = pDstR - 8 + 16;
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	3308      	adds	r3, #8
 8011812:	617b      	str	r3, [r7, #20]
    pDstG = pDstG - 8 + 16;
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	3308      	adds	r3, #8
 8011818:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 801181a:	7fbb      	ldrb	r3, [r7, #30]
 801181c:	3301      	adds	r3, #1
 801181e:	77bb      	strb	r3, [r7, #30]
 8011820:	7fbb      	ldrb	r3, [r7, #30]
 8011822:	2b03      	cmp	r3, #3
 8011824:	f67f af5a 	bls.w	80116dc <upsampleCr+0x30>
  }
}
 8011828:	bf00      	nop
 801182a:	3724      	adds	r7, #36	; 0x24
 801182c:	46bd      	mov	sp, r7
 801182e:	bd90      	pop	{r4, r7, pc}
 8011830:	20004134 	.word	0x20004134
 8011834:	200041b4 	.word	0x200041b4
 8011838:	200042b4 	.word	0x200042b4

0801183c <upsampleCrH>:

static void upsampleCrH(uint8 srcOfs, uint8 dstOfs) {
 801183c:	b590      	push	{r4, r7, lr}
 801183e:	b089      	sub	sp, #36	; 0x24
 8011840:	af00      	add	r7, sp, #0
 8011842:	4603      	mov	r3, r0
 8011844:	460a      	mov	r2, r1
 8011846:	71fb      	strb	r3, [r7, #7]
 8011848:	4613      	mov	r3, r2
 801184a:	71bb      	strb	r3, [r7, #6]

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 801184c:	79fb      	ldrb	r3, [r7, #7]
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	4a3b      	ldr	r2, [pc, #236]	; (8011940 <upsampleCrH+0x104>)
 8011852:	4413      	add	r3, r2
 8011854:	61bb      	str	r3, [r7, #24]
  uint8 *pDstR = gMCUBufR + dstOfs;
 8011856:	79bb      	ldrb	r3, [r7, #6]
 8011858:	4a3a      	ldr	r2, [pc, #232]	; (8011944 <upsampleCrH+0x108>)
 801185a:	4413      	add	r3, r2
 801185c:	617b      	str	r3, [r7, #20]
  uint8 *pDstG = gMCUBufG + dstOfs;
 801185e:	79bb      	ldrb	r3, [r7, #6]
 8011860:	4a39      	ldr	r2, [pc, #228]	; (8011948 <upsampleCrH+0x10c>)
 8011862:	4413      	add	r3, r2
 8011864:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 8; y++) {
 8011866:	2300      	movs	r3, #0
 8011868:	77bb      	strb	r3, [r7, #30]
 801186a:	e062      	b.n	8011932 <upsampleCrH+0xf6>
    for (x = 0; x < 4; x++) {
 801186c:	2300      	movs	r3, #0
 801186e:	77fb      	strb	r3, [r7, #31]
 8011870:	e056      	b.n	8011920 <upsampleCrH+0xe4>
      uint8 cr = (uint8)*pSrc++;
 8011872:	69bb      	ldr	r3, [r7, #24]
 8011874:	1c9a      	adds	r2, r3, #2
 8011876:	61ba      	str	r2, [r7, #24]
 8011878:	f9b3 3000 	ldrsh.w	r3, [r3]
 801187c:	73fb      	strb	r3, [r7, #15]
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 801187e:	7bfb      	ldrb	r3, [r7, #15]
 8011880:	b29a      	uxth	r2, r3
 8011882:	7bfb      	ldrb	r3, [r7, #15]
 8011884:	2167      	movs	r1, #103	; 0x67
 8011886:	fb01 f303 	mul.w	r3, r1, r3
 801188a:	0a1b      	lsrs	r3, r3, #8
 801188c:	b29b      	uxth	r3, r3
 801188e:	4413      	add	r3, r2
 8011890:	b29b      	uxth	r3, r3
 8011892:	3bb3      	subs	r3, #179	; 0xb3
 8011894:	b29b      	uxth	r3, r3
 8011896:	81bb      	strh	r3, [r7, #12]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80118a0:	4611      	mov	r1, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7ff fcda 	bl	801125c <addAndClamp>
 80118a8:	4603      	mov	r3, r0
 80118aa:	461a      	mov	r2, r3
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	701a      	strb	r2, [r3, #0]
      pDstR[1] = addAndClamp(pDstR[1], crR);
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	3301      	adds	r3, #1
 80118b4:	781a      	ldrb	r2, [r3, #0]
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	1c5c      	adds	r4, r3, #1
 80118ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80118be:	4619      	mov	r1, r3
 80118c0:	4610      	mov	r0, r2
 80118c2:	f7ff fccb 	bl	801125c <addAndClamp>
 80118c6:	4603      	mov	r3, r0
 80118c8:	7023      	strb	r3, [r4, #0]

      crG = ((cr * 183U) >> 8U) - 91;
 80118ca:	7bfb      	ldrb	r3, [r7, #15]
 80118cc:	22b7      	movs	r2, #183	; 0xb7
 80118ce:	fb02 f303 	mul.w	r3, r2, r3
 80118d2:	0a1b      	lsrs	r3, r3, #8
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	3b5b      	subs	r3, #91	; 0x5b
 80118d8:	b29b      	uxth	r3, r3
 80118da:	817b      	strh	r3, [r7, #10]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80118e4:	4611      	mov	r1, r2
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fcdd 	bl	80112a6 <subAndClamp>
 80118ec:	4603      	mov	r3, r0
 80118ee:	461a      	mov	r2, r3
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	701a      	strb	r2, [r3, #0]
      pDstG[1] = subAndClamp(pDstG[1], crG);
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	3301      	adds	r3, #1
 80118f8:	781a      	ldrb	r2, [r3, #0]
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	1c5c      	adds	r4, r3, #1
 80118fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011902:	4619      	mov	r1, r3
 8011904:	4610      	mov	r0, r2
 8011906:	f7ff fcce 	bl	80112a6 <subAndClamp>
 801190a:	4603      	mov	r3, r0
 801190c:	7023      	strb	r3, [r4, #0]

      pDstR += 2;
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	3302      	adds	r3, #2
 8011912:	617b      	str	r3, [r7, #20]
      pDstG += 2;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	3302      	adds	r3, #2
 8011918:	613b      	str	r3, [r7, #16]
    for (x = 0; x < 4; x++) {
 801191a:	7ffb      	ldrb	r3, [r7, #31]
 801191c:	3301      	adds	r3, #1
 801191e:	77fb      	strb	r3, [r7, #31]
 8011920:	7ffb      	ldrb	r3, [r7, #31]
 8011922:	2b03      	cmp	r3, #3
 8011924:	d9a5      	bls.n	8011872 <upsampleCrH+0x36>
    }

    pSrc = pSrc - 4 + 8;
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	3308      	adds	r3, #8
 801192a:	61bb      	str	r3, [r7, #24]
  for (y = 0; y < 8; y++) {
 801192c:	7fbb      	ldrb	r3, [r7, #30]
 801192e:	3301      	adds	r3, #1
 8011930:	77bb      	strb	r3, [r7, #30]
 8011932:	7fbb      	ldrb	r3, [r7, #30]
 8011934:	2b07      	cmp	r3, #7
 8011936:	d999      	bls.n	801186c <upsampleCrH+0x30>
  }
}
 8011938:	bf00      	nop
 801193a:	3724      	adds	r7, #36	; 0x24
 801193c:	46bd      	mov	sp, r7
 801193e:	bd90      	pop	{r4, r7, pc}
 8011940:	20004134 	.word	0x20004134
 8011944:	200041b4 	.word	0x200041b4
 8011948:	200042b4 	.word	0x200042b4

0801194c <upsampleCrV>:

static void upsampleCrV(uint8 srcOfs, uint8 dstOfs) {
 801194c:	b590      	push	{r4, r7, lr}
 801194e:	b089      	sub	sp, #36	; 0x24
 8011950:	af00      	add	r7, sp, #0
 8011952:	4603      	mov	r3, r0
 8011954:	460a      	mov	r2, r1
 8011956:	71fb      	strb	r3, [r7, #7]
 8011958:	4613      	mov	r3, r2
 801195a:	71bb      	strb	r3, [r7, #6]

  uint8 x, y;
  int16 *pSrc = gCoeffBuf + srcOfs;
 801195c:	79fb      	ldrb	r3, [r7, #7]
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4a3e      	ldr	r2, [pc, #248]	; (8011a5c <upsampleCrV+0x110>)
 8011962:	4413      	add	r3, r2
 8011964:	61bb      	str	r3, [r7, #24]
  uint8 *pDstR = gMCUBufR + dstOfs;
 8011966:	79bb      	ldrb	r3, [r7, #6]
 8011968:	4a3d      	ldr	r2, [pc, #244]	; (8011a60 <upsampleCrV+0x114>)
 801196a:	4413      	add	r3, r2
 801196c:	617b      	str	r3, [r7, #20]
  uint8 *pDstG = gMCUBufG + dstOfs;
 801196e:	79bb      	ldrb	r3, [r7, #6]
 8011970:	4a3c      	ldr	r2, [pc, #240]	; (8011a64 <upsampleCrV+0x118>)
 8011972:	4413      	add	r3, r2
 8011974:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 8011976:	2300      	movs	r3, #0
 8011978:	77bb      	strb	r3, [r7, #30]
 801197a:	e067      	b.n	8011a4c <upsampleCrV+0x100>
    for (x = 0; x < 8; x++) {
 801197c:	2300      	movs	r3, #0
 801197e:	77fb      	strb	r3, [r7, #31]
 8011980:	e058      	b.n	8011a34 <upsampleCrV+0xe8>
      uint8 cr = (uint8)*pSrc++;
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	1c9a      	adds	r2, r3, #2
 8011986:	61ba      	str	r2, [r7, #24]
 8011988:	f9b3 3000 	ldrsh.w	r3, [r3]
 801198c:	73fb      	strb	r3, [r7, #15]
      int16 crR, crG;

      crR = (cr + ((cr * 103U) >> 8U)) - 179;
 801198e:	7bfb      	ldrb	r3, [r7, #15]
 8011990:	b29a      	uxth	r2, r3
 8011992:	7bfb      	ldrb	r3, [r7, #15]
 8011994:	2167      	movs	r1, #103	; 0x67
 8011996:	fb01 f303 	mul.w	r3, r1, r3
 801199a:	0a1b      	lsrs	r3, r3, #8
 801199c:	b29b      	uxth	r3, r3
 801199e:	4413      	add	r3, r2
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	3bb3      	subs	r3, #179	; 0xb3
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	81bb      	strh	r3, [r7, #12]
      pDstR[0] = addAndClamp(pDstR[0], crR);
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80119b0:	4611      	mov	r1, r2
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7ff fc52 	bl	801125c <addAndClamp>
 80119b8:	4603      	mov	r3, r0
 80119ba:	461a      	mov	r2, r3
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	701a      	strb	r2, [r3, #0]
      pDstR[8] = addAndClamp(pDstR[8], crR);
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	3308      	adds	r3, #8
 80119c4:	781a      	ldrb	r2, [r3, #0]
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	f103 0408 	add.w	r4, r3, #8
 80119cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80119d0:	4619      	mov	r1, r3
 80119d2:	4610      	mov	r0, r2
 80119d4:	f7ff fc42 	bl	801125c <addAndClamp>
 80119d8:	4603      	mov	r3, r0
 80119da:	7023      	strb	r3, [r4, #0]

      crG = ((cr * 183U) >> 8U) - 91;
 80119dc:	7bfb      	ldrb	r3, [r7, #15]
 80119de:	22b7      	movs	r2, #183	; 0xb7
 80119e0:	fb02 f303 	mul.w	r3, r2, r3
 80119e4:	0a1b      	lsrs	r3, r3, #8
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	3b5b      	subs	r3, #91	; 0x5b
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	817b      	strh	r3, [r7, #10]
      pDstG[0] = subAndClamp(pDstG[0], crG);
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80119f6:	4611      	mov	r1, r2
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7ff fc54 	bl	80112a6 <subAndClamp>
 80119fe:	4603      	mov	r3, r0
 8011a00:	461a      	mov	r2, r3
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	701a      	strb	r2, [r3, #0]
      pDstG[8] = subAndClamp(pDstG[8], crG);
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	3308      	adds	r3, #8
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	f103 0408 	add.w	r4, r3, #8
 8011a12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011a16:	4619      	mov	r1, r3
 8011a18:	4610      	mov	r0, r2
 8011a1a:	f7ff fc44 	bl	80112a6 <subAndClamp>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	7023      	strb	r3, [r4, #0]

      ++pDstR;
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	3301      	adds	r3, #1
 8011a26:	617b      	str	r3, [r7, #20]
      ++pDstG;
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	613b      	str	r3, [r7, #16]
    for (x = 0; x < 8; x++) {
 8011a2e:	7ffb      	ldrb	r3, [r7, #31]
 8011a30:	3301      	adds	r3, #1
 8011a32:	77fb      	strb	r3, [r7, #31]
 8011a34:	7ffb      	ldrb	r3, [r7, #31]
 8011a36:	2b07      	cmp	r3, #7
 8011a38:	d9a3      	bls.n	8011982 <upsampleCrV+0x36>
    }

    pDstR = pDstR - 8 + 16;
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	3308      	adds	r3, #8
 8011a3e:	617b      	str	r3, [r7, #20]
    pDstG = pDstG - 8 + 16;
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	3308      	adds	r3, #8
 8011a44:	613b      	str	r3, [r7, #16]
  for (y = 0; y < 4; y++) {
 8011a46:	7fbb      	ldrb	r3, [r7, #30]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	77bb      	strb	r3, [r7, #30]
 8011a4c:	7fbb      	ldrb	r3, [r7, #30]
 8011a4e:	2b03      	cmp	r3, #3
 8011a50:	d994      	bls.n	801197c <upsampleCrV+0x30>
  }
}
 8011a52:	bf00      	nop
 8011a54:	3724      	adds	r7, #36	; 0x24
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd90      	pop	{r4, r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	20004134 	.word	0x20004134
 8011a60:	200041b4 	.word	0x200041b4
 8011a64:	200042b4 	.word	0x200042b4

08011a68 <copyY>:

static void copyY(uint8 dstOfs) {
 8011a68:	b480      	push	{r7}
 8011a6a:	b089      	sub	sp, #36	; 0x24
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	4603      	mov	r3, r0
 8011a70:	71fb      	strb	r3, [r7, #7]
  uint8 i;
  uint8 *pRDst = gMCUBufR + dstOfs;
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	4a18      	ldr	r2, [pc, #96]	; (8011ad8 <copyY+0x70>)
 8011a76:	4413      	add	r3, r2
 8011a78:	61bb      	str	r3, [r7, #24]
  uint8 *pGDst = gMCUBufG + dstOfs;
 8011a7a:	79fb      	ldrb	r3, [r7, #7]
 8011a7c:	4a17      	ldr	r2, [pc, #92]	; (8011adc <copyY+0x74>)
 8011a7e:	4413      	add	r3, r2
 8011a80:	617b      	str	r3, [r7, #20]
  uint8 *pBDst = gMCUBufB + dstOfs;
 8011a82:	79fb      	ldrb	r3, [r7, #7]
 8011a84:	4a16      	ldr	r2, [pc, #88]	; (8011ae0 <copyY+0x78>)
 8011a86:	4413      	add	r3, r2
 8011a88:	613b      	str	r3, [r7, #16]
  int16 *pSrc = gCoeffBuf;
 8011a8a:	4b16      	ldr	r3, [pc, #88]	; (8011ae4 <copyY+0x7c>)
 8011a8c:	60fb      	str	r3, [r7, #12]

  for (i = 64; i > 0; i--) {
 8011a8e:	2340      	movs	r3, #64	; 0x40
 8011a90:	77fb      	strb	r3, [r7, #31]
 8011a92:	e017      	b.n	8011ac4 <copyY+0x5c>
    uint8 c = (uint8)*pSrc++;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	1c9a      	adds	r2, r3, #2
 8011a98:	60fa      	str	r2, [r7, #12]
 8011a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a9e:	72fb      	strb	r3, [r7, #11]

    *pRDst++ = c;
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	1c5a      	adds	r2, r3, #1
 8011aa4:	61ba      	str	r2, [r7, #24]
 8011aa6:	7afa      	ldrb	r2, [r7, #11]
 8011aa8:	701a      	strb	r2, [r3, #0]
    *pGDst++ = c;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	1c5a      	adds	r2, r3, #1
 8011aae:	617a      	str	r2, [r7, #20]
 8011ab0:	7afa      	ldrb	r2, [r7, #11]
 8011ab2:	701a      	strb	r2, [r3, #0]
    *pBDst++ = c;
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	1c5a      	adds	r2, r3, #1
 8011ab8:	613a      	str	r2, [r7, #16]
 8011aba:	7afa      	ldrb	r2, [r7, #11]
 8011abc:	701a      	strb	r2, [r3, #0]
  for (i = 64; i > 0; i--) {
 8011abe:	7ffb      	ldrb	r3, [r7, #31]
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	77fb      	strb	r3, [r7, #31]
 8011ac4:	7ffb      	ldrb	r3, [r7, #31]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d1e4      	bne.n	8011a94 <copyY+0x2c>
  }
}
 8011aca:	bf00      	nop
 8011acc:	3724      	adds	r7, #36	; 0x24
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	200041b4 	.word	0x200041b4
 8011adc:	200042b4 	.word	0x200042b4
 8011ae0:	200043b4 	.word	0x200043b4
 8011ae4:	20004134 	.word	0x20004134

08011ae8 <convertCb>:

static void convertCb(uint8 dstOfs) {
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	4603      	mov	r3, r0
 8011af0:	71fb      	strb	r3, [r7, #7]
  uint8 i;
  uint8 *pDstG = gMCUBufG + dstOfs;
 8011af2:	79fb      	ldrb	r3, [r7, #7]
 8011af4:	4a27      	ldr	r2, [pc, #156]	; (8011b94 <convertCb+0xac>)
 8011af6:	4413      	add	r3, r2
 8011af8:	61bb      	str	r3, [r7, #24]
  uint8 *pDstB = gMCUBufB + dstOfs;
 8011afa:	79fb      	ldrb	r3, [r7, #7]
 8011afc:	4a26      	ldr	r2, [pc, #152]	; (8011b98 <convertCb+0xb0>)
 8011afe:	4413      	add	r3, r2
 8011b00:	617b      	str	r3, [r7, #20]
  int16 *pSrc = gCoeffBuf;
 8011b02:	4b26      	ldr	r3, [pc, #152]	; (8011b9c <convertCb+0xb4>)
 8011b04:	613b      	str	r3, [r7, #16]

  for (i = 64; i > 0; i--) {
 8011b06:	2340      	movs	r3, #64	; 0x40
 8011b08:	77fb      	strb	r3, [r7, #31]
 8011b0a:	e03c      	b.n	8011b86 <convertCb+0x9e>
    uint8 cb = (uint8)*pSrc++;
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	1c9a      	adds	r2, r3, #2
 8011b10:	613a      	str	r2, [r7, #16]
 8011b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b16:	73fb      	strb	r3, [r7, #15]
    int16 cbG, cbB;

    cbG = ((cb * 88U) >> 8U) - 44U;
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	2258      	movs	r2, #88	; 0x58
 8011b1c:	fb02 f303 	mul.w	r3, r2, r3
 8011b20:	0a1b      	lsrs	r3, r3, #8
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	3b2c      	subs	r3, #44	; 0x2c
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	81bb      	strh	r3, [r7, #12]
    pDstG[0] = subAndClamp(pDstG[0], cbG);
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011b32:	4611      	mov	r1, r2
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7ff fbb6 	bl	80112a6 <subAndClamp>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	701a      	strb	r2, [r3, #0]

    cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
 8011b44:	b29a      	uxth	r2, r3
 8011b46:	7bfb      	ldrb	r3, [r7, #15]
 8011b48:	21c6      	movs	r1, #198	; 0xc6
 8011b4a:	fb01 f303 	mul.w	r3, r1, r3
 8011b4e:	0a1b      	lsrs	r3, r3, #8
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	4413      	add	r3, r2
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	3be3      	subs	r3, #227	; 0xe3
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	817b      	strh	r3, [r7, #10]
    pDstB[0] = addAndClamp(pDstB[0], cbB);
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011b64:	4611      	mov	r1, r2
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7ff fb78 	bl	801125c <addAndClamp>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	701a      	strb	r2, [r3, #0]

    ++pDstG;
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	3301      	adds	r3, #1
 8011b78:	61bb      	str	r3, [r7, #24]
    ++pDstB;
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	617b      	str	r3, [r7, #20]
  for (i = 64; i > 0; i--) {
 8011b80:	7ffb      	ldrb	r3, [r7, #31]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	77fb      	strb	r3, [r7, #31]
 8011b86:	7ffb      	ldrb	r3, [r7, #31]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d1bf      	bne.n	8011b0c <convertCb+0x24>
  }
}
 8011b8c:	bf00      	nop
 8011b8e:	3720      	adds	r7, #32
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	200042b4 	.word	0x200042b4
 8011b98:	200043b4 	.word	0x200043b4
 8011b9c:	20004134 	.word	0x20004134

08011ba0 <convertCr>:

static void convertCr(uint8 dstOfs) {
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b088      	sub	sp, #32
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	71fb      	strb	r3, [r7, #7]
  uint8 i;
  uint8 *pDstR = gMCUBufR + dstOfs;
 8011baa:	79fb      	ldrb	r3, [r7, #7]
 8011bac:	4a27      	ldr	r2, [pc, #156]	; (8011c4c <convertCr+0xac>)
 8011bae:	4413      	add	r3, r2
 8011bb0:	61bb      	str	r3, [r7, #24]
  uint8 *pDstG = gMCUBufG + dstOfs;
 8011bb2:	79fb      	ldrb	r3, [r7, #7]
 8011bb4:	4a26      	ldr	r2, [pc, #152]	; (8011c50 <convertCr+0xb0>)
 8011bb6:	4413      	add	r3, r2
 8011bb8:	617b      	str	r3, [r7, #20]
  int16 *pSrc = gCoeffBuf;
 8011bba:	4b26      	ldr	r3, [pc, #152]	; (8011c54 <convertCr+0xb4>)
 8011bbc:	613b      	str	r3, [r7, #16]

  for (i = 64; i > 0; i--) {
 8011bbe:	2340      	movs	r3, #64	; 0x40
 8011bc0:	77fb      	strb	r3, [r7, #31]
 8011bc2:	e03c      	b.n	8011c3e <convertCr+0x9e>
    uint8 cr = (uint8)*pSrc++;
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	1c9a      	adds	r2, r3, #2
 8011bc8:	613a      	str	r2, [r7, #16]
 8011bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bce:	73fb      	strb	r3, [r7, #15]
    int16 crR, crG;

    crR = (cr + ((cr * 103U) >> 8U)) - 179;
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	7bfb      	ldrb	r3, [r7, #15]
 8011bd6:	2167      	movs	r1, #103	; 0x67
 8011bd8:	fb01 f303 	mul.w	r3, r1, r3
 8011bdc:	0a1b      	lsrs	r3, r3, #8
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4413      	add	r3, r2
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	3bb3      	subs	r3, #179	; 0xb3
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	81bb      	strh	r3, [r7, #12]
    pDstR[0] = addAndClamp(pDstR[0], crR);
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011bf2:	4611      	mov	r1, r2
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7ff fb31 	bl	801125c <addAndClamp>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	701a      	strb	r2, [r3, #0]

    crG = ((cr * 183U) >> 8U) - 91;
 8011c02:	7bfb      	ldrb	r3, [r7, #15]
 8011c04:	22b7      	movs	r2, #183	; 0xb7
 8011c06:	fb02 f303 	mul.w	r3, r2, r3
 8011c0a:	0a1b      	lsrs	r3, r3, #8
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	3b5b      	subs	r3, #91	; 0x5b
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	817b      	strh	r3, [r7, #10]
    pDstG[0] = subAndClamp(pDstG[0], crG);
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7ff fb41 	bl	80112a6 <subAndClamp>
 8011c24:	4603      	mov	r3, r0
 8011c26:	461a      	mov	r2, r3
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	701a      	strb	r2, [r3, #0]

    ++pDstR;
 8011c2c:	69bb      	ldr	r3, [r7, #24]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	61bb      	str	r3, [r7, #24]
    ++pDstG;
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	3301      	adds	r3, #1
 8011c36:	617b      	str	r3, [r7, #20]
  for (i = 64; i > 0; i--) {
 8011c38:	7ffb      	ldrb	r3, [r7, #31]
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	77fb      	strb	r3, [r7, #31]
 8011c3e:	7ffb      	ldrb	r3, [r7, #31]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1bf      	bne.n	8011bc4 <convertCr+0x24>
  }
}
 8011c44:	bf00      	nop
 8011c46:	3720      	adds	r7, #32
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	200041b4 	.word	0x200041b4
 8011c50:	200042b4 	.word	0x200042b4
 8011c54:	20004134 	.word	0x20004134

08011c58 <transformBlock>:

static void transformBlock(uint8 mcuBlock) {
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	4603      	mov	r3, r0
 8011c60:	71fb      	strb	r3, [r7, #7]
  idctRows();
 8011c62:	f7fe ffcb 	bl	8010bfc <idctRows>
  idctCols();
 8011c66:	f7ff f90d 	bl	8010e84 <idctCols>

  switch (gScanType) {
 8011c6a:	4b67      	ldr	r3, [pc, #412]	; (8011e08 <transformBlock+0x1b0>)
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b04      	cmp	r3, #4
 8011c70:	f200 80c6 	bhi.w	8011e00 <transformBlock+0x1a8>
 8011c74:	a201      	add	r2, pc, #4	; (adr r2, 8011c7c <transformBlock+0x24>)
 8011c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7a:	bf00      	nop
 8011c7c:	08011c91 	.word	0x08011c91
 8011c80:	08011c99 	.word	0x08011c99
 8011c84:	08011d17 	.word	0x08011d17
 8011c88:	08011cc3 	.word	0x08011cc3
 8011c8c:	08011d6b 	.word	0x08011d6b
  case PJPG_GRAYSCALE: {

    copyY(0);
 8011c90:	2000      	movs	r0, #0
 8011c92:	f7ff fee9 	bl	8011a68 <copyY>
    break;
 8011c96:	e0b3      	b.n	8011e00 <transformBlock+0x1a8>
  }
  case PJPG_YH1V1: {

    switch (mcuBlock) {
 8011c98:	79fb      	ldrb	r3, [r7, #7]
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d008      	beq.n	8011cb0 <transformBlock+0x58>
 8011c9e:	2b02      	cmp	r3, #2
 8011ca0:	d00a      	beq.n	8011cb8 <transformBlock+0x60>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d000      	beq.n	8011ca8 <transformBlock+0x50>
      convertCr(0);
      break;
    }
    }

    break;
 8011ca6:	e0ab      	b.n	8011e00 <transformBlock+0x1a8>
      copyY(0);
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f7ff fedd 	bl	8011a68 <copyY>
      break;
 8011cae:	e007      	b.n	8011cc0 <transformBlock+0x68>
      convertCb(0);
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	f7ff ff19 	bl	8011ae8 <convertCb>
      break;
 8011cb6:	e003      	b.n	8011cc0 <transformBlock+0x68>
      convertCr(0);
 8011cb8:	2000      	movs	r0, #0
 8011cba:	f7ff ff71 	bl	8011ba0 <convertCr>
      break;
 8011cbe:	bf00      	nop
    break;
 8011cc0:	e09e      	b.n	8011e00 <transformBlock+0x1a8>
  }
  case PJPG_YH1V2: {

    switch (mcuBlock) {
 8011cc2:	79fb      	ldrb	r3, [r7, #7]
 8011cc4:	2b03      	cmp	r3, #3
 8011cc6:	f200 8096 	bhi.w	8011df6 <transformBlock+0x19e>
 8011cca:	a201      	add	r2, pc, #4	; (adr r2, 8011cd0 <transformBlock+0x78>)
 8011ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd0:	08011ce1 	.word	0x08011ce1
 8011cd4:	08011ce9 	.word	0x08011ce9
 8011cd8:	08011cf1 	.word	0x08011cf1
 8011cdc:	08011d03 	.word	0x08011d03
    case 0: {
      copyY(0);
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	f7ff fec1 	bl	8011a68 <copyY>
      break;
 8011ce6:	e015      	b.n	8011d14 <transformBlock+0xbc>
    }
    case 1: {
      copyY(128);
 8011ce8:	2080      	movs	r0, #128	; 0x80
 8011cea:	f7ff febd 	bl	8011a68 <copyY>
      break;
 8011cee:	e011      	b.n	8011d14 <transformBlock+0xbc>
    }
    case 2: {
      upsampleCbV(0, 0);
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	f7ff fc4c 	bl	8011590 <upsampleCbV>
      upsampleCbV(4 * 8, 128);
 8011cf8:	2180      	movs	r1, #128	; 0x80
 8011cfa:	2020      	movs	r0, #32
 8011cfc:	f7ff fc48 	bl	8011590 <upsampleCbV>
      break;
 8011d00:	e008      	b.n	8011d14 <transformBlock+0xbc>
    }
    case 3: {
      upsampleCrV(0, 0);
 8011d02:	2100      	movs	r1, #0
 8011d04:	2000      	movs	r0, #0
 8011d06:	f7ff fe21 	bl	801194c <upsampleCrV>
      upsampleCrV(4 * 8, 128);
 8011d0a:	2180      	movs	r1, #128	; 0x80
 8011d0c:	2020      	movs	r0, #32
 8011d0e:	f7ff fe1d 	bl	801194c <upsampleCrV>
      break;
 8011d12:	bf00      	nop
    }
    }

    break;
 8011d14:	e06f      	b.n	8011df6 <transformBlock+0x19e>
  }
  case PJPG_YH2V1: {

    switch (mcuBlock) {
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	2b03      	cmp	r3, #3
 8011d1a:	d86e      	bhi.n	8011dfa <transformBlock+0x1a2>
 8011d1c:	a201      	add	r2, pc, #4	; (adr r2, 8011d24 <transformBlock+0xcc>)
 8011d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d22:	bf00      	nop
 8011d24:	08011d35 	.word	0x08011d35
 8011d28:	08011d3d 	.word	0x08011d3d
 8011d2c:	08011d45 	.word	0x08011d45
 8011d30:	08011d57 	.word	0x08011d57
    case 0: {
      copyY(0);
 8011d34:	2000      	movs	r0, #0
 8011d36:	f7ff fe97 	bl	8011a68 <copyY>
      break;
 8011d3a:	e015      	b.n	8011d68 <transformBlock+0x110>
    }
    case 1: {
      copyY(64);
 8011d3c:	2040      	movs	r0, #64	; 0x40
 8011d3e:	f7ff fe93 	bl	8011a68 <copyY>
      break;
 8011d42:	e011      	b.n	8011d68 <transformBlock+0x110>
    }
    case 2: {
      upsampleCbH(0, 0);
 8011d44:	2100      	movs	r1, #0
 8011d46:	2000      	movs	r0, #0
 8011d48:	f7ff fb9a 	bl	8011480 <upsampleCbH>
      upsampleCbH(4, 64);
 8011d4c:	2140      	movs	r1, #64	; 0x40
 8011d4e:	2004      	movs	r0, #4
 8011d50:	f7ff fb96 	bl	8011480 <upsampleCbH>
      break;
 8011d54:	e008      	b.n	8011d68 <transformBlock+0x110>
    }
    case 3: {
      upsampleCrH(0, 0);
 8011d56:	2100      	movs	r1, #0
 8011d58:	2000      	movs	r0, #0
 8011d5a:	f7ff fd6f 	bl	801183c <upsampleCrH>
      upsampleCrH(4, 64);
 8011d5e:	2140      	movs	r1, #64	; 0x40
 8011d60:	2004      	movs	r0, #4
 8011d62:	f7ff fd6b 	bl	801183c <upsampleCrH>
      break;
 8011d66:	bf00      	nop
    }
    }

    break;
 8011d68:	e047      	b.n	8011dfa <transformBlock+0x1a2>
  }
  case PJPG_YH2V2: {

    switch (mcuBlock) {
 8011d6a:	79fb      	ldrb	r3, [r7, #7]
 8011d6c:	2b05      	cmp	r3, #5
 8011d6e:	d846      	bhi.n	8011dfe <transformBlock+0x1a6>
 8011d70:	a201      	add	r2, pc, #4	; (adr r2, 8011d78 <transformBlock+0x120>)
 8011d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d76:	bf00      	nop
 8011d78:	08011d91 	.word	0x08011d91
 8011d7c:	08011d99 	.word	0x08011d99
 8011d80:	08011da1 	.word	0x08011da1
 8011d84:	08011da9 	.word	0x08011da9
 8011d88:	08011db1 	.word	0x08011db1
 8011d8c:	08011dd3 	.word	0x08011dd3
    case 0: {
      copyY(0);
 8011d90:	2000      	movs	r0, #0
 8011d92:	f7ff fe69 	bl	8011a68 <copyY>
      break;
 8011d96:	e02d      	b.n	8011df4 <transformBlock+0x19c>
    }
    case 1: {
      copyY(64);
 8011d98:	2040      	movs	r0, #64	; 0x40
 8011d9a:	f7ff fe65 	bl	8011a68 <copyY>
      break;
 8011d9e:	e029      	b.n	8011df4 <transformBlock+0x19c>
    }
    case 2: {
      copyY(128);
 8011da0:	2080      	movs	r0, #128	; 0x80
 8011da2:	f7ff fe61 	bl	8011a68 <copyY>
      break;
 8011da6:	e025      	b.n	8011df4 <transformBlock+0x19c>
    }
    case 3: {
      copyY(192);
 8011da8:	20c0      	movs	r0, #192	; 0xc0
 8011daa:	f7ff fe5d 	bl	8011a68 <copyY>
      break;
 8011dae:	e021      	b.n	8011df4 <transformBlock+0x19c>
    }
    case 4: {
      upsampleCb(0, 0);
 8011db0:	2100      	movs	r1, #0
 8011db2:	2000      	movs	r0, #0
 8011db4:	f7ff fa9c 	bl	80112f0 <upsampleCb>
      upsampleCb(4, 64);
 8011db8:	2140      	movs	r1, #64	; 0x40
 8011dba:	2004      	movs	r0, #4
 8011dbc:	f7ff fa98 	bl	80112f0 <upsampleCb>
      upsampleCb(4 * 8, 128);
 8011dc0:	2180      	movs	r1, #128	; 0x80
 8011dc2:	2020      	movs	r0, #32
 8011dc4:	f7ff fa94 	bl	80112f0 <upsampleCb>
      upsampleCb(4 + 4 * 8, 192);
 8011dc8:	21c0      	movs	r1, #192	; 0xc0
 8011dca:	2024      	movs	r0, #36	; 0x24
 8011dcc:	f7ff fa90 	bl	80112f0 <upsampleCb>
      break;
 8011dd0:	e010      	b.n	8011df4 <transformBlock+0x19c>
    }
    case 5: {
      upsampleCr(0, 0);
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	f7ff fc69 	bl	80116ac <upsampleCr>
      upsampleCr(4, 64);
 8011dda:	2140      	movs	r1, #64	; 0x40
 8011ddc:	2004      	movs	r0, #4
 8011dde:	f7ff fc65 	bl	80116ac <upsampleCr>
      upsampleCr(4 * 8, 128);
 8011de2:	2180      	movs	r1, #128	; 0x80
 8011de4:	2020      	movs	r0, #32
 8011de6:	f7ff fc61 	bl	80116ac <upsampleCr>
      upsampleCr(4 + 4 * 8, 192);
 8011dea:	21c0      	movs	r1, #192	; 0xc0
 8011dec:	2024      	movs	r0, #36	; 0x24
 8011dee:	f7ff fc5d 	bl	80116ac <upsampleCr>
      break;
 8011df2:	bf00      	nop
    }
    }

    break;
 8011df4:	e003      	b.n	8011dfe <transformBlock+0x1a6>
    break;
 8011df6:	bf00      	nop
 8011df8:	e002      	b.n	8011e00 <transformBlock+0x1a8>
    break;
 8011dfa:	bf00      	nop
 8011dfc:	e000      	b.n	8011e00 <transformBlock+0x1a8>
    break;
 8011dfe:	bf00      	nop
  }
  }
}
 8011e00:	bf00      	nop
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	20004a4f 	.word	0x20004a4f

08011e0c <transformBlockReduce>:

static void transformBlockReduce(uint8 mcuBlock) {
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b086      	sub	sp, #24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	4603      	mov	r3, r0
 8011e14:	71fb      	strb	r3, [r7, #7]
  uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
 8011e16:	4bb9      	ldr	r3, [pc, #740]	; (80120fc <transformBlockReduce+0x2f0>)
 8011e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	3340      	adds	r3, #64	; 0x40
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	b21b      	sxth	r3, r3
 8011e24:	2107      	movs	r1, #7
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fd fc46 	bl	800f6b8 <arithmeticRightShiftN16>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	3380      	adds	r3, #128	; 0x80
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	b21b      	sxth	r3, r3
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7fe fec3 	bl	8010bc2 <clamp>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	75fb      	strb	r3, [r7, #23]
  int16 cbG, cbB, crR, crG;

  switch (gScanType) {
 8011e40:	4baf      	ldr	r3, [pc, #700]	; (8012100 <transformBlockReduce+0x2f4>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	f200 835e 	bhi.w	8012506 <transformBlockReduce+0x6fa>
 8011e4a:	a201      	add	r2, pc, #4	; (adr r2, 8011e50 <transformBlockReduce+0x44>)
 8011e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e50:	08011e65 	.word	0x08011e65
 8011e54:	08011e6d 	.word	0x08011e6d
 8011e58:	080120c9 	.word	0x080120c9
 8011e5c:	08011f4f 	.word	0x08011f4f
 8011e60:	08012259 	.word	0x08012259
  case PJPG_GRAYSCALE: {

    gMCUBufR[0] = c;
 8011e64:	4aa7      	ldr	r2, [pc, #668]	; (8012104 <transformBlockReduce+0x2f8>)
 8011e66:	7dfb      	ldrb	r3, [r7, #23]
 8011e68:	7013      	strb	r3, [r2, #0]
    break;
 8011e6a:	e34c      	b.n	8012506 <transformBlockReduce+0x6fa>
  }
  case PJPG_YH1V1: {

    switch (mcuBlock) {
 8011e6c:	79fb      	ldrb	r3, [r7, #7]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d00e      	beq.n	8011e90 <transformBlockReduce+0x84>
 8011e72:	2b02      	cmp	r3, #2
 8011e74:	d03b      	beq.n	8011eee <transformBlockReduce+0xe2>
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d000      	beq.n	8011e7c <transformBlockReduce+0x70>
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
      break;
    }
    }

    break;
 8011e7a:	e344      	b.n	8012506 <transformBlockReduce+0x6fa>
      gMCUBufR[0] = c;
 8011e7c:	4aa1      	ldr	r2, [pc, #644]	; (8012104 <transformBlockReduce+0x2f8>)
 8011e7e:	7dfb      	ldrb	r3, [r7, #23]
 8011e80:	7013      	strb	r3, [r2, #0]
      gMCUBufG[0] = c;
 8011e82:	4aa1      	ldr	r2, [pc, #644]	; (8012108 <transformBlockReduce+0x2fc>)
 8011e84:	7dfb      	ldrb	r3, [r7, #23]
 8011e86:	7013      	strb	r3, [r2, #0]
      gMCUBufB[0] = c;
 8011e88:	4aa0      	ldr	r2, [pc, #640]	; (801210c <transformBlockReduce+0x300>)
 8011e8a:	7dfb      	ldrb	r3, [r7, #23]
 8011e8c:	7013      	strb	r3, [r2, #0]
      break;
 8011e8e:	e05d      	b.n	8011f4c <transformBlockReduce+0x140>
      cbG = ((c * 88U) >> 8U) - 44U;
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	2258      	movs	r2, #88	; 0x58
 8011e94:	fb02 f303 	mul.w	r3, r2, r3
 8011e98:	0a1b      	lsrs	r3, r3, #8
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	3b2c      	subs	r3, #44	; 0x2c
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	823b      	strh	r3, [r7, #16]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8011ea2:	4b99      	ldr	r3, [pc, #612]	; (8012108 <transformBlockReduce+0x2fc>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011eaa:	4611      	mov	r1, r2
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7ff f9fa 	bl	80112a6 <subAndClamp>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	4b94      	ldr	r3, [pc, #592]	; (8012108 <transformBlockReduce+0x2fc>)
 8011eb8:	701a      	strb	r2, [r3, #0]
      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8011eba:	7dfb      	ldrb	r3, [r7, #23]
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]
 8011ec0:	21c6      	movs	r1, #198	; 0xc6
 8011ec2:	fb01 f303 	mul.w	r3, r1, r3
 8011ec6:	0a1b      	lsrs	r3, r3, #8
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	4413      	add	r3, r2
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	3be3      	subs	r3, #227	; 0xe3
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	81fb      	strh	r3, [r7, #14]
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8011ed4:	4b8d      	ldr	r3, [pc, #564]	; (801210c <transformBlockReduce+0x300>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011edc:	4611      	mov	r1, r2
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7ff f9bc 	bl	801125c <addAndClamp>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	4b88      	ldr	r3, [pc, #544]	; (801210c <transformBlockReduce+0x300>)
 8011eea:	701a      	strb	r2, [r3, #0]
      break;
 8011eec:	e02e      	b.n	8011f4c <transformBlockReduce+0x140>
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	7dfb      	ldrb	r3, [r7, #23]
 8011ef4:	2167      	movs	r1, #103	; 0x67
 8011ef6:	fb01 f303 	mul.w	r3, r1, r3
 8011efa:	0a1b      	lsrs	r3, r3, #8
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	4413      	add	r3, r2
 8011f00:	b29b      	uxth	r3, r3
 8011f02:	3bb3      	subs	r3, #179	; 0xb3
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	82bb      	strh	r3, [r7, #20]
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 8011f08:	4b7e      	ldr	r3, [pc, #504]	; (8012104 <transformBlockReduce+0x2f8>)
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8011f10:	4611      	mov	r1, r2
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7ff f9a2 	bl	801125c <addAndClamp>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	4b79      	ldr	r3, [pc, #484]	; (8012104 <transformBlockReduce+0x2f8>)
 8011f1e:	701a      	strb	r2, [r3, #0]
      crG = ((c * 183U) >> 8U) - 91;
 8011f20:	7dfb      	ldrb	r3, [r7, #23]
 8011f22:	22b7      	movs	r2, #183	; 0xb7
 8011f24:	fb02 f303 	mul.w	r3, r2, r3
 8011f28:	0a1b      	lsrs	r3, r3, #8
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	3b5b      	subs	r3, #91	; 0x5b
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	827b      	strh	r3, [r7, #18]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8011f32:	4b75      	ldr	r3, [pc, #468]	; (8012108 <transformBlockReduce+0x2fc>)
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8011f3a:	4611      	mov	r1, r2
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7ff f9b2 	bl	80112a6 <subAndClamp>
 8011f42:	4603      	mov	r3, r0
 8011f44:	461a      	mov	r2, r3
 8011f46:	4b70      	ldr	r3, [pc, #448]	; (8012108 <transformBlockReduce+0x2fc>)
 8011f48:	701a      	strb	r2, [r3, #0]
      break;
 8011f4a:	bf00      	nop
    break;
 8011f4c:	e2db      	b.n	8012506 <transformBlockReduce+0x6fa>
  }
  case PJPG_YH1V2: {

    switch (mcuBlock) {
 8011f4e:	79fb      	ldrb	r3, [r7, #7]
 8011f50:	2b03      	cmp	r3, #3
 8011f52:	f200 82d3 	bhi.w	80124fc <transformBlockReduce+0x6f0>
 8011f56:	a201      	add	r2, pc, #4	; (adr r2, 8011f5c <transformBlockReduce+0x150>)
 8011f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f5c:	08011f6d 	.word	0x08011f6d
 8011f60:	08011f81 	.word	0x08011f81
 8011f64:	08011f9b 	.word	0x08011f9b
 8011f68:	08012031 	.word	0x08012031
    case 0: {
      gMCUBufR[0] = c;
 8011f6c:	4a65      	ldr	r2, [pc, #404]	; (8012104 <transformBlockReduce+0x2f8>)
 8011f6e:	7dfb      	ldrb	r3, [r7, #23]
 8011f70:	7013      	strb	r3, [r2, #0]
      gMCUBufG[0] = c;
 8011f72:	4a65      	ldr	r2, [pc, #404]	; (8012108 <transformBlockReduce+0x2fc>)
 8011f74:	7dfb      	ldrb	r3, [r7, #23]
 8011f76:	7013      	strb	r3, [r2, #0]
      gMCUBufB[0] = c;
 8011f78:	4a64      	ldr	r2, [pc, #400]	; (801210c <transformBlockReduce+0x300>)
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	7013      	strb	r3, [r2, #0]
      break;
 8011f7e:	e0a2      	b.n	80120c6 <transformBlockReduce+0x2ba>
    }
    case 1: {
      gMCUBufR[128] = c;
 8011f80:	4a60      	ldr	r2, [pc, #384]	; (8012104 <transformBlockReduce+0x2f8>)
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      gMCUBufG[128] = c;
 8011f88:	4a5f      	ldr	r2, [pc, #380]	; (8012108 <transformBlockReduce+0x2fc>)
 8011f8a:	7dfb      	ldrb	r3, [r7, #23]
 8011f8c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      gMCUBufB[128] = c;
 8011f90:	4a5e      	ldr	r2, [pc, #376]	; (801210c <transformBlockReduce+0x300>)
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      break;
 8011f98:	e095      	b.n	80120c6 <transformBlockReduce+0x2ba>
    }
    case 2: {
      cbG = ((c * 88U) >> 8U) - 44U;
 8011f9a:	7dfb      	ldrb	r3, [r7, #23]
 8011f9c:	2258      	movs	r2, #88	; 0x58
 8011f9e:	fb02 f303 	mul.w	r3, r2, r3
 8011fa2:	0a1b      	lsrs	r3, r3, #8
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	3b2c      	subs	r3, #44	; 0x2c
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	823b      	strh	r3, [r7, #16]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 8011fac:	4b56      	ldr	r3, [pc, #344]	; (8012108 <transformBlockReduce+0x2fc>)
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ff f975 	bl	80112a6 <subAndClamp>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	4b51      	ldr	r3, [pc, #324]	; (8012108 <transformBlockReduce+0x2fc>)
 8011fc2:	701a      	strb	r2, [r3, #0]
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 8011fc4:	4b50      	ldr	r3, [pc, #320]	; (8012108 <transformBlockReduce+0x2fc>)
 8011fc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011fca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011fce:	4611      	mov	r1, r2
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff f968 	bl	80112a6 <subAndClamp>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	461a      	mov	r2, r3
 8011fda:	4b4b      	ldr	r3, [pc, #300]	; (8012108 <transformBlockReduce+0x2fc>)
 8011fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8011fe0:	7dfb      	ldrb	r3, [r7, #23]
 8011fe2:	b29a      	uxth	r2, r3
 8011fe4:	7dfb      	ldrb	r3, [r7, #23]
 8011fe6:	21c6      	movs	r1, #198	; 0xc6
 8011fe8:	fb01 f303 	mul.w	r3, r1, r3
 8011fec:	0a1b      	lsrs	r3, r3, #8
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	4413      	add	r3, r2
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	3be3      	subs	r3, #227	; 0xe3
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	81fb      	strh	r3, [r7, #14]
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 8011ffa:	4b44      	ldr	r3, [pc, #272]	; (801210c <transformBlockReduce+0x300>)
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012002:	4611      	mov	r1, r2
 8012004:	4618      	mov	r0, r3
 8012006:	f7ff f929 	bl	801125c <addAndClamp>
 801200a:	4603      	mov	r3, r0
 801200c:	461a      	mov	r2, r3
 801200e:	4b3f      	ldr	r3, [pc, #252]	; (801210c <transformBlockReduce+0x300>)
 8012010:	701a      	strb	r2, [r3, #0]
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 8012012:	4b3e      	ldr	r3, [pc, #248]	; (801210c <transformBlockReduce+0x300>)
 8012014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012018:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801201c:	4611      	mov	r1, r2
 801201e:	4618      	mov	r0, r3
 8012020:	f7ff f91c 	bl	801125c <addAndClamp>
 8012024:	4603      	mov	r3, r0
 8012026:	461a      	mov	r2, r3
 8012028:	4b38      	ldr	r3, [pc, #224]	; (801210c <transformBlockReduce+0x300>)
 801202a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      break;
 801202e:	e04a      	b.n	80120c6 <transformBlockReduce+0x2ba>
    }
    case 3: {
      crR = (c + ((c * 103U) >> 8U)) - 179;
 8012030:	7dfb      	ldrb	r3, [r7, #23]
 8012032:	b29a      	uxth	r2, r3
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	2167      	movs	r1, #103	; 0x67
 8012038:	fb01 f303 	mul.w	r3, r1, r3
 801203c:	0a1b      	lsrs	r3, r3, #8
 801203e:	b29b      	uxth	r3, r3
 8012040:	4413      	add	r3, r2
 8012042:	b29b      	uxth	r3, r3
 8012044:	3bb3      	subs	r3, #179	; 0xb3
 8012046:	b29b      	uxth	r3, r3
 8012048:	82bb      	strh	r3, [r7, #20]
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 801204a:	4b2e      	ldr	r3, [pc, #184]	; (8012104 <transformBlockReduce+0x2f8>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8012052:	4611      	mov	r1, r2
 8012054:	4618      	mov	r0, r3
 8012056:	f7ff f901 	bl	801125c <addAndClamp>
 801205a:	4603      	mov	r3, r0
 801205c:	461a      	mov	r2, r3
 801205e:	4b29      	ldr	r3, [pc, #164]	; (8012104 <transformBlockReduce+0x2f8>)
 8012060:	701a      	strb	r2, [r3, #0]
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 8012062:	4b28      	ldr	r3, [pc, #160]	; (8012104 <transformBlockReduce+0x2f8>)
 8012064:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012068:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff f8f4 	bl	801125c <addAndClamp>
 8012074:	4603      	mov	r3, r0
 8012076:	461a      	mov	r2, r3
 8012078:	4b22      	ldr	r3, [pc, #136]	; (8012104 <transformBlockReduce+0x2f8>)
 801207a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      crG = ((c * 183U) >> 8U) - 91;
 801207e:	7dfb      	ldrb	r3, [r7, #23]
 8012080:	22b7      	movs	r2, #183	; 0xb7
 8012082:	fb02 f303 	mul.w	r3, r2, r3
 8012086:	0a1b      	lsrs	r3, r3, #8
 8012088:	b29b      	uxth	r3, r3
 801208a:	3b5b      	subs	r3, #91	; 0x5b
 801208c:	b29b      	uxth	r3, r3
 801208e:	827b      	strh	r3, [r7, #18]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8012090:	4b1d      	ldr	r3, [pc, #116]	; (8012108 <transformBlockReduce+0x2fc>)
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012098:	4611      	mov	r1, r2
 801209a:	4618      	mov	r0, r3
 801209c:	f7ff f903 	bl	80112a6 <subAndClamp>
 80120a0:	4603      	mov	r3, r0
 80120a2:	461a      	mov	r2, r3
 80120a4:	4b18      	ldr	r3, [pc, #96]	; (8012108 <transformBlockReduce+0x2fc>)
 80120a6:	701a      	strb	r2, [r3, #0]
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 80120a8:	4b17      	ldr	r3, [pc, #92]	; (8012108 <transformBlockReduce+0x2fc>)
 80120aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80120ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80120b2:	4611      	mov	r1, r2
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7ff f8f6 	bl	80112a6 <subAndClamp>
 80120ba:	4603      	mov	r3, r0
 80120bc:	461a      	mov	r2, r3
 80120be:	4b12      	ldr	r3, [pc, #72]	; (8012108 <transformBlockReduce+0x2fc>)
 80120c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      break;
 80120c4:	bf00      	nop
    }
    }
    break;
 80120c6:	e219      	b.n	80124fc <transformBlockReduce+0x6f0>
  }
  case PJPG_YH2V1: {

    switch (mcuBlock) {
 80120c8:	79fb      	ldrb	r3, [r7, #7]
 80120ca:	2b03      	cmp	r3, #3
 80120cc:	f200 8218 	bhi.w	8012500 <transformBlockReduce+0x6f4>
 80120d0:	a201      	add	r2, pc, #4	; (adr r2, 80120d8 <transformBlockReduce+0x2cc>)
 80120d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120d6:	bf00      	nop
 80120d8:	080120e9 	.word	0x080120e9
 80120dc:	08012111 	.word	0x08012111
 80120e0:	0801212b 	.word	0x0801212b
 80120e4:	080121c1 	.word	0x080121c1
    case 0: {
      gMCUBufR[0] = c;
 80120e8:	4a06      	ldr	r2, [pc, #24]	; (8012104 <transformBlockReduce+0x2f8>)
 80120ea:	7dfb      	ldrb	r3, [r7, #23]
 80120ec:	7013      	strb	r3, [r2, #0]
      gMCUBufG[0] = c;
 80120ee:	4a06      	ldr	r2, [pc, #24]	; (8012108 <transformBlockReduce+0x2fc>)
 80120f0:	7dfb      	ldrb	r3, [r7, #23]
 80120f2:	7013      	strb	r3, [r2, #0]
      gMCUBufB[0] = c;
 80120f4:	4a05      	ldr	r2, [pc, #20]	; (801210c <transformBlockReduce+0x300>)
 80120f6:	7dfb      	ldrb	r3, [r7, #23]
 80120f8:	7013      	strb	r3, [r2, #0]
      break;
 80120fa:	e0ac      	b.n	8012256 <transformBlockReduce+0x44a>
 80120fc:	20004134 	.word	0x20004134
 8012100:	20004a4f 	.word	0x20004a4f
 8012104:	200041b4 	.word	0x200041b4
 8012108:	200042b4 	.word	0x200042b4
 801210c:	200043b4 	.word	0x200043b4
    }
    case 1: {
      gMCUBufR[64] = c;
 8012110:	4ab5      	ldr	r2, [pc, #724]	; (80123e8 <transformBlockReduce+0x5dc>)
 8012112:	7dfb      	ldrb	r3, [r7, #23]
 8012114:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      gMCUBufG[64] = c;
 8012118:	4ab4      	ldr	r2, [pc, #720]	; (80123ec <transformBlockReduce+0x5e0>)
 801211a:	7dfb      	ldrb	r3, [r7, #23]
 801211c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      gMCUBufB[64] = c;
 8012120:	4ab3      	ldr	r2, [pc, #716]	; (80123f0 <transformBlockReduce+0x5e4>)
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      break;
 8012128:	e095      	b.n	8012256 <transformBlockReduce+0x44a>
    }
    case 2: {
      cbG = ((c * 88U) >> 8U) - 44U;
 801212a:	7dfb      	ldrb	r3, [r7, #23]
 801212c:	2258      	movs	r2, #88	; 0x58
 801212e:	fb02 f303 	mul.w	r3, r2, r3
 8012132:	0a1b      	lsrs	r3, r3, #8
 8012134:	b29b      	uxth	r3, r3
 8012136:	3b2c      	subs	r3, #44	; 0x2c
 8012138:	b29b      	uxth	r3, r3
 801213a:	823b      	strh	r3, [r7, #16]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 801213c:	4bab      	ldr	r3, [pc, #684]	; (80123ec <transformBlockReduce+0x5e0>)
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012144:	4611      	mov	r1, r2
 8012146:	4618      	mov	r0, r3
 8012148:	f7ff f8ad 	bl	80112a6 <subAndClamp>
 801214c:	4603      	mov	r3, r0
 801214e:	461a      	mov	r2, r3
 8012150:	4ba6      	ldr	r3, [pc, #664]	; (80123ec <transformBlockReduce+0x5e0>)
 8012152:	701a      	strb	r2, [r3, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 8012154:	4ba5      	ldr	r3, [pc, #660]	; (80123ec <transformBlockReduce+0x5e0>)
 8012156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801215a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801215e:	4611      	mov	r1, r2
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff f8a0 	bl	80112a6 <subAndClamp>
 8012166:	4603      	mov	r3, r0
 8012168:	461a      	mov	r2, r3
 801216a:	4ba0      	ldr	r3, [pc, #640]	; (80123ec <transformBlockReduce+0x5e0>)
 801216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8012170:	7dfb      	ldrb	r3, [r7, #23]
 8012172:	b29a      	uxth	r2, r3
 8012174:	7dfb      	ldrb	r3, [r7, #23]
 8012176:	21c6      	movs	r1, #198	; 0xc6
 8012178:	fb01 f303 	mul.w	r3, r1, r3
 801217c:	0a1b      	lsrs	r3, r3, #8
 801217e:	b29b      	uxth	r3, r3
 8012180:	4413      	add	r3, r2
 8012182:	b29b      	uxth	r3, r3
 8012184:	3be3      	subs	r3, #227	; 0xe3
 8012186:	b29b      	uxth	r3, r3
 8012188:	81fb      	strh	r3, [r7, #14]
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 801218a:	4b99      	ldr	r3, [pc, #612]	; (80123f0 <transformBlockReduce+0x5e4>)
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012192:	4611      	mov	r1, r2
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff f861 	bl	801125c <addAndClamp>
 801219a:	4603      	mov	r3, r0
 801219c:	461a      	mov	r2, r3
 801219e:	4b94      	ldr	r3, [pc, #592]	; (80123f0 <transformBlockReduce+0x5e4>)
 80121a0:	701a      	strb	r2, [r3, #0]
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 80121a2:	4b93      	ldr	r3, [pc, #588]	; (80123f0 <transformBlockReduce+0x5e4>)
 80121a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80121ac:	4611      	mov	r1, r2
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7ff f854 	bl	801125c <addAndClamp>
 80121b4:	4603      	mov	r3, r0
 80121b6:	461a      	mov	r2, r3
 80121b8:	4b8d      	ldr	r3, [pc, #564]	; (80123f0 <transformBlockReduce+0x5e4>)
 80121ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      break;
 80121be:	e04a      	b.n	8012256 <transformBlockReduce+0x44a>
    }
    case 3: {
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80121c0:	7dfb      	ldrb	r3, [r7, #23]
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	7dfb      	ldrb	r3, [r7, #23]
 80121c6:	2167      	movs	r1, #103	; 0x67
 80121c8:	fb01 f303 	mul.w	r3, r1, r3
 80121cc:	0a1b      	lsrs	r3, r3, #8
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	4413      	add	r3, r2
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	3bb3      	subs	r3, #179	; 0xb3
 80121d6:	b29b      	uxth	r3, r3
 80121d8:	82bb      	strh	r3, [r7, #20]
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 80121da:	4b83      	ldr	r3, [pc, #524]	; (80123e8 <transformBlockReduce+0x5dc>)
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7ff f839 	bl	801125c <addAndClamp>
 80121ea:	4603      	mov	r3, r0
 80121ec:	461a      	mov	r2, r3
 80121ee:	4b7e      	ldr	r3, [pc, #504]	; (80123e8 <transformBlockReduce+0x5dc>)
 80121f0:	701a      	strb	r2, [r3, #0]
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 80121f2:	4b7d      	ldr	r3, [pc, #500]	; (80123e8 <transformBlockReduce+0x5dc>)
 80121f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121f8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80121fc:	4611      	mov	r1, r2
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff f82c 	bl	801125c <addAndClamp>
 8012204:	4603      	mov	r3, r0
 8012206:	461a      	mov	r2, r3
 8012208:	4b77      	ldr	r3, [pc, #476]	; (80123e8 <transformBlockReduce+0x5dc>)
 801220a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      crG = ((c * 183U) >> 8U) - 91;
 801220e:	7dfb      	ldrb	r3, [r7, #23]
 8012210:	22b7      	movs	r2, #183	; 0xb7
 8012212:	fb02 f303 	mul.w	r3, r2, r3
 8012216:	0a1b      	lsrs	r3, r3, #8
 8012218:	b29b      	uxth	r3, r3
 801221a:	3b5b      	subs	r3, #91	; 0x5b
 801221c:	b29b      	uxth	r3, r3
 801221e:	827b      	strh	r3, [r7, #18]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 8012220:	4b72      	ldr	r3, [pc, #456]	; (80123ec <transformBlockReduce+0x5e0>)
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012228:	4611      	mov	r1, r2
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff f83b 	bl	80112a6 <subAndClamp>
 8012230:	4603      	mov	r3, r0
 8012232:	461a      	mov	r2, r3
 8012234:	4b6d      	ldr	r3, [pc, #436]	; (80123ec <transformBlockReduce+0x5e0>)
 8012236:	701a      	strb	r2, [r3, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 8012238:	4b6c      	ldr	r3, [pc, #432]	; (80123ec <transformBlockReduce+0x5e0>)
 801223a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801223e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012242:	4611      	mov	r1, r2
 8012244:	4618      	mov	r0, r3
 8012246:	f7ff f82e 	bl	80112a6 <subAndClamp>
 801224a:	4603      	mov	r3, r0
 801224c:	461a      	mov	r2, r3
 801224e:	4b67      	ldr	r3, [pc, #412]	; (80123ec <transformBlockReduce+0x5e0>)
 8012250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      break;
 8012254:	bf00      	nop
    }
    }
    break;
 8012256:	e153      	b.n	8012500 <transformBlockReduce+0x6f4>
  }
  case PJPG_YH2V2: {

    switch (mcuBlock) {
 8012258:	79fb      	ldrb	r3, [r7, #7]
 801225a:	2b05      	cmp	r3, #5
 801225c:	f200 8152 	bhi.w	8012504 <transformBlockReduce+0x6f8>
 8012260:	a201      	add	r2, pc, #4	; (adr r2, 8012268 <transformBlockReduce+0x45c>)
 8012262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012266:	bf00      	nop
 8012268:	08012281 	.word	0x08012281
 801226c:	08012295 	.word	0x08012295
 8012270:	080122af 	.word	0x080122af
 8012274:	080122c9 	.word	0x080122c9
 8012278:	080122e3 	.word	0x080122e3
 801227c:	080123f5 	.word	0x080123f5
    case 0: {
      gMCUBufR[0] = c;
 8012280:	4a59      	ldr	r2, [pc, #356]	; (80123e8 <transformBlockReduce+0x5dc>)
 8012282:	7dfb      	ldrb	r3, [r7, #23]
 8012284:	7013      	strb	r3, [r2, #0]
      gMCUBufG[0] = c;
 8012286:	4a59      	ldr	r2, [pc, #356]	; (80123ec <transformBlockReduce+0x5e0>)
 8012288:	7dfb      	ldrb	r3, [r7, #23]
 801228a:	7013      	strb	r3, [r2, #0]
      gMCUBufB[0] = c;
 801228c:	4a58      	ldr	r2, [pc, #352]	; (80123f0 <transformBlockReduce+0x5e4>)
 801228e:	7dfb      	ldrb	r3, [r7, #23]
 8012290:	7013      	strb	r3, [r2, #0]
      break;
 8012292:	e132      	b.n	80124fa <transformBlockReduce+0x6ee>
    }
    case 1: {
      gMCUBufR[64] = c;
 8012294:	4a54      	ldr	r2, [pc, #336]	; (80123e8 <transformBlockReduce+0x5dc>)
 8012296:	7dfb      	ldrb	r3, [r7, #23]
 8012298:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      gMCUBufG[64] = c;
 801229c:	4a53      	ldr	r2, [pc, #332]	; (80123ec <transformBlockReduce+0x5e0>)
 801229e:	7dfb      	ldrb	r3, [r7, #23]
 80122a0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      gMCUBufB[64] = c;
 80122a4:	4a52      	ldr	r2, [pc, #328]	; (80123f0 <transformBlockReduce+0x5e4>)
 80122a6:	7dfb      	ldrb	r3, [r7, #23]
 80122a8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      break;
 80122ac:	e125      	b.n	80124fa <transformBlockReduce+0x6ee>
    }
    case 2: {
      gMCUBufR[128] = c;
 80122ae:	4a4e      	ldr	r2, [pc, #312]	; (80123e8 <transformBlockReduce+0x5dc>)
 80122b0:	7dfb      	ldrb	r3, [r7, #23]
 80122b2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      gMCUBufG[128] = c;
 80122b6:	4a4d      	ldr	r2, [pc, #308]	; (80123ec <transformBlockReduce+0x5e0>)
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
 80122ba:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      gMCUBufB[128] = c;
 80122be:	4a4c      	ldr	r2, [pc, #304]	; (80123f0 <transformBlockReduce+0x5e4>)
 80122c0:	7dfb      	ldrb	r3, [r7, #23]
 80122c2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
      break;
 80122c6:	e118      	b.n	80124fa <transformBlockReduce+0x6ee>
    }
    case 3: {
      gMCUBufR[192] = c;
 80122c8:	4a47      	ldr	r2, [pc, #284]	; (80123e8 <transformBlockReduce+0x5dc>)
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
 80122cc:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      gMCUBufG[192] = c;
 80122d0:	4a46      	ldr	r2, [pc, #280]	; (80123ec <transformBlockReduce+0x5e0>)
 80122d2:	7dfb      	ldrb	r3, [r7, #23]
 80122d4:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      gMCUBufB[192] = c;
 80122d8:	4a45      	ldr	r2, [pc, #276]	; (80123f0 <transformBlockReduce+0x5e4>)
 80122da:	7dfb      	ldrb	r3, [r7, #23]
 80122dc:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      break;
 80122e0:	e10b      	b.n	80124fa <transformBlockReduce+0x6ee>
    }
    case 4: {
      cbG = ((c * 88U) >> 8U) - 44U;
 80122e2:	7dfb      	ldrb	r3, [r7, #23]
 80122e4:	2258      	movs	r2, #88	; 0x58
 80122e6:	fb02 f303 	mul.w	r3, r2, r3
 80122ea:	0a1b      	lsrs	r3, r3, #8
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	3b2c      	subs	r3, #44	; 0x2c
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	823b      	strh	r3, [r7, #16]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
 80122f4:	4b3d      	ldr	r3, [pc, #244]	; (80123ec <transformBlockReduce+0x5e0>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80122fc:	4611      	mov	r1, r2
 80122fe:	4618      	mov	r0, r3
 8012300:	f7fe ffd1 	bl	80112a6 <subAndClamp>
 8012304:	4603      	mov	r3, r0
 8012306:	461a      	mov	r2, r3
 8012308:	4b38      	ldr	r3, [pc, #224]	; (80123ec <transformBlockReduce+0x5e0>)
 801230a:	701a      	strb	r2, [r3, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
 801230c:	4b37      	ldr	r3, [pc, #220]	; (80123ec <transformBlockReduce+0x5e0>)
 801230e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012312:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012316:	4611      	mov	r1, r2
 8012318:	4618      	mov	r0, r3
 801231a:	f7fe ffc4 	bl	80112a6 <subAndClamp>
 801231e:	4603      	mov	r3, r0
 8012320:	461a      	mov	r2, r3
 8012322:	4b32      	ldr	r3, [pc, #200]	; (80123ec <transformBlockReduce+0x5e0>)
 8012324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
 8012328:	4b30      	ldr	r3, [pc, #192]	; (80123ec <transformBlockReduce+0x5e0>)
 801232a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801232e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012332:	4611      	mov	r1, r2
 8012334:	4618      	mov	r0, r3
 8012336:	f7fe ffb6 	bl	80112a6 <subAndClamp>
 801233a:	4603      	mov	r3, r0
 801233c:	461a      	mov	r2, r3
 801233e:	4b2b      	ldr	r3, [pc, #172]	; (80123ec <transformBlockReduce+0x5e0>)
 8012340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
 8012344:	4b29      	ldr	r3, [pc, #164]	; (80123ec <transformBlockReduce+0x5e0>)
 8012346:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 801234a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801234e:	4611      	mov	r1, r2
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe ffa8 	bl	80112a6 <subAndClamp>
 8012356:	4603      	mov	r3, r0
 8012358:	461a      	mov	r2, r3
 801235a:	4b24      	ldr	r3, [pc, #144]	; (80123ec <transformBlockReduce+0x5e0>)
 801235c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      cbB = (c + ((c * 198U) >> 8U)) - 227U;
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	b29a      	uxth	r2, r3
 8012364:	7dfb      	ldrb	r3, [r7, #23]
 8012366:	21c6      	movs	r1, #198	; 0xc6
 8012368:	fb01 f303 	mul.w	r3, r1, r3
 801236c:	0a1b      	lsrs	r3, r3, #8
 801236e:	b29b      	uxth	r3, r3
 8012370:	4413      	add	r3, r2
 8012372:	b29b      	uxth	r3, r3
 8012374:	3be3      	subs	r3, #227	; 0xe3
 8012376:	b29b      	uxth	r3, r3
 8012378:	81fb      	strh	r3, [r7, #14]
      gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
 801237a:	4b1d      	ldr	r3, [pc, #116]	; (80123f0 <transformBlockReduce+0x5e4>)
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012382:	4611      	mov	r1, r2
 8012384:	4618      	mov	r0, r3
 8012386:	f7fe ff69 	bl	801125c <addAndClamp>
 801238a:	4603      	mov	r3, r0
 801238c:	461a      	mov	r2, r3
 801238e:	4b18      	ldr	r3, [pc, #96]	; (80123f0 <transformBlockReduce+0x5e4>)
 8012390:	701a      	strb	r2, [r3, #0]
      gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
 8012392:	4b17      	ldr	r3, [pc, #92]	; (80123f0 <transformBlockReduce+0x5e4>)
 8012394:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012398:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801239c:	4611      	mov	r1, r2
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fe ff5c 	bl	801125c <addAndClamp>
 80123a4:	4603      	mov	r3, r0
 80123a6:	461a      	mov	r2, r3
 80123a8:	4b11      	ldr	r3, [pc, #68]	; (80123f0 <transformBlockReduce+0x5e4>)
 80123aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
 80123ae:	4b10      	ldr	r3, [pc, #64]	; (80123f0 <transformBlockReduce+0x5e4>)
 80123b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80123b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80123b8:	4611      	mov	r1, r2
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7fe ff4e 	bl	801125c <addAndClamp>
 80123c0:	4603      	mov	r3, r0
 80123c2:	461a      	mov	r2, r3
 80123c4:	4b0a      	ldr	r3, [pc, #40]	; (80123f0 <transformBlockReduce+0x5e4>)
 80123c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
 80123ca:	4b09      	ldr	r3, [pc, #36]	; (80123f0 <transformBlockReduce+0x5e4>)
 80123cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80123d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe ff40 	bl	801125c <addAndClamp>
 80123dc:	4603      	mov	r3, r0
 80123de:	461a      	mov	r2, r3
 80123e0:	4b03      	ldr	r3, [pc, #12]	; (80123f0 <transformBlockReduce+0x5e4>)
 80123e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80123e6:	e088      	b.n	80124fa <transformBlockReduce+0x6ee>
 80123e8:	200041b4 	.word	0x200041b4
 80123ec:	200042b4 	.word	0x200042b4
 80123f0:	200043b4 	.word	0x200043b4
    }
    case 5: {
      crR = (c + ((c * 103U) >> 8U)) - 179;
 80123f4:	7dfb      	ldrb	r3, [r7, #23]
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	7dfb      	ldrb	r3, [r7, #23]
 80123fa:	2167      	movs	r1, #103	; 0x67
 80123fc:	fb01 f303 	mul.w	r3, r1, r3
 8012400:	0a1b      	lsrs	r3, r3, #8
 8012402:	b29b      	uxth	r3, r3
 8012404:	4413      	add	r3, r2
 8012406:	b29b      	uxth	r3, r3
 8012408:	3bb3      	subs	r3, #179	; 0xb3
 801240a:	b29b      	uxth	r3, r3
 801240c:	82bb      	strh	r3, [r7, #20]
      gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
 801240e:	4b40      	ldr	r3, [pc, #256]	; (8012510 <transformBlockReduce+0x704>)
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8012416:	4611      	mov	r1, r2
 8012418:	4618      	mov	r0, r3
 801241a:	f7fe ff1f 	bl	801125c <addAndClamp>
 801241e:	4603      	mov	r3, r0
 8012420:	461a      	mov	r2, r3
 8012422:	4b3b      	ldr	r3, [pc, #236]	; (8012510 <transformBlockReduce+0x704>)
 8012424:	701a      	strb	r2, [r3, #0]
      gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
 8012426:	4b3a      	ldr	r3, [pc, #232]	; (8012510 <transformBlockReduce+0x704>)
 8012428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801242c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8012430:	4611      	mov	r1, r2
 8012432:	4618      	mov	r0, r3
 8012434:	f7fe ff12 	bl	801125c <addAndClamp>
 8012438:	4603      	mov	r3, r0
 801243a:	461a      	mov	r2, r3
 801243c:	4b34      	ldr	r3, [pc, #208]	; (8012510 <transformBlockReduce+0x704>)
 801243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
 8012442:	4b33      	ldr	r3, [pc, #204]	; (8012510 <transformBlockReduce+0x704>)
 8012444:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012448:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801244c:	4611      	mov	r1, r2
 801244e:	4618      	mov	r0, r3
 8012450:	f7fe ff04 	bl	801125c <addAndClamp>
 8012454:	4603      	mov	r3, r0
 8012456:	461a      	mov	r2, r3
 8012458:	4b2d      	ldr	r3, [pc, #180]	; (8012510 <transformBlockReduce+0x704>)
 801245a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
 801245e:	4b2c      	ldr	r3, [pc, #176]	; (8012510 <transformBlockReduce+0x704>)
 8012460:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8012464:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8012468:	4611      	mov	r1, r2
 801246a:	4618      	mov	r0, r3
 801246c:	f7fe fef6 	bl	801125c <addAndClamp>
 8012470:	4603      	mov	r3, r0
 8012472:	461a      	mov	r2, r3
 8012474:	4b26      	ldr	r3, [pc, #152]	; (8012510 <transformBlockReduce+0x704>)
 8012476:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      crG = ((c * 183U) >> 8U) - 91;
 801247a:	7dfb      	ldrb	r3, [r7, #23]
 801247c:	22b7      	movs	r2, #183	; 0xb7
 801247e:	fb02 f303 	mul.w	r3, r2, r3
 8012482:	0a1b      	lsrs	r3, r3, #8
 8012484:	b29b      	uxth	r3, r3
 8012486:	3b5b      	subs	r3, #91	; 0x5b
 8012488:	b29b      	uxth	r3, r3
 801248a:	827b      	strh	r3, [r7, #18]
      gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
 801248c:	4b21      	ldr	r3, [pc, #132]	; (8012514 <transformBlockReduce+0x708>)
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8012494:	4611      	mov	r1, r2
 8012496:	4618      	mov	r0, r3
 8012498:	f7fe ff05 	bl	80112a6 <subAndClamp>
 801249c:	4603      	mov	r3, r0
 801249e:	461a      	mov	r2, r3
 80124a0:	4b1c      	ldr	r3, [pc, #112]	; (8012514 <transformBlockReduce+0x708>)
 80124a2:	701a      	strb	r2, [r3, #0]
      gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
 80124a4:	4b1b      	ldr	r3, [pc, #108]	; (8012514 <transformBlockReduce+0x708>)
 80124a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80124aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80124ae:	4611      	mov	r1, r2
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fe fef8 	bl	80112a6 <subAndClamp>
 80124b6:	4603      	mov	r3, r0
 80124b8:	461a      	mov	r2, r3
 80124ba:	4b16      	ldr	r3, [pc, #88]	; (8012514 <transformBlockReduce+0x708>)
 80124bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
 80124c0:	4b14      	ldr	r3, [pc, #80]	; (8012514 <transformBlockReduce+0x708>)
 80124c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80124c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80124ca:	4611      	mov	r1, r2
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe feea 	bl	80112a6 <subAndClamp>
 80124d2:	4603      	mov	r3, r0
 80124d4:	461a      	mov	r2, r3
 80124d6:	4b0f      	ldr	r3, [pc, #60]	; (8012514 <transformBlockReduce+0x708>)
 80124d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
 80124dc:	4b0d      	ldr	r3, [pc, #52]	; (8012514 <transformBlockReduce+0x708>)
 80124de:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80124e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80124e6:	4611      	mov	r1, r2
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fe fedc 	bl	80112a6 <subAndClamp>
 80124ee:	4603      	mov	r3, r0
 80124f0:	461a      	mov	r2, r3
 80124f2:	4b08      	ldr	r3, [pc, #32]	; (8012514 <transformBlockReduce+0x708>)
 80124f4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80124f8:	bf00      	nop
    }
    }
    break;
 80124fa:	e003      	b.n	8012504 <transformBlockReduce+0x6f8>
    break;
 80124fc:	bf00      	nop
 80124fe:	e002      	b.n	8012506 <transformBlockReduce+0x6fa>
    break;
 8012500:	bf00      	nop
 8012502:	e000      	b.n	8012506 <transformBlockReduce+0x6fa>
    break;
 8012504:	bf00      	nop
  }
  }
}
 8012506:	bf00      	nop
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	200041b4 	.word	0x200041b4
 8012514:	200042b4 	.word	0x200042b4

08012518 <decodeNextMCU>:

static uint8 decodeNextMCU(void) {
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
  uint8 status;
  uint8 mcuBlock;

  if (gRestartInterval) {
 801251e:	4b9e      	ldr	r3, [pc, #632]	; (8012798 <decodeNextMCU+0x280>)
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d012      	beq.n	801254c <decodeNextMCU+0x34>
    if (gRestartsLeft == 0) {
 8012526:	4b9d      	ldr	r3, [pc, #628]	; (801279c <decodeNextMCU+0x284>)
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d108      	bne.n	8012540 <decodeNextMCU+0x28>
      status = processRestart();
 801252e:	f7fe f885 	bl	801063c <processRestart>
 8012532:	4603      	mov	r3, r0
 8012534:	747b      	strb	r3, [r7, #17]
      if (status)
 8012536:	7c7b      	ldrb	r3, [r7, #17]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d001      	beq.n	8012540 <decodeNextMCU+0x28>
        return status;
 801253c:	7c7b      	ldrb	r3, [r7, #17]
 801253e:	e18d      	b.n	801285c <decodeNextMCU+0x344>
    }
    gRestartsLeft--;
 8012540:	4b96      	ldr	r3, [pc, #600]	; (801279c <decodeNextMCU+0x284>)
 8012542:	881b      	ldrh	r3, [r3, #0]
 8012544:	3b01      	subs	r3, #1
 8012546:	b29a      	uxth	r2, r3
 8012548:	4b94      	ldr	r3, [pc, #592]	; (801279c <decodeNextMCU+0x284>)
 801254a:	801a      	strh	r2, [r3, #0]
  }

  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 801254c:	2300      	movs	r3, #0
 801254e:	75fb      	strb	r3, [r7, #23]
 8012550:	e17d      	b.n	801284e <decodeNextMCU+0x336>
    uint8 componentID = gMCUOrg[mcuBlock];
 8012552:	7dfb      	ldrb	r3, [r7, #23]
 8012554:	4a92      	ldr	r2, [pc, #584]	; (80127a0 <decodeNextMCU+0x288>)
 8012556:	5cd3      	ldrb	r3, [r2, r3]
 8012558:	743b      	strb	r3, [r7, #16]
    uint8 compQuant = gCompQuant[componentID];
 801255a:	7c3b      	ldrb	r3, [r7, #16]
 801255c:	4a91      	ldr	r2, [pc, #580]	; (80127a4 <decodeNextMCU+0x28c>)
 801255e:	5cd3      	ldrb	r3, [r2, r3]
 8012560:	73fb      	strb	r3, [r7, #15]
    uint8 compDCTab = gCompDCTab[componentID];
 8012562:	7c3b      	ldrb	r3, [r7, #16]
 8012564:	4a90      	ldr	r2, [pc, #576]	; (80127a8 <decodeNextMCU+0x290>)
 8012566:	5cd3      	ldrb	r3, [r2, r3]
 8012568:	73bb      	strb	r3, [r7, #14]
    uint8 numExtraBits, compACTab, k;
    const int16 *pQ = compQuant ? gQuant1 : gQuant0;
 801256a:	7bfb      	ldrb	r3, [r7, #15]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d001      	beq.n	8012574 <decodeNextMCU+0x5c>
 8012570:	4b8e      	ldr	r3, [pc, #568]	; (80127ac <decodeNextMCU+0x294>)
 8012572:	e000      	b.n	8012576 <decodeNextMCU+0x5e>
 8012574:	4b8e      	ldr	r3, [pc, #568]	; (80127b0 <decodeNextMCU+0x298>)
 8012576:	60bb      	str	r3, [r7, #8]
    uint16 r, dc;

    uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0,
 8012578:	7bbb      	ldrb	r3, [r7, #14]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d001      	beq.n	8012582 <decodeNextMCU+0x6a>
 801257e:	4a8d      	ldr	r2, [pc, #564]	; (80127b4 <decodeNextMCU+0x29c>)
 8012580:	e000      	b.n	8012584 <decodeNextMCU+0x6c>
 8012582:	4a8d      	ldr	r2, [pc, #564]	; (80127b8 <decodeNextMCU+0x2a0>)
 8012584:	7bbb      	ldrb	r3, [r7, #14]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d001      	beq.n	801258e <decodeNextMCU+0x76>
 801258a:	4b8c      	ldr	r3, [pc, #560]	; (80127bc <decodeNextMCU+0x2a4>)
 801258c:	e000      	b.n	8012590 <decodeNextMCU+0x78>
 801258e:	4b8c      	ldr	r3, [pc, #560]	; (80127c0 <decodeNextMCU+0x2a8>)
 8012590:	4619      	mov	r1, r3
 8012592:	4610      	mov	r0, r2
 8012594:	f7fd fb3c 	bl	800fc10 <huffDecode>
 8012598:	4603      	mov	r3, r0
 801259a:	71fb      	strb	r3, [r7, #7]
                         compDCTab ? gHuffVal1 : gHuffVal0);

    r = 0;
 801259c:	2300      	movs	r3, #0
 801259e:	82bb      	strh	r3, [r7, #20]
    numExtraBits = s & 0xF;
 80125a0:	79fb      	ldrb	r3, [r7, #7]
 80125a2:	f003 030f 	and.w	r3, r3, #15
 80125a6:	71bb      	strb	r3, [r7, #6]
    if (numExtraBits)
 80125a8:	79bb      	ldrb	r3, [r7, #6]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d005      	beq.n	80125ba <decodeNextMCU+0xa2>
      r = getBits2(numExtraBits);
 80125ae:	79bb      	ldrb	r3, [r7, #6]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fd fa04 	bl	800f9be <getBits2>
 80125b6:	4603      	mov	r3, r0
 80125b8:	82bb      	strh	r3, [r7, #20]
    dc = huffExtend(r, s);
 80125ba:	79fa      	ldrb	r2, [r7, #7]
 80125bc:	8abb      	ldrh	r3, [r7, #20]
 80125be:	4611      	mov	r1, r2
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7fd fb03 	bl	800fbcc <huffExtend>
 80125c6:	4603      	mov	r3, r0
 80125c8:	80bb      	strh	r3, [r7, #4]

    dc = dc + gLastDC[componentID];
 80125ca:	7c3b      	ldrb	r3, [r7, #16]
 80125cc:	4a7d      	ldr	r2, [pc, #500]	; (80127c4 <decodeNextMCU+0x2ac>)
 80125ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	88bb      	ldrh	r3, [r7, #4]
 80125d6:	4413      	add	r3, r2
 80125d8:	80bb      	strh	r3, [r7, #4]
    gLastDC[componentID] = dc;
 80125da:	7c3b      	ldrb	r3, [r7, #16]
 80125dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80125e0:	4a78      	ldr	r2, [pc, #480]	; (80127c4 <decodeNextMCU+0x2ac>)
 80125e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    gCoeffBuf[0] = dc * pQ[0];
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	88ba      	ldrh	r2, [r7, #4]
 80125f0:	fb12 f303 	smulbb	r3, r2, r3
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	b21a      	sxth	r2, r3
 80125f8:	4b73      	ldr	r3, [pc, #460]	; (80127c8 <decodeNextMCU+0x2b0>)
 80125fa:	801a      	strh	r2, [r3, #0]

    compACTab = gCompACTab[componentID];
 80125fc:	7c3b      	ldrb	r3, [r7, #16]
 80125fe:	4a73      	ldr	r2, [pc, #460]	; (80127cc <decodeNextMCU+0x2b4>)
 8012600:	5cd3      	ldrb	r3, [r2, r3]
 8012602:	70fb      	strb	r3, [r7, #3]

    if (gReduce) {
 8012604:	4b72      	ldr	r3, [pc, #456]	; (80127d0 <decodeNextMCU+0x2b8>)
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d053      	beq.n	80126b4 <decodeNextMCU+0x19c>

      for (k = 1; k < 64; k++) {
 801260c:	2301      	movs	r3, #1
 801260e:	75bb      	strb	r3, [r7, #22]
 8012610:	e046      	b.n	80126a0 <decodeNextMCU+0x188>
        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 8012612:	78fb      	ldrb	r3, [r7, #3]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d001      	beq.n	801261c <decodeNextMCU+0x104>
 8012618:	4a6e      	ldr	r2, [pc, #440]	; (80127d4 <decodeNextMCU+0x2bc>)
 801261a:	e000      	b.n	801261e <decodeNextMCU+0x106>
 801261c:	4a6e      	ldr	r2, [pc, #440]	; (80127d8 <decodeNextMCU+0x2c0>)
 801261e:	78fb      	ldrb	r3, [r7, #3]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d001      	beq.n	8012628 <decodeNextMCU+0x110>
 8012624:	4b6d      	ldr	r3, [pc, #436]	; (80127dc <decodeNextMCU+0x2c4>)
 8012626:	e000      	b.n	801262a <decodeNextMCU+0x112>
 8012628:	4b6d      	ldr	r3, [pc, #436]	; (80127e0 <decodeNextMCU+0x2c8>)
 801262a:	4619      	mov	r1, r3
 801262c:	4610      	mov	r0, r2
 801262e:	f7fd faef 	bl	800fc10 <huffDecode>
 8012632:	4603      	mov	r3, r0
 8012634:	71fb      	strb	r3, [r7, #7]
                       compACTab ? gHuffVal3 : gHuffVal2);

        numExtraBits = s & 0xF;
 8012636:	79fb      	ldrb	r3, [r7, #7]
 8012638:	f003 030f 	and.w	r3, r3, #15
 801263c:	71bb      	strb	r3, [r7, #6]
        if (numExtraBits)
 801263e:	79bb      	ldrb	r3, [r7, #6]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d003      	beq.n	801264c <decodeNextMCU+0x134>
          getBits2(numExtraBits);
 8012644:	79bb      	ldrb	r3, [r7, #6]
 8012646:	4618      	mov	r0, r3
 8012648:	f7fd f9b9 	bl	800f9be <getBits2>

        r = s >> 4;
 801264c:	79fb      	ldrb	r3, [r7, #7]
 801264e:	091b      	lsrs	r3, r3, #4
 8012650:	b2db      	uxtb	r3, r3
 8012652:	82bb      	strh	r3, [r7, #20]
        s &= 15;
 8012654:	79fb      	ldrb	r3, [r7, #7]
 8012656:	f003 030f 	and.w	r3, r3, #15
 801265a:	71fb      	strb	r3, [r7, #7]

        if (s) {
 801265c:	79fb      	ldrb	r3, [r7, #7]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00f      	beq.n	8012682 <decodeNextMCU+0x16a>
          if (r) {
 8012662:	8abb      	ldrh	r3, [r7, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d018      	beq.n	801269a <decodeNextMCU+0x182>
            if ((k + r) > 63)
 8012668:	7dba      	ldrb	r2, [r7, #22]
 801266a:	8abb      	ldrh	r3, [r7, #20]
 801266c:	4413      	add	r3, r2
 801266e:	2b3f      	cmp	r3, #63	; 0x3f
 8012670:	dd01      	ble.n	8012676 <decodeNextMCU+0x15e>
              return PJPG_DECODE_ERROR;
 8012672:	231c      	movs	r3, #28
 8012674:	e0f2      	b.n	801285c <decodeNextMCU+0x344>

            k = (uint8)(k + r);
 8012676:	8abb      	ldrh	r3, [r7, #20]
 8012678:	b2da      	uxtb	r2, r3
 801267a:	7dbb      	ldrb	r3, [r7, #22]
 801267c:	4413      	add	r3, r2
 801267e:	75bb      	strb	r3, [r7, #22]
 8012680:	e00b      	b.n	801269a <decodeNextMCU+0x182>
          }
        } else {
          if (r == 15) {
 8012682:	8abb      	ldrh	r3, [r7, #20]
 8012684:	2b0f      	cmp	r3, #15
 8012686:	d10f      	bne.n	80126a8 <decodeNextMCU+0x190>
            if ((k + 16) > 64)
 8012688:	7dbb      	ldrb	r3, [r7, #22]
 801268a:	3310      	adds	r3, #16
 801268c:	2b40      	cmp	r3, #64	; 0x40
 801268e:	dd01      	ble.n	8012694 <decodeNextMCU+0x17c>
              return PJPG_DECODE_ERROR;
 8012690:	231c      	movs	r3, #28
 8012692:	e0e3      	b.n	801285c <decodeNextMCU+0x344>

            k += (16 - 1);
 8012694:	7dbb      	ldrb	r3, [r7, #22]
 8012696:	330f      	adds	r3, #15
 8012698:	75bb      	strb	r3, [r7, #22]
      for (k = 1; k < 64; k++) {
 801269a:	7dbb      	ldrb	r3, [r7, #22]
 801269c:	3301      	adds	r3, #1
 801269e:	75bb      	strb	r3, [r7, #22]
 80126a0:	7dbb      	ldrb	r3, [r7, #22]
 80126a2:	2b3f      	cmp	r3, #63	; 0x3f
 80126a4:	d9b5      	bls.n	8012612 <decodeNextMCU+0xfa>
 80126a6:	e000      	b.n	80126aa <decodeNextMCU+0x192>
          } else
            break;
 80126a8:	bf00      	nop
        }
      }

      transformBlockReduce(mcuBlock);
 80126aa:	7dfb      	ldrb	r3, [r7, #23]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7ff fbad 	bl	8011e0c <transformBlockReduce>
 80126b2:	e0c9      	b.n	8012848 <decodeNextMCU+0x330>
    } else {

      for (k = 1; k < 64; k++) {
 80126b4:	2301      	movs	r3, #1
 80126b6:	75bb      	strb	r3, [r7, #22]
 80126b8:	e0ad      	b.n	8012816 <decodeNextMCU+0x2fe>
        uint16 extraBits;

        s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2,
 80126ba:	78fb      	ldrb	r3, [r7, #3]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <decodeNextMCU+0x1ac>
 80126c0:	4a44      	ldr	r2, [pc, #272]	; (80127d4 <decodeNextMCU+0x2bc>)
 80126c2:	e000      	b.n	80126c6 <decodeNextMCU+0x1ae>
 80126c4:	4a44      	ldr	r2, [pc, #272]	; (80127d8 <decodeNextMCU+0x2c0>)
 80126c6:	78fb      	ldrb	r3, [r7, #3]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d001      	beq.n	80126d0 <decodeNextMCU+0x1b8>
 80126cc:	4b43      	ldr	r3, [pc, #268]	; (80127dc <decodeNextMCU+0x2c4>)
 80126ce:	e000      	b.n	80126d2 <decodeNextMCU+0x1ba>
 80126d0:	4b43      	ldr	r3, [pc, #268]	; (80127e0 <decodeNextMCU+0x2c8>)
 80126d2:	4619      	mov	r1, r3
 80126d4:	4610      	mov	r0, r2
 80126d6:	f7fd fa9b 	bl	800fc10 <huffDecode>
 80126da:	4603      	mov	r3, r0
 80126dc:	71fb      	strb	r3, [r7, #7]
                       compACTab ? gHuffVal3 : gHuffVal2);

        extraBits = 0;
 80126de:	2300      	movs	r3, #0
 80126e0:	827b      	strh	r3, [r7, #18]
        numExtraBits = s & 0xF;
 80126e2:	79fb      	ldrb	r3, [r7, #7]
 80126e4:	f003 030f 	and.w	r3, r3, #15
 80126e8:	71bb      	strb	r3, [r7, #6]
        if (numExtraBits)
 80126ea:	79bb      	ldrb	r3, [r7, #6]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d005      	beq.n	80126fc <decodeNextMCU+0x1e4>
          extraBits = getBits2(numExtraBits);
 80126f0:	79bb      	ldrb	r3, [r7, #6]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fd f963 	bl	800f9be <getBits2>
 80126f8:	4603      	mov	r3, r0
 80126fa:	827b      	strh	r3, [r7, #18]

        r = s >> 4;
 80126fc:	79fb      	ldrb	r3, [r7, #7]
 80126fe:	091b      	lsrs	r3, r3, #4
 8012700:	b2db      	uxtb	r3, r3
 8012702:	82bb      	strh	r3, [r7, #20]
        s &= 15;
 8012704:	79fb      	ldrb	r3, [r7, #7]
 8012706:	f003 030f 	and.w	r3, r3, #15
 801270a:	71fb      	strb	r3, [r7, #7]

        if (s) {
 801270c:	79fb      	ldrb	r3, [r7, #7]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d036      	beq.n	8012780 <decodeNextMCU+0x268>
          int16 ac;

          if (r) {
 8012712:	8abb      	ldrh	r3, [r7, #20]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d017      	beq.n	8012748 <decodeNextMCU+0x230>
            if ((k + r) > 63)
 8012718:	7dba      	ldrb	r2, [r7, #22]
 801271a:	8abb      	ldrh	r3, [r7, #20]
 801271c:	4413      	add	r3, r2
 801271e:	2b3f      	cmp	r3, #63	; 0x3f
 8012720:	dd0f      	ble.n	8012742 <decodeNextMCU+0x22a>
              return PJPG_DECODE_ERROR;
 8012722:	231c      	movs	r3, #28
 8012724:	e09a      	b.n	801285c <decodeNextMCU+0x344>

            while (r) {
              gCoeffBuf[ZAG[k++]] = 0;
 8012726:	7dbb      	ldrb	r3, [r7, #22]
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	75ba      	strb	r2, [r7, #22]
 801272c:	461a      	mov	r2, r3
 801272e:	4b2d      	ldr	r3, [pc, #180]	; (80127e4 <decodeNextMCU+0x2cc>)
 8012730:	569b      	ldrsb	r3, [r3, r2]
 8012732:	461a      	mov	r2, r3
 8012734:	4b24      	ldr	r3, [pc, #144]	; (80127c8 <decodeNextMCU+0x2b0>)
 8012736:	2100      	movs	r1, #0
 8012738:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
              r--;
 801273c:	8abb      	ldrh	r3, [r7, #20]
 801273e:	3b01      	subs	r3, #1
 8012740:	82bb      	strh	r3, [r7, #20]
            while (r) {
 8012742:	8abb      	ldrh	r3, [r7, #20]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d1ee      	bne.n	8012726 <decodeNextMCU+0x20e>
            }
          }

          ac = huffExtend(extraBits, s);
 8012748:	79fa      	ldrb	r2, [r7, #7]
 801274a:	8a7b      	ldrh	r3, [r7, #18]
 801274c:	4611      	mov	r1, r2
 801274e:	4618      	mov	r0, r3
 8012750:	f7fd fa3c 	bl	800fbcc <huffExtend>
 8012754:	4603      	mov	r3, r0
 8012756:	803b      	strh	r3, [r7, #0]

          gCoeffBuf[ZAG[k]] = ac * pQ[k];
 8012758:	7dbb      	ldrb	r3, [r7, #22]
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	4413      	add	r3, r2
 8012760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012764:	b29a      	uxth	r2, r3
 8012766:	883b      	ldrh	r3, [r7, #0]
 8012768:	fb12 f303 	smulbb	r3, r2, r3
 801276c:	b299      	uxth	r1, r3
 801276e:	7dbb      	ldrb	r3, [r7, #22]
 8012770:	4a1c      	ldr	r2, [pc, #112]	; (80127e4 <decodeNextMCU+0x2cc>)
 8012772:	56d3      	ldrsb	r3, [r2, r3]
 8012774:	461a      	mov	r2, r3
 8012776:	b209      	sxth	r1, r1
 8012778:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <decodeNextMCU+0x2b0>)
 801277a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 801277e:	e047      	b.n	8012810 <decodeNextMCU+0x2f8>
        } else {
          if (r == 15) {
 8012780:	8abb      	ldrh	r3, [r7, #20]
 8012782:	2b0f      	cmp	r3, #15
 8012784:	d14c      	bne.n	8012820 <decodeNextMCU+0x308>
            if ((k + 16) > 64)
 8012786:	7dbb      	ldrb	r3, [r7, #22]
 8012788:	3310      	adds	r3, #16
 801278a:	2b40      	cmp	r3, #64	; 0x40
 801278c:	dd01      	ble.n	8012792 <decodeNextMCU+0x27a>
              return PJPG_DECODE_ERROR;
 801278e:	231c      	movs	r3, #28
 8012790:	e064      	b.n	801285c <decodeNextMCU+0x344>

            for (r = 16; r > 0; r--)
 8012792:	2310      	movs	r3, #16
 8012794:	82bb      	strh	r3, [r7, #20]
 8012796:	e035      	b.n	8012804 <decodeNextMCU+0x2ec>
 8012798:	20004a3c 	.word	0x20004a3c
 801279c:	20004a40 	.word	0x20004a40
 80127a0:	20004a5c 	.word	0x20004a5c
 80127a4:	20004a38 	.word	0x20004a38
 80127a8:	20004a48 	.word	0x20004a48
 80127ac:	20004534 	.word	0x20004534
 80127b0:	200044b4 	.word	0x200044b4
 80127b4:	2000461c 	.word	0x2000461c
 80127b8:	200045bc 	.word	0x200045bc
 80127bc:	2000466c 	.word	0x2000466c
 80127c0:	2000460c 	.word	0x2000460c
 80127c4:	200045b4 	.word	0x200045b4
 80127c8:	20004134 	.word	0x20004134
 80127cc:	20004a4c 	.word	0x20004a4c
 80127d0:	20004a6d 	.word	0x20004a6d
 80127d4:	200047cc 	.word	0x200047cc
 80127d8:	2000467c 	.word	0x2000467c
 80127dc:	2000481c 	.word	0x2000481c
 80127e0:	200046cc 	.word	0x200046cc
 80127e4:	080190ec 	.word	0x080190ec
              gCoeffBuf[ZAG[k++]] = 0;
 80127e8:	7dbb      	ldrb	r3, [r7, #22]
 80127ea:	1c5a      	adds	r2, r3, #1
 80127ec:	75ba      	strb	r2, [r7, #22]
 80127ee:	461a      	mov	r2, r3
 80127f0:	4b1c      	ldr	r3, [pc, #112]	; (8012864 <decodeNextMCU+0x34c>)
 80127f2:	569b      	ldrsb	r3, [r3, r2]
 80127f4:	461a      	mov	r2, r3
 80127f6:	4b1c      	ldr	r3, [pc, #112]	; (8012868 <decodeNextMCU+0x350>)
 80127f8:	2100      	movs	r1, #0
 80127fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (r = 16; r > 0; r--)
 80127fe:	8abb      	ldrh	r3, [r7, #20]
 8012800:	3b01      	subs	r3, #1
 8012802:	82bb      	strh	r3, [r7, #20]
 8012804:	8abb      	ldrh	r3, [r7, #20]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d1ee      	bne.n	80127e8 <decodeNextMCU+0x2d0>

            k--;
 801280a:	7dbb      	ldrb	r3, [r7, #22]
 801280c:	3b01      	subs	r3, #1
 801280e:	75bb      	strb	r3, [r7, #22]
      for (k = 1; k < 64; k++) {
 8012810:	7dbb      	ldrb	r3, [r7, #22]
 8012812:	3301      	adds	r3, #1
 8012814:	75bb      	strb	r3, [r7, #22]
 8012816:	7dbb      	ldrb	r3, [r7, #22]
 8012818:	2b3f      	cmp	r3, #63	; 0x3f
 801281a:	f67f af4e 	bls.w	80126ba <decodeNextMCU+0x1a2>
 801281e:	e00c      	b.n	801283a <decodeNextMCU+0x322>
          } else
            break;
 8012820:	bf00      	nop
        }
      }

      while (k < 64)
 8012822:	e00a      	b.n	801283a <decodeNextMCU+0x322>
        gCoeffBuf[ZAG[k++]] = 0;
 8012824:	7dbb      	ldrb	r3, [r7, #22]
 8012826:	1c5a      	adds	r2, r3, #1
 8012828:	75ba      	strb	r2, [r7, #22]
 801282a:	461a      	mov	r2, r3
 801282c:	4b0d      	ldr	r3, [pc, #52]	; (8012864 <decodeNextMCU+0x34c>)
 801282e:	569b      	ldrsb	r3, [r3, r2]
 8012830:	461a      	mov	r2, r3
 8012832:	4b0d      	ldr	r3, [pc, #52]	; (8012868 <decodeNextMCU+0x350>)
 8012834:	2100      	movs	r1, #0
 8012836:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      while (k < 64)
 801283a:	7dbb      	ldrb	r3, [r7, #22]
 801283c:	2b3f      	cmp	r3, #63	; 0x3f
 801283e:	d9f1      	bls.n	8012824 <decodeNextMCU+0x30c>

      transformBlock(mcuBlock);
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff fa08 	bl	8011c58 <transformBlock>
  for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
 8012848:	7dfb      	ldrb	r3, [r7, #23]
 801284a:	3301      	adds	r3, #1
 801284c:	75fb      	strb	r3, [r7, #23]
 801284e:	4b07      	ldr	r3, [pc, #28]	; (801286c <decodeNextMCU+0x354>)
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	7dfa      	ldrb	r2, [r7, #23]
 8012854:	429a      	cmp	r2, r3
 8012856:	f4ff ae7c 	bcc.w	8012552 <decodeNextMCU+0x3a>
    }
  }

  return 0;
 801285a:	2300      	movs	r3, #0
}
 801285c:	4618      	mov	r0, r3
 801285e:	3718      	adds	r7, #24
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	080190ec 	.word	0x080190ec
 8012868:	20004134 	.word	0x20004134
 801286c:	20004a50 	.word	0x20004a50

08012870 <pjpeg_decode_mcu>:

unsigned char pjpeg_decode_mcu(void) {
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
  uint8 status;

  if (gCallbackStatus)
 8012876:	4b16      	ldr	r3, [pc, #88]	; (80128d0 <pjpeg_decode_mcu+0x60>)
 8012878:	781b      	ldrb	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d002      	beq.n	8012884 <pjpeg_decode_mcu+0x14>
    return gCallbackStatus;
 801287e:	4b14      	ldr	r3, [pc, #80]	; (80128d0 <pjpeg_decode_mcu+0x60>)
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	e020      	b.n	80128c6 <pjpeg_decode_mcu+0x56>

  if (!gNumMCUSRemaining)
 8012884:	4b13      	ldr	r3, [pc, #76]	; (80128d4 <pjpeg_decode_mcu+0x64>)
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d101      	bne.n	8012890 <pjpeg_decode_mcu+0x20>
    return PJPG_NO_MORE_BLOCKS;
 801288c:	2301      	movs	r3, #1
 801288e:	e01a      	b.n	80128c6 <pjpeg_decode_mcu+0x56>

  status = decodeNextMCU();
 8012890:	f7ff fe42 	bl	8012518 <decodeNextMCU>
 8012894:	4603      	mov	r3, r0
 8012896:	71fb      	strb	r3, [r7, #7]
  if ((status) || (gCallbackStatus))
 8012898:	79fb      	ldrb	r3, [r7, #7]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d103      	bne.n	80128a6 <pjpeg_decode_mcu+0x36>
 801289e:	4b0c      	ldr	r3, [pc, #48]	; (80128d0 <pjpeg_decode_mcu+0x60>)
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d008      	beq.n	80128b8 <pjpeg_decode_mcu+0x48>
    return gCallbackStatus ? gCallbackStatus : status;
 80128a6:	4b0a      	ldr	r3, [pc, #40]	; (80128d0 <pjpeg_decode_mcu+0x60>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d002      	beq.n	80128b4 <pjpeg_decode_mcu+0x44>
 80128ae:	4b08      	ldr	r3, [pc, #32]	; (80128d0 <pjpeg_decode_mcu+0x60>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	e008      	b.n	80128c6 <pjpeg_decode_mcu+0x56>
 80128b4:	79fb      	ldrb	r3, [r7, #7]
 80128b6:	e006      	b.n	80128c6 <pjpeg_decode_mcu+0x56>

  gNumMCUSRemaining--;
 80128b8:	4b06      	ldr	r3, [pc, #24]	; (80128d4 <pjpeg_decode_mcu+0x64>)
 80128ba:	881b      	ldrh	r3, [r3, #0]
 80128bc:	3b01      	subs	r3, #1
 80128be:	b29a      	uxth	r2, r3
 80128c0:	4b04      	ldr	r3, [pc, #16]	; (80128d4 <pjpeg_decode_mcu+0x64>)
 80128c2:	801a      	strh	r2, [r3, #0]

  return 0;
 80128c4:	2300      	movs	r3, #0
}
 80128c6:	4618      	mov	r0, r3
 80128c8:	3708      	adds	r7, #8
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	20004a6c 	.word	0x20004a6c
 80128d4:	20004a58 	.word	0x20004a58

080128d8 <pjpeg_decode_init>:

unsigned char
pjpeg_decode_init(pjpeg_image_info_t *pInfo,
                  pjpeg_need_bytes_callback_t pNeed_bytes_callback,
                  void *pCallback_data, unsigned char reduce) {
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af00      	add	r7, sp, #0
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	60b9      	str	r1, [r7, #8]
 80128e2:	607a      	str	r2, [r7, #4]
 80128e4:	70fb      	strb	r3, [r7, #3]
  uint8 status;

  pInfo->m_width = 0;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2200      	movs	r2, #0
 80128ea:	601a      	str	r2, [r3, #0]
  pInfo->m_height = 0;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2200      	movs	r2, #0
 80128f0:	605a      	str	r2, [r3, #4]
  pInfo->m_comps = 0;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2200      	movs	r2, #0
 80128f6:	609a      	str	r2, [r3, #8]
  pInfo->m_MCUSPerRow = 0;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2200      	movs	r2, #0
 80128fc:	60da      	str	r2, [r3, #12]
  pInfo->m_MCUSPerCol = 0;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2200      	movs	r2, #0
 8012902:	611a      	str	r2, [r3, #16]
  pInfo->m_scanType = PJPG_GRAYSCALE;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2200      	movs	r2, #0
 8012908:	751a      	strb	r2, [r3, #20]
  pInfo->m_MCUWidth = 0;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2200      	movs	r2, #0
 801290e:	619a      	str	r2, [r3, #24]
  pInfo->m_MCUHeight = 0;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2200      	movs	r2, #0
 8012914:	61da      	str	r2, [r3, #28]
  pInfo->m_pMCUBufR = (unsigned char *)0;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2200      	movs	r2, #0
 801291a:	621a      	str	r2, [r3, #32]
  pInfo->m_pMCUBufG = (unsigned char *)0;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2200      	movs	r2, #0
 8012920:	625a      	str	r2, [r3, #36]	; 0x24
  pInfo->m_pMCUBufB = (unsigned char *)0;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2200      	movs	r2, #0
 8012926:	629a      	str	r2, [r3, #40]	; 0x28

  g_pNeedBytesCallback = pNeed_bytes_callback;
 8012928:	4a48      	ldr	r2, [pc, #288]	; (8012a4c <pjpeg_decode_init+0x174>)
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	6013      	str	r3, [r2, #0]
  g_pCallback_data = pCallback_data;
 801292e:	4a48      	ldr	r2, [pc, #288]	; (8012a50 <pjpeg_decode_init+0x178>)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6013      	str	r3, [r2, #0]
  gCallbackStatus = 0;
 8012934:	4b47      	ldr	r3, [pc, #284]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012936:	2200      	movs	r2, #0
 8012938:	701a      	strb	r2, [r3, #0]
  gReduce = reduce;
 801293a:	4a47      	ldr	r2, [pc, #284]	; (8012a58 <pjpeg_decode_init+0x180>)
 801293c:	78fb      	ldrb	r3, [r7, #3]
 801293e:	7013      	strb	r3, [r2, #0]

  status = init();
 8012940:	f7fd fe10 	bl	8010564 <init>
 8012944:	4603      	mov	r3, r0
 8012946:	75fb      	strb	r3, [r7, #23]
  if ((status) || (gCallbackStatus))
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d103      	bne.n	8012956 <pjpeg_decode_init+0x7e>
 801294e:	4b41      	ldr	r3, [pc, #260]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d008      	beq.n	8012968 <pjpeg_decode_init+0x90>
    return gCallbackStatus ? gCallbackStatus : status;
 8012956:	4b3f      	ldr	r3, [pc, #252]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d002      	beq.n	8012964 <pjpeg_decode_init+0x8c>
 801295e:	4b3d      	ldr	r3, [pc, #244]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	e06e      	b.n	8012a42 <pjpeg_decode_init+0x16a>
 8012964:	7dfb      	ldrb	r3, [r7, #23]
 8012966:	e06c      	b.n	8012a42 <pjpeg_decode_init+0x16a>

  status = locateSOFMarker();
 8012968:	f7fd fda0 	bl	80104ac <locateSOFMarker>
 801296c:	4603      	mov	r3, r0
 801296e:	75fb      	strb	r3, [r7, #23]
  if ((status) || (gCallbackStatus))
 8012970:	7dfb      	ldrb	r3, [r7, #23]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d103      	bne.n	801297e <pjpeg_decode_init+0xa6>
 8012976:	4b37      	ldr	r3, [pc, #220]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d008      	beq.n	8012990 <pjpeg_decode_init+0xb8>
    return gCallbackStatus ? gCallbackStatus : status;
 801297e:	4b35      	ldr	r3, [pc, #212]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d002      	beq.n	801298c <pjpeg_decode_init+0xb4>
 8012986:	4b33      	ldr	r3, [pc, #204]	; (8012a54 <pjpeg_decode_init+0x17c>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	e05a      	b.n	8012a42 <pjpeg_decode_init+0x16a>
 801298c:	7dfb      	ldrb	r3, [r7, #23]
 801298e:	e058      	b.n	8012a42 <pjpeg_decode_init+0x16a>

  status = initFrame();
 8012990:	f7fd ff78 	bl	8010884 <initFrame>
 8012994:	4603      	mov	r3, r0
 8012996:	75fb      	strb	r3, [r7, #23]
  if ((status) || (gCallbackStatus))
 8012998:	7dfb      	ldrb	r3, [r7, #23]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d103      	bne.n	80129a6 <pjpeg_decode_init+0xce>
 801299e:	4b2d      	ldr	r3, [pc, #180]	; (8012a54 <pjpeg_decode_init+0x17c>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d008      	beq.n	80129b8 <pjpeg_decode_init+0xe0>
    return gCallbackStatus ? gCallbackStatus : status;
 80129a6:	4b2b      	ldr	r3, [pc, #172]	; (8012a54 <pjpeg_decode_init+0x17c>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d002      	beq.n	80129b4 <pjpeg_decode_init+0xdc>
 80129ae:	4b29      	ldr	r3, [pc, #164]	; (8012a54 <pjpeg_decode_init+0x17c>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	e046      	b.n	8012a42 <pjpeg_decode_init+0x16a>
 80129b4:	7dfb      	ldrb	r3, [r7, #23]
 80129b6:	e044      	b.n	8012a42 <pjpeg_decode_init+0x16a>

  status = initScan();
 80129b8:	f7fd ff1c 	bl	80107f4 <initScan>
 80129bc:	4603      	mov	r3, r0
 80129be:	75fb      	strb	r3, [r7, #23]
  if ((status) || (gCallbackStatus))
 80129c0:	7dfb      	ldrb	r3, [r7, #23]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d103      	bne.n	80129ce <pjpeg_decode_init+0xf6>
 80129c6:	4b23      	ldr	r3, [pc, #140]	; (8012a54 <pjpeg_decode_init+0x17c>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d008      	beq.n	80129e0 <pjpeg_decode_init+0x108>
    return gCallbackStatus ? gCallbackStatus : status;
 80129ce:	4b21      	ldr	r3, [pc, #132]	; (8012a54 <pjpeg_decode_init+0x17c>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d002      	beq.n	80129dc <pjpeg_decode_init+0x104>
 80129d6:	4b1f      	ldr	r3, [pc, #124]	; (8012a54 <pjpeg_decode_init+0x17c>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	e032      	b.n	8012a42 <pjpeg_decode_init+0x16a>
 80129dc:	7dfb      	ldrb	r3, [r7, #23]
 80129de:	e030      	b.n	8012a42 <pjpeg_decode_init+0x16a>

  pInfo->m_width = gImageXSize;
 80129e0:	4b1e      	ldr	r3, [pc, #120]	; (8012a5c <pjpeg_decode_init+0x184>)
 80129e2:	881b      	ldrh	r3, [r3, #0]
 80129e4:	461a      	mov	r2, r3
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	601a      	str	r2, [r3, #0]
  pInfo->m_height = gImageYSize;
 80129ea:	4b1d      	ldr	r3, [pc, #116]	; (8012a60 <pjpeg_decode_init+0x188>)
 80129ec:	881b      	ldrh	r3, [r3, #0]
 80129ee:	461a      	mov	r2, r3
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	605a      	str	r2, [r3, #4]
  pInfo->m_comps = gCompsInFrame;
 80129f4:	4b1b      	ldr	r3, [pc, #108]	; (8012a64 <pjpeg_decode_init+0x18c>)
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	461a      	mov	r2, r3
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	609a      	str	r2, [r3, #8]
  pInfo->m_scanType = gScanType;
 80129fe:	4b1a      	ldr	r3, [pc, #104]	; (8012a68 <pjpeg_decode_init+0x190>)
 8012a00:	781a      	ldrb	r2, [r3, #0]
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	751a      	strb	r2, [r3, #20]
  pInfo->m_MCUSPerRow = gMaxMCUSPerRow;
 8012a06:	4b19      	ldr	r3, [pc, #100]	; (8012a6c <pjpeg_decode_init+0x194>)
 8012a08:	881b      	ldrh	r3, [r3, #0]
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	60da      	str	r2, [r3, #12]
  pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
 8012a10:	4b17      	ldr	r3, [pc, #92]	; (8012a70 <pjpeg_decode_init+0x198>)
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	461a      	mov	r2, r3
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	611a      	str	r2, [r3, #16]
  pInfo->m_MCUWidth = gMaxMCUXSize;
 8012a1a:	4b16      	ldr	r3, [pc, #88]	; (8012a74 <pjpeg_decode_init+0x19c>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	461a      	mov	r2, r3
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	619a      	str	r2, [r3, #24]
  pInfo->m_MCUHeight = gMaxMCUYSize;
 8012a24:	4b14      	ldr	r3, [pc, #80]	; (8012a78 <pjpeg_decode_init+0x1a0>)
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	461a      	mov	r2, r3
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	61da      	str	r2, [r3, #28]
  pInfo->m_pMCUBufR = gMCUBufR;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	4a12      	ldr	r2, [pc, #72]	; (8012a7c <pjpeg_decode_init+0x1a4>)
 8012a32:	621a      	str	r2, [r3, #32]
  pInfo->m_pMCUBufG = gMCUBufG;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	4a12      	ldr	r2, [pc, #72]	; (8012a80 <pjpeg_decode_init+0x1a8>)
 8012a38:	625a      	str	r2, [r3, #36]	; 0x24
  pInfo->m_pMCUBufB = gMCUBufB;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	4a11      	ldr	r2, [pc, #68]	; (8012a84 <pjpeg_decode_init+0x1ac>)
 8012a3e:	629a      	str	r2, [r3, #40]	; 0x28

  return 0;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3718      	adds	r7, #24
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	20004a64 	.word	0x20004a64
 8012a50:	20004a68 	.word	0x20004a68
 8012a54:	20004a6c 	.word	0x20004a6c
 8012a58:	20004a6d 	.word	0x20004a6d
 8012a5c:	20004a26 	.word	0x20004a26
 8012a60:	20004a28 	.word	0x20004a28
 8012a64:	20004a2a 	.word	0x20004a2a
 8012a68:	20004a4f 	.word	0x20004a4f
 8012a6c:	20004a54 	.word	0x20004a54
 8012a70:	20004a56 	.word	0x20004a56
 8012a74:	20004a51 	.word	0x20004a51
 8012a78:	20004a52 	.word	0x20004a52
 8012a7c:	200041b4 	.word	0x200041b4
 8012a80:	200042b4 	.word	0x200042b4
 8012a84:	200043b4 	.word	0x200043b4

08012a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012ac0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012a8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012a8e:	e003      	b.n	8012a98 <LoopCopyDataInit>

08012a90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012a90:	4b0c      	ldr	r3, [pc, #48]	; (8012ac4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012a92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012a94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012a96:	3104      	adds	r1, #4

08012a98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012a98:	480b      	ldr	r0, [pc, #44]	; (8012ac8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012a9a:	4b0c      	ldr	r3, [pc, #48]	; (8012acc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012a9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012a9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012aa0:	d3f6      	bcc.n	8012a90 <CopyDataInit>
  ldr  r2, =_sbss
 8012aa2:	4a0b      	ldr	r2, [pc, #44]	; (8012ad0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012aa4:	e002      	b.n	8012aac <LoopFillZerobss>

08012aa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012aa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012aa8:	f842 3b04 	str.w	r3, [r2], #4

08012aac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012aac:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012aae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012ab0:	d3f9      	bcc.n	8012aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012ab2:	f000 f9cb 	bl	8012e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012ab6:	f001 fdcd 	bl	8014654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012aba:	f7fc f8b9 	bl	800ec30 <main>
  bx  lr    
 8012abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012ac0:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8012ac4:	0801bbfc 	.word	0x0801bbfc
  ldr  r0, =_sdata
 8012ac8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012acc:	200009e0 	.word	0x200009e0
  ldr  r2, =_sbss
 8012ad0:	200009e0 	.word	0x200009e0
  ldr  r3, = _ebss
 8012ad4:	20033068 	.word	0x20033068

08012ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012ad8:	e7fe      	b.n	8012ad8 <ADC_IRQHandler>
	...

08012adc <HAL_I2C_MspInit>:
#include "camera_spi.h"
#include "main.h"
#include "stm32746g_discovery.h"
#include "stm32746g_discovery_lcd.h"
#include "stm32f7xx_hal.h"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b0ac      	sub	sp, #176	; 0xb0
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2Cx;
 8012ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ae8:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2CxCLKSOURCE_SYSCLK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8012aee:	f107 0318 	add.w	r3, r7, #24
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7f9 fcac 	bl	800c450 <HAL_RCCEx_PeriphCLKConfig>

  I2Cx_SCL_GPIO_CLK_ENABLE();
 8012af8:	4b25      	ldr	r3, [pc, #148]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012afc:	4a24      	ldr	r2, [pc, #144]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012afe:	f043 0302 	orr.w	r3, r3, #2
 8012b02:	6313      	str	r3, [r2, #48]	; 0x30
 8012b04:	4b22      	ldr	r3, [pc, #136]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b08:	f003 0302 	and.w	r3, r3, #2
 8012b0c:	617b      	str	r3, [r7, #20]
 8012b0e:	697b      	ldr	r3, [r7, #20]
  I2Cx_SDA_GPIO_CLK_ENABLE();
 8012b10:	4b1f      	ldr	r3, [pc, #124]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b14:	4a1e      	ldr	r2, [pc, #120]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b16:	f043 0302 	orr.w	r3, r3, #2
 8012b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8012b1c:	4b1c      	ldr	r3, [pc, #112]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b20:	f003 0302 	and.w	r3, r3, #2
 8012b24:	613b      	str	r3, [r7, #16]
 8012b26:	693b      	ldr	r3, [r7, #16]

  I2Cx_CLK_ENABLE();
 8012b28:	4b19      	ldr	r3, [pc, #100]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b2c:	4a18      	ldr	r2, [pc, #96]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012b32:	6413      	str	r3, [r2, #64]	; 0x40
 8012b34:	4b16      	ldr	r3, [pc, #88]	; (8012b90 <HAL_I2C_MspInit+0xb4>)
 8012b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b3c:	60fb      	str	r3, [r7, #12]
 8012b3e:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = I2Cx_SCL_PIN;
 8012b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012b48:	2312      	movs	r3, #18
 8012b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8012b54:	2302      	movs	r3, #2
 8012b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8012b5a:	2304      	movs	r3, #4
 8012b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8012b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012b64:	4619      	mov	r1, r3
 8012b66:	480b      	ldr	r0, [pc, #44]	; (8012b94 <HAL_I2C_MspInit+0xb8>)
 8012b68:	f7f7 fe8e 	bl	800a888 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8012b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = I2Cx_SCL_SDA_AF;
 8012b74:	2304      	movs	r3, #4
 8012b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8012b7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012b7e:	4619      	mov	r1, r3
 8012b80:	4804      	ldr	r0, [pc, #16]	; (8012b94 <HAL_I2C_MspInit+0xb8>)
 8012b82:	f7f7 fe81 	bl	800a888 <HAL_GPIO_Init>
}
 8012b86:	bf00      	nop
 8012b88:	37b0      	adds	r7, #176	; 0xb0
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	40023800 	.word	0x40023800
 8012b94:	40020400 	.word	0x40020400

08012b98 <HAL_SPI_MspInit>:

  HAL_GPIO_DeInit(I2Cx_SCL_GPIO_PORT, I2Cx_SCL_PIN);

  HAL_GPIO_DeInit(I2Cx_SDA_GPIO_PORT, I2Cx_SDA_PIN);
}
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b08c      	sub	sp, #48	; 0x30
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (hspi->Instance == SPIx) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	4a2e      	ldr	r2, [pc, #184]	; (8012c60 <HAL_SPI_MspInit+0xc8>)
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	d155      	bne.n	8012c56 <HAL_SPI_MspInit+0xbe>

    SPIx_SCK_GPIO_CLK_ENABLE();
 8012baa:	4b2e      	ldr	r3, [pc, #184]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bae:	4a2d      	ldr	r2, [pc, #180]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8012bb6:	4b2b      	ldr	r3, [pc, #172]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bbe:	61bb      	str	r3, [r7, #24]
 8012bc0:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8012bc2:	4b28      	ldr	r3, [pc, #160]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bc6:	4a27      	ldr	r2, [pc, #156]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bc8:	f043 0302 	orr.w	r3, r3, #2
 8012bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8012bce:	4b25      	ldr	r3, [pc, #148]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bd2:	f003 0302 	and.w	r3, r3, #2
 8012bd6:	617b      	str	r3, [r7, #20]
 8012bd8:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8012bda:	4b22      	ldr	r3, [pc, #136]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bde:	4a21      	ldr	r2, [pc, #132]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012be0:	f043 0302 	orr.w	r3, r3, #2
 8012be4:	6313      	str	r3, [r2, #48]	; 0x30
 8012be6:	4b1f      	ldr	r3, [pc, #124]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bea:	f003 0302 	and.w	r3, r3, #2
 8012bee:	613b      	str	r3, [r7, #16]
 8012bf0:	693b      	ldr	r3, [r7, #16]

    SPIx_CLK_ENABLE();
 8012bf2:	4b1c      	ldr	r3, [pc, #112]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bf6:	4a1b      	ldr	r2, [pc, #108]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8012bfe:	4b19      	ldr	r3, [pc, #100]	; (8012c64 <HAL_SPI_MspInit+0xcc>)
 8012c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c06:	60fb      	str	r3, [r7, #12]
 8012c08:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = SPIx_SCK_PIN;
 8012c0a:	2302      	movs	r3, #2
 8012c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c0e:	2302      	movs	r3, #2
 8012c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012c12:	2302      	movs	r3, #2
 8012c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8012c16:	2300      	movs	r3, #0
 8012c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8012c1a:	2305      	movs	r3, #5
 8012c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8012c1e:	f107 031c 	add.w	r3, r7, #28
 8012c22:	4619      	mov	r1, r3
 8012c24:	4810      	ldr	r0, [pc, #64]	; (8012c68 <HAL_SPI_MspInit+0xd0>)
 8012c26:	f7f7 fe2f 	bl	800a888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8012c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8012c30:	2305      	movs	r3, #5
 8012c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8012c34:	f107 031c 	add.w	r3, r7, #28
 8012c38:	4619      	mov	r1, r3
 8012c3a:	480c      	ldr	r0, [pc, #48]	; (8012c6c <HAL_SPI_MspInit+0xd4>)
 8012c3c:	f7f7 fe24 	bl	800a888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8012c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8012c46:	2305      	movs	r3, #5
 8012c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8012c4a:	f107 031c 	add.w	r3, r7, #28
 8012c4e:	4619      	mov	r1, r3
 8012c50:	4806      	ldr	r0, [pc, #24]	; (8012c6c <HAL_SPI_MspInit+0xd4>)
 8012c52:	f7f7 fe19 	bl	800a888 <HAL_GPIO_Init>
  }
}
 8012c56:	bf00      	nop
 8012c58:	3730      	adds	r7, #48	; 0x30
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	40003800 	.word	0x40003800
 8012c64:	40023800 	.word	0x40023800
 8012c68:	40022000 	.word	0x40022000
 8012c6c:	40020400 	.word	0x40020400

08012c70 <HAL_LTDC_MspInit>:
    __HAL_RCC_USART6_CLK_DISABLE();

    HAL_GPIO_DeInit(GPIOC, ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin);
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b08e      	sub	sp, #56	; 0x38
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 8012c78:	4b57      	ldr	r3, [pc, #348]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c7c:	4a56      	ldr	r2, [pc, #344]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012c82:	6453      	str	r3, [r2, #68]	; 0x44
 8012c84:	4b54      	ldr	r3, [pc, #336]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012c8c:	623b      	str	r3, [r7, #32]
 8012c8e:	6a3b      	ldr	r3, [r7, #32]

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c90:	4b51      	ldr	r3, [pc, #324]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c94:	4a50      	ldr	r2, [pc, #320]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012c96:	f043 0310 	orr.w	r3, r3, #16
 8012c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8012c9c:	4b4e      	ldr	r3, [pc, #312]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca0:	f003 0310 	and.w	r3, r3, #16
 8012ca4:	61fb      	str	r3, [r7, #28]
 8012ca6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012ca8:	4b4b      	ldr	r3, [pc, #300]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cac:	4a4a      	ldr	r2, [pc, #296]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8012cb4:	4b48      	ldr	r3, [pc, #288]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cbc:	61bb      	str	r3, [r7, #24]
 8012cbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012cc0:	4b45      	ldr	r3, [pc, #276]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc4:	4a44      	ldr	r2, [pc, #272]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cca:	6313      	str	r3, [r2, #48]	; 0x30
 8012ccc:	4b42      	ldr	r3, [pc, #264]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cd4:	617b      	str	r3, [r7, #20]
 8012cd6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012cd8:	4b3f      	ldr	r3, [pc, #252]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cdc:	4a3e      	ldr	r2, [pc, #248]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8012ce4:	4b3c      	ldr	r3, [pc, #240]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012cec:	613b      	str	r3, [r7, #16]
 8012cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8012cf0:	4b39      	ldr	r3, [pc, #228]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf4:	4a38      	ldr	r2, [pc, #224]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8012cfc:	4b36      	ldr	r3, [pc, #216]	; (8012dd8 <HAL_LTDC_MspInit+0x168>)
 8012cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d04:	60fb      	str	r3, [r7, #12]
 8012d06:	68fb      	ldr	r3, [r7, #12]

  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8012d08:	2310      	movs	r3, #16
 8012d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8012d10:	2300      	movs	r3, #0
 8012d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8012d14:	2302      	movs	r3, #2
 8012d16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8012d18:	230e      	movs	r3, #14
 8012d1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8012d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d20:	4619      	mov	r1, r3
 8012d22:	482e      	ldr	r0, [pc, #184]	; (8012ddc <HAL_LTDC_MspInit+0x16c>)
 8012d24:	f7f7 fdb0 	bl	800a888 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8012d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8012d2e:	2302      	movs	r3, #2
 8012d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8012d32:	2309      	movs	r3, #9
 8012d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8012d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	4828      	ldr	r0, [pc, #160]	; (8012de0 <HAL_LTDC_MspInit+0x170>)
 8012d3e:	f7f7 fda3 	bl	800a888 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8012d42:	f44f 4367 	mov.w	r3, #59136	; 0xe700
 8012d46:	627b      	str	r3, [r7, #36]	; 0x24
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8012d48:	2302      	movs	r3, #2
 8012d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8012d4c:	230e      	movs	r3, #14
 8012d4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8012d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d54:	4619      	mov	r1, r3
 8012d56:	4823      	ldr	r0, [pc, #140]	; (8012de4 <HAL_LTDC_MspInit+0x174>)
 8012d58:	f7f7 fd96 	bl	800a888 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin =
 8012d5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8012d60:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
      GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |
      GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8012d62:	2302      	movs	r3, #2
 8012d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8012d66:	230e      	movs	r3, #14
 8012d68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8012d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d6e:	4619      	mov	r1, r3
 8012d70:	481d      	ldr	r0, [pc, #116]	; (8012de8 <HAL_LTDC_MspInit+0x178>)
 8012d72:	f7f7 fd89 	bl	800a888 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8012d76:	23f7      	movs	r3, #247	; 0xf7
 8012d78:	627b      	str	r3, [r7, #36]	; 0x24
                            GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8012d7a:	2302      	movs	r3, #2
 8012d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8012d7e:	230e      	movs	r3, #14
 8012d80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8012d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d86:	4619      	mov	r1, r3
 8012d88:	4818      	ldr	r0, [pc, #96]	; (8012dec <HAL_LTDC_MspInit+0x17c>)
 8012d8a:	f7f7 fd7d 	bl	800a888 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8012d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8012d94:	2301      	movs	r3, #1
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8012d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	4811      	ldr	r0, [pc, #68]	; (8012de4 <HAL_LTDC_MspInit+0x174>)
 8012da0:	f7f7 fd72 	bl	800a888 <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8012da4:	2308      	movs	r3, #8
 8012da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
 8012da8:	2301      	movs	r3, #1
 8012daa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8012dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012db0:	4619      	mov	r1, r3
 8012db2:	480e      	ldr	r0, [pc, #56]	; (8012dec <HAL_LTDC_MspInit+0x17c>)
 8012db4:	f7f7 fd68 	bl	800a888 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8012db8:	2201      	movs	r2, #1
 8012dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012dbe:	4809      	ldr	r0, [pc, #36]	; (8012de4 <HAL_LTDC_MspInit+0x174>)
 8012dc0:	f7f7 ff24 	bl	800ac0c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	2108      	movs	r1, #8
 8012dc8:	4808      	ldr	r0, [pc, #32]	; (8012dec <HAL_LTDC_MspInit+0x17c>)
 8012dca:	f7f7 ff1f 	bl	800ac0c <HAL_GPIO_WritePin>
}
 8012dce:	bf00      	nop
 8012dd0:	3738      	adds	r7, #56	; 0x38
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	40023800 	.word	0x40023800
 8012ddc:	40021000 	.word	0x40021000
 8012de0:	40021800 	.word	0x40021800
 8012de4:	40022000 	.word	0x40022000
 8012de8:	40022400 	.word	0x40022400
 8012dec:	40022800 	.word	0x40022800

08012df0 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 8012df0:	b480      	push	{r7}
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	bf00      	nop
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <HardFault_Handler>:

void HardFault_Handler(void) {
 8012dfe:	b480      	push	{r7}
 8012e00:	af00      	add	r7, sp, #0

  while (1) {
 8012e02:	e7fe      	b.n	8012e02 <HardFault_Handler+0x4>

08012e04 <MemManage_Handler>:
  }
}

void MemManage_Handler(void) {
 8012e04:	b480      	push	{r7}
 8012e06:	af00      	add	r7, sp, #0

  while (1) {
 8012e08:	e7fe      	b.n	8012e08 <MemManage_Handler+0x4>

08012e0a <BusFault_Handler>:
  }
}

void BusFault_Handler(void) {
 8012e0a:	b480      	push	{r7}
 8012e0c:	af00      	add	r7, sp, #0

  while (1) {
 8012e0e:	e7fe      	b.n	8012e0e <BusFault_Handler+0x4>

08012e10 <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void) {
 8012e10:	b480      	push	{r7}
 8012e12:	af00      	add	r7, sp, #0

  while (1) {
 8012e14:	e7fe      	b.n	8012e14 <UsageFault_Handler+0x4>

08012e16 <SVC_Handler>:
  }
}

void SVC_Handler(void) {}
 8012e16:	b480      	push	{r7}
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	bf00      	nop
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8012e24:	b480      	push	{r7}
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	bf00      	nop
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <PendSV_Handler>:

void PendSV_Handler(void) {}
 8012e32:	b480      	push	{r7}
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	bf00      	nop
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr

08012e40 <SysTick_Handler>:

void SysTick_Handler(void) { HAL_IncTick(); }
 8012e40:	b580      	push	{r7, lr}
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	f7f6 fcdc 	bl	8009800 <HAL_IncTick>
 8012e48:	bf00      	nop
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <SystemInit>:
#define VECT_TAB_OFFSET 0x00
uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0,
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {
 8012e4c:	b480      	push	{r7}
 8012e4e:	af00      	add	r7, sp, #0

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8012e50:	4b15      	ldr	r3, [pc, #84]	; (8012ea8 <SystemInit+0x5c>)
 8012e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e56:	4a14      	ldr	r2, [pc, #80]	; (8012ea8 <SystemInit+0x5c>)
 8012e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CR |= (uint32_t)0x00000001;
 8012e60:	4b12      	ldr	r3, [pc, #72]	; (8012eac <SystemInit+0x60>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a11      	ldr	r2, [pc, #68]	; (8012eac <SystemInit+0x60>)
 8012e66:	f043 0301 	orr.w	r3, r3, #1
 8012e6a:	6013      	str	r3, [r2, #0]

  RCC->CFGR = 0x00000000;
 8012e6c:	4b0f      	ldr	r3, [pc, #60]	; (8012eac <SystemInit+0x60>)
 8012e6e:	2200      	movs	r2, #0
 8012e70:	609a      	str	r2, [r3, #8]

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8012e72:	4b0e      	ldr	r3, [pc, #56]	; (8012eac <SystemInit+0x60>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	490d      	ldr	r1, [pc, #52]	; (8012eac <SystemInit+0x60>)
 8012e78:	4b0d      	ldr	r3, [pc, #52]	; (8012eb0 <SystemInit+0x64>)
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	600b      	str	r3, [r1, #0]

  RCC->PLLCFGR = 0x24003010;
 8012e7e:	4b0b      	ldr	r3, [pc, #44]	; (8012eac <SystemInit+0x60>)
 8012e80:	4a0c      	ldr	r2, [pc, #48]	; (8012eb4 <SystemInit+0x68>)
 8012e82:	605a      	str	r2, [r3, #4]

  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8012e84:	4b09      	ldr	r3, [pc, #36]	; (8012eac <SystemInit+0x60>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	4a08      	ldr	r2, [pc, #32]	; (8012eac <SystemInit+0x60>)
 8012e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012e8e:	6013      	str	r3, [r2, #0]

  RCC->CIR = 0x00000000;
 8012e90:	4b06      	ldr	r3, [pc, #24]	; (8012eac <SystemInit+0x60>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	60da      	str	r2, [r3, #12]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8012e96:	4b04      	ldr	r3, [pc, #16]	; (8012ea8 <SystemInit+0x5c>)
 8012e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012e9c:	609a      	str	r2, [r3, #8]
#endif
}
 8012e9e:	bf00      	nop
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr
 8012ea8:	e000ed00 	.word	0xe000ed00
 8012eac:	40023800 	.word	0x40023800
 8012eb0:	fef6ffff 	.word	0xfef6ffff
 8012eb4:	24003010 	.word	0x24003010

08012eb8 <getInput>:
int i;
int8_t *int8ptr,*int8ptr2;
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

signed char* getInput() {
 8012eb8:	b480      	push	{r7}
 8012eba:	af00      	add	r7, sp, #0
    return &buffer0[65536];
 8012ebc:	4b04      	ldr	r3, [pc, #16]	; (8012ed0 <getInput+0x18>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	2000001c 	.word	0x2000001c

08012ed4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8012edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8012ee0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8012ee4:	f003 0301 	and.w	r3, r3, #1
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d013      	beq.n	8012f14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8012eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8012ef0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8012ef4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d00b      	beq.n	8012f14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8012efc:	e000      	b.n	8012f00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8012efe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8012f00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d0f9      	beq.n	8012efe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8012f0a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	b2d2      	uxtb	r2, r2
 8012f12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8012f14:	687b      	ldr	r3, [r7, #4]
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	370c      	adds	r7, #12
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr
	...

08012f24 <ITM_ReceiveChar>:
  \details Inputs a character via the external variable \ref ITM_RxBuffer.
  \return             Received character.
  \return         -1  No character pending.
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
  int32_t ch = -1;                           /* no character available */
 8012f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f2e:	607b      	str	r3, [r7, #4]

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 8012f30:	4b08      	ldr	r3, [pc, #32]	; (8012f54 <ITM_ReceiveChar+0x30>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4a08      	ldr	r2, [pc, #32]	; (8012f58 <ITM_ReceiveChar+0x34>)
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d005      	beq.n	8012f46 <ITM_ReceiveChar+0x22>
  {
    ch = ITM_RxBuffer;
 8012f3a:	4b06      	ldr	r3, [pc, #24]	; (8012f54 <ITM_ReceiveChar+0x30>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	607b      	str	r3, [r7, #4]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 8012f40:	4b04      	ldr	r3, [pc, #16]	; (8012f54 <ITM_ReceiveChar+0x30>)
 8012f42:	4a05      	ldr	r2, [pc, #20]	; (8012f58 <ITM_ReceiveChar+0x34>)
 8012f44:	601a      	str	r2, [r3, #0]
  }

  return (ch);
 8012f46:	687b      	ldr	r3, [r7, #4]
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	370c      	adds	r7, #12
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	20033054 	.word	0x20033054
 8012f58:	5aa55aa5 	.word	0x5aa55aa5

08012f5c <__io_putchar>:
  
#include "stm32746g_discovery.h"

volatile int32_t ITM_RxBuffer;

int __io_putchar(int ch) { return ITM_SendChar(ch); }
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff ffb4 	bl	8012ed4 <ITM_SendChar>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <__io_getchar>:

int __io_getchar(void) { return ITM_ReceiveChar(); }
 8012f76:	b580      	push	{r7, lr}
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	f7ff ffd3 	bl	8012f24 <ITM_ReceiveChar>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	4618      	mov	r0, r3
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <_write>:

extern int errno;
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

int _write(int fd, const void *buffer, unsigned int count) {
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for (i = 0; i < count; i++) {
 8012f90:	2300      	movs	r3, #0
 8012f92:	617b      	str	r3, [r7, #20]
 8012f94:	e009      	b.n	8012faa <_write+0x26>
    __io_putchar(((char *)buffer)[i]);
 8012f96:	68ba      	ldr	r2, [r7, #8]
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	4413      	add	r3, r2
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7ff ffdc 	bl	8012f5c <__io_putchar>
  for (i = 0; i < count; i++) {
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	617b      	str	r3, [r7, #20]
 8012faa:	697a      	ldr	r2, [r7, #20]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d3f1      	bcc.n	8012f96 <_write+0x12>
  }

  return count;
 8012fb2:	687b      	ldr	r3, [r7, #4]
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3718      	adds	r7, #24
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <_read>:

int _read(int fd, void *buffer, unsigned int count) {
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for (i = 0; i < count; i++) {
 8012fc8:	2300      	movs	r3, #0
 8012fca:	617b      	str	r3, [r7, #20]
 8012fcc:	e00a      	b.n	8012fe4 <_read+0x28>
    ((char *)buffer)[i] = __io_getchar();
 8012fce:	f7ff ffd2 	bl	8012f76 <__io_getchar>
 8012fd2:	4601      	mov	r1, r0
 8012fd4:	68ba      	ldr	r2, [r7, #8]
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	4413      	add	r3, r2
 8012fda:	b2ca      	uxtb	r2, r1
 8012fdc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < count; i++) {
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	617b      	str	r3, [r7, #20]
 8012fe4:	697a      	ldr	r2, [r7, #20]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d3f0      	bcc.n	8012fce <_read+0x12>
  }

  return count;
 8012fec:	687b      	ldr	r3, [r7, #4]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3718      	adds	r7, #24
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <_close>:

int _close(int fd) { return -1; }
 8012ff6:	b480      	push	{r7}
 8012ff8:	b083      	sub	sp, #12
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013002:	4618      	mov	r0, r3
 8013004:	370c      	adds	r7, #12
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr

0801300e <_fstat>:

int _fstat(int fd, void *buffer) { return -1; }
 801300e:	b480      	push	{r7}
 8013010:	b083      	sub	sp, #12
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
 8013016:	6039      	str	r1, [r7, #0]
 8013018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801301c:	4618      	mov	r0, r3
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr

08013028 <_isatty>:

int _isatty(int fd) { return -1; }
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013034:	4618      	mov	r0, r3
 8013036:	370c      	adds	r7, #12
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <_lseek>:

long _lseek(int fd, long offset, int origin) { return -1; }
 8013040:	b480      	push	{r7}
 8013042:	b085      	sub	sp, #20
 8013044:	af00      	add	r7, sp, #0
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	607a      	str	r2, [r7, #4]
 801304c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013050:	4618      	mov	r0, r3
 8013052:	3714      	adds	r7, #20
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <_exit>:

void _exit(int status) {}
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	bf00      	nop
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZdaPv>:
 8013070:	f000 b828 	b.w	80130c4 <_ZdlPv>

08013074 <_Znaj>:
 8013074:	f000 b800 	b.w	8013078 <_Znwj>

08013078 <_Znwj>:
 8013078:	b510      	push	{r4, lr}
 801307a:	2800      	cmp	r0, #0
 801307c:	bf14      	ite	ne
 801307e:	4604      	movne	r4, r0
 8013080:	2401      	moveq	r4, #1
 8013082:	4620      	mov	r0, r4
 8013084:	f001 fb0e 	bl	80146a4 <malloc>
 8013088:	b100      	cbz	r0, 801308c <_Znwj+0x14>
 801308a:	bd10      	pop	{r4, pc}
 801308c:	f000 f812 	bl	80130b4 <_ZSt15get_new_handlerv>
 8013090:	b108      	cbz	r0, 8013096 <_Znwj+0x1e>
 8013092:	4780      	blx	r0
 8013094:	e7f5      	b.n	8013082 <_Znwj+0xa>
 8013096:	2004      	movs	r0, #4
 8013098:	f000 f890 	bl	80131bc <__cxa_allocate_exception>
 801309c:	4b02      	ldr	r3, [pc, #8]	; (80130a8 <_Znwj+0x30>)
 801309e:	6003      	str	r3, [r0, #0]
 80130a0:	4a02      	ldr	r2, [pc, #8]	; (80130ac <_Znwj+0x34>)
 80130a2:	4903      	ldr	r1, [pc, #12]	; (80130b0 <_Znwj+0x38>)
 80130a4:	f000 f932 	bl	801330c <__cxa_throw>
 80130a8:	0801ac68 	.word	0x0801ac68
 80130ac:	0801323d 	.word	0x0801323d
 80130b0:	0801ac44 	.word	0x0801ac44

080130b4 <_ZSt15get_new_handlerv>:
 80130b4:	4b02      	ldr	r3, [pc, #8]	; (80130c0 <_ZSt15get_new_handlerv+0xc>)
 80130b6:	6818      	ldr	r0, [r3, #0]
 80130b8:	f3bf 8f5b 	dmb	ish
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	20032fd8 	.word	0x20032fd8

080130c4 <_ZdlPv>:
 80130c4:	f001 baf6 	b.w	80146b4 <free>

080130c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 80130c8:	b4f0      	push	{r4, r5, r6, r7}
 80130ca:	4c22      	ldr	r4, [pc, #136]	; (8013154 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>)
 80130cc:	6863      	ldr	r3, [r4, #4]
 80130ce:	f1a0 0608 	sub.w	r6, r0, #8
 80130d2:	b31b      	cbz	r3, 801311c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 80130d4:	f850 7c08 	ldr.w	r7, [r0, #-8]
 80130d8:	19f5      	adds	r5, r6, r7
 80130da:	42ab      	cmp	r3, r5
 80130dc:	d81e      	bhi.n	801311c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 80130de:	d022      	beq.n	8013126 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5e>
 80130e0:	6859      	ldr	r1, [r3, #4]
 80130e2:	2900      	cmp	r1, #0
 80130e4:	d031      	beq.n	801314a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 80130e6:	428d      	cmp	r5, r1
 80130e8:	d303      	bcc.n	80130f2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x2a>
 80130ea:	e02e      	b.n	801314a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x82>
 80130ec:	4295      	cmp	r5, r2
 80130ee:	d205      	bcs.n	80130fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 80130f0:	4611      	mov	r1, r2
 80130f2:	684a      	ldr	r2, [r1, #4]
 80130f4:	1d1c      	adds	r4, r3, #4
 80130f6:	460b      	mov	r3, r1
 80130f8:	2a00      	cmp	r2, #0
 80130fa:	d1f7      	bne.n	80130ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x24>
 80130fc:	4295      	cmp	r5, r2
 80130fe:	d01c      	beq.n	801313a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x72>
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	1899      	adds	r1, r3, r2
 8013106:	428e      	cmp	r6, r1
 8013108:	d01c      	beq.n	8013144 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	f840 3c04 	str.w	r3, [r0, #-4]
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	f840 7c08 	str.w	r7, [r0, #-8]
 8013116:	605e      	str	r6, [r3, #4]
 8013118:	bcf0      	pop	{r4, r5, r6, r7}
 801311a:	4770      	bx	lr
 801311c:	f840 3c04 	str.w	r3, [r0, #-4]
 8013120:	6066      	str	r6, [r4, #4]
 8013122:	bcf0      	pop	{r4, r5, r6, r7}
 8013124:	4770      	bx	lr
 8013126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312a:	4417      	add	r7, r2
 801312c:	f840 7c08 	str.w	r7, [r0, #-8]
 8013130:	f840 3c04 	str.w	r3, [r0, #-4]
 8013134:	6066      	str	r6, [r4, #4]
 8013136:	bcf0      	pop	{r4, r5, r6, r7}
 8013138:	4770      	bx	lr
 801313a:	e9d5 3200 	ldrd	r3, r2, [r5]
 801313e:	604a      	str	r2, [r1, #4]
 8013140:	441f      	add	r7, r3
 8013142:	e7dd      	b.n	8013100 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 8013144:	4417      	add	r7, r2
 8013146:	601f      	str	r7, [r3, #0]
 8013148:	e7eb      	b.n	8013122 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x5a>
 801314a:	460a      	mov	r2, r1
 801314c:	3404      	adds	r4, #4
 801314e:	4619      	mov	r1, r3
 8013150:	e7d4      	b.n	80130fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 8013152:	bf00      	nop
 8013154:	20032fdc 	.word	0x20032fdc

08013158 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8013158:	b430      	push	{r4, r5}
 801315a:	4c17      	ldr	r4, [pc, #92]	; (80131b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 801315c:	f100 0208 	add.w	r2, r0, #8
 8013160:	6863      	ldr	r3, [r4, #4]
 8013162:	2a08      	cmp	r2, #8
 8013164:	bf38      	it	cc
 8013166:	2208      	movcc	r2, #8
 8013168:	b303      	cbz	r3, 80131ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 801316a:	3207      	adds	r2, #7
 801316c:	6819      	ldr	r1, [r3, #0]
 801316e:	f022 0207 	bic.w	r2, r2, #7
 8013172:	428a      	cmp	r2, r1
 8013174:	d804      	bhi.n	8013180 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 8013176:	e01b      	b.n	80131b0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 8013178:	6801      	ldr	r1, [r0, #0]
 801317a:	428a      	cmp	r2, r1
 801317c:	d905      	bls.n	801318a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 801317e:	4603      	mov	r3, r0
 8013180:	6858      	ldr	r0, [r3, #4]
 8013182:	2800      	cmp	r0, #0
 8013184:	d1f8      	bne.n	8013178 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 8013186:	bc30      	pop	{r4, r5}
 8013188:	4770      	bx	lr
 801318a:	3304      	adds	r3, #4
 801318c:	1a8c      	subs	r4, r1, r2
 801318e:	2c07      	cmp	r4, #7
 8013190:	6845      	ldr	r5, [r0, #4]
 8013192:	d908      	bls.n	80131a6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4e>
 8013194:	1881      	adds	r1, r0, r2
 8013196:	604d      	str	r5, [r1, #4]
 8013198:	5084      	str	r4, [r0, r2]
 801319a:	6818      	ldr	r0, [r3, #0]
 801319c:	6002      	str	r2, [r0, #0]
 801319e:	6019      	str	r1, [r3, #0]
 80131a0:	3008      	adds	r0, #8
 80131a2:	bc30      	pop	{r4, r5}
 80131a4:	4770      	bx	lr
 80131a6:	6001      	str	r1, [r0, #0]
 80131a8:	601d      	str	r5, [r3, #0]
 80131aa:	e7f9      	b.n	80131a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 80131ac:	4618      	mov	r0, r3
 80131ae:	e7ea      	b.n	8013186 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 80131b0:	4618      	mov	r0, r3
 80131b2:	1d23      	adds	r3, r4, #4
 80131b4:	e7ea      	b.n	801318c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 80131b6:	bf00      	nop
 80131b8:	20032fdc 	.word	0x20032fdc

080131bc <__cxa_allocate_exception>:
 80131bc:	b510      	push	{r4, lr}
 80131be:	f100 0480 	add.w	r4, r0, #128	; 0x80
 80131c2:	4620      	mov	r0, r4
 80131c4:	f001 fa6e 	bl	80146a4 <malloc>
 80131c8:	b138      	cbz	r0, 80131da <__cxa_allocate_exception+0x1e>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2280      	movs	r2, #128	; 0x80
 80131ce:	2100      	movs	r1, #0
 80131d0:	4618      	mov	r0, r3
 80131d2:	f001 fce0 	bl	8014b96 <memset>
 80131d6:	3080      	adds	r0, #128	; 0x80
 80131d8:	bd10      	pop	{r4, pc}
 80131da:	4620      	mov	r0, r4
 80131dc:	f7ff ffbc 	bl	8013158 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 80131e0:	4603      	mov	r3, r0
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d1f2      	bne.n	80131cc <__cxa_allocate_exception+0x10>
 80131e6:	f000 fa09 	bl	80135fc <_ZSt9terminatev>
 80131ea:	bf00      	nop

080131ec <__cxa_free_exception>:
 80131ec:	4a06      	ldr	r2, [pc, #24]	; (8013208 <__cxa_free_exception+0x1c>)
 80131ee:	6893      	ldr	r3, [r2, #8]
 80131f0:	3880      	subs	r0, #128	; 0x80
 80131f2:	4298      	cmp	r0, r3
 80131f4:	d903      	bls.n	80131fe <__cxa_free_exception+0x12>
 80131f6:	68d2      	ldr	r2, [r2, #12]
 80131f8:	4413      	add	r3, r2
 80131fa:	4298      	cmp	r0, r3
 80131fc:	d301      	bcc.n	8013202 <__cxa_free_exception+0x16>
 80131fe:	f001 ba59 	b.w	80146b4 <free>
 8013202:	f7ff bf61 	b.w	80130c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 8013206:	bf00      	nop
 8013208:	20032fdc 	.word	0x20032fdc

0801320c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	4c08      	ldr	r4, [pc, #32]	; (8013230 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8013210:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8013214:	4628      	mov	r0, r5
 8013216:	60e5      	str	r5, [r4, #12]
 8013218:	f001 fa44 	bl	80146a4 <malloc>
 801321c:	60a0      	str	r0, [r4, #8]
 801321e:	b120      	cbz	r0, 801322a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8013220:	2300      	movs	r3, #0
 8013222:	6060      	str	r0, [r4, #4]
 8013224:	e9c0 5300 	strd	r5, r3, [r0]
 8013228:	bd38      	pop	{r3, r4, r5, pc}
 801322a:	60e0      	str	r0, [r4, #12]
 801322c:	6060      	str	r0, [r4, #4]
 801322e:	bd38      	pop	{r3, r4, r5, pc}
 8013230:	20032fdc 	.word	0x20032fdc

08013234 <_ZNKSt9bad_alloc4whatEv>:
 8013234:	4800      	ldr	r0, [pc, #0]	; (8013238 <_ZNKSt9bad_alloc4whatEv+0x4>)
 8013236:	4770      	bx	lr
 8013238:	0801ac34 	.word	0x0801ac34

0801323c <_ZNSt9bad_allocD1Ev>:
 801323c:	b510      	push	{r4, lr}
 801323e:	4b03      	ldr	r3, [pc, #12]	; (801324c <_ZNSt9bad_allocD1Ev+0x10>)
 8013240:	6003      	str	r3, [r0, #0]
 8013242:	4604      	mov	r4, r0
 8013244:	f000 fa02 	bl	801364c <_ZNSt9exceptionD1Ev>
 8013248:	4620      	mov	r0, r4
 801324a:	bd10      	pop	{r4, pc}
 801324c:	0801ac68 	.word	0x0801ac68

08013250 <_ZNSt9bad_allocD0Ev>:
 8013250:	b510      	push	{r4, lr}
 8013252:	4b05      	ldr	r3, [pc, #20]	; (8013268 <_ZNSt9bad_allocD0Ev+0x18>)
 8013254:	6003      	str	r3, [r0, #0]
 8013256:	4604      	mov	r4, r0
 8013258:	f000 f9f8 	bl	801364c <_ZNSt9exceptionD1Ev>
 801325c:	4620      	mov	r0, r4
 801325e:	2104      	movs	r1, #4
 8013260:	f000 f804 	bl	801326c <_ZdlPvj>
 8013264:	4620      	mov	r0, r4
 8013266:	bd10      	pop	{r4, pc}
 8013268:	0801ac68 	.word	0x0801ac68

0801326c <_ZdlPvj>:
 801326c:	f7ff bf2a 	b.w	80130c4 <_ZdlPv>

08013270 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8013270:	2801      	cmp	r0, #1
 8013272:	b510      	push	{r4, lr}
 8013274:	d81a      	bhi.n	80132ac <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 8013276:	f3bf 8f5b 	dmb	ish
 801327a:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 801327e:	e853 2f00 	ldrex	r2, [r3]
 8013282:	3a01      	subs	r2, #1
 8013284:	e843 2000 	strex	r0, r2, [r3]
 8013288:	2800      	cmp	r0, #0
 801328a:	d1f8      	bne.n	801327e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 801328c:	f3bf 8f5b 	dmb	ish
 8013290:	b95a      	cbnz	r2, 80132aa <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8013292:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8013296:	f101 0458 	add.w	r4, r1, #88	; 0x58
 801329a:	b10b      	cbz	r3, 80132a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 801329c:	4620      	mov	r0, r4
 801329e:	4798      	blx	r3
 80132a0:	4620      	mov	r0, r4
 80132a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132a6:	f7ff bfa1 	b.w	80131ec <__cxa_free_exception>
 80132aa:	bd10      	pop	{r4, pc}
 80132ac:	f851 0c14 	ldr.w	r0, [r1, #-20]
 80132b0:	f000 f990 	bl	80135d4 <_ZN10__cxxabiv111__terminateEPFvvE>

080132b4 <__cxa_init_primary_exception>:
 80132b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b6:	2500      	movs	r5, #0
 80132b8:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 80132bc:	f840 5c80 	str.w	r5, [r0, #-128]
 80132c0:	4604      	mov	r4, r0
 80132c2:	f000 f9bb 	bl	801363c <_ZSt14get_unexpectedv>
 80132c6:	f844 0c70 	str.w	r0, [r4, #-112]
 80132ca:	f000 f9af 	bl	801362c <_ZSt13get_terminatev>
 80132ce:	2347      	movs	r3, #71	; 0x47
 80132d0:	2243      	movs	r2, #67	; 0x43
 80132d2:	274e      	movs	r7, #78	; 0x4e
 80132d4:	2655      	movs	r6, #85	; 0x55
 80132d6:	490c      	ldr	r1, [pc, #48]	; (8013308 <__cxa_init_primary_exception+0x54>)
 80132d8:	f804 3c58 	strb.w	r3, [r4, #-88]
 80132dc:	232b      	movs	r3, #43	; 0x2b
 80132de:	f804 5c51 	strb.w	r5, [r4, #-81]
 80132e2:	f804 7c57 	strb.w	r7, [r4, #-87]
 80132e6:	f804 6c56 	strb.w	r6, [r4, #-86]
 80132ea:	f844 1c50 	str.w	r1, [r4, #-80]
 80132ee:	f804 2c55 	strb.w	r2, [r4, #-85]
 80132f2:	f804 2c54 	strb.w	r2, [r4, #-84]
 80132f6:	f804 3c53 	strb.w	r3, [r4, #-83]
 80132fa:	f804 3c52 	strb.w	r3, [r4, #-82]
 80132fe:	f844 0c6c 	str.w	r0, [r4, #-108]
 8013302:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8013306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013308:	08013271 	.word	0x08013271

0801330c <__cxa_throw>:
 801330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330e:	4605      	mov	r5, r0
 8013310:	460e      	mov	r6, r1
 8013312:	4617      	mov	r7, r2
 8013314:	f000 fb2c 	bl	8013970 <__cxa_get_globals>
 8013318:	6843      	ldr	r3, [r0, #4]
 801331a:	4604      	mov	r4, r0
 801331c:	3301      	adds	r3, #1
 801331e:	463a      	mov	r2, r7
 8013320:	4631      	mov	r1, r6
 8013322:	6063      	str	r3, [r4, #4]
 8013324:	4628      	mov	r0, r5
 8013326:	f7ff ffc5 	bl	80132b4 <__cxa_init_primary_exception>
 801332a:	4604      	mov	r4, r0
 801332c:	2301      	movs	r3, #1
 801332e:	f844 3b28 	str.w	r3, [r4], #40
 8013332:	4620      	mov	r0, r4
 8013334:	f7f5 f8c2 	bl	80084bc <_Unwind_RaiseException>
 8013338:	4620      	mov	r0, r4
 801333a:	f000 f83b 	bl	80133b4 <__cxa_begin_catch>
 801333e:	f000 f95d 	bl	80135fc <_ZSt9terminatev>
 8013342:	bf00      	nop

08013344 <__cxa_rethrow>:
 8013344:	b510      	push	{r4, lr}
 8013346:	f000 fb13 	bl	8013970 <__cxa_get_globals>
 801334a:	e9d0 4200 	ldrd	r4, r2, [r0]
 801334e:	3201      	adds	r2, #1
 8013350:	6042      	str	r2, [r0, #4]
 8013352:	b164      	cbz	r4, 801336e <__cxa_rethrow+0x2a>
 8013354:	f894 2020 	ldrb.w	r2, [r4, #32]
 8013358:	2a47      	cmp	r2, #71	; 0x47
 801335a:	d00a      	beq.n	8013372 <__cxa_rethrow+0x2e>
 801335c:	2200      	movs	r2, #0
 801335e:	6002      	str	r2, [r0, #0]
 8013360:	3420      	adds	r4, #32
 8013362:	4620      	mov	r0, r4
 8013364:	f7f5 f8ce 	bl	8008504 <_Unwind_Resume_or_Rethrow>
 8013368:	4620      	mov	r0, r4
 801336a:	f000 f823 	bl	80133b4 <__cxa_begin_catch>
 801336e:	f000 f945 	bl	80135fc <_ZSt9terminatev>
 8013372:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8013376:	2a4e      	cmp	r2, #78	; 0x4e
 8013378:	d1f0      	bne.n	801335c <__cxa_rethrow+0x18>
 801337a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801337e:	2a55      	cmp	r2, #85	; 0x55
 8013380:	d1ec      	bne.n	801335c <__cxa_rethrow+0x18>
 8013382:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8013386:	2a43      	cmp	r2, #67	; 0x43
 8013388:	d1e8      	bne.n	801335c <__cxa_rethrow+0x18>
 801338a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801338e:	2a43      	cmp	r2, #67	; 0x43
 8013390:	d1e4      	bne.n	801335c <__cxa_rethrow+0x18>
 8013392:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8013396:	2a2b      	cmp	r2, #43	; 0x2b
 8013398:	d1e0      	bne.n	801335c <__cxa_rethrow+0x18>
 801339a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801339e:	2a2b      	cmp	r2, #43	; 0x2b
 80133a0:	d1dc      	bne.n	801335c <__cxa_rethrow+0x18>
 80133a2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80133a6:	2a01      	cmp	r2, #1
 80133a8:	d8d8      	bhi.n	801335c <__cxa_rethrow+0x18>
 80133aa:	6962      	ldr	r2, [r4, #20]
 80133ac:	4252      	negs	r2, r2
 80133ae:	6162      	str	r2, [r4, #20]
 80133b0:	e7d6      	b.n	8013360 <__cxa_rethrow+0x1c>
 80133b2:	bf00      	nop

080133b4 <__cxa_begin_catch>:
 80133b4:	b538      	push	{r3, r4, r5, lr}
 80133b6:	4604      	mov	r4, r0
 80133b8:	f000 fada 	bl	8013970 <__cxa_get_globals>
 80133bc:	7822      	ldrb	r2, [r4, #0]
 80133be:	6803      	ldr	r3, [r0, #0]
 80133c0:	2a47      	cmp	r2, #71	; 0x47
 80133c2:	f1a4 0120 	sub.w	r1, r4, #32
 80133c6:	d004      	beq.n	80133d2 <__cxa_begin_catch+0x1e>
 80133c8:	bb8b      	cbnz	r3, 801342e <__cxa_begin_catch+0x7a>
 80133ca:	461c      	mov	r4, r3
 80133cc:	6001      	str	r1, [r0, #0]
 80133ce:	4620      	mov	r0, r4
 80133d0:	bd38      	pop	{r3, r4, r5, pc}
 80133d2:	7862      	ldrb	r2, [r4, #1]
 80133d4:	2a4e      	cmp	r2, #78	; 0x4e
 80133d6:	d1f7      	bne.n	80133c8 <__cxa_begin_catch+0x14>
 80133d8:	78a2      	ldrb	r2, [r4, #2]
 80133da:	2a55      	cmp	r2, #85	; 0x55
 80133dc:	d1f4      	bne.n	80133c8 <__cxa_begin_catch+0x14>
 80133de:	78e2      	ldrb	r2, [r4, #3]
 80133e0:	2a43      	cmp	r2, #67	; 0x43
 80133e2:	d1f1      	bne.n	80133c8 <__cxa_begin_catch+0x14>
 80133e4:	7922      	ldrb	r2, [r4, #4]
 80133e6:	2a43      	cmp	r2, #67	; 0x43
 80133e8:	d1ee      	bne.n	80133c8 <__cxa_begin_catch+0x14>
 80133ea:	7962      	ldrb	r2, [r4, #5]
 80133ec:	2a2b      	cmp	r2, #43	; 0x2b
 80133ee:	d1eb      	bne.n	80133c8 <__cxa_begin_catch+0x14>
 80133f0:	79a2      	ldrb	r2, [r4, #6]
 80133f2:	2a2b      	cmp	r2, #43	; 0x2b
 80133f4:	d1e8      	bne.n	80133c8 <__cxa_begin_catch+0x14>
 80133f6:	79e2      	ldrb	r2, [r4, #7]
 80133f8:	2a01      	cmp	r2, #1
 80133fa:	d8e5      	bhi.n	80133c8 <__cxa_begin_catch+0x14>
 80133fc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8013400:	2a00      	cmp	r2, #0
 8013402:	db11      	blt.n	8013428 <__cxa_begin_catch+0x74>
 8013404:	3201      	adds	r2, #1
 8013406:	6845      	ldr	r5, [r0, #4]
 8013408:	f844 2c0c 	str.w	r2, [r4, #-12]
 801340c:	428b      	cmp	r3, r1
 801340e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8013412:	6045      	str	r5, [r0, #4]
 8013414:	bf1c      	itt	ne
 8013416:	f844 3c10 	strne.w	r3, [r4, #-16]
 801341a:	6001      	strne	r1, [r0, #0]
 801341c:	4620      	mov	r0, r4
 801341e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8013420:	f7f4 fc9a 	bl	8007d58 <_Unwind_Complete>
 8013424:	4620      	mov	r0, r4
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	f1c2 0201 	rsb	r2, r2, #1
 801342c:	e7eb      	b.n	8013406 <__cxa_begin_catch+0x52>
 801342e:	f000 f8e5 	bl	80135fc <_ZSt9terminatev>
 8013432:	bf00      	nop

08013434 <__cxa_end_catch>:
 8013434:	b508      	push	{r3, lr}
 8013436:	f000 fa97 	bl	8013968 <__cxa_get_globals_fast>
 801343a:	4602      	mov	r2, r0
 801343c:	6800      	ldr	r0, [r0, #0]
 801343e:	b370      	cbz	r0, 801349e <__cxa_end_catch+0x6a>
 8013440:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013444:	2b47      	cmp	r3, #71	; 0x47
 8013446:	d006      	beq.n	8013456 <__cxa_end_catch+0x22>
 8013448:	2300      	movs	r3, #0
 801344a:	6013      	str	r3, [r2, #0]
 801344c:	3020      	adds	r0, #32
 801344e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013452:	f7f4 bc83 	b.w	8007d5c <_Unwind_DeleteException>
 8013456:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801345a:	2b4e      	cmp	r3, #78	; 0x4e
 801345c:	d1f4      	bne.n	8013448 <__cxa_end_catch+0x14>
 801345e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8013462:	2b55      	cmp	r3, #85	; 0x55
 8013464:	d1f0      	bne.n	8013448 <__cxa_end_catch+0x14>
 8013466:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801346a:	2b43      	cmp	r3, #67	; 0x43
 801346c:	d1ec      	bne.n	8013448 <__cxa_end_catch+0x14>
 801346e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013472:	2b43      	cmp	r3, #67	; 0x43
 8013474:	d1e8      	bne.n	8013448 <__cxa_end_catch+0x14>
 8013476:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801347a:	2b2b      	cmp	r3, #43	; 0x2b
 801347c:	d1e4      	bne.n	8013448 <__cxa_end_catch+0x14>
 801347e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8013482:	2b2b      	cmp	r3, #43	; 0x2b
 8013484:	d1e0      	bne.n	8013448 <__cxa_end_catch+0x14>
 8013486:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801348a:	2b01      	cmp	r3, #1
 801348c:	d8dc      	bhi.n	8013448 <__cxa_end_catch+0x14>
 801348e:	6943      	ldr	r3, [r0, #20]
 8013490:	2b00      	cmp	r3, #0
 8013492:	db05      	blt.n	80134a0 <__cxa_end_catch+0x6c>
 8013494:	3b01      	subs	r3, #1
 8013496:	2b00      	cmp	r3, #0
 8013498:	d007      	beq.n	80134aa <__cxa_end_catch+0x76>
 801349a:	db0d      	blt.n	80134b8 <__cxa_end_catch+0x84>
 801349c:	6143      	str	r3, [r0, #20]
 801349e:	bd08      	pop	{r3, pc}
 80134a0:	3301      	adds	r3, #1
 80134a2:	d1fb      	bne.n	801349c <__cxa_end_catch+0x68>
 80134a4:	6901      	ldr	r1, [r0, #16]
 80134a6:	6011      	str	r1, [r2, #0]
 80134a8:	e7f8      	b.n	801349c <__cxa_end_catch+0x68>
 80134aa:	6903      	ldr	r3, [r0, #16]
 80134ac:	6013      	str	r3, [r2, #0]
 80134ae:	3020      	adds	r0, #32
 80134b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80134b4:	f7f4 bc52 	b.w	8007d5c <_Unwind_DeleteException>
 80134b8:	f000 f8a0 	bl	80135fc <_ZSt9terminatev>

080134bc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80134bc:	b510      	push	{r4, lr}
 80134be:	4b03      	ldr	r3, [pc, #12]	; (80134cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80134c0:	6003      	str	r3, [r0, #0]
 80134c2:	4604      	mov	r4, r0
 80134c4:	f000 fdb2 	bl	801402c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80134c8:	4620      	mov	r0, r4
 80134ca:	bd10      	pop	{r4, pc}
 80134cc:	0801acb0 	.word	0x0801acb0

080134d0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80134d0:	b510      	push	{r4, lr}
 80134d2:	4b05      	ldr	r3, [pc, #20]	; (80134e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 80134d4:	6003      	str	r3, [r0, #0]
 80134d6:	4604      	mov	r4, r0
 80134d8:	f000 fda8 	bl	801402c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80134dc:	4620      	mov	r0, r4
 80134de:	210c      	movs	r1, #12
 80134e0:	f7ff fec4 	bl	801326c <_ZdlPvj>
 80134e4:	4620      	mov	r0, r4
 80134e6:	bd10      	pop	{r4, pc}
 80134e8:	0801acb0 	.word	0x0801acb0

080134ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80134ec:	b570      	push	{r4, r5, r6, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	460e      	mov	r6, r1
 80134f2:	9c06      	ldr	r4, [sp, #24]
 80134f4:	4294      	cmp	r4, r2
 80134f6:	4605      	mov	r5, r0
 80134f8:	d009      	beq.n	801350e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80134fa:	68a8      	ldr	r0, [r5, #8]
 80134fc:	6805      	ldr	r5, [r0, #0]
 80134fe:	9406      	str	r4, [sp, #24]
 8013500:	6a2c      	ldr	r4, [r5, #32]
 8013502:	4631      	mov	r1, r6
 8013504:	46a4      	mov	ip, r4
 8013506:	b002      	add	sp, #8
 8013508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801350c:	4760      	bx	ip
 801350e:	4619      	mov	r1, r3
 8013510:	9201      	str	r2, [sp, #4]
 8013512:	9300      	str	r3, [sp, #0]
 8013514:	f000 f8ae 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 8013518:	e9dd 3200 	ldrd	r3, r2, [sp]
 801351c:	2800      	cmp	r0, #0
 801351e:	d0ec      	beq.n	80134fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8013520:	2006      	movs	r0, #6
 8013522:	b002      	add	sp, #8
 8013524:	bd70      	pop	{r4, r5, r6, pc}
 8013526:	bf00      	nop

08013528 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8013528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352c:	460e      	mov	r6, r1
 801352e:	b081      	sub	sp, #4
 8013530:	4619      	mov	r1, r3
 8013532:	461f      	mov	r7, r3
 8013534:	4691      	mov	r9, r2
 8013536:	4683      	mov	fp, r0
 8013538:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 801353c:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 8013540:	f000 f898 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 8013544:	b170      	cbz	r0, 8013564 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8013546:	2e00      	cmp	r6, #0
 8013548:	602c      	str	r4, [r5, #0]
 801354a:	f885 9004 	strb.w	r9, [r5, #4]
 801354e:	db1d      	blt.n	801358c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8013550:	4434      	add	r4, r6
 8013552:	45a0      	cmp	r8, r4
 8013554:	bf0c      	ite	eq
 8013556:	2406      	moveq	r4, #6
 8013558:	2401      	movne	r4, #1
 801355a:	71ac      	strb	r4, [r5, #6]
 801355c:	2000      	movs	r0, #0
 801355e:	b001      	add	sp, #4
 8013560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013564:	4544      	cmp	r4, r8
 8013566:	d016      	beq.n	8013596 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6e>
 8013568:	f8db 0008 	ldr.w	r0, [fp, #8]
 801356c:	f8d0 c000 	ldr.w	ip, [r0]
 8013570:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 8013574:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8013578:	f8dc 401c 	ldr.w	r4, [ip, #28]
 801357c:	463b      	mov	r3, r7
 801357e:	464a      	mov	r2, r9
 8013580:	4631      	mov	r1, r6
 8013582:	46a4      	mov	ip, r4
 8013584:	b001      	add	sp, #4
 8013586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358a:	4760      	bx	ip
 801358c:	3602      	adds	r6, #2
 801358e:	d1e5      	bne.n	801355c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8013590:	2301      	movs	r3, #1
 8013592:	71ab      	strb	r3, [r5, #6]
 8013594:	e7e2      	b.n	801355c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8013596:	4651      	mov	r1, sl
 8013598:	4658      	mov	r0, fp
 801359a:	f000 f86b 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 801359e:	2800      	cmp	r0, #0
 80135a0:	d0e2      	beq.n	8013568 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 80135a2:	f885 9005 	strb.w	r9, [r5, #5]
 80135a6:	e7d9      	b.n	801355c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

080135a8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80135a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ac:	4607      	mov	r7, r0
 80135ae:	460c      	mov	r4, r1
 80135b0:	4615      	mov	r5, r2
 80135b2:	461e      	mov	r6, r3
 80135b4:	f000 fd74 	bl	80140a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80135b8:	b108      	cbz	r0, 80135be <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 80135ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135be:	68b8      	ldr	r0, [r7, #8]
 80135c0:	6807      	ldr	r7, [r0, #0]
 80135c2:	4621      	mov	r1, r4
 80135c4:	69bc      	ldr	r4, [r7, #24]
 80135c6:	4633      	mov	r3, r6
 80135c8:	462a      	mov	r2, r5
 80135ca:	46a4      	mov	ip, r4
 80135cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135d0:	4760      	bx	ip
 80135d2:	bf00      	nop

080135d4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80135d4:	b508      	push	{r3, lr}
 80135d6:	4780      	blx	r0
 80135d8:	f000 fe1a 	bl	8014210 <abort>
 80135dc:	f7ff feea 	bl	80133b4 <__cxa_begin_catch>
 80135e0:	f000 fe16 	bl	8014210 <abort>
 80135e4:	460d      	mov	r5, r1
 80135e6:	4604      	mov	r4, r0
 80135e8:	f7ff ff24 	bl	8013434 <__cxa_end_catch>
 80135ec:	3501      	adds	r5, #1
 80135ee:	d001      	beq.n	80135f4 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 80135f0:	f000 f8f2 	bl	80137d8 <__cxa_end_cleanup>
 80135f4:	4620      	mov	r0, r4
 80135f6:	f000 f881 	bl	80136fc <__cxa_call_unexpected>
 80135fa:	bf00      	nop

080135fc <_ZSt9terminatev>:
 80135fc:	b508      	push	{r3, lr}
 80135fe:	4b03      	ldr	r3, [pc, #12]	; (801360c <_ZSt9terminatev+0x10>)
 8013600:	6818      	ldr	r0, [r3, #0]
 8013602:	f3bf 8f5b 	dmb	ish
 8013606:	f7ff ffe5 	bl	80135d4 <_ZN10__cxxabiv111__terminateEPFvvE>
 801360a:	bf00      	nop
 801360c:	2000002c 	.word	0x2000002c

08013610 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8013610:	b508      	push	{r3, lr}
 8013612:	4780      	blx	r0
 8013614:	f7ff fff2 	bl	80135fc <_ZSt9terminatev>

08013618 <_ZSt10unexpectedv>:
 8013618:	b508      	push	{r3, lr}
 801361a:	4b03      	ldr	r3, [pc, #12]	; (8013628 <_ZSt10unexpectedv+0x10>)
 801361c:	6818      	ldr	r0, [r3, #0]
 801361e:	f3bf 8f5b 	dmb	ish
 8013622:	f7ff fff5 	bl	8013610 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8013626:	bf00      	nop
 8013628:	20000028 	.word	0x20000028

0801362c <_ZSt13get_terminatev>:
 801362c:	4b02      	ldr	r3, [pc, #8]	; (8013638 <_ZSt13get_terminatev+0xc>)
 801362e:	6818      	ldr	r0, [r3, #0]
 8013630:	f3bf 8f5b 	dmb	ish
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop
 8013638:	2000002c 	.word	0x2000002c

0801363c <_ZSt14get_unexpectedv>:
 801363c:	4b02      	ldr	r3, [pc, #8]	; (8013648 <_ZSt14get_unexpectedv+0xc>)
 801363e:	6818      	ldr	r0, [r3, #0]
 8013640:	f3bf 8f5b 	dmb	ish
 8013644:	4770      	bx	lr
 8013646:	bf00      	nop
 8013648:	20000028 	.word	0x20000028

0801364c <_ZNSt9exceptionD1Ev>:
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop

08013650 <_ZNSt13bad_exceptionD1Ev>:
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop

08013654 <_ZGTtNKSt13bad_exception4whatEv>:
 8013654:	4800      	ldr	r0, [pc, #0]	; (8013658 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 8013656:	4770      	bx	lr
 8013658:	0801acd4 	.word	0x0801acd4

0801365c <_ZNSt13bad_exceptionD0Ev>:
 801365c:	b510      	push	{r4, lr}
 801365e:	2104      	movs	r1, #4
 8013660:	4604      	mov	r4, r0
 8013662:	f7ff fe03 	bl	801326c <_ZdlPvj>
 8013666:	4620      	mov	r0, r4
 8013668:	bd10      	pop	{r4, pc}
 801366a:	bf00      	nop

0801366c <_ZNSt9type_infoD1Ev>:
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop

08013670 <_ZNKSt9type_info14__is_pointer_pEv>:
 8013670:	2000      	movs	r0, #0
 8013672:	4770      	bx	lr

08013674 <_ZNKSt9type_infoeqERKS_>:
 8013674:	4281      	cmp	r1, r0
 8013676:	d00f      	beq.n	8013698 <_ZNKSt9type_infoeqERKS_+0x24>
 8013678:	b508      	push	{r3, lr}
 801367a:	6840      	ldr	r0, [r0, #4]
 801367c:	7803      	ldrb	r3, [r0, #0]
 801367e:	2b2a      	cmp	r3, #42	; 0x2a
 8013680:	d00c      	beq.n	801369c <_ZNKSt9type_infoeqERKS_+0x28>
 8013682:	6849      	ldr	r1, [r1, #4]
 8013684:	780b      	ldrb	r3, [r1, #0]
 8013686:	2b2a      	cmp	r3, #42	; 0x2a
 8013688:	bf08      	it	eq
 801368a:	3101      	addeq	r1, #1
 801368c:	f7f3 fb80 	bl	8006d90 <strcmp>
 8013690:	fab0 f080 	clz	r0, r0
 8013694:	0940      	lsrs	r0, r0, #5
 8013696:	bd08      	pop	{r3, pc}
 8013698:	2001      	movs	r0, #1
 801369a:	4770      	bx	lr
 801369c:	2000      	movs	r0, #0
 801369e:	bd08      	pop	{r3, pc}

080136a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80136a0:	7803      	ldrb	r3, [r0, #0]
 80136a2:	2b47      	cmp	r3, #71	; 0x47
 80136a4:	d001      	beq.n	80136aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 80136a6:	2000      	movs	r0, #0
 80136a8:	4770      	bx	lr
 80136aa:	7843      	ldrb	r3, [r0, #1]
 80136ac:	2b4e      	cmp	r3, #78	; 0x4e
 80136ae:	d1fa      	bne.n	80136a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80136b0:	7883      	ldrb	r3, [r0, #2]
 80136b2:	2b55      	cmp	r3, #85	; 0x55
 80136b4:	d1f7      	bne.n	80136a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80136b6:	78c3      	ldrb	r3, [r0, #3]
 80136b8:	2b43      	cmp	r3, #67	; 0x43
 80136ba:	d1f4      	bne.n	80136a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80136bc:	7903      	ldrb	r3, [r0, #4]
 80136be:	2b43      	cmp	r3, #67	; 0x43
 80136c0:	d1f1      	bne.n	80136a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80136c2:	7943      	ldrb	r3, [r0, #5]
 80136c4:	2b2b      	cmp	r3, #43	; 0x2b
 80136c6:	d1ee      	bne.n	80136a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80136c8:	7983      	ldrb	r3, [r0, #6]
 80136ca:	2b2b      	cmp	r3, #43	; 0x2b
 80136cc:	d1eb      	bne.n	80136a6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80136ce:	79c0      	ldrb	r0, [r0, #7]
 80136d0:	2801      	cmp	r0, #1
 80136d2:	bf8c      	ite	hi
 80136d4:	2000      	movhi	r0, #0
 80136d6:	2001      	movls	r0, #1
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop

080136dc <__cxa_call_terminate>:
 80136dc:	b510      	push	{r4, lr}
 80136de:	b130      	cbz	r0, 80136ee <__cxa_call_terminate+0x12>
 80136e0:	4604      	mov	r4, r0
 80136e2:	f7ff fe67 	bl	80133b4 <__cxa_begin_catch>
 80136e6:	4620      	mov	r0, r4
 80136e8:	f7ff ffda 	bl	80136a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80136ec:	b908      	cbnz	r0, 80136f2 <__cxa_call_terminate+0x16>
 80136ee:	f7ff ff85 	bl	80135fc <_ZSt9terminatev>
 80136f2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80136f6:	f7ff ff6d 	bl	80135d4 <_ZN10__cxxabiv111__terminateEPFvvE>
 80136fa:	bf00      	nop

080136fc <__cxa_call_unexpected>:
 80136fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	b085      	sub	sp, #20
 8013702:	4602      	mov	r2, r0
 8013704:	f7ff ffcc 	bl	80136a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013708:	b150      	cbz	r0, 8013720 <__cxa_call_unexpected+0x24>
 801370a:	e952 8506 	ldrd	r8, r5, [r2, #-24]
 801370e:	4610      	mov	r0, r2
 8013710:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8013712:	e9d2 740c 	ldrd	r7, r4, [r2, #48]	; 0x30
 8013716:	f7ff fe4d 	bl	80133b4 <__cxa_begin_catch>
 801371a:	4640      	mov	r0, r8
 801371c:	f7ff ff78 	bl	8013610 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8013720:	4610      	mov	r0, r2
 8013722:	f7ff fe47 	bl	80133b4 <__cxa_begin_catch>
 8013726:	f7ff ff77 	bl	8013618 <_ZSt10unexpectedv>
 801372a:	f7ff fe43 	bl	80133b4 <__cxa_begin_catch>
 801372e:	f7ff ff65 	bl	80135fc <_ZSt9terminatev>
 8013732:	f7ff fe3f 	bl	80133b4 <__cxa_begin_catch>
 8013736:	f000 f917 	bl	8013968 <__cxa_get_globals_fast>
 801373a:	6803      	ldr	r3, [r0, #0]
 801373c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013740:	f10d 0a10 	add.w	sl, sp, #16
 8013744:	2a01      	cmp	r2, #1
 8013746:	bf0c      	ite	eq
 8013748:	681a      	ldreq	r2, [r3, #0]
 801374a:	f103 0278 	addne.w	r2, r3, #120	; 0x78
 801374e:	f04f 0800 	mov.w	r8, #0
 8013752:	3320      	adds	r3, #32
 8013754:	f84a 2d08 	str.w	r2, [sl, #-8]!
 8013758:	f027 0b03 	bic.w	fp, r7, #3
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	46c1      	mov	r9, r8
 8013760:	45b1      	cmp	r9, r6
 8013762:	da1b      	bge.n	801379c <__cxa_call_unexpected+0xa0>
 8013764:	6827      	ldr	r7, [r4, #0]
 8013766:	b107      	cbz	r7, 801376a <__cxa_call_unexpected+0x6e>
 8013768:	4427      	add	r7, r4
 801376a:	4653      	mov	r3, sl
 801376c:	2200      	movs	r2, #0
 801376e:	4639      	mov	r1, r7
 8013770:	9801      	ldr	r0, [sp, #4]
 8013772:	f000 f837 	bl	80137e4 <__cxa_type_match>
 8013776:	b9e8      	cbnz	r0, 80137b4 <__cxa_call_unexpected+0xb8>
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	4914      	ldr	r1, [pc, #80]	; (80137cc <__cxa_call_unexpected+0xd0>)
 801377c:	691b      	ldr	r3, [r3, #16]
 801377e:	9300      	str	r3, [sp, #0]
 8013780:	aa04      	add	r2, sp, #16
 8013782:	2301      	movs	r3, #1
 8013784:	f842 0d04 	str.w	r0, [r2, #-4]!
 8013788:	4638      	mov	r0, r7
 801378a:	9f00      	ldr	r7, [sp, #0]
 801378c:	47b8      	blx	r7
 801378e:	2800      	cmp	r0, #0
 8013790:	bf18      	it	ne
 8013792:	4680      	movne	r8, r0
 8013794:	f109 0901 	add.w	r9, r9, #1
 8013798:	445c      	add	r4, fp
 801379a:	e7e1      	b.n	8013760 <__cxa_call_unexpected+0x64>
 801379c:	f1b8 0f00 	cmp.w	r8, #0
 80137a0:	d010      	beq.n	80137c4 <__cxa_call_unexpected+0xc8>
 80137a2:	2004      	movs	r0, #4
 80137a4:	f7ff fd0a 	bl	80131bc <__cxa_allocate_exception>
 80137a8:	4b09      	ldr	r3, [pc, #36]	; (80137d0 <__cxa_call_unexpected+0xd4>)
 80137aa:	6003      	str	r3, [r0, #0]
 80137ac:	4a09      	ldr	r2, [pc, #36]	; (80137d4 <__cxa_call_unexpected+0xd8>)
 80137ae:	4907      	ldr	r1, [pc, #28]	; (80137cc <__cxa_call_unexpected+0xd0>)
 80137b0:	f7ff fdac 	bl	801330c <__cxa_throw>
 80137b4:	f7ff fdc6 	bl	8013344 <__cxa_rethrow>
 80137b8:	f7ff fe3c 	bl	8013434 <__cxa_end_catch>
 80137bc:	f7ff fe3a 	bl	8013434 <__cxa_end_catch>
 80137c0:	f000 f80a 	bl	80137d8 <__cxa_end_cleanup>
 80137c4:	4628      	mov	r0, r5
 80137c6:	f7ff ff05 	bl	80135d4 <_ZN10__cxxabiv111__terminateEPFvvE>
 80137ca:	bf00      	nop
 80137cc:	0801acf8 	.word	0x0801acf8
 80137d0:	0801ad7c 	.word	0x0801ad7c
 80137d4:	08013651 	.word	0x08013651

080137d8 <__cxa_end_cleanup>:
 80137d8:	b41e      	push	{r1, r2, r3, r4}
 80137da:	f000 f88d 	bl	80138f8 <__gnu_end_cleanup>
 80137de:	bc1e      	pop	{r1, r2, r3, r4}
 80137e0:	f7f4 fe7e 	bl	80084e0 <_Unwind_Resume>

080137e4 <__cxa_type_match>:
 80137e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137e6:	7802      	ldrb	r2, [r0, #0]
 80137e8:	2a47      	cmp	r2, #71	; 0x47
 80137ea:	b083      	sub	sp, #12
 80137ec:	460d      	mov	r5, r1
 80137ee:	461f      	mov	r7, r3
 80137f0:	d01e      	beq.n	8013830 <__cxa_type_match+0x4c>
 80137f2:	2300      	movs	r3, #0
 80137f4:	4c25      	ldr	r4, [pc, #148]	; (801388c <__cxa_type_match+0xa8>)
 80137f6:	9301      	str	r3, [sp, #4]
 80137f8:	6823      	ldr	r3, [r4, #0]
 80137fa:	4620      	mov	r0, r4
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	4798      	blx	r3
 8013800:	b180      	cbz	r0, 8013824 <__cxa_type_match+0x40>
 8013802:	9b01      	ldr	r3, [sp, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	9301      	str	r3, [sp, #4]
 8013808:	2602      	movs	r6, #2
 801380a:	682b      	ldr	r3, [r5, #0]
 801380c:	4621      	mov	r1, r4
 801380e:	4628      	mov	r0, r5
 8013810:	691c      	ldr	r4, [r3, #16]
 8013812:	aa01      	add	r2, sp, #4
 8013814:	2301      	movs	r3, #1
 8013816:	47a0      	blx	r4
 8013818:	b130      	cbz	r0, 8013828 <__cxa_type_match+0x44>
 801381a:	9b01      	ldr	r3, [sp, #4]
 801381c:	603b      	str	r3, [r7, #0]
 801381e:	4630      	mov	r0, r6
 8013820:	b003      	add	sp, #12
 8013822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013824:	2601      	movs	r6, #1
 8013826:	e7f0      	b.n	801380a <__cxa_type_match+0x26>
 8013828:	4606      	mov	r6, r0
 801382a:	4630      	mov	r0, r6
 801382c:	b003      	add	sp, #12
 801382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013830:	7843      	ldrb	r3, [r0, #1]
 8013832:	2b4e      	cmp	r3, #78	; 0x4e
 8013834:	d1dd      	bne.n	80137f2 <__cxa_type_match+0xe>
 8013836:	7883      	ldrb	r3, [r0, #2]
 8013838:	2b55      	cmp	r3, #85	; 0x55
 801383a:	d1da      	bne.n	80137f2 <__cxa_type_match+0xe>
 801383c:	78c3      	ldrb	r3, [r0, #3]
 801383e:	2b43      	cmp	r3, #67	; 0x43
 8013840:	d1d7      	bne.n	80137f2 <__cxa_type_match+0xe>
 8013842:	7903      	ldrb	r3, [r0, #4]
 8013844:	2b46      	cmp	r3, #70	; 0x46
 8013846:	d015      	beq.n	8013874 <__cxa_type_match+0x90>
 8013848:	7903      	ldrb	r3, [r0, #4]
 801384a:	2b43      	cmp	r3, #67	; 0x43
 801384c:	d1d1      	bne.n	80137f2 <__cxa_type_match+0xe>
 801384e:	7943      	ldrb	r3, [r0, #5]
 8013850:	2b2b      	cmp	r3, #43	; 0x2b
 8013852:	d1ce      	bne.n	80137f2 <__cxa_type_match+0xe>
 8013854:	7983      	ldrb	r3, [r0, #6]
 8013856:	2b2b      	cmp	r3, #43	; 0x2b
 8013858:	d1cb      	bne.n	80137f2 <__cxa_type_match+0xe>
 801385a:	79c3      	ldrb	r3, [r0, #7]
 801385c:	2b01      	cmp	r3, #1
 801385e:	d8c8      	bhi.n	80137f2 <__cxa_type_match+0xe>
 8013860:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8013864:	d002      	beq.n	801386c <__cxa_type_match+0x88>
 8013866:	3058      	adds	r0, #88	; 0x58
 8013868:	9001      	str	r0, [sp, #4]
 801386a:	e7c5      	b.n	80137f8 <__cxa_type_match+0x14>
 801386c:	4620      	mov	r0, r4
 801386e:	f854 4c78 	ldr.w	r4, [r4, #-120]
 8013872:	e7f9      	b.n	8013868 <__cxa_type_match+0x84>
 8013874:	7943      	ldrb	r3, [r0, #5]
 8013876:	2b4f      	cmp	r3, #79	; 0x4f
 8013878:	d1e6      	bne.n	8013848 <__cxa_type_match+0x64>
 801387a:	7983      	ldrb	r3, [r0, #6]
 801387c:	2b52      	cmp	r3, #82	; 0x52
 801387e:	d1e3      	bne.n	8013848 <__cxa_type_match+0x64>
 8013880:	79c3      	ldrb	r3, [r0, #7]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1e0      	bne.n	8013848 <__cxa_type_match+0x64>
 8013886:	9301      	str	r3, [sp, #4]
 8013888:	4c01      	ldr	r4, [pc, #4]	; (8013890 <__cxa_type_match+0xac>)
 801388a:	e7b5      	b.n	80137f8 <__cxa_type_match+0x14>
 801388c:	0801acf0 	.word	0x0801acf0
 8013890:	0801ace8 	.word	0x0801ace8

08013894 <__cxa_begin_cleanup>:
 8013894:	b510      	push	{r4, lr}
 8013896:	4604      	mov	r4, r0
 8013898:	f000 f86a 	bl	8013970 <__cxa_get_globals>
 801389c:	7823      	ldrb	r3, [r4, #0]
 801389e:	2b47      	cmp	r3, #71	; 0x47
 80138a0:	f1a4 0220 	sub.w	r2, r4, #32
 80138a4:	d004      	beq.n	80138b0 <__cxa_begin_cleanup+0x1c>
 80138a6:	6883      	ldr	r3, [r0, #8]
 80138a8:	bb23      	cbnz	r3, 80138f4 <__cxa_begin_cleanup+0x60>
 80138aa:	6082      	str	r2, [r0, #8]
 80138ac:	2001      	movs	r0, #1
 80138ae:	bd10      	pop	{r4, pc}
 80138b0:	7863      	ldrb	r3, [r4, #1]
 80138b2:	2b4e      	cmp	r3, #78	; 0x4e
 80138b4:	d1f7      	bne.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138b6:	78a3      	ldrb	r3, [r4, #2]
 80138b8:	2b55      	cmp	r3, #85	; 0x55
 80138ba:	d1f4      	bne.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138bc:	78e3      	ldrb	r3, [r4, #3]
 80138be:	2b43      	cmp	r3, #67	; 0x43
 80138c0:	d1f1      	bne.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138c2:	7923      	ldrb	r3, [r4, #4]
 80138c4:	2b43      	cmp	r3, #67	; 0x43
 80138c6:	d1ee      	bne.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138c8:	7963      	ldrb	r3, [r4, #5]
 80138ca:	2b2b      	cmp	r3, #43	; 0x2b
 80138cc:	d1eb      	bne.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138ce:	79a3      	ldrb	r3, [r4, #6]
 80138d0:	2b2b      	cmp	r3, #43	; 0x2b
 80138d2:	d1e8      	bne.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138d4:	79e3      	ldrb	r3, [r4, #7]
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	d8e5      	bhi.n	80138a6 <__cxa_begin_cleanup+0x12>
 80138da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80138de:	3301      	adds	r3, #1
 80138e0:	2b01      	cmp	r3, #1
 80138e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80138e6:	d1e1      	bne.n	80138ac <__cxa_begin_cleanup+0x18>
 80138e8:	6883      	ldr	r3, [r0, #8]
 80138ea:	f844 3c08 	str.w	r3, [r4, #-8]
 80138ee:	6082      	str	r2, [r0, #8]
 80138f0:	2001      	movs	r0, #1
 80138f2:	bd10      	pop	{r4, pc}
 80138f4:	f7ff fe82 	bl	80135fc <_ZSt9terminatev>

080138f8 <__gnu_end_cleanup>:
 80138f8:	b508      	push	{r3, lr}
 80138fa:	f000 f839 	bl	8013970 <__cxa_get_globals>
 80138fe:	6883      	ldr	r3, [r0, #8]
 8013900:	b383      	cbz	r3, 8013964 <__gnu_end_cleanup+0x6c>
 8013902:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013906:	2a47      	cmp	r2, #71	; 0x47
 8013908:	d004      	beq.n	8013914 <__gnu_end_cleanup+0x1c>
 801390a:	2200      	movs	r2, #0
 801390c:	6082      	str	r2, [r0, #8]
 801390e:	f103 0020 	add.w	r0, r3, #32
 8013912:	bd08      	pop	{r3, pc}
 8013914:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8013918:	2a4e      	cmp	r2, #78	; 0x4e
 801391a:	d1f6      	bne.n	801390a <__gnu_end_cleanup+0x12>
 801391c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013920:	2a55      	cmp	r2, #85	; 0x55
 8013922:	d1f2      	bne.n	801390a <__gnu_end_cleanup+0x12>
 8013924:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013928:	2a43      	cmp	r2, #67	; 0x43
 801392a:	d1ee      	bne.n	801390a <__gnu_end_cleanup+0x12>
 801392c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013930:	2a43      	cmp	r2, #67	; 0x43
 8013932:	d1ea      	bne.n	801390a <__gnu_end_cleanup+0x12>
 8013934:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8013938:	2a2b      	cmp	r2, #43	; 0x2b
 801393a:	d1e6      	bne.n	801390a <__gnu_end_cleanup+0x12>
 801393c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8013940:	2a2b      	cmp	r2, #43	; 0x2b
 8013942:	d1e2      	bne.n	801390a <__gnu_end_cleanup+0x12>
 8013944:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013948:	2a01      	cmp	r2, #1
 801394a:	d8de      	bhi.n	801390a <__gnu_end_cleanup+0x12>
 801394c:	69da      	ldr	r2, [r3, #28]
 801394e:	3a01      	subs	r2, #1
 8013950:	61da      	str	r2, [r3, #28]
 8013952:	2a00      	cmp	r2, #0
 8013954:	d1db      	bne.n	801390e <__gnu_end_cleanup+0x16>
 8013956:	699a      	ldr	r2, [r3, #24]
 8013958:	6082      	str	r2, [r0, #8]
 801395a:	2200      	movs	r2, #0
 801395c:	619a      	str	r2, [r3, #24]
 801395e:	f103 0020 	add.w	r0, r3, #32
 8013962:	bd08      	pop	{r3, pc}
 8013964:	f7ff fe4a 	bl	80135fc <_ZSt9terminatev>

08013968 <__cxa_get_globals_fast>:
 8013968:	4800      	ldr	r0, [pc, #0]	; (801396c <__cxa_get_globals_fast+0x4>)
 801396a:	4770      	bx	lr
 801396c:	20032fec 	.word	0x20032fec

08013970 <__cxa_get_globals>:
 8013970:	4800      	ldr	r0, [pc, #0]	; (8013974 <__cxa_get_globals+0x4>)
 8013972:	4770      	bx	lr
 8013974:	20032fec 	.word	0x20032fec

08013978 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8013978:	2850      	cmp	r0, #80	; 0x50
 801397a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397c:	d01c      	beq.n	80139b8 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 801397e:	f000 040f 	and.w	r4, r0, #15
 8013982:	2c0c      	cmp	r4, #12
 8013984:	d856      	bhi.n	8013a34 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 8013986:	e8df f004 	tbb	[pc, r4]
 801398a:	4107      	.short	0x4107
 801398c:	551f0751 	.word	0x551f0751
 8013990:	27555555 	.word	0x27555555
 8013994:	0723      	.short	0x0723
 8013996:	1f          	.byte	0x1f
 8013997:	00          	.byte	0x00
 8013998:	4614      	mov	r4, r2
 801399a:	f854 5b04 	ldr.w	r5, [r4], #4
 801399e:	b145      	cbz	r5, 80139b2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 80139a0:	f000 0670 	and.w	r6, r0, #112	; 0x70
 80139a4:	2e10      	cmp	r6, #16
 80139a6:	bf08      	it	eq
 80139a8:	4611      	moveq	r1, r2
 80139aa:	440d      	add	r5, r1
 80139ac:	0602      	lsls	r2, r0, #24
 80139ae:	bf48      	it	mi
 80139b0:	682d      	ldrmi	r5, [r5, #0]
 80139b2:	601d      	str	r5, [r3, #0]
 80139b4:	4620      	mov	r0, r4
 80139b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b8:	3203      	adds	r2, #3
 80139ba:	f022 0403 	bic.w	r4, r2, #3
 80139be:	f854 5b04 	ldr.w	r5, [r4], #4
 80139c2:	601d      	str	r5, [r3, #0]
 80139c4:	4620      	mov	r0, r4
 80139c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c8:	4614      	mov	r4, r2
 80139ca:	f854 5b08 	ldr.w	r5, [r4], #8
 80139ce:	e7e6      	b.n	801399e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80139d0:	4614      	mov	r4, r2
 80139d2:	f934 5b02 	ldrsh.w	r5, [r4], #2
 80139d6:	e7e2      	b.n	801399e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80139d8:	2500      	movs	r5, #0
 80139da:	462f      	mov	r7, r5
 80139dc:	4614      	mov	r4, r2
 80139de:	f814 cb01 	ldrb.w	ip, [r4], #1
 80139e2:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 80139e6:	40be      	lsls	r6, r7
 80139e8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80139ec:	ea45 0506 	orr.w	r5, r5, r6
 80139f0:	f107 0707 	add.w	r7, r7, #7
 80139f4:	d1f3      	bne.n	80139de <_ZL28read_encoded_value_with_basehjPKhPj+0x66>
 80139f6:	2f1f      	cmp	r7, #31
 80139f8:	d8d1      	bhi.n	801399e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 80139fa:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80139fe:	d0ce      	beq.n	801399e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013a00:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8013a04:	fa06 f707 	lsl.w	r7, r6, r7
 8013a08:	433d      	orrs	r5, r7
 8013a0a:	e7c9      	b.n	80139a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8013a0c:	2500      	movs	r5, #0
 8013a0e:	462f      	mov	r7, r5
 8013a10:	4614      	mov	r4, r2
 8013a12:	f814 cb01 	ldrb.w	ip, [r4], #1
 8013a16:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
 8013a1a:	40be      	lsls	r6, r7
 8013a1c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8013a20:	ea45 0506 	orr.w	r5, r5, r6
 8013a24:	f107 0707 	add.w	r7, r7, #7
 8013a28:	d1f3      	bne.n	8013a12 <_ZL28read_encoded_value_with_basehjPKhPj+0x9a>
 8013a2a:	e7b8      	b.n	801399e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013a2c:	4614      	mov	r4, r2
 8013a2e:	f834 5b02 	ldrh.w	r5, [r4], #2
 8013a32:	e7b4      	b.n	801399e <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013a34:	f000 fbec 	bl	8014210 <abort>

08013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 8013a38:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8013a3c:	2820      	cmp	r0, #32
 8013a3e:	d011      	beq.n	8013a64 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 8013a40:	d90b      	bls.n	8013a5a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x22>
 8013a42:	2840      	cmp	r0, #64	; 0x40
 8013a44:	d006      	beq.n	8013a54 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x1c>
 8013a46:	2850      	cmp	r0, #80	; 0x50
 8013a48:	d00a      	beq.n	8013a60 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 8013a4a:	2830      	cmp	r0, #48	; 0x30
 8013a4c:	d10d      	bne.n	8013a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 8013a4e:	4608      	mov	r0, r1
 8013a50:	f7f4 bf40 	b.w	80088d4 <_Unwind_GetDataRelBase>
 8013a54:	4608      	mov	r0, r1
 8013a56:	f7f4 bf2d 	b.w	80088b4 <_Unwind_GetRegionStart>
 8013a5a:	b108      	cbz	r0, 8013a60 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x28>
 8013a5c:	2810      	cmp	r0, #16
 8013a5e:	d104      	bne.n	8013a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x32>
 8013a60:	2000      	movs	r0, #0
 8013a62:	4770      	bx	lr
 8013a64:	4608      	mov	r0, r1
 8013a66:	f7f4 bf39 	b.w	80088dc <_Unwind_GetTextRelBase>
 8013a6a:	b508      	push	{r3, lr}
 8013a6c:	f000 fbd0 	bl	8014210 <abort>

08013a70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8013a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a72:	460c      	mov	r4, r1
 8013a74:	4615      	mov	r5, r2
 8013a76:	4607      	mov	r7, r0
 8013a78:	b108      	cbz	r0, 8013a7e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8013a7a:	f7f4 ff1b 	bl	80088b4 <_Unwind_GetRegionStart>
 8013a7e:	6028      	str	r0, [r5, #0]
 8013a80:	7826      	ldrb	r6, [r4, #0]
 8013a82:	2eff      	cmp	r6, #255	; 0xff
 8013a84:	f104 0401 	add.w	r4, r4, #1
 8013a88:	d129      	bne.n	8013ade <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6e>
 8013a8a:	6068      	str	r0, [r5, #4]
 8013a8c:	7823      	ldrb	r3, [r4, #0]
 8013a8e:	752b      	strb	r3, [r5, #20]
 8013a90:	2bff      	cmp	r3, #255	; 0xff
 8013a92:	f104 0001 	add.w	r0, r4, #1
 8013a96:	d032      	beq.n	8013afe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8e>
 8013a98:	2310      	movs	r3, #16
 8013a9a:	2400      	movs	r4, #0
 8013a9c:	752b      	strb	r3, [r5, #20]
 8013a9e:	4622      	mov	r2, r4
 8013aa0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013aa4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013aa8:	4093      	lsls	r3, r2
 8013aaa:	0609      	lsls	r1, r1, #24
 8013aac:	ea44 0403 	orr.w	r4, r4, r3
 8013ab0:	f102 0207 	add.w	r2, r2, #7
 8013ab4:	d4f4      	bmi.n	8013aa0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 8013ab6:	4404      	add	r4, r0
 8013ab8:	60ec      	str	r4, [r5, #12]
 8013aba:	7803      	ldrb	r3, [r0, #0]
 8013abc:	756b      	strb	r3, [r5, #21]
 8013abe:	2400      	movs	r4, #0
 8013ac0:	3001      	adds	r0, #1
 8013ac2:	4622      	mov	r2, r4
 8013ac4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013ac8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013acc:	4093      	lsls	r3, r2
 8013ace:	431c      	orrs	r4, r3
 8013ad0:	060b      	lsls	r3, r1, #24
 8013ad2:	f102 0207 	add.w	r2, r2, #7
 8013ad6:	d4f5      	bmi.n	8013ac4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8013ad8:	4404      	add	r4, r0
 8013ada:	612c      	str	r4, [r5, #16]
 8013adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ade:	4639      	mov	r1, r7
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	f7ff ffa9 	bl	8013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8013ae6:	4622      	mov	r2, r4
 8013ae8:	4601      	mov	r1, r0
 8013aea:	1d2b      	adds	r3, r5, #4
 8013aec:	4630      	mov	r0, r6
 8013aee:	f7ff ff43 	bl	8013978 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013af2:	4604      	mov	r4, r0
 8013af4:	1c60      	adds	r0, r4, #1
 8013af6:	7823      	ldrb	r3, [r4, #0]
 8013af8:	752b      	strb	r3, [r5, #20]
 8013afa:	2bff      	cmp	r3, #255	; 0xff
 8013afc:	d1cc      	bne.n	8013a98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x28>
 8013afe:	2300      	movs	r3, #0
 8013b00:	60eb      	str	r3, [r5, #12]
 8013b02:	e7da      	b.n	8013aba <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x4a>

08013b04 <__gxx_personality_v0>:
 8013b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b08:	f000 0403 	and.w	r4, r0, #3
 8013b0c:	b099      	sub	sp, #100	; 0x64
 8013b0e:	2300      	movs	r3, #0
 8013b10:	2c01      	cmp	r4, #1
 8013b12:	4688      	mov	r8, r1
 8013b14:	4617      	mov	r7, r2
 8013b16:	930c      	str	r3, [sp, #48]	; 0x30
 8013b18:	f000 8096 	beq.w	8013c48 <__gxx_personality_v0+0x144>
 8013b1c:	d30d      	bcc.n	8013b3a <__gxx_personality_v0+0x36>
 8013b1e:	2c02      	cmp	r4, #2
 8013b20:	f040 825f 	bne.w	8013fe2 <__gxx_personality_v0+0x4de>
 8013b24:	4639      	mov	r1, r7
 8013b26:	4640      	mov	r0, r8
 8013b28:	f7f4 feb0 	bl	800888c <__gnu_unwind_frame>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	f000 809b 	beq.w	8013c68 <__gxx_personality_v0+0x164>
 8013b32:	2009      	movs	r0, #9
 8013b34:	b019      	add	sp, #100	; 0x64
 8013b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3a:	0702      	lsls	r2, r0, #28
 8013b3c:	d4f2      	bmi.n	8013b24 <__gxx_personality_v0+0x20>
 8013b3e:	2301      	movs	r3, #1
 8013b40:	9304      	str	r3, [sp, #16]
 8013b42:	aa18      	add	r2, sp, #96	; 0x60
 8013b44:	2300      	movs	r3, #0
 8013b46:	f842 8d2c 	str.w	r8, [r2, #-44]!
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	9200      	str	r2, [sp, #0]
 8013b4e:	4638      	mov	r0, r7
 8013b50:	220c      	movs	r2, #12
 8013b52:	f7f4 f92b 	bl	8007dac <_Unwind_VRS_Set>
 8013b56:	4638      	mov	r0, r7
 8013b58:	f7f4 feb2 	bl	80088c0 <_Unwind_GetLanguageSpecificData>
 8013b5c:	9005      	str	r0, [sp, #20]
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	d0e0      	beq.n	8013b24 <__gxx_personality_v0+0x20>
 8013b62:	ab12      	add	r3, sp, #72	; 0x48
 8013b64:	461a      	mov	r2, r3
 8013b66:	9905      	ldr	r1, [sp, #20]
 8013b68:	9306      	str	r3, [sp, #24]
 8013b6a:	4638      	mov	r0, r7
 8013b6c:	f7ff ff80 	bl	8013a70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8013b70:	4605      	mov	r5, r0
 8013b72:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8013b76:	28ff      	cmp	r0, #255	; 0xff
 8013b78:	f000 80e5 	beq.w	8013d46 <__gxx_personality_v0+0x242>
 8013b7c:	4639      	mov	r1, r7
 8013b7e:	f7ff ff5b 	bl	8013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8013b82:	4604      	mov	r4, r0
 8013b84:	2300      	movs	r3, #0
 8013b86:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	f8cd b000 	str.w	fp, [sp]
 8013b90:	220f      	movs	r2, #15
 8013b92:	4638      	mov	r0, r7
 8013b94:	9414      	str	r4, [sp, #80]	; 0x50
 8013b96:	f7f4 f8e7 	bl	8007d68 <_Unwind_VRS_Get>
 8013b9a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013b9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013b9e:	f026 0601 	bic.w	r6, r6, #1
 8013ba2:	429d      	cmp	r5, r3
 8013ba4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8013ba8:	f080 80d4 	bcs.w	8013d54 <__gxx_personality_v0+0x250>
 8013bac:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8013bb0:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8013bb4:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8013bb8:	2cff      	cmp	r4, #255	; 0xff
 8013bba:	f04f 0100 	mov.w	r1, #0
 8013bbe:	d003      	beq.n	8013bc8 <__gxx_personality_v0+0xc4>
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	f7ff ff39 	bl	8013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8013bc6:	4601      	mov	r1, r0
 8013bc8:	462a      	mov	r2, r5
 8013bca:	4620      	mov	r0, r4
 8013bcc:	4653      	mov	r3, sl
 8013bce:	f7ff fed3 	bl	8013978 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013bd2:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8013bd6:	2cff      	cmp	r4, #255	; 0xff
 8013bd8:	4605      	mov	r5, r0
 8013bda:	f04f 0100 	mov.w	r1, #0
 8013bde:	d003      	beq.n	8013be8 <__gxx_personality_v0+0xe4>
 8013be0:	4620      	mov	r0, r4
 8013be2:	f7ff ff29 	bl	8013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8013be6:	4601      	mov	r1, r0
 8013be8:	462a      	mov	r2, r5
 8013bea:	4620      	mov	r0, r4
 8013bec:	464b      	mov	r3, r9
 8013bee:	f7ff fec3 	bl	8013978 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013bf2:	f89d 405d 	ldrb.w	r4, [sp, #93]	; 0x5d
 8013bf6:	2cff      	cmp	r4, #255	; 0xff
 8013bf8:	4605      	mov	r5, r0
 8013bfa:	f04f 0100 	mov.w	r1, #0
 8013bfe:	d003      	beq.n	8013c08 <__gxx_personality_v0+0x104>
 8013c00:	4620      	mov	r0, r4
 8013c02:	f7ff ff19 	bl	8013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8013c06:	4601      	mov	r1, r0
 8013c08:	462a      	mov	r2, r5
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	465b      	mov	r3, fp
 8013c0e:	f7ff feb3 	bl	8013978 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013c12:	2400      	movs	r4, #0
 8013c14:	4605      	mov	r5, r0
 8013c16:	4621      	mov	r1, r4
 8013c18:	f815 2b01 	ldrb.w	r2, [r5], #1
 8013c1c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8013c20:	408b      	lsls	r3, r1
 8013c22:	431c      	orrs	r4, r3
 8013c24:	0613      	lsls	r3, r2, #24
 8013c26:	f101 0107 	add.w	r1, r1, #7
 8013c2a:	d4f5      	bmi.n	8013c18 <__gxx_personality_v0+0x114>
 8013c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c30:	4413      	add	r3, r2
 8013c32:	42b3      	cmp	r3, r6
 8013c34:	d91f      	bls.n	8013c76 <__gxx_personality_v0+0x172>
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	07db      	lsls	r3, r3, #31
 8013c3a:	f100 8091 	bmi.w	8013d60 <__gxx_personality_v0+0x25c>
 8013c3e:	9b04      	ldr	r3, [sp, #16]
 8013c40:	071c      	lsls	r4, r3, #28
 8013c42:	d515      	bpl.n	8013c70 <__gxx_personality_v0+0x16c>
 8013c44:	f7ff fcda 	bl	80135fc <_ZSt9terminatev>
 8013c48:	f010 0408 	ands.w	r4, r0, #8
 8013c4c:	d01c      	beq.n	8013c88 <__gxx_personality_v0+0x184>
 8013c4e:	aa18      	add	r2, sp, #96	; 0x60
 8013c50:	f044 0402 	orr.w	r4, r4, #2
 8013c54:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8013c58:	4638      	mov	r0, r7
 8013c5a:	9200      	str	r2, [sp, #0]
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	220c      	movs	r2, #12
 8013c60:	9404      	str	r4, [sp, #16]
 8013c62:	f7f4 f8a3 	bl	8007dac <_Unwind_VRS_Set>
 8013c66:	e776      	b.n	8013b56 <__gxx_personality_v0+0x52>
 8013c68:	2008      	movs	r0, #8
 8013c6a:	b019      	add	sp, #100	; 0x64
 8013c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c70:	4640      	mov	r0, r8
 8013c72:	f7ff fd33 	bl	80136dc <__cxa_call_terminate>
 8013c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c78:	4413      	add	r3, r2
 8013c7a:	42b3      	cmp	r3, r6
 8013c7c:	f200 8088 	bhi.w	8013d90 <__gxx_personality_v0+0x28c>
 8013c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013c82:	42ab      	cmp	r3, r5
 8013c84:	d896      	bhi.n	8013bb4 <__gxx_personality_v0+0xb0>
 8013c86:	e7d6      	b.n	8013c36 <__gxx_personality_v0+0x132>
 8013c88:	ab12      	add	r3, sp, #72	; 0x48
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	9306      	str	r3, [sp, #24]
 8013c8e:	220d      	movs	r2, #13
 8013c90:	4623      	mov	r3, r4
 8013c92:	4621      	mov	r1, r4
 8013c94:	4638      	mov	r0, r7
 8013c96:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8013c9a:	f7f4 f865 	bl	8007d68 <_Unwind_VRS_Get>
 8013c9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ca0:	429d      	cmp	r5, r3
 8013ca2:	d002      	beq.n	8013caa <__gxx_personality_v0+0x1a6>
 8013ca4:	2302      	movs	r3, #2
 8013ca6:	9304      	str	r3, [sp, #16]
 8013ca8:	e74b      	b.n	8013b42 <__gxx_personality_v0+0x3e>
 8013caa:	aa18      	add	r2, sp, #96	; 0x60
 8013cac:	4623      	mov	r3, r4
 8013cae:	f842 8d2c 	str.w	r8, [r2, #-44]!
 8013cb2:	4621      	mov	r1, r4
 8013cb4:	9200      	str	r2, [sp, #0]
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	220c      	movs	r2, #12
 8013cba:	f7f4 f877 	bl	8007dac <_Unwind_VRS_Set>
 8013cbe:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8013cc2:	9303      	str	r3, [sp, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d0d3      	beq.n	8013c70 <__gxx_personality_v0+0x16c>
 8013cc8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8013ccc:	461a      	mov	r2, r3
 8013cce:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8013cd2:	9305      	str	r3, [sp, #20]
 8013cd4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8013cd8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8013cdc:	4613      	mov	r3, r2
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	461c      	mov	r4, r3
 8013ce2:	f2c0 8127 	blt.w	8013f34 <__gxx_personality_v0+0x430>
 8013ce6:	2503      	movs	r5, #3
 8013ce8:	a918      	add	r1, sp, #96	; 0x60
 8013cea:	2300      	movs	r3, #0
 8013cec:	f841 8d28 	str.w	r8, [r1, #-40]!
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	9100      	str	r1, [sp, #0]
 8013cf4:	4638      	mov	r0, r7
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	f7f4 f858 	bl	8007dac <_Unwind_VRS_Set>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	4619      	mov	r1, r3
 8013d00:	2201      	movs	r2, #1
 8013d02:	f8cd a000 	str.w	sl, [sp]
 8013d06:	4638      	mov	r0, r7
 8013d08:	940f      	str	r4, [sp, #60]	; 0x3c
 8013d0a:	f7f4 f84f 	bl	8007dac <_Unwind_VRS_Set>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	4619      	mov	r1, r3
 8013d12:	220f      	movs	r2, #15
 8013d14:	f8cd 9000 	str.w	r9, [sp]
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f7f4 f825 	bl	8007d68 <_Unwind_VRS_Get>
 8013d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d20:	9a03      	ldr	r2, [sp, #12]
 8013d22:	f8cd 9000 	str.w	r9, [sp]
 8013d26:	f003 0401 	and.w	r4, r3, #1
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	4314      	orrs	r4, r2
 8013d2e:	4638      	mov	r0, r7
 8013d30:	4619      	mov	r1, r3
 8013d32:	220f      	movs	r2, #15
 8013d34:	9410      	str	r4, [sp, #64]	; 0x40
 8013d36:	f7f4 f839 	bl	8007dac <_Unwind_VRS_Set>
 8013d3a:	2d02      	cmp	r5, #2
 8013d3c:	d005      	beq.n	8013d4a <__gxx_personality_v0+0x246>
 8013d3e:	2007      	movs	r0, #7
 8013d40:	b019      	add	sp, #100	; 0x64
 8013d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d46:	2400      	movs	r4, #0
 8013d48:	e71c      	b.n	8013b84 <__gxx_personality_v0+0x80>
 8013d4a:	4640      	mov	r0, r8
 8013d4c:	f7ff fda2 	bl	8013894 <__cxa_begin_cleanup>
 8013d50:	2007      	movs	r0, #7
 8013d52:	e6ef      	b.n	8013b34 <__gxx_personality_v0+0x30>
 8013d54:	9b04      	ldr	r3, [sp, #16]
 8013d56:	07d9      	lsls	r1, r3, #31
 8013d58:	f57f af71 	bpl.w	8013c3e <__gxx_personality_v0+0x13a>
 8013d5c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8013d60:	2400      	movs	r4, #0
 8013d62:	9403      	str	r4, [sp, #12]
 8013d64:	2300      	movs	r3, #0
 8013d66:	4619      	mov	r1, r3
 8013d68:	220d      	movs	r2, #13
 8013d6a:	f8cd 9000 	str.w	r9, [sp]
 8013d6e:	4638      	mov	r0, r7
 8013d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013d72:	f7f3 fff9 	bl	8007d68 <_Unwind_VRS_Get>
 8013d76:	9a05      	ldr	r2, [sp, #20]
 8013d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d7a:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 8013d7e:	9a03      	ldr	r2, [sp, #12]
 8013d80:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 8013d84:	e9c8 5409 	strd	r5, r4, [r8, #36]	; 0x24
 8013d88:	f8c8 3020 	str.w	r3, [r8, #32]
 8013d8c:	2006      	movs	r0, #6
 8013d8e:	e6d1      	b.n	8013b34 <__gxx_personality_v0+0x30>
 8013d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	f43f aec6 	beq.w	8013b24 <__gxx_personality_v0+0x20>
 8013d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d9a:	189a      	adds	r2, r3, r2
 8013d9c:	9203      	str	r2, [sp, #12]
 8013d9e:	2c00      	cmp	r4, #0
 8013da0:	f000 80f0 	beq.w	8013f84 <__gxx_personality_v0+0x480>
 8013da4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013da6:	3c01      	subs	r4, #1
 8013da8:	4423      	add	r3, r4
 8013daa:	2a00      	cmp	r2, #0
 8013dac:	f43f aeba 	beq.w	8013b24 <__gxx_personality_v0+0x20>
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f000 80f8 	beq.w	8013fa6 <__gxx_personality_v0+0x4a2>
 8013db6:	9a04      	ldr	r2, [sp, #16]
 8013db8:	f012 0208 	ands.w	r2, r2, #8
 8013dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8013dbe:	f000 8103 	beq.w	8013fc8 <__gxx_personality_v0+0x4c4>
 8013dc2:	2147      	movs	r1, #71	; 0x47
 8013dc4:	224e      	movs	r2, #78	; 0x4e
 8013dc6:	f888 1000 	strb.w	r1, [r8]
 8013dca:	f888 2001 	strb.w	r2, [r8, #1]
 8013dce:	2155      	movs	r1, #85	; 0x55
 8013dd0:	2243      	movs	r2, #67	; 0x43
 8013dd2:	f888 1002 	strb.w	r1, [r8, #2]
 8013dd6:	f888 2003 	strb.w	r2, [r8, #3]
 8013dda:	2146      	movs	r1, #70	; 0x46
 8013ddc:	224f      	movs	r2, #79	; 0x4f
 8013dde:	f888 1004 	strb.w	r1, [r8, #4]
 8013de2:	f888 2005 	strb.w	r2, [r8, #5]
 8013de6:	2152      	movs	r1, #82	; 0x52
 8013de8:	2200      	movs	r2, #0
 8013dea:	f888 1006 	strb.w	r1, [r8, #6]
 8013dee:	f888 2007 	strb.w	r2, [r8, #7]
 8013df2:	e9cd 7a0a 	strd	r7, sl, [sp, #40]	; 0x28
 8013df6:	2200      	movs	r2, #0
 8013df8:	9207      	str	r2, [sp, #28]
 8013dfa:	f8cd 9020 	str.w	r9, [sp, #32]
 8013dfe:	2400      	movs	r4, #0
 8013e00:	4621      	mov	r1, r4
 8013e02:	e000      	b.n	8013e06 <__gxx_personality_v0+0x302>
 8013e04:	462b      	mov	r3, r5
 8013e06:	461d      	mov	r5, r3
 8013e08:	f815 0b01 	ldrb.w	r0, [r5], #1
 8013e0c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8013e10:	408a      	lsls	r2, r1
 8013e12:	0606      	lsls	r6, r0, #24
 8013e14:	ea44 0402 	orr.w	r4, r4, r2
 8013e18:	f101 0107 	add.w	r1, r1, #7
 8013e1c:	d4f2      	bmi.n	8013e04 <__gxx_personality_v0+0x300>
 8013e1e:	291f      	cmp	r1, #31
 8013e20:	d805      	bhi.n	8013e2e <__gxx_personality_v0+0x32a>
 8013e22:	0640      	lsls	r0, r0, #25
 8013e24:	d503      	bpl.n	8013e2e <__gxx_personality_v0+0x32a>
 8013e26:	2201      	movs	r2, #1
 8013e28:	408a      	lsls	r2, r1
 8013e2a:	4252      	negs	r2, r2
 8013e2c:	4314      	orrs	r4, r2
 8013e2e:	2600      	movs	r6, #0
 8013e30:	4631      	mov	r1, r6
 8013e32:	46a1      	mov	r9, r4
 8013e34:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8013e38:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8013e3c:	408a      	lsls	r2, r1
 8013e3e:	4316      	orrs	r6, r2
 8013e40:	0602      	lsls	r2, r0, #24
 8013e42:	f101 0107 	add.w	r1, r1, #7
 8013e46:	d4f5      	bmi.n	8013e34 <__gxx_personality_v0+0x330>
 8013e48:	291f      	cmp	r1, #31
 8013e4a:	d805      	bhi.n	8013e58 <__gxx_personality_v0+0x354>
 8013e4c:	0647      	lsls	r7, r0, #25
 8013e4e:	d503      	bpl.n	8013e58 <__gxx_personality_v0+0x354>
 8013e50:	2301      	movs	r3, #1
 8013e52:	408b      	lsls	r3, r1
 8013e54:	425b      	negs	r3, r3
 8013e56:	431e      	orrs	r6, r3
 8013e58:	2c00      	cmp	r4, #0
 8013e5a:	d04c      	beq.n	8013ef6 <__gxx_personality_v0+0x3f2>
 8013e5c:	dc4e      	bgt.n	8013efc <__gxx_personality_v0+0x3f8>
 8013e5e:	f104 0a01 	add.w	sl, r4, #1
 8013e62:	ebca 728a 	rsb	r2, sl, sl, lsl #30
 8013e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013e68:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8013e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e70:	f1b8 0f00 	cmp.w	r8, #0
 8013e74:	d001      	beq.n	8013e7a <__gxx_personality_v0+0x376>
 8013e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e78:	b12b      	cbz	r3, 8013e86 <__gxx_personality_v0+0x382>
 8013e7a:	b351      	cbz	r1, 8013ed2 <__gxx_personality_v0+0x3ce>
 8013e7c:	2e00      	cmp	r6, #0
 8013e7e:	f000 808b 	beq.w	8013f98 <__gxx_personality_v0+0x494>
 8013e82:	19ab      	adds	r3, r5, r6
 8013e84:	e7bb      	b.n	8013dfe <__gxx_personality_v0+0x2fa>
 8013e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e88:	9311      	str	r3, [sp, #68]	; 0x44
 8013e8a:	b929      	cbnz	r1, 8013e98 <__gxx_personality_v0+0x394>
 8013e8c:	e091      	b.n	8013fb2 <__gxx_personality_v0+0x4ae>
 8013e8e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8013e92:	2900      	cmp	r1, #0
 8013e94:	f000 808d 	beq.w	8013fb2 <__gxx_personality_v0+0x4ae>
 8013e98:	4439      	add	r1, r7
 8013e9a:	465b      	mov	r3, fp
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	4640      	mov	r0, r8
 8013ea0:	f7ff fca0 	bl	80137e4 <__cxa_type_match>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d0f2      	beq.n	8013e8e <__gxx_personality_v0+0x38a>
 8013ea8:	e7e8      	b.n	8013e7c <__gxx_personality_v0+0x378>
 8013eaa:	00e2      	lsls	r2, r4, #3
 8013eac:	4252      	negs	r2, r2
 8013eae:	e9dd 1314 	ldrd	r1, r3, [sp, #80]	; 0x50
 8013eb2:	441a      	add	r2, r3
 8013eb4:	9b08      	ldr	r3, [sp, #32]
 8013eb6:	f7ff fd5f 	bl	8013978 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013eba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013ebc:	b149      	cbz	r1, 8013ed2 <__gxx_personality_v0+0x3ce>
 8013ebe:	f1b8 0f00 	cmp.w	r8, #0
 8013ec2:	d0db      	beq.n	8013e7c <__gxx_personality_v0+0x378>
 8013ec4:	ab0c      	add	r3, sp, #48	; 0x30
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	4640      	mov	r0, r8
 8013eca:	f7ff fc8b 	bl	80137e4 <__cxa_type_match>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	d0d4      	beq.n	8013e7c <__gxx_personality_v0+0x378>
 8013ed2:	9b04      	ldr	r3, [sp, #16]
 8013ed4:	07d8      	lsls	r0, r3, #31
 8013ed6:	464a      	mov	r2, r9
 8013ed8:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8013edc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013ee0:	f53f af40 	bmi.w	8013d64 <__gxx_personality_v0+0x260>
 8013ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f43f aef8 	beq.w	8013cdc <__gxx_personality_v0+0x1d8>
 8013eec:	2c00      	cmp	r4, #0
 8013eee:	f6bf aefa 	bge.w	8013ce6 <__gxx_personality_v0+0x1e2>
 8013ef2:	f7ff fb91 	bl	8013618 <_ZSt10unexpectedv>
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	9307      	str	r3, [sp, #28]
 8013efa:	e7bf      	b.n	8013e7c <__gxx_personality_v0+0x378>
 8013efc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8013f00:	28ff      	cmp	r0, #255	; 0xff
 8013f02:	d03b      	beq.n	8013f7c <__gxx_personality_v0+0x478>
 8013f04:	f000 0307 	and.w	r3, r0, #7
 8013f08:	2b04      	cmp	r3, #4
 8013f0a:	d86a      	bhi.n	8013fe2 <__gxx_personality_v0+0x4de>
 8013f0c:	a201      	add	r2, pc, #4	; (adr r2, 8013f14 <__gxx_personality_v0+0x410>)
 8013f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f12:	bf00      	nop
 8013f14:	08013f2f 	.word	0x08013f2f
 8013f18:	08013fe3 	.word	0x08013fe3
 8013f1c:	08013f29 	.word	0x08013f29
 8013f20:	08013f2f 	.word	0x08013f2f
 8013f24:	08013eab 	.word	0x08013eab
 8013f28:	0062      	lsls	r2, r4, #1
 8013f2a:	4252      	negs	r2, r2
 8013f2c:	e7bf      	b.n	8013eae <__gxx_personality_v0+0x3aa>
 8013f2e:	00a2      	lsls	r2, r4, #2
 8013f30:	4252      	negs	r2, r2
 8013f32:	e7bc      	b.n	8013eae <__gxx_personality_v0+0x3aa>
 8013f34:	3301      	adds	r3, #1
 8013f36:	461d      	mov	r5, r3
 8013f38:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7ff fd97 	bl	8013a70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8013f42:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8013f46:	28ff      	cmp	r0, #255	; 0xff
 8013f48:	d01a      	beq.n	8013f80 <__gxx_personality_v0+0x47c>
 8013f4a:	4639      	mov	r1, r7
 8013f4c:	f7ff fd74 	bl	8013a38 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8013f50:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
 8013f54:	0092      	lsls	r2, r2, #2
 8013f56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013f58:	9014      	str	r0, [sp, #80]	; 0x50
 8013f5a:	58ab      	ldr	r3, [r5, r2]
 8013f5c:	4415      	add	r5, r2
 8013f5e:	b133      	cbz	r3, 8013f6e <__gxx_personality_v0+0x46a>
 8013f60:	462a      	mov	r2, r5
 8013f62:	2300      	movs	r3, #0
 8013f64:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8013f68:	3301      	adds	r3, #1
 8013f6a:	2900      	cmp	r1, #0
 8013f6c:	d1fa      	bne.n	8013f64 <__gxx_personality_v0+0x460>
 8013f6e:	2204      	movs	r2, #4
 8013f70:	e9c8 250c 	strd	r2, r5, [r8, #48]	; 0x30
 8013f74:	e9c8 300a 	strd	r3, r0, [r8, #40]	; 0x28
 8013f78:	2503      	movs	r5, #3
 8013f7a:	e6b5      	b.n	8013ce8 <__gxx_personality_v0+0x1e4>
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	e796      	b.n	8013eae <__gxx_personality_v0+0x3aa>
 8013f80:	2000      	movs	r0, #0
 8013f82:	e7e5      	b.n	8013f50 <__gxx_personality_v0+0x44c>
 8013f84:	9b03      	ldr	r3, [sp, #12]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f43f adcc 	beq.w	8013b24 <__gxx_personality_v0+0x20>
 8013f8c:	9b04      	ldr	r3, [sp, #16]
 8013f8e:	07da      	lsls	r2, r3, #31
 8013f90:	f53f adc8 	bmi.w	8013b24 <__gxx_personality_v0+0x20>
 8013f94:	2502      	movs	r5, #2
 8013f96:	e6a7      	b.n	8013ce8 <__gxx_personality_v0+0x1e4>
 8013f98:	e9dd 3907 	ldrd	r3, r9, [sp, #28]
 8013f9c:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f43f adbf 	beq.w	8013b24 <__gxx_personality_v0+0x20>
 8013fa6:	9b04      	ldr	r3, [sp, #16]
 8013fa8:	07dd      	lsls	r5, r3, #31
 8013faa:	f53f adbb 	bmi.w	8013b24 <__gxx_personality_v0+0x20>
 8013fae:	2400      	movs	r4, #0
 8013fb0:	e7f0      	b.n	8013f94 <__gxx_personality_v0+0x490>
 8013fb2:	9b04      	ldr	r3, [sp, #16]
 8013fb4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013fb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013fba:	07de      	lsls	r6, r3, #31
 8013fbc:	4655      	mov	r5, sl
 8013fbe:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8013fc2:	f53f aecf 	bmi.w	8013d64 <__gxx_personality_v0+0x260>
 8013fc6:	e7b7      	b.n	8013f38 <__gxx_personality_v0+0x434>
 8013fc8:	f898 2007 	ldrb.w	r2, [r8, #7]
 8013fcc:	2a01      	cmp	r2, #1
 8013fce:	bf0c      	ite	eq
 8013fd0:	f858 2c20 	ldreq.w	r2, [r8, #-32]
 8013fd4:	f108 0258 	addne.w	r2, r8, #88	; 0x58
 8013fd8:	920c      	str	r2, [sp, #48]	; 0x30
 8013fda:	e70a      	b.n	8013df2 <__gxx_personality_v0+0x2ee>
 8013fdc:	f7ff f9ea 	bl	80133b4 <__cxa_begin_catch>
 8013fe0:	e630      	b.n	8013c44 <__gxx_personality_v0+0x140>
 8013fe2:	f000 f915 	bl	8014210 <abort>
 8013fe6:	bf00      	nop

08013fe8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8013fe8:	b570      	push	{r4, r5, r6, lr}
 8013fea:	6803      	ldr	r3, [r0, #0]
 8013fec:	b084      	sub	sp, #16
 8013fee:	2400      	movs	r4, #0
 8013ff0:	699e      	ldr	r6, [r3, #24]
 8013ff2:	9400      	str	r4, [sp, #0]
 8013ff4:	2310      	movs	r3, #16
 8013ff6:	4615      	mov	r5, r2
 8013ff8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013ffc:	6812      	ldr	r2, [r2, #0]
 8013ffe:	f88d 4004 	strb.w	r4, [sp, #4]
 8014002:	466b      	mov	r3, sp
 8014004:	47b0      	blx	r6
 8014006:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801400a:	f003 0306 	and.w	r3, r3, #6
 801400e:	2b06      	cmp	r3, #6
 8014010:	bf03      	ittte	eq
 8014012:	9b00      	ldreq	r3, [sp, #0]
 8014014:	602b      	streq	r3, [r5, #0]
 8014016:	2001      	moveq	r0, #1
 8014018:	4620      	movne	r0, r4
 801401a:	b004      	add	sp, #16
 801401c:	bd70      	pop	{r4, r5, r6, pc}
 801401e:	bf00      	nop

08014020 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8014020:	9800      	ldr	r0, [sp, #0]
 8014022:	4290      	cmp	r0, r2
 8014024:	bf0c      	ite	eq
 8014026:	2006      	moveq	r0, #6
 8014028:	2001      	movne	r0, #1
 801402a:	4770      	bx	lr

0801402c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801402c:	b510      	push	{r4, lr}
 801402e:	4b03      	ldr	r3, [pc, #12]	; (801403c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8014030:	6003      	str	r3, [r0, #0]
 8014032:	4604      	mov	r4, r0
 8014034:	f7ff fb1a 	bl	801366c <_ZNSt9type_infoD1Ev>
 8014038:	4620      	mov	r0, r4
 801403a:	bd10      	pop	{r4, pc}
 801403c:	0801add8 	.word	0x0801add8

08014040 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8014040:	b510      	push	{r4, lr}
 8014042:	4b05      	ldr	r3, [pc, #20]	; (8014058 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8014044:	6003      	str	r3, [r0, #0]
 8014046:	4604      	mov	r4, r0
 8014048:	f7ff fb10 	bl	801366c <_ZNSt9type_infoD1Ev>
 801404c:	4620      	mov	r0, r4
 801404e:	2108      	movs	r1, #8
 8014050:	f7ff f90c 	bl	801326c <_ZdlPvj>
 8014054:	4620      	mov	r0, r4
 8014056:	bd10      	pop	{r4, pc}
 8014058:	0801add8 	.word	0x0801add8

0801405c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014060:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
 8014064:	9d06      	ldr	r5, [sp, #24]
 8014066:	428d      	cmp	r5, r1
 8014068:	4690      	mov	r8, r2
 801406a:	461f      	mov	r7, r3
 801406c:	4606      	mov	r6, r0
 801406e:	d00c      	beq.n	801408a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8014070:	4639      	mov	r1, r7
 8014072:	4630      	mov	r0, r6
 8014074:	f7ff fafe 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 8014078:	b120      	cbz	r0, 8014084 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 801407a:	2301      	movs	r3, #1
 801407c:	6025      	str	r5, [r4, #0]
 801407e:	f884 8004 	strb.w	r8, [r4, #4]
 8014082:	71a3      	strb	r3, [r4, #6]
 8014084:	2000      	movs	r0, #0
 8014086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801408a:	9907      	ldr	r1, [sp, #28]
 801408c:	f7ff faf2 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 8014090:	2800      	cmp	r0, #0
 8014092:	d0ed      	beq.n	8014070 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 8014094:	f884 8005 	strb.w	r8, [r4, #5]
 8014098:	2000      	movs	r0, #0
 801409a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801409e:	bf00      	nop

080140a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4615      	mov	r5, r2
 80140a4:	461c      	mov	r4, r3
 80140a6:	f7ff fae5 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 80140aa:	b120      	cbz	r0, 80140b6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80140ac:	2208      	movs	r2, #8
 80140ae:	2306      	movs	r3, #6
 80140b0:	6025      	str	r5, [r4, #0]
 80140b2:	60e2      	str	r2, [r4, #12]
 80140b4:	7123      	strb	r3, [r4, #4]
 80140b6:	bd38      	pop	{r3, r4, r5, pc}

080140b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80140b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140bc:	4617      	mov	r7, r2
 80140be:	461c      	mov	r4, r3
 80140c0:	4606      	mov	r6, r0
 80140c2:	460d      	mov	r5, r1
 80140c4:	f7ff fad6 	bl	8013674 <_ZNKSt9type_infoeqERKS_>
 80140c8:	b908      	cbnz	r0, 80140ce <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 80140ca:	2c03      	cmp	r4, #3
 80140cc:	d901      	bls.n	80140d2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 80140ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	463a      	mov	r2, r7
 80140d6:	4631      	mov	r1, r6
 80140d8:	4628      	mov	r0, r5
 80140da:	695b      	ldr	r3, [r3, #20]
 80140dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140e0:	4718      	bx	r3
 80140e2:	bf00      	nop

080140e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	4b3c      	ldr	r3, [pc, #240]	; (80141d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 80140e8:	781a      	ldrb	r2, [r3, #0]
 80140ea:	b082      	sub	sp, #8
 80140ec:	2a00      	cmp	r2, #0
 80140ee:	d135      	bne.n	801415c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 80140f0:	2401      	movs	r4, #1
 80140f2:	701c      	strb	r4, [r3, #0]
 80140f4:	f000 f87e 	bl	80141f4 <__cxa_current_exception_type>
 80140f8:	2800      	cmp	r0, #0
 80140fa:	d03d      	beq.n	8014178 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x94>
 80140fc:	6844      	ldr	r4, [r0, #4]
 80140fe:	4d37      	ldr	r5, [pc, #220]	; (80141dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8014100:	7823      	ldrb	r3, [r4, #0]
 8014102:	2b2a      	cmp	r3, #42	; 0x2a
 8014104:	ab02      	add	r3, sp, #8
 8014106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801410a:	bf08      	it	eq
 801410c:	3401      	addeq	r4, #1
 801410e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8014112:	2200      	movs	r2, #0
 8014114:	4611      	mov	r1, r2
 8014116:	4620      	mov	r0, r4
 8014118:	f7f2 fd72 	bl	8006c00 <__cxa_demangle>
 801411c:	682b      	ldr	r3, [r5, #0]
 801411e:	4606      	mov	r6, r0
 8014120:	68db      	ldr	r3, [r3, #12]
 8014122:	482f      	ldr	r0, [pc, #188]	; (80141e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8014124:	2230      	movs	r2, #48	; 0x30
 8014126:	2101      	movs	r1, #1
 8014128:	f000 fa86 	bl	8014638 <fwrite>
 801412c:	9b01      	ldr	r3, [sp, #4]
 801412e:	b17b      	cbz	r3, 8014150 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8014130:	682b      	ldr	r3, [r5, #0]
 8014132:	4620      	mov	r0, r4
 8014134:	68d9      	ldr	r1, [r3, #12]
 8014136:	f000 f8df 	bl	80142f8 <fputs>
 801413a:	682b      	ldr	r3, [r5, #0]
 801413c:	4829      	ldr	r0, [pc, #164]	; (80141e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	2202      	movs	r2, #2
 8014142:	2101      	movs	r1, #1
 8014144:	f000 fa78 	bl	8014638 <fwrite>
 8014148:	9b01      	ldr	r3, [sp, #4]
 801414a:	b18b      	cbz	r3, 8014170 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 801414c:	f7ff f8fa 	bl	8013344 <__cxa_rethrow>
 8014150:	682b      	ldr	r3, [r5, #0]
 8014152:	4630      	mov	r0, r6
 8014154:	68d9      	ldr	r1, [r3, #12]
 8014156:	f000 f8cf 	bl	80142f8 <fputs>
 801415a:	e7ee      	b.n	801413a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 801415c:	4b1f      	ldr	r3, [pc, #124]	; (80141dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 801415e:	4822      	ldr	r0, [pc, #136]	; (80141e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	221d      	movs	r2, #29
 8014164:	68db      	ldr	r3, [r3, #12]
 8014166:	2101      	movs	r1, #1
 8014168:	f000 fa66 	bl	8014638 <fwrite>
 801416c:	f000 f850 	bl	8014210 <abort>
 8014170:	4630      	mov	r0, r6
 8014172:	f000 fa9f 	bl	80146b4 <free>
 8014176:	e7e9      	b.n	801414c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 8014178:	4b18      	ldr	r3, [pc, #96]	; (80141dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 801417a:	481c      	ldr	r0, [pc, #112]	; (80141ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	4621      	mov	r1, r4
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	222d      	movs	r2, #45	; 0x2d
 8014184:	f000 fa58 	bl	8014638 <fwrite>
 8014188:	f000 f842 	bl	8014210 <abort>
 801418c:	2901      	cmp	r1, #1
 801418e:	460c      	mov	r4, r1
 8014190:	d119      	bne.n	80141c6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe2>
 8014192:	f7ff f90f 	bl	80133b4 <__cxa_begin_catch>
 8014196:	6803      	ldr	r3, [r0, #0]
 8014198:	689b      	ldr	r3, [r3, #8]
 801419a:	4798      	blx	r3
 801419c:	682b      	ldr	r3, [r5, #0]
 801419e:	4606      	mov	r6, r0
 80141a0:	68db      	ldr	r3, [r3, #12]
 80141a2:	4813      	ldr	r0, [pc, #76]	; (80141f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 80141a4:	4621      	mov	r1, r4
 80141a6:	220b      	movs	r2, #11
 80141a8:	f000 fa46 	bl	8014638 <fwrite>
 80141ac:	682b      	ldr	r3, [r5, #0]
 80141ae:	4630      	mov	r0, r6
 80141b0:	68d9      	ldr	r1, [r3, #12]
 80141b2:	f000 f8a1 	bl	80142f8 <fputs>
 80141b6:	682b      	ldr	r3, [r5, #0]
 80141b8:	200a      	movs	r0, #10
 80141ba:	68d9      	ldr	r1, [r3, #12]
 80141bc:	f000 f85a 	bl	8014274 <fputc>
 80141c0:	f7ff f938 	bl	8013434 <__cxa_end_catch>
 80141c4:	e7e0      	b.n	8014188 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 80141c6:	f7ff f8f5 	bl	80133b4 <__cxa_begin_catch>
 80141ca:	f7ff f933 	bl	8013434 <__cxa_end_catch>
 80141ce:	e7db      	b.n	8014188 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa4>
 80141d0:	f7ff f930 	bl	8013434 <__cxa_end_catch>
 80141d4:	f7ff fb00 	bl	80137d8 <__cxa_end_cleanup>
 80141d8:	20032ff8 	.word	0x20032ff8
 80141dc:	20000030 	.word	0x20000030
 80141e0:	0801ae1c 	.word	0x0801ae1c
 80141e4:	0801ae50 	.word	0x0801ae50
 80141e8:	0801adfc 	.word	0x0801adfc
 80141ec:	0801ae54 	.word	0x0801ae54
 80141f0:	0801ae84 	.word	0x0801ae84

080141f4 <__cxa_current_exception_type>:
 80141f4:	b508      	push	{r3, lr}
 80141f6:	f7ff fbbb 	bl	8013970 <__cxa_get_globals>
 80141fa:	6800      	ldr	r0, [r0, #0]
 80141fc:	b130      	cbz	r0, 801420c <__cxa_current_exception_type+0x18>
 80141fe:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8014202:	6800      	ldr	r0, [r0, #0]
 8014204:	2b01      	cmp	r3, #1
 8014206:	bf08      	it	eq
 8014208:	f850 0c78 	ldreq.w	r0, [r0, #-120]
 801420c:	bd08      	pop	{r3, pc}
 801420e:	bf00      	nop

08014210 <abort>:
 8014210:	b508      	push	{r3, lr}
 8014212:	2006      	movs	r0, #6
 8014214:	f000 fef2 	bl	8014ffc <raise>
 8014218:	2001      	movs	r0, #1
 801421a:	f7fe ff1f 	bl	801305c <_exit>
	...

08014220 <__errno>:
 8014220:	4b01      	ldr	r3, [pc, #4]	; (8014228 <__errno+0x8>)
 8014222:	6818      	ldr	r0, [r3, #0]
 8014224:	4770      	bx	lr
 8014226:	bf00      	nop
 8014228:	20000030 	.word	0x20000030

0801422c <_fputc_r>:
 801422c:	b570      	push	{r4, r5, r6, lr}
 801422e:	460e      	mov	r6, r1
 8014230:	4614      	mov	r4, r2
 8014232:	4605      	mov	r5, r0
 8014234:	b118      	cbz	r0, 801423e <_fputc_r+0x12>
 8014236:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014238:	b90b      	cbnz	r3, 801423e <_fputc_r+0x12>
 801423a:	f003 f94b 	bl	80174d4 <__sinit>
 801423e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014240:	07d8      	lsls	r0, r3, #31
 8014242:	d405      	bmi.n	8014250 <_fputc_r+0x24>
 8014244:	89a3      	ldrh	r3, [r4, #12]
 8014246:	0599      	lsls	r1, r3, #22
 8014248:	d402      	bmi.n	8014250 <_fputc_r+0x24>
 801424a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801424c:	f000 fa28 	bl	80146a0 <__retarget_lock_acquire_recursive>
 8014250:	4622      	mov	r2, r4
 8014252:	4628      	mov	r0, r5
 8014254:	4631      	mov	r1, r6
 8014256:	f000 fcb3 	bl	8014bc0 <_putc_r>
 801425a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801425c:	07da      	lsls	r2, r3, #31
 801425e:	4605      	mov	r5, r0
 8014260:	d405      	bmi.n	801426e <_fputc_r+0x42>
 8014262:	89a3      	ldrh	r3, [r4, #12]
 8014264:	059b      	lsls	r3, r3, #22
 8014266:	d402      	bmi.n	801426e <_fputc_r+0x42>
 8014268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801426a:	f000 fa1a 	bl	80146a2 <__retarget_lock_release_recursive>
 801426e:	4628      	mov	r0, r5
 8014270:	bd70      	pop	{r4, r5, r6, pc}
	...

08014274 <fputc>:
 8014274:	4b02      	ldr	r3, [pc, #8]	; (8014280 <fputc+0xc>)
 8014276:	460a      	mov	r2, r1
 8014278:	4601      	mov	r1, r0
 801427a:	6818      	ldr	r0, [r3, #0]
 801427c:	f7ff bfd6 	b.w	801422c <_fputc_r>
 8014280:	20000030 	.word	0x20000030

08014284 <_fputs_r>:
 8014284:	b530      	push	{r4, r5, lr}
 8014286:	b087      	sub	sp, #28
 8014288:	4605      	mov	r5, r0
 801428a:	4608      	mov	r0, r1
 801428c:	4614      	mov	r4, r2
 801428e:	9101      	str	r1, [sp, #4]
 8014290:	f7f2 fd88 	bl	8006da4 <strlen>
 8014294:	ab01      	add	r3, sp, #4
 8014296:	9303      	str	r3, [sp, #12]
 8014298:	2301      	movs	r3, #1
 801429a:	9005      	str	r0, [sp, #20]
 801429c:	9002      	str	r0, [sp, #8]
 801429e:	9304      	str	r3, [sp, #16]
 80142a0:	b125      	cbz	r5, 80142ac <_fputs_r+0x28>
 80142a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80142a4:	b913      	cbnz	r3, 80142ac <_fputs_r+0x28>
 80142a6:	4628      	mov	r0, r5
 80142a8:	f003 f914 	bl	80174d4 <__sinit>
 80142ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142ae:	07db      	lsls	r3, r3, #31
 80142b0:	d405      	bmi.n	80142be <_fputs_r+0x3a>
 80142b2:	89a3      	ldrh	r3, [r4, #12]
 80142b4:	0598      	lsls	r0, r3, #22
 80142b6:	d402      	bmi.n	80142be <_fputs_r+0x3a>
 80142b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142ba:	f000 f9f1 	bl	80146a0 <__retarget_lock_acquire_recursive>
 80142be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142c2:	0499      	lsls	r1, r3, #18
 80142c4:	d406      	bmi.n	80142d4 <_fputs_r+0x50>
 80142c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80142ca:	81a3      	strh	r3, [r4, #12]
 80142cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80142d2:	6663      	str	r3, [r4, #100]	; 0x64
 80142d4:	aa03      	add	r2, sp, #12
 80142d6:	4628      	mov	r0, r5
 80142d8:	4621      	mov	r1, r4
 80142da:	f000 f815 	bl	8014308 <__sfvwrite_r>
 80142de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142e0:	07da      	lsls	r2, r3, #31
 80142e2:	4605      	mov	r5, r0
 80142e4:	d405      	bmi.n	80142f2 <_fputs_r+0x6e>
 80142e6:	89a3      	ldrh	r3, [r4, #12]
 80142e8:	059b      	lsls	r3, r3, #22
 80142ea:	d402      	bmi.n	80142f2 <_fputs_r+0x6e>
 80142ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142ee:	f000 f9d8 	bl	80146a2 <__retarget_lock_release_recursive>
 80142f2:	4628      	mov	r0, r5
 80142f4:	b007      	add	sp, #28
 80142f6:	bd30      	pop	{r4, r5, pc}

080142f8 <fputs>:
 80142f8:	4b02      	ldr	r3, [pc, #8]	; (8014304 <fputs+0xc>)
 80142fa:	460a      	mov	r2, r1
 80142fc:	4601      	mov	r1, r0
 80142fe:	6818      	ldr	r0, [r3, #0]
 8014300:	f7ff bfc0 	b.w	8014284 <_fputs_r>
 8014304:	20000030 	.word	0x20000030

08014308 <__sfvwrite_r>:
 8014308:	6893      	ldr	r3, [r2, #8]
 801430a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801430e:	4680      	mov	r8, r0
 8014310:	460c      	mov	r4, r1
 8014312:	4691      	mov	r9, r2
 8014314:	b91b      	cbnz	r3, 801431e <__sfvwrite_r+0x16>
 8014316:	2000      	movs	r0, #0
 8014318:	b003      	add	sp, #12
 801431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431e:	898b      	ldrh	r3, [r1, #12]
 8014320:	0718      	lsls	r0, r3, #28
 8014322:	d54f      	bpl.n	80143c4 <__sfvwrite_r+0xbc>
 8014324:	690b      	ldr	r3, [r1, #16]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d04c      	beq.n	80143c4 <__sfvwrite_r+0xbc>
 801432a:	89a5      	ldrh	r5, [r4, #12]
 801432c:	f8d9 6000 	ldr.w	r6, [r9]
 8014330:	f015 0702 	ands.w	r7, r5, #2
 8014334:	d169      	bne.n	801440a <__sfvwrite_r+0x102>
 8014336:	f015 0501 	ands.w	r5, r5, #1
 801433a:	f000 809a 	beq.w	8014472 <__sfvwrite_r+0x16a>
 801433e:	4638      	mov	r0, r7
 8014340:	46ba      	mov	sl, r7
 8014342:	46bb      	mov	fp, r7
 8014344:	f1bb 0f00 	cmp.w	fp, #0
 8014348:	f000 8103 	beq.w	8014552 <__sfvwrite_r+0x24a>
 801434c:	b950      	cbnz	r0, 8014364 <__sfvwrite_r+0x5c>
 801434e:	465a      	mov	r2, fp
 8014350:	210a      	movs	r1, #10
 8014352:	4650      	mov	r0, sl
 8014354:	f7f2 fccc 	bl	8006cf0 <memchr>
 8014358:	2800      	cmp	r0, #0
 801435a:	f000 80ff 	beq.w	801455c <__sfvwrite_r+0x254>
 801435e:	3001      	adds	r0, #1
 8014360:	eba0 070a 	sub.w	r7, r0, sl
 8014364:	6820      	ldr	r0, [r4, #0]
 8014366:	6921      	ldr	r1, [r4, #16]
 8014368:	6962      	ldr	r2, [r4, #20]
 801436a:	455f      	cmp	r7, fp
 801436c:	463b      	mov	r3, r7
 801436e:	bf28      	it	cs
 8014370:	465b      	movcs	r3, fp
 8014372:	4288      	cmp	r0, r1
 8014374:	f240 80f5 	bls.w	8014562 <__sfvwrite_r+0x25a>
 8014378:	68a5      	ldr	r5, [r4, #8]
 801437a:	4415      	add	r5, r2
 801437c:	42ab      	cmp	r3, r5
 801437e:	f340 80f0 	ble.w	8014562 <__sfvwrite_r+0x25a>
 8014382:	4651      	mov	r1, sl
 8014384:	462a      	mov	r2, r5
 8014386:	f000 fbed 	bl	8014b64 <memmove>
 801438a:	6823      	ldr	r3, [r4, #0]
 801438c:	442b      	add	r3, r5
 801438e:	6023      	str	r3, [r4, #0]
 8014390:	4621      	mov	r1, r4
 8014392:	4640      	mov	r0, r8
 8014394:	f003 f832 	bl	80173fc <_fflush_r>
 8014398:	2800      	cmp	r0, #0
 801439a:	d165      	bne.n	8014468 <__sfvwrite_r+0x160>
 801439c:	1b7f      	subs	r7, r7, r5
 801439e:	f040 80fa 	bne.w	8014596 <__sfvwrite_r+0x28e>
 80143a2:	4621      	mov	r1, r4
 80143a4:	4640      	mov	r0, r8
 80143a6:	f003 f829 	bl	80173fc <_fflush_r>
 80143aa:	2800      	cmp	r0, #0
 80143ac:	d15c      	bne.n	8014468 <__sfvwrite_r+0x160>
 80143ae:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80143b2:	44aa      	add	sl, r5
 80143b4:	ebab 0b05 	sub.w	fp, fp, r5
 80143b8:	1b5d      	subs	r5, r3, r5
 80143ba:	f8c9 5008 	str.w	r5, [r9, #8]
 80143be:	2d00      	cmp	r5, #0
 80143c0:	d1c0      	bne.n	8014344 <__sfvwrite_r+0x3c>
 80143c2:	e7a8      	b.n	8014316 <__sfvwrite_r+0xe>
 80143c4:	4621      	mov	r1, r4
 80143c6:	4640      	mov	r0, r8
 80143c8:	f002 f8ec 	bl	80165a4 <__swsetup_r>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d0ac      	beq.n	801432a <__sfvwrite_r+0x22>
 80143d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143d4:	e7a0      	b.n	8014318 <__sfvwrite_r+0x10>
 80143d6:	e9d6 a700 	ldrd	sl, r7, [r6]
 80143da:	3608      	adds	r6, #8
 80143dc:	2f00      	cmp	r7, #0
 80143de:	d0fa      	beq.n	80143d6 <__sfvwrite_r+0xce>
 80143e0:	455f      	cmp	r7, fp
 80143e2:	463b      	mov	r3, r7
 80143e4:	4652      	mov	r2, sl
 80143e6:	bf28      	it	cs
 80143e8:	465b      	movcs	r3, fp
 80143ea:	69e1      	ldr	r1, [r4, #28]
 80143ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80143ee:	4640      	mov	r0, r8
 80143f0:	47a8      	blx	r5
 80143f2:	2800      	cmp	r0, #0
 80143f4:	dd38      	ble.n	8014468 <__sfvwrite_r+0x160>
 80143f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80143fa:	4482      	add	sl, r0
 80143fc:	1a3f      	subs	r7, r7, r0
 80143fe:	1a18      	subs	r0, r3, r0
 8014400:	f8c9 0008 	str.w	r0, [r9, #8]
 8014404:	2800      	cmp	r0, #0
 8014406:	d1e9      	bne.n	80143dc <__sfvwrite_r+0xd4>
 8014408:	e785      	b.n	8014316 <__sfvwrite_r+0xe>
 801440a:	f04f 0a00 	mov.w	sl, #0
 801440e:	4657      	mov	r7, sl
 8014410:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80145a0 <__sfvwrite_r+0x298>
 8014414:	e7e2      	b.n	80143dc <__sfvwrite_r+0xd4>
 8014416:	e9d6 5a00 	ldrd	r5, sl, [r6]
 801441a:	3608      	adds	r6, #8
 801441c:	f1ba 0f00 	cmp.w	sl, #0
 8014420:	d0f9      	beq.n	8014416 <__sfvwrite_r+0x10e>
 8014422:	89a2      	ldrh	r2, [r4, #12]
 8014424:	68a3      	ldr	r3, [r4, #8]
 8014426:	6820      	ldr	r0, [r4, #0]
 8014428:	0591      	lsls	r1, r2, #22
 801442a:	d564      	bpl.n	80144f6 <__sfvwrite_r+0x1ee>
 801442c:	4553      	cmp	r3, sl
 801442e:	d836      	bhi.n	801449e <__sfvwrite_r+0x196>
 8014430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014434:	d033      	beq.n	801449e <__sfvwrite_r+0x196>
 8014436:	6921      	ldr	r1, [r4, #16]
 8014438:	6967      	ldr	r7, [r4, #20]
 801443a:	eba0 0b01 	sub.w	fp, r0, r1
 801443e:	2302      	movs	r3, #2
 8014440:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014444:	fb97 f7f3 	sdiv	r7, r7, r3
 8014448:	f10b 0301 	add.w	r3, fp, #1
 801444c:	4453      	add	r3, sl
 801444e:	429f      	cmp	r7, r3
 8014450:	bf38      	it	cc
 8014452:	461f      	movcc	r7, r3
 8014454:	0553      	lsls	r3, r2, #21
 8014456:	d53e      	bpl.n	80144d6 <__sfvwrite_r+0x1ce>
 8014458:	4639      	mov	r1, r7
 801445a:	4640      	mov	r0, r8
 801445c:	f000 f932 	bl	80146c4 <_malloc_r>
 8014460:	b948      	cbnz	r0, 8014476 <__sfvwrite_r+0x16e>
 8014462:	230c      	movs	r3, #12
 8014464:	f8c8 3000 	str.w	r3, [r8]
 8014468:	89a3      	ldrh	r3, [r4, #12]
 801446a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801446e:	81a3      	strh	r3, [r4, #12]
 8014470:	e7ae      	b.n	80143d0 <__sfvwrite_r+0xc8>
 8014472:	46aa      	mov	sl, r5
 8014474:	e7d2      	b.n	801441c <__sfvwrite_r+0x114>
 8014476:	465a      	mov	r2, fp
 8014478:	6921      	ldr	r1, [r4, #16]
 801447a:	9001      	str	r0, [sp, #4]
 801447c:	f000 fb67 	bl	8014b4e <memcpy>
 8014480:	89a2      	ldrh	r2, [r4, #12]
 8014482:	9b01      	ldr	r3, [sp, #4]
 8014484:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8014488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801448c:	81a2      	strh	r2, [r4, #12]
 801448e:	6123      	str	r3, [r4, #16]
 8014490:	6167      	str	r7, [r4, #20]
 8014492:	445b      	add	r3, fp
 8014494:	eba7 070b 	sub.w	r7, r7, fp
 8014498:	6023      	str	r3, [r4, #0]
 801449a:	60a7      	str	r7, [r4, #8]
 801449c:	4653      	mov	r3, sl
 801449e:	4553      	cmp	r3, sl
 80144a0:	bf28      	it	cs
 80144a2:	4653      	movcs	r3, sl
 80144a4:	461a      	mov	r2, r3
 80144a6:	4629      	mov	r1, r5
 80144a8:	6820      	ldr	r0, [r4, #0]
 80144aa:	9301      	str	r3, [sp, #4]
 80144ac:	f000 fb5a 	bl	8014b64 <memmove>
 80144b0:	68a2      	ldr	r2, [r4, #8]
 80144b2:	9b01      	ldr	r3, [sp, #4]
 80144b4:	1ad2      	subs	r2, r2, r3
 80144b6:	60a2      	str	r2, [r4, #8]
 80144b8:	6822      	ldr	r2, [r4, #0]
 80144ba:	4413      	add	r3, r2
 80144bc:	4657      	mov	r7, sl
 80144be:	6023      	str	r3, [r4, #0]
 80144c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80144c4:	443d      	add	r5, r7
 80144c6:	ebaa 0a07 	sub.w	sl, sl, r7
 80144ca:	1bdf      	subs	r7, r3, r7
 80144cc:	f8c9 7008 	str.w	r7, [r9, #8]
 80144d0:	2f00      	cmp	r7, #0
 80144d2:	d1a3      	bne.n	801441c <__sfvwrite_r+0x114>
 80144d4:	e71f      	b.n	8014316 <__sfvwrite_r+0xe>
 80144d6:	463a      	mov	r2, r7
 80144d8:	4640      	mov	r0, r8
 80144da:	f000 fbad 	bl	8014c38 <_realloc_r>
 80144de:	4603      	mov	r3, r0
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d1d4      	bne.n	801448e <__sfvwrite_r+0x186>
 80144e4:	6921      	ldr	r1, [r4, #16]
 80144e6:	4640      	mov	r0, r8
 80144e8:	f003 f884 	bl	80175f4 <_free_r>
 80144ec:	89a3      	ldrh	r3, [r4, #12]
 80144ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80144f2:	81a3      	strh	r3, [r4, #12]
 80144f4:	e7b5      	b.n	8014462 <__sfvwrite_r+0x15a>
 80144f6:	6922      	ldr	r2, [r4, #16]
 80144f8:	4282      	cmp	r2, r0
 80144fa:	d302      	bcc.n	8014502 <__sfvwrite_r+0x1fa>
 80144fc:	6962      	ldr	r2, [r4, #20]
 80144fe:	4552      	cmp	r2, sl
 8014500:	d916      	bls.n	8014530 <__sfvwrite_r+0x228>
 8014502:	4553      	cmp	r3, sl
 8014504:	bf28      	it	cs
 8014506:	4653      	movcs	r3, sl
 8014508:	461a      	mov	r2, r3
 801450a:	4629      	mov	r1, r5
 801450c:	461f      	mov	r7, r3
 801450e:	f000 fb29 	bl	8014b64 <memmove>
 8014512:	68a3      	ldr	r3, [r4, #8]
 8014514:	6822      	ldr	r2, [r4, #0]
 8014516:	1bdb      	subs	r3, r3, r7
 8014518:	443a      	add	r2, r7
 801451a:	60a3      	str	r3, [r4, #8]
 801451c:	6022      	str	r2, [r4, #0]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d1ce      	bne.n	80144c0 <__sfvwrite_r+0x1b8>
 8014522:	4621      	mov	r1, r4
 8014524:	4640      	mov	r0, r8
 8014526:	f002 ff69 	bl	80173fc <_fflush_r>
 801452a:	2800      	cmp	r0, #0
 801452c:	d0c8      	beq.n	80144c0 <__sfvwrite_r+0x1b8>
 801452e:	e79b      	b.n	8014468 <__sfvwrite_r+0x160>
 8014530:	4b1a      	ldr	r3, [pc, #104]	; (801459c <__sfvwrite_r+0x294>)
 8014532:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8014534:	69e1      	ldr	r1, [r4, #28]
 8014536:	459a      	cmp	sl, r3
 8014538:	bf94      	ite	ls
 801453a:	4653      	movls	r3, sl
 801453c:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8014540:	4640      	mov	r0, r8
 8014542:	fb93 f3f2 	sdiv	r3, r3, r2
 8014546:	4353      	muls	r3, r2
 8014548:	462a      	mov	r2, r5
 801454a:	47b8      	blx	r7
 801454c:	1e07      	subs	r7, r0, #0
 801454e:	dcb7      	bgt.n	80144c0 <__sfvwrite_r+0x1b8>
 8014550:	e78a      	b.n	8014468 <__sfvwrite_r+0x160>
 8014552:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8014556:	2000      	movs	r0, #0
 8014558:	3608      	adds	r6, #8
 801455a:	e6f3      	b.n	8014344 <__sfvwrite_r+0x3c>
 801455c:	f10b 0701 	add.w	r7, fp, #1
 8014560:	e700      	b.n	8014364 <__sfvwrite_r+0x5c>
 8014562:	429a      	cmp	r2, r3
 8014564:	dc09      	bgt.n	801457a <__sfvwrite_r+0x272>
 8014566:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014568:	69e1      	ldr	r1, [r4, #28]
 801456a:	4613      	mov	r3, r2
 801456c:	4640      	mov	r0, r8
 801456e:	4652      	mov	r2, sl
 8014570:	47a8      	blx	r5
 8014572:	1e05      	subs	r5, r0, #0
 8014574:	f73f af12 	bgt.w	801439c <__sfvwrite_r+0x94>
 8014578:	e776      	b.n	8014468 <__sfvwrite_r+0x160>
 801457a:	461a      	mov	r2, r3
 801457c:	4651      	mov	r1, sl
 801457e:	9301      	str	r3, [sp, #4]
 8014580:	f000 faf0 	bl	8014b64 <memmove>
 8014584:	9b01      	ldr	r3, [sp, #4]
 8014586:	68a2      	ldr	r2, [r4, #8]
 8014588:	1ad2      	subs	r2, r2, r3
 801458a:	60a2      	str	r2, [r4, #8]
 801458c:	6822      	ldr	r2, [r4, #0]
 801458e:	441a      	add	r2, r3
 8014590:	6022      	str	r2, [r4, #0]
 8014592:	461d      	mov	r5, r3
 8014594:	e702      	b.n	801439c <__sfvwrite_r+0x94>
 8014596:	2001      	movs	r0, #1
 8014598:	e709      	b.n	80143ae <__sfvwrite_r+0xa6>
 801459a:	bf00      	nop
 801459c:	7ffffffe 	.word	0x7ffffffe
 80145a0:	7ffffc00 	.word	0x7ffffc00

080145a4 <_fwrite_r>:
 80145a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145a8:	b086      	sub	sp, #24
 80145aa:	fb02 f503 	mul.w	r5, r2, r3
 80145ae:	461e      	mov	r6, r3
 80145b0:	ab01      	add	r3, sp, #4
 80145b2:	9303      	str	r3, [sp, #12]
 80145b4:	2301      	movs	r3, #1
 80145b6:	4617      	mov	r7, r2
 80145b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80145ba:	9101      	str	r1, [sp, #4]
 80145bc:	9502      	str	r5, [sp, #8]
 80145be:	9505      	str	r5, [sp, #20]
 80145c0:	9304      	str	r3, [sp, #16]
 80145c2:	4680      	mov	r8, r0
 80145c4:	b118      	cbz	r0, 80145ce <_fwrite_r+0x2a>
 80145c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80145c8:	b90b      	cbnz	r3, 80145ce <_fwrite_r+0x2a>
 80145ca:	f002 ff83 	bl	80174d4 <__sinit>
 80145ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145d0:	07d8      	lsls	r0, r3, #31
 80145d2:	d405      	bmi.n	80145e0 <_fwrite_r+0x3c>
 80145d4:	89a3      	ldrh	r3, [r4, #12]
 80145d6:	0599      	lsls	r1, r3, #22
 80145d8:	d402      	bmi.n	80145e0 <_fwrite_r+0x3c>
 80145da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145dc:	f000 f860 	bl	80146a0 <__retarget_lock_acquire_recursive>
 80145e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145e4:	049a      	lsls	r2, r3, #18
 80145e6:	d406      	bmi.n	80145f6 <_fwrite_r+0x52>
 80145e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80145ec:	81a3      	strh	r3, [r4, #12]
 80145ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80145f4:	6663      	str	r3, [r4, #100]	; 0x64
 80145f6:	aa03      	add	r2, sp, #12
 80145f8:	4621      	mov	r1, r4
 80145fa:	4640      	mov	r0, r8
 80145fc:	f7ff fe84 	bl	8014308 <__sfvwrite_r>
 8014600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014602:	b958      	cbnz	r0, 801461c <_fwrite_r+0x78>
 8014604:	07d8      	lsls	r0, r3, #31
 8014606:	d405      	bmi.n	8014614 <_fwrite_r+0x70>
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	0599      	lsls	r1, r3, #22
 801460c:	d402      	bmi.n	8014614 <_fwrite_r+0x70>
 801460e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014610:	f000 f847 	bl	80146a2 <__retarget_lock_release_recursive>
 8014614:	4630      	mov	r0, r6
 8014616:	b006      	add	sp, #24
 8014618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461c:	07da      	lsls	r2, r3, #31
 801461e:	d405      	bmi.n	801462c <_fwrite_r+0x88>
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	059b      	lsls	r3, r3, #22
 8014624:	d402      	bmi.n	801462c <_fwrite_r+0x88>
 8014626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014628:	f000 f83b 	bl	80146a2 <__retarget_lock_release_recursive>
 801462c:	9b05      	ldr	r3, [sp, #20]
 801462e:	1aed      	subs	r5, r5, r3
 8014630:	fbb5 f6f7 	udiv	r6, r5, r7
 8014634:	e7ee      	b.n	8014614 <_fwrite_r+0x70>
	...

08014638 <fwrite>:
 8014638:	b507      	push	{r0, r1, r2, lr}
 801463a:	9300      	str	r3, [sp, #0]
 801463c:	4613      	mov	r3, r2
 801463e:	460a      	mov	r2, r1
 8014640:	4601      	mov	r1, r0
 8014642:	4803      	ldr	r0, [pc, #12]	; (8014650 <fwrite+0x18>)
 8014644:	6800      	ldr	r0, [r0, #0]
 8014646:	f7ff ffad 	bl	80145a4 <_fwrite_r>
 801464a:	b003      	add	sp, #12
 801464c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014650:	20000030 	.word	0x20000030

08014654 <__libc_init_array>:
 8014654:	b570      	push	{r4, r5, r6, lr}
 8014656:	4e0d      	ldr	r6, [pc, #52]	; (801468c <__libc_init_array+0x38>)
 8014658:	4c0d      	ldr	r4, [pc, #52]	; (8014690 <__libc_init_array+0x3c>)
 801465a:	1ba4      	subs	r4, r4, r6
 801465c:	10a4      	asrs	r4, r4, #2
 801465e:	2500      	movs	r5, #0
 8014660:	42a5      	cmp	r5, r4
 8014662:	d109      	bne.n	8014678 <__libc_init_array+0x24>
 8014664:	4e0b      	ldr	r6, [pc, #44]	; (8014694 <__libc_init_array+0x40>)
 8014666:	4c0c      	ldr	r4, [pc, #48]	; (8014698 <__libc_init_array+0x44>)
 8014668:	f003 fe3e 	bl	80182e8 <_init>
 801466c:	1ba4      	subs	r4, r4, r6
 801466e:	10a4      	asrs	r4, r4, #2
 8014670:	2500      	movs	r5, #0
 8014672:	42a5      	cmp	r5, r4
 8014674:	d105      	bne.n	8014682 <__libc_init_array+0x2e>
 8014676:	bd70      	pop	{r4, r5, r6, pc}
 8014678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801467c:	4798      	blx	r3
 801467e:	3501      	adds	r5, #1
 8014680:	e7ee      	b.n	8014660 <__libc_init_array+0xc>
 8014682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014686:	4798      	blx	r3
 8014688:	3501      	adds	r5, #1
 801468a:	e7f2      	b.n	8014672 <__libc_init_array+0x1e>
 801468c:	0801bbe4 	.word	0x0801bbe4
 8014690:	0801bbe4 	.word	0x0801bbe4
 8014694:	0801bbe4 	.word	0x0801bbe4
 8014698:	0801bbf4 	.word	0x0801bbf4

0801469c <__retarget_lock_init_recursive>:
 801469c:	4770      	bx	lr

0801469e <__retarget_lock_close_recursive>:
 801469e:	4770      	bx	lr

080146a0 <__retarget_lock_acquire_recursive>:
 80146a0:	4770      	bx	lr

080146a2 <__retarget_lock_release_recursive>:
 80146a2:	4770      	bx	lr

080146a4 <malloc>:
 80146a4:	4b02      	ldr	r3, [pc, #8]	; (80146b0 <malloc+0xc>)
 80146a6:	4601      	mov	r1, r0
 80146a8:	6818      	ldr	r0, [r3, #0]
 80146aa:	f000 b80b 	b.w	80146c4 <_malloc_r>
 80146ae:	bf00      	nop
 80146b0:	20000030 	.word	0x20000030

080146b4 <free>:
 80146b4:	4b02      	ldr	r3, [pc, #8]	; (80146c0 <free+0xc>)
 80146b6:	4601      	mov	r1, r0
 80146b8:	6818      	ldr	r0, [r3, #0]
 80146ba:	f002 bf9b 	b.w	80175f4 <_free_r>
 80146be:	bf00      	nop
 80146c0:	20000030 	.word	0x20000030

080146c4 <_malloc_r>:
 80146c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146c8:	f101 050b 	add.w	r5, r1, #11
 80146cc:	2d16      	cmp	r5, #22
 80146ce:	4606      	mov	r6, r0
 80146d0:	d906      	bls.n	80146e0 <_malloc_r+0x1c>
 80146d2:	f035 0507 	bics.w	r5, r5, #7
 80146d6:	d504      	bpl.n	80146e2 <_malloc_r+0x1e>
 80146d8:	230c      	movs	r3, #12
 80146da:	6033      	str	r3, [r6, #0]
 80146dc:	2400      	movs	r4, #0
 80146de:	e1a8      	b.n	8014a32 <_malloc_r+0x36e>
 80146e0:	2510      	movs	r5, #16
 80146e2:	428d      	cmp	r5, r1
 80146e4:	d3f8      	bcc.n	80146d8 <_malloc_r+0x14>
 80146e6:	4630      	mov	r0, r6
 80146e8:	f000 fa5e 	bl	8014ba8 <__malloc_lock>
 80146ec:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80146f0:	4fc0      	ldr	r7, [pc, #768]	; (80149f4 <_malloc_r+0x330>)
 80146f2:	d238      	bcs.n	8014766 <_malloc_r+0xa2>
 80146f4:	f105 0208 	add.w	r2, r5, #8
 80146f8:	443a      	add	r2, r7
 80146fa:	f1a2 0108 	sub.w	r1, r2, #8
 80146fe:	6854      	ldr	r4, [r2, #4]
 8014700:	428c      	cmp	r4, r1
 8014702:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8014706:	d102      	bne.n	801470e <_malloc_r+0x4a>
 8014708:	68d4      	ldr	r4, [r2, #12]
 801470a:	42a2      	cmp	r2, r4
 801470c:	d010      	beq.n	8014730 <_malloc_r+0x6c>
 801470e:	6863      	ldr	r3, [r4, #4]
 8014710:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8014714:	f023 0303 	bic.w	r3, r3, #3
 8014718:	60ca      	str	r2, [r1, #12]
 801471a:	4423      	add	r3, r4
 801471c:	6091      	str	r1, [r2, #8]
 801471e:	685a      	ldr	r2, [r3, #4]
 8014720:	f042 0201 	orr.w	r2, r2, #1
 8014724:	605a      	str	r2, [r3, #4]
 8014726:	4630      	mov	r0, r6
 8014728:	f000 fa44 	bl	8014bb4 <__malloc_unlock>
 801472c:	3408      	adds	r4, #8
 801472e:	e180      	b.n	8014a32 <_malloc_r+0x36e>
 8014730:	3302      	adds	r3, #2
 8014732:	4ab1      	ldr	r2, [pc, #708]	; (80149f8 <_malloc_r+0x334>)
 8014734:	693c      	ldr	r4, [r7, #16]
 8014736:	4294      	cmp	r4, r2
 8014738:	4611      	mov	r1, r2
 801473a:	d075      	beq.n	8014828 <_malloc_r+0x164>
 801473c:	6860      	ldr	r0, [r4, #4]
 801473e:	f020 0c03 	bic.w	ip, r0, #3
 8014742:	ebac 0005 	sub.w	r0, ip, r5
 8014746:	280f      	cmp	r0, #15
 8014748:	dd48      	ble.n	80147dc <_malloc_r+0x118>
 801474a:	1963      	adds	r3, r4, r5
 801474c:	f045 0501 	orr.w	r5, r5, #1
 8014750:	6065      	str	r5, [r4, #4]
 8014752:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8014756:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801475a:	f040 0201 	orr.w	r2, r0, #1
 801475e:	605a      	str	r2, [r3, #4]
 8014760:	f844 000c 	str.w	r0, [r4, ip]
 8014764:	e7df      	b.n	8014726 <_malloc_r+0x62>
 8014766:	0a6b      	lsrs	r3, r5, #9
 8014768:	d02a      	beq.n	80147c0 <_malloc_r+0xfc>
 801476a:	2b04      	cmp	r3, #4
 801476c:	d812      	bhi.n	8014794 <_malloc_r+0xd0>
 801476e:	09ab      	lsrs	r3, r5, #6
 8014770:	3338      	adds	r3, #56	; 0x38
 8014772:	1c5a      	adds	r2, r3, #1
 8014774:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8014778:	f1a2 0c08 	sub.w	ip, r2, #8
 801477c:	6854      	ldr	r4, [r2, #4]
 801477e:	4564      	cmp	r4, ip
 8014780:	d006      	beq.n	8014790 <_malloc_r+0xcc>
 8014782:	6862      	ldr	r2, [r4, #4]
 8014784:	f022 0203 	bic.w	r2, r2, #3
 8014788:	1b50      	subs	r0, r2, r5
 801478a:	280f      	cmp	r0, #15
 801478c:	dd1c      	ble.n	80147c8 <_malloc_r+0x104>
 801478e:	3b01      	subs	r3, #1
 8014790:	3301      	adds	r3, #1
 8014792:	e7ce      	b.n	8014732 <_malloc_r+0x6e>
 8014794:	2b14      	cmp	r3, #20
 8014796:	d801      	bhi.n	801479c <_malloc_r+0xd8>
 8014798:	335b      	adds	r3, #91	; 0x5b
 801479a:	e7ea      	b.n	8014772 <_malloc_r+0xae>
 801479c:	2b54      	cmp	r3, #84	; 0x54
 801479e:	d802      	bhi.n	80147a6 <_malloc_r+0xe2>
 80147a0:	0b2b      	lsrs	r3, r5, #12
 80147a2:	336e      	adds	r3, #110	; 0x6e
 80147a4:	e7e5      	b.n	8014772 <_malloc_r+0xae>
 80147a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80147aa:	d802      	bhi.n	80147b2 <_malloc_r+0xee>
 80147ac:	0beb      	lsrs	r3, r5, #15
 80147ae:	3377      	adds	r3, #119	; 0x77
 80147b0:	e7df      	b.n	8014772 <_malloc_r+0xae>
 80147b2:	f240 5254 	movw	r2, #1364	; 0x554
 80147b6:	4293      	cmp	r3, r2
 80147b8:	d804      	bhi.n	80147c4 <_malloc_r+0x100>
 80147ba:	0cab      	lsrs	r3, r5, #18
 80147bc:	337c      	adds	r3, #124	; 0x7c
 80147be:	e7d8      	b.n	8014772 <_malloc_r+0xae>
 80147c0:	233f      	movs	r3, #63	; 0x3f
 80147c2:	e7d6      	b.n	8014772 <_malloc_r+0xae>
 80147c4:	237e      	movs	r3, #126	; 0x7e
 80147c6:	e7d4      	b.n	8014772 <_malloc_r+0xae>
 80147c8:	2800      	cmp	r0, #0
 80147ca:	68e1      	ldr	r1, [r4, #12]
 80147cc:	db04      	blt.n	80147d8 <_malloc_r+0x114>
 80147ce:	68a3      	ldr	r3, [r4, #8]
 80147d0:	60d9      	str	r1, [r3, #12]
 80147d2:	608b      	str	r3, [r1, #8]
 80147d4:	18a3      	adds	r3, r4, r2
 80147d6:	e7a2      	b.n	801471e <_malloc_r+0x5a>
 80147d8:	460c      	mov	r4, r1
 80147da:	e7d0      	b.n	801477e <_malloc_r+0xba>
 80147dc:	2800      	cmp	r0, #0
 80147de:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80147e2:	db07      	blt.n	80147f4 <_malloc_r+0x130>
 80147e4:	44a4      	add	ip, r4
 80147e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80147ea:	f043 0301 	orr.w	r3, r3, #1
 80147ee:	f8cc 3004 	str.w	r3, [ip, #4]
 80147f2:	e798      	b.n	8014726 <_malloc_r+0x62>
 80147f4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f080 8099 	bcs.w	8014930 <_malloc_r+0x26c>
 80147fe:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8014802:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8014806:	2201      	movs	r2, #1
 8014808:	f10c 0c01 	add.w	ip, ip, #1
 801480c:	fa02 f20e 	lsl.w	r2, r2, lr
 8014810:	4310      	orrs	r0, r2
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8014818:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 801481c:	3a08      	subs	r2, #8
 801481e:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8014822:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8014826:	60c4      	str	r4, [r0, #12]
 8014828:	2001      	movs	r0, #1
 801482a:	109a      	asrs	r2, r3, #2
 801482c:	fa00 f202 	lsl.w	r2, r0, r2
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	4290      	cmp	r0, r2
 8014834:	d326      	bcc.n	8014884 <_malloc_r+0x1c0>
 8014836:	4210      	tst	r0, r2
 8014838:	d106      	bne.n	8014848 <_malloc_r+0x184>
 801483a:	f023 0303 	bic.w	r3, r3, #3
 801483e:	0052      	lsls	r2, r2, #1
 8014840:	4210      	tst	r0, r2
 8014842:	f103 0304 	add.w	r3, r3, #4
 8014846:	d0fa      	beq.n	801483e <_malloc_r+0x17a>
 8014848:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 801484c:	46e1      	mov	r9, ip
 801484e:	4698      	mov	r8, r3
 8014850:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8014854:	454c      	cmp	r4, r9
 8014856:	f040 80af 	bne.w	80149b8 <_malloc_r+0x2f4>
 801485a:	f108 0801 	add.w	r8, r8, #1
 801485e:	f018 0f03 	tst.w	r8, #3
 8014862:	f109 0908 	add.w	r9, r9, #8
 8014866:	d1f3      	bne.n	8014850 <_malloc_r+0x18c>
 8014868:	0798      	lsls	r0, r3, #30
 801486a:	f040 80e8 	bne.w	8014a3e <_malloc_r+0x37a>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	ea23 0302 	bic.w	r3, r3, r2
 8014874:	607b      	str	r3, [r7, #4]
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	0052      	lsls	r2, r2, #1
 801487a:	4290      	cmp	r0, r2
 801487c:	d302      	bcc.n	8014884 <_malloc_r+0x1c0>
 801487e:	2a00      	cmp	r2, #0
 8014880:	f040 80ec 	bne.w	8014a5c <_malloc_r+0x398>
 8014884:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014888:	f8da 4004 	ldr.w	r4, [sl, #4]
 801488c:	f024 0203 	bic.w	r2, r4, #3
 8014890:	42aa      	cmp	r2, r5
 8014892:	d303      	bcc.n	801489c <_malloc_r+0x1d8>
 8014894:	1b53      	subs	r3, r2, r5
 8014896:	2b0f      	cmp	r3, #15
 8014898:	f300 8140 	bgt.w	8014b1c <_malloc_r+0x458>
 801489c:	4b57      	ldr	r3, [pc, #348]	; (80149fc <_malloc_r+0x338>)
 801489e:	9200      	str	r2, [sp, #0]
 80148a0:	2008      	movs	r0, #8
 80148a2:	681c      	ldr	r4, [r3, #0]
 80148a4:	f001 fe16 	bl	80164d4 <sysconf>
 80148a8:	4b55      	ldr	r3, [pc, #340]	; (8014a00 <_malloc_r+0x33c>)
 80148aa:	9a00      	ldr	r2, [sp, #0]
 80148ac:	6819      	ldr	r1, [r3, #0]
 80148ae:	3410      	adds	r4, #16
 80148b0:	3101      	adds	r1, #1
 80148b2:	442c      	add	r4, r5
 80148b4:	bf1f      	itttt	ne
 80148b6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 80148ba:	1824      	addne	r4, r4, r0
 80148bc:	4241      	negne	r1, r0
 80148be:	400c      	andne	r4, r1
 80148c0:	4680      	mov	r8, r0
 80148c2:	4621      	mov	r1, r4
 80148c4:	4630      	mov	r0, r6
 80148c6:	e9cd 2300 	strd	r2, r3, [sp]
 80148ca:	f000 fb5d 	bl	8014f88 <_sbrk_r>
 80148ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80148d2:	4683      	mov	fp, r0
 80148d4:	f000 80fb 	beq.w	8014ace <_malloc_r+0x40a>
 80148d8:	9a00      	ldr	r2, [sp, #0]
 80148da:	9b01      	ldr	r3, [sp, #4]
 80148dc:	eb0a 0102 	add.w	r1, sl, r2
 80148e0:	4281      	cmp	r1, r0
 80148e2:	d902      	bls.n	80148ea <_malloc_r+0x226>
 80148e4:	45ba      	cmp	sl, r7
 80148e6:	f040 80f2 	bne.w	8014ace <_malloc_r+0x40a>
 80148ea:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8014a0c <_malloc_r+0x348>
 80148ee:	f8d9 0000 	ldr.w	r0, [r9]
 80148f2:	4559      	cmp	r1, fp
 80148f4:	eb00 0e04 	add.w	lr, r0, r4
 80148f8:	f8c9 e000 	str.w	lr, [r9]
 80148fc:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8014900:	f040 80ae 	bne.w	8014a60 <_malloc_r+0x39c>
 8014904:	ea11 0f0c 	tst.w	r1, ip
 8014908:	f040 80aa 	bne.w	8014a60 <_malloc_r+0x39c>
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	4414      	add	r4, r2
 8014910:	f044 0401 	orr.w	r4, r4, #1
 8014914:	605c      	str	r4, [r3, #4]
 8014916:	4a3b      	ldr	r2, [pc, #236]	; (8014a04 <_malloc_r+0x340>)
 8014918:	f8d9 3000 	ldr.w	r3, [r9]
 801491c:	6811      	ldr	r1, [r2, #0]
 801491e:	428b      	cmp	r3, r1
 8014920:	bf88      	it	hi
 8014922:	6013      	strhi	r3, [r2, #0]
 8014924:	4a38      	ldr	r2, [pc, #224]	; (8014a08 <_malloc_r+0x344>)
 8014926:	6811      	ldr	r1, [r2, #0]
 8014928:	428b      	cmp	r3, r1
 801492a:	bf88      	it	hi
 801492c:	6013      	strhi	r3, [r2, #0]
 801492e:	e0ce      	b.n	8014ace <_malloc_r+0x40a>
 8014930:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8014934:	2a04      	cmp	r2, #4
 8014936:	d818      	bhi.n	801496a <_malloc_r+0x2a6>
 8014938:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801493c:	3238      	adds	r2, #56	; 0x38
 801493e:	f102 0e01 	add.w	lr, r2, #1
 8014942:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8014946:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 801494a:	45f0      	cmp	r8, lr
 801494c:	d12b      	bne.n	80149a6 <_malloc_r+0x2e2>
 801494e:	1092      	asrs	r2, r2, #2
 8014950:	f04f 0c01 	mov.w	ip, #1
 8014954:	fa0c f202 	lsl.w	r2, ip, r2
 8014958:	4310      	orrs	r0, r2
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8014960:	f8c8 4008 	str.w	r4, [r8, #8]
 8014964:	f8ce 400c 	str.w	r4, [lr, #12]
 8014968:	e75e      	b.n	8014828 <_malloc_r+0x164>
 801496a:	2a14      	cmp	r2, #20
 801496c:	d801      	bhi.n	8014972 <_malloc_r+0x2ae>
 801496e:	325b      	adds	r2, #91	; 0x5b
 8014970:	e7e5      	b.n	801493e <_malloc_r+0x27a>
 8014972:	2a54      	cmp	r2, #84	; 0x54
 8014974:	d803      	bhi.n	801497e <_malloc_r+0x2ba>
 8014976:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801497a:	326e      	adds	r2, #110	; 0x6e
 801497c:	e7df      	b.n	801493e <_malloc_r+0x27a>
 801497e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014982:	d803      	bhi.n	801498c <_malloc_r+0x2c8>
 8014984:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8014988:	3277      	adds	r2, #119	; 0x77
 801498a:	e7d8      	b.n	801493e <_malloc_r+0x27a>
 801498c:	f240 5e54 	movw	lr, #1364	; 0x554
 8014990:	4572      	cmp	r2, lr
 8014992:	bf9a      	itte	ls
 8014994:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8014998:	327c      	addls	r2, #124	; 0x7c
 801499a:	227e      	movhi	r2, #126	; 0x7e
 801499c:	e7cf      	b.n	801493e <_malloc_r+0x27a>
 801499e:	f8de e008 	ldr.w	lr, [lr, #8]
 80149a2:	45f0      	cmp	r8, lr
 80149a4:	d005      	beq.n	80149b2 <_malloc_r+0x2ee>
 80149a6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80149aa:	f022 0203 	bic.w	r2, r2, #3
 80149ae:	4562      	cmp	r2, ip
 80149b0:	d8f5      	bhi.n	801499e <_malloc_r+0x2da>
 80149b2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80149b6:	e7d1      	b.n	801495c <_malloc_r+0x298>
 80149b8:	6860      	ldr	r0, [r4, #4]
 80149ba:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80149be:	f020 0003 	bic.w	r0, r0, #3
 80149c2:	eba0 0a05 	sub.w	sl, r0, r5
 80149c6:	f1ba 0f0f 	cmp.w	sl, #15
 80149ca:	dd21      	ble.n	8014a10 <_malloc_r+0x34c>
 80149cc:	68a2      	ldr	r2, [r4, #8]
 80149ce:	1963      	adds	r3, r4, r5
 80149d0:	f045 0501 	orr.w	r5, r5, #1
 80149d4:	6065      	str	r5, [r4, #4]
 80149d6:	f8c2 e00c 	str.w	lr, [r2, #12]
 80149da:	f8ce 2008 	str.w	r2, [lr, #8]
 80149de:	f04a 0201 	orr.w	r2, sl, #1
 80149e2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80149e6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80149ea:	605a      	str	r2, [r3, #4]
 80149ec:	f844 a000 	str.w	sl, [r4, r0]
 80149f0:	e699      	b.n	8014726 <_malloc_r+0x62>
 80149f2:	bf00      	nop
 80149f4:	20000460 	.word	0x20000460
 80149f8:	20000468 	.word	0x20000468
 80149fc:	2003302c 	.word	0x2003302c
 8014a00:	20000868 	.word	0x20000868
 8014a04:	20033024 	.word	0x20033024
 8014a08:	20033028 	.word	0x20033028
 8014a0c:	20032ffc 	.word	0x20032ffc
 8014a10:	f1ba 0f00 	cmp.w	sl, #0
 8014a14:	db11      	blt.n	8014a3a <_malloc_r+0x376>
 8014a16:	4420      	add	r0, r4
 8014a18:	6843      	ldr	r3, [r0, #4]
 8014a1a:	f043 0301 	orr.w	r3, r3, #1
 8014a1e:	6043      	str	r3, [r0, #4]
 8014a20:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8014a24:	4630      	mov	r0, r6
 8014a26:	f8c3 e00c 	str.w	lr, [r3, #12]
 8014a2a:	f8ce 3008 	str.w	r3, [lr, #8]
 8014a2e:	f000 f8c1 	bl	8014bb4 <__malloc_unlock>
 8014a32:	4620      	mov	r0, r4
 8014a34:	b003      	add	sp, #12
 8014a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3a:	4674      	mov	r4, lr
 8014a3c:	e70a      	b.n	8014854 <_malloc_r+0x190>
 8014a3e:	f1ac 0008 	sub.w	r0, ip, #8
 8014a42:	f8dc c000 	ldr.w	ip, [ip]
 8014a46:	4584      	cmp	ip, r0
 8014a48:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8014a4c:	f43f af0c 	beq.w	8014868 <_malloc_r+0x1a4>
 8014a50:	e711      	b.n	8014876 <_malloc_r+0x1b2>
 8014a52:	3304      	adds	r3, #4
 8014a54:	0052      	lsls	r2, r2, #1
 8014a56:	4210      	tst	r0, r2
 8014a58:	d0fb      	beq.n	8014a52 <_malloc_r+0x38e>
 8014a5a:	e6f5      	b.n	8014848 <_malloc_r+0x184>
 8014a5c:	4643      	mov	r3, r8
 8014a5e:	e7fa      	b.n	8014a56 <_malloc_r+0x392>
 8014a60:	6818      	ldr	r0, [r3, #0]
 8014a62:	9200      	str	r2, [sp, #0]
 8014a64:	3001      	adds	r0, #1
 8014a66:	bf1b      	ittet	ne
 8014a68:	ebab 0101 	subne.w	r1, fp, r1
 8014a6c:	4471      	addne	r1, lr
 8014a6e:	f8c3 b000 	streq.w	fp, [r3]
 8014a72:	f8c9 1000 	strne.w	r1, [r9]
 8014a76:	f01b 0307 	ands.w	r3, fp, #7
 8014a7a:	bf1c      	itt	ne
 8014a7c:	f1c3 0308 	rsbne	r3, r3, #8
 8014a80:	449b      	addne	fp, r3
 8014a82:	445c      	add	r4, fp
 8014a84:	4498      	add	r8, r3
 8014a86:	ea04 030c 	and.w	r3, r4, ip
 8014a8a:	eba8 0803 	sub.w	r8, r8, r3
 8014a8e:	4641      	mov	r1, r8
 8014a90:	4630      	mov	r0, r6
 8014a92:	f000 fa79 	bl	8014f88 <_sbrk_r>
 8014a96:	1c43      	adds	r3, r0, #1
 8014a98:	bf04      	itt	eq
 8014a9a:	4658      	moveq	r0, fp
 8014a9c:	f04f 0800 	moveq.w	r8, #0
 8014aa0:	f8d9 3000 	ldr.w	r3, [r9]
 8014aa4:	f8c7 b008 	str.w	fp, [r7, #8]
 8014aa8:	eba0 000b 	sub.w	r0, r0, fp
 8014aac:	4440      	add	r0, r8
 8014aae:	4443      	add	r3, r8
 8014ab0:	f040 0001 	orr.w	r0, r0, #1
 8014ab4:	45ba      	cmp	sl, r7
 8014ab6:	9a00      	ldr	r2, [sp, #0]
 8014ab8:	f8c9 3000 	str.w	r3, [r9]
 8014abc:	f8cb 0004 	str.w	r0, [fp, #4]
 8014ac0:	f43f af29 	beq.w	8014916 <_malloc_r+0x252>
 8014ac4:	2a0f      	cmp	r2, #15
 8014ac6:	d810      	bhi.n	8014aea <_malloc_r+0x426>
 8014ac8:	2301      	movs	r3, #1
 8014aca:	f8cb 3004 	str.w	r3, [fp, #4]
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	685a      	ldr	r2, [r3, #4]
 8014ad2:	f022 0203 	bic.w	r2, r2, #3
 8014ad6:	42aa      	cmp	r2, r5
 8014ad8:	eba2 0305 	sub.w	r3, r2, r5
 8014adc:	d301      	bcc.n	8014ae2 <_malloc_r+0x41e>
 8014ade:	2b0f      	cmp	r3, #15
 8014ae0:	dc1c      	bgt.n	8014b1c <_malloc_r+0x458>
 8014ae2:	4630      	mov	r0, r6
 8014ae4:	f000 f866 	bl	8014bb4 <__malloc_unlock>
 8014ae8:	e5f8      	b.n	80146dc <_malloc_r+0x18>
 8014aea:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014aee:	f1a2 040c 	sub.w	r4, r2, #12
 8014af2:	f024 0407 	bic.w	r4, r4, #7
 8014af6:	f003 0301 	and.w	r3, r3, #1
 8014afa:	4323      	orrs	r3, r4
 8014afc:	f8ca 3004 	str.w	r3, [sl, #4]
 8014b00:	2205      	movs	r2, #5
 8014b02:	eb0a 0304 	add.w	r3, sl, r4
 8014b06:	2c0f      	cmp	r4, #15
 8014b08:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014b0c:	f67f af03 	bls.w	8014916 <_malloc_r+0x252>
 8014b10:	f10a 0108 	add.w	r1, sl, #8
 8014b14:	4630      	mov	r0, r6
 8014b16:	f002 fd6d 	bl	80175f4 <_free_r>
 8014b1a:	e6fc      	b.n	8014916 <_malloc_r+0x252>
 8014b1c:	68bc      	ldr	r4, [r7, #8]
 8014b1e:	f045 0201 	orr.w	r2, r5, #1
 8014b22:	4425      	add	r5, r4
 8014b24:	f043 0301 	orr.w	r3, r3, #1
 8014b28:	6062      	str	r2, [r4, #4]
 8014b2a:	60bd      	str	r5, [r7, #8]
 8014b2c:	606b      	str	r3, [r5, #4]
 8014b2e:	e5fa      	b.n	8014726 <_malloc_r+0x62>

08014b30 <memcmp>:
 8014b30:	b530      	push	{r4, r5, lr}
 8014b32:	2400      	movs	r4, #0
 8014b34:	42a2      	cmp	r2, r4
 8014b36:	d101      	bne.n	8014b3c <memcmp+0xc>
 8014b38:	2000      	movs	r0, #0
 8014b3a:	e007      	b.n	8014b4c <memcmp+0x1c>
 8014b3c:	5d03      	ldrb	r3, [r0, r4]
 8014b3e:	3401      	adds	r4, #1
 8014b40:	190d      	adds	r5, r1, r4
 8014b42:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014b46:	42ab      	cmp	r3, r5
 8014b48:	d0f4      	beq.n	8014b34 <memcmp+0x4>
 8014b4a:	1b58      	subs	r0, r3, r5
 8014b4c:	bd30      	pop	{r4, r5, pc}

08014b4e <memcpy>:
 8014b4e:	b510      	push	{r4, lr}
 8014b50:	1e43      	subs	r3, r0, #1
 8014b52:	440a      	add	r2, r1
 8014b54:	4291      	cmp	r1, r2
 8014b56:	d100      	bne.n	8014b5a <memcpy+0xc>
 8014b58:	bd10      	pop	{r4, pc}
 8014b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b62:	e7f7      	b.n	8014b54 <memcpy+0x6>

08014b64 <memmove>:
 8014b64:	4288      	cmp	r0, r1
 8014b66:	b510      	push	{r4, lr}
 8014b68:	eb01 0302 	add.w	r3, r1, r2
 8014b6c:	d807      	bhi.n	8014b7e <memmove+0x1a>
 8014b6e:	1e42      	subs	r2, r0, #1
 8014b70:	4299      	cmp	r1, r3
 8014b72:	d00a      	beq.n	8014b8a <memmove+0x26>
 8014b74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014b7c:	e7f8      	b.n	8014b70 <memmove+0xc>
 8014b7e:	4283      	cmp	r3, r0
 8014b80:	d9f5      	bls.n	8014b6e <memmove+0xa>
 8014b82:	1881      	adds	r1, r0, r2
 8014b84:	1ad2      	subs	r2, r2, r3
 8014b86:	42d3      	cmn	r3, r2
 8014b88:	d100      	bne.n	8014b8c <memmove+0x28>
 8014b8a:	bd10      	pop	{r4, pc}
 8014b8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014b90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014b94:	e7f7      	b.n	8014b86 <memmove+0x22>

08014b96 <memset>:
 8014b96:	4402      	add	r2, r0
 8014b98:	4603      	mov	r3, r0
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	d100      	bne.n	8014ba0 <memset+0xa>
 8014b9e:	4770      	bx	lr
 8014ba0:	f803 1b01 	strb.w	r1, [r3], #1
 8014ba4:	e7f9      	b.n	8014b9a <memset+0x4>
	...

08014ba8 <__malloc_lock>:
 8014ba8:	4801      	ldr	r0, [pc, #4]	; (8014bb0 <__malloc_lock+0x8>)
 8014baa:	f7ff bd79 	b.w	80146a0 <__retarget_lock_acquire_recursive>
 8014bae:	bf00      	nop
 8014bb0:	2003305c 	.word	0x2003305c

08014bb4 <__malloc_unlock>:
 8014bb4:	4801      	ldr	r0, [pc, #4]	; (8014bbc <__malloc_unlock+0x8>)
 8014bb6:	f7ff bd74 	b.w	80146a2 <__retarget_lock_release_recursive>
 8014bba:	bf00      	nop
 8014bbc:	2003305c 	.word	0x2003305c

08014bc0 <_putc_r>:
 8014bc0:	b570      	push	{r4, r5, r6, lr}
 8014bc2:	460d      	mov	r5, r1
 8014bc4:	4614      	mov	r4, r2
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	b118      	cbz	r0, 8014bd2 <_putc_r+0x12>
 8014bca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014bcc:	b90b      	cbnz	r3, 8014bd2 <_putc_r+0x12>
 8014bce:	f002 fc81 	bl	80174d4 <__sinit>
 8014bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bd4:	07d8      	lsls	r0, r3, #31
 8014bd6:	d405      	bmi.n	8014be4 <_putc_r+0x24>
 8014bd8:	89a3      	ldrh	r3, [r4, #12]
 8014bda:	0599      	lsls	r1, r3, #22
 8014bdc:	d402      	bmi.n	8014be4 <_putc_r+0x24>
 8014bde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014be0:	f7ff fd5e 	bl	80146a0 <__retarget_lock_acquire_recursive>
 8014be4:	68a3      	ldr	r3, [r4, #8]
 8014be6:	3b01      	subs	r3, #1
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	60a3      	str	r3, [r4, #8]
 8014bec:	da05      	bge.n	8014bfa <_putc_r+0x3a>
 8014bee:	69a2      	ldr	r2, [r4, #24]
 8014bf0:	4293      	cmp	r3, r2
 8014bf2:	db12      	blt.n	8014c1a <_putc_r+0x5a>
 8014bf4:	b2eb      	uxtb	r3, r5
 8014bf6:	2b0a      	cmp	r3, #10
 8014bf8:	d00f      	beq.n	8014c1a <_putc_r+0x5a>
 8014bfa:	6823      	ldr	r3, [r4, #0]
 8014bfc:	1c5a      	adds	r2, r3, #1
 8014bfe:	6022      	str	r2, [r4, #0]
 8014c00:	701d      	strb	r5, [r3, #0]
 8014c02:	b2ed      	uxtb	r5, r5
 8014c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c06:	07da      	lsls	r2, r3, #31
 8014c08:	d405      	bmi.n	8014c16 <_putc_r+0x56>
 8014c0a:	89a3      	ldrh	r3, [r4, #12]
 8014c0c:	059b      	lsls	r3, r3, #22
 8014c0e:	d402      	bmi.n	8014c16 <_putc_r+0x56>
 8014c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c12:	f7ff fd46 	bl	80146a2 <__retarget_lock_release_recursive>
 8014c16:	4628      	mov	r0, r5
 8014c18:	bd70      	pop	{r4, r5, r6, pc}
 8014c1a:	4629      	mov	r1, r5
 8014c1c:	4622      	mov	r2, r4
 8014c1e:	4630      	mov	r0, r6
 8014c20:	f001 fc65 	bl	80164ee <__swbuf_r>
 8014c24:	4605      	mov	r5, r0
 8014c26:	e7ed      	b.n	8014c04 <_putc_r+0x44>

08014c28 <realloc>:
 8014c28:	4b02      	ldr	r3, [pc, #8]	; (8014c34 <realloc+0xc>)
 8014c2a:	460a      	mov	r2, r1
 8014c2c:	4601      	mov	r1, r0
 8014c2e:	6818      	ldr	r0, [r3, #0]
 8014c30:	f000 b802 	b.w	8014c38 <_realloc_r>
 8014c34:	20000030 	.word	0x20000030

08014c38 <_realloc_r>:
 8014c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	4682      	mov	sl, r0
 8014c3e:	460c      	mov	r4, r1
 8014c40:	b929      	cbnz	r1, 8014c4e <_realloc_r+0x16>
 8014c42:	4611      	mov	r1, r2
 8014c44:	b003      	add	sp, #12
 8014c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c4a:	f7ff bd3b 	b.w	80146c4 <_malloc_r>
 8014c4e:	9201      	str	r2, [sp, #4]
 8014c50:	f7ff ffaa 	bl	8014ba8 <__malloc_lock>
 8014c54:	9a01      	ldr	r2, [sp, #4]
 8014c56:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8014c5a:	f102 080b 	add.w	r8, r2, #11
 8014c5e:	f1b8 0f16 	cmp.w	r8, #22
 8014c62:	f1a4 0908 	sub.w	r9, r4, #8
 8014c66:	f025 0603 	bic.w	r6, r5, #3
 8014c6a:	d90b      	bls.n	8014c84 <_realloc_r+0x4c>
 8014c6c:	f038 0807 	bics.w	r8, r8, #7
 8014c70:	d50a      	bpl.n	8014c88 <_realloc_r+0x50>
 8014c72:	230c      	movs	r3, #12
 8014c74:	f8ca 3000 	str.w	r3, [sl]
 8014c78:	f04f 0b00 	mov.w	fp, #0
 8014c7c:	4658      	mov	r0, fp
 8014c7e:	b003      	add	sp, #12
 8014c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c84:	f04f 0810 	mov.w	r8, #16
 8014c88:	4590      	cmp	r8, r2
 8014c8a:	d3f2      	bcc.n	8014c72 <_realloc_r+0x3a>
 8014c8c:	45b0      	cmp	r8, r6
 8014c8e:	f340 8170 	ble.w	8014f72 <_realloc_r+0x33a>
 8014c92:	49a9      	ldr	r1, [pc, #676]	; (8014f38 <_realloc_r+0x300>)
 8014c94:	9101      	str	r1, [sp, #4]
 8014c96:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8014c9a:	eb09 0306 	add.w	r3, r9, r6
 8014c9e:	459c      	cmp	ip, r3
 8014ca0:	6858      	ldr	r0, [r3, #4]
 8014ca2:	d005      	beq.n	8014cb0 <_realloc_r+0x78>
 8014ca4:	f020 0101 	bic.w	r1, r0, #1
 8014ca8:	4419      	add	r1, r3
 8014caa:	6849      	ldr	r1, [r1, #4]
 8014cac:	07cf      	lsls	r7, r1, #31
 8014cae:	d447      	bmi.n	8014d40 <_realloc_r+0x108>
 8014cb0:	f020 0003 	bic.w	r0, r0, #3
 8014cb4:	459c      	cmp	ip, r3
 8014cb6:	eb06 0700 	add.w	r7, r6, r0
 8014cba:	d119      	bne.n	8014cf0 <_realloc_r+0xb8>
 8014cbc:	f108 0110 	add.w	r1, r8, #16
 8014cc0:	42b9      	cmp	r1, r7
 8014cc2:	dc3f      	bgt.n	8014d44 <_realloc_r+0x10c>
 8014cc4:	eb09 0308 	add.w	r3, r9, r8
 8014cc8:	9a01      	ldr	r2, [sp, #4]
 8014cca:	eba7 0708 	sub.w	r7, r7, r8
 8014cce:	f047 0701 	orr.w	r7, r7, #1
 8014cd2:	6093      	str	r3, [r2, #8]
 8014cd4:	605f      	str	r7, [r3, #4]
 8014cd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014cda:	f003 0301 	and.w	r3, r3, #1
 8014cde:	ea43 0308 	orr.w	r3, r3, r8
 8014ce2:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ce6:	4650      	mov	r0, sl
 8014ce8:	f7ff ff64 	bl	8014bb4 <__malloc_unlock>
 8014cec:	46a3      	mov	fp, r4
 8014cee:	e7c5      	b.n	8014c7c <_realloc_r+0x44>
 8014cf0:	45b8      	cmp	r8, r7
 8014cf2:	dc27      	bgt.n	8014d44 <_realloc_r+0x10c>
 8014cf4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8014cf8:	60da      	str	r2, [r3, #12]
 8014cfa:	6093      	str	r3, [r2, #8]
 8014cfc:	eba7 0008 	sub.w	r0, r7, r8
 8014d00:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8014d04:	280f      	cmp	r0, #15
 8014d06:	f002 0201 	and.w	r2, r2, #1
 8014d0a:	eb09 0307 	add.w	r3, r9, r7
 8014d0e:	f240 8132 	bls.w	8014f76 <_realloc_r+0x33e>
 8014d12:	eb09 0108 	add.w	r1, r9, r8
 8014d16:	ea48 0202 	orr.w	r2, r8, r2
 8014d1a:	f040 0001 	orr.w	r0, r0, #1
 8014d1e:	f8c9 2004 	str.w	r2, [r9, #4]
 8014d22:	6048      	str	r0, [r1, #4]
 8014d24:	685a      	ldr	r2, [r3, #4]
 8014d26:	f042 0201 	orr.w	r2, r2, #1
 8014d2a:	605a      	str	r2, [r3, #4]
 8014d2c:	3108      	adds	r1, #8
 8014d2e:	4650      	mov	r0, sl
 8014d30:	f002 fc60 	bl	80175f4 <_free_r>
 8014d34:	4650      	mov	r0, sl
 8014d36:	f7ff ff3d 	bl	8014bb4 <__malloc_unlock>
 8014d3a:	f109 0b08 	add.w	fp, r9, #8
 8014d3e:	e79d      	b.n	8014c7c <_realloc_r+0x44>
 8014d40:	2000      	movs	r0, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	07e9      	lsls	r1, r5, #31
 8014d46:	f100 80c6 	bmi.w	8014ed6 <_realloc_r+0x29e>
 8014d4a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8014d4e:	eba9 0505 	sub.w	r5, r9, r5
 8014d52:	6869      	ldr	r1, [r5, #4]
 8014d54:	f021 0103 	bic.w	r1, r1, #3
 8014d58:	eb01 0b06 	add.w	fp, r1, r6
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f000 8086 	beq.w	8014e6e <_realloc_r+0x236>
 8014d62:	459c      	cmp	ip, r3
 8014d64:	eb00 070b 	add.w	r7, r0, fp
 8014d68:	d149      	bne.n	8014dfe <_realloc_r+0x1c6>
 8014d6a:	f108 0310 	add.w	r3, r8, #16
 8014d6e:	42bb      	cmp	r3, r7
 8014d70:	dc7d      	bgt.n	8014e6e <_realloc_r+0x236>
 8014d72:	46ab      	mov	fp, r5
 8014d74:	68eb      	ldr	r3, [r5, #12]
 8014d76:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8014d7a:	60d3      	str	r3, [r2, #12]
 8014d7c:	609a      	str	r2, [r3, #8]
 8014d7e:	1f32      	subs	r2, r6, #4
 8014d80:	2a24      	cmp	r2, #36	; 0x24
 8014d82:	d837      	bhi.n	8014df4 <_realloc_r+0x1bc>
 8014d84:	2a13      	cmp	r2, #19
 8014d86:	d933      	bls.n	8014df0 <_realloc_r+0x1b8>
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	60ab      	str	r3, [r5, #8]
 8014d8c:	6863      	ldr	r3, [r4, #4]
 8014d8e:	60eb      	str	r3, [r5, #12]
 8014d90:	2a1b      	cmp	r2, #27
 8014d92:	d81b      	bhi.n	8014dcc <_realloc_r+0x194>
 8014d94:	3408      	adds	r4, #8
 8014d96:	f105 0310 	add.w	r3, r5, #16
 8014d9a:	6822      	ldr	r2, [r4, #0]
 8014d9c:	601a      	str	r2, [r3, #0]
 8014d9e:	6862      	ldr	r2, [r4, #4]
 8014da0:	605a      	str	r2, [r3, #4]
 8014da2:	68a2      	ldr	r2, [r4, #8]
 8014da4:	609a      	str	r2, [r3, #8]
 8014da6:	eb05 0308 	add.w	r3, r5, r8
 8014daa:	9a01      	ldr	r2, [sp, #4]
 8014dac:	eba7 0708 	sub.w	r7, r7, r8
 8014db0:	f047 0701 	orr.w	r7, r7, #1
 8014db4:	6093      	str	r3, [r2, #8]
 8014db6:	605f      	str	r7, [r3, #4]
 8014db8:	686b      	ldr	r3, [r5, #4]
 8014dba:	f003 0301 	and.w	r3, r3, #1
 8014dbe:	ea43 0308 	orr.w	r3, r3, r8
 8014dc2:	606b      	str	r3, [r5, #4]
 8014dc4:	4650      	mov	r0, sl
 8014dc6:	f7ff fef5 	bl	8014bb4 <__malloc_unlock>
 8014dca:	e757      	b.n	8014c7c <_realloc_r+0x44>
 8014dcc:	68a3      	ldr	r3, [r4, #8]
 8014dce:	612b      	str	r3, [r5, #16]
 8014dd0:	68e3      	ldr	r3, [r4, #12]
 8014dd2:	616b      	str	r3, [r5, #20]
 8014dd4:	2a24      	cmp	r2, #36	; 0x24
 8014dd6:	bf01      	itttt	eq
 8014dd8:	6923      	ldreq	r3, [r4, #16]
 8014dda:	61ab      	streq	r3, [r5, #24]
 8014ddc:	6962      	ldreq	r2, [r4, #20]
 8014dde:	61ea      	streq	r2, [r5, #28]
 8014de0:	bf19      	ittee	ne
 8014de2:	3410      	addne	r4, #16
 8014de4:	f105 0318 	addne.w	r3, r5, #24
 8014de8:	f105 0320 	addeq.w	r3, r5, #32
 8014dec:	3418      	addeq	r4, #24
 8014dee:	e7d4      	b.n	8014d9a <_realloc_r+0x162>
 8014df0:	465b      	mov	r3, fp
 8014df2:	e7d2      	b.n	8014d9a <_realloc_r+0x162>
 8014df4:	4621      	mov	r1, r4
 8014df6:	4658      	mov	r0, fp
 8014df8:	f7ff feb4 	bl	8014b64 <memmove>
 8014dfc:	e7d3      	b.n	8014da6 <_realloc_r+0x16e>
 8014dfe:	45b8      	cmp	r8, r7
 8014e00:	dc35      	bgt.n	8014e6e <_realloc_r+0x236>
 8014e02:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8014e06:	4628      	mov	r0, r5
 8014e08:	60da      	str	r2, [r3, #12]
 8014e0a:	6093      	str	r3, [r2, #8]
 8014e0c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014e10:	68eb      	ldr	r3, [r5, #12]
 8014e12:	60d3      	str	r3, [r2, #12]
 8014e14:	609a      	str	r2, [r3, #8]
 8014e16:	1f32      	subs	r2, r6, #4
 8014e18:	2a24      	cmp	r2, #36	; 0x24
 8014e1a:	d824      	bhi.n	8014e66 <_realloc_r+0x22e>
 8014e1c:	2a13      	cmp	r2, #19
 8014e1e:	d908      	bls.n	8014e32 <_realloc_r+0x1fa>
 8014e20:	6823      	ldr	r3, [r4, #0]
 8014e22:	60ab      	str	r3, [r5, #8]
 8014e24:	6863      	ldr	r3, [r4, #4]
 8014e26:	60eb      	str	r3, [r5, #12]
 8014e28:	2a1b      	cmp	r2, #27
 8014e2a:	d80a      	bhi.n	8014e42 <_realloc_r+0x20a>
 8014e2c:	3408      	adds	r4, #8
 8014e2e:	f105 0010 	add.w	r0, r5, #16
 8014e32:	6823      	ldr	r3, [r4, #0]
 8014e34:	6003      	str	r3, [r0, #0]
 8014e36:	6863      	ldr	r3, [r4, #4]
 8014e38:	6043      	str	r3, [r0, #4]
 8014e3a:	68a3      	ldr	r3, [r4, #8]
 8014e3c:	6083      	str	r3, [r0, #8]
 8014e3e:	46a9      	mov	r9, r5
 8014e40:	e75c      	b.n	8014cfc <_realloc_r+0xc4>
 8014e42:	68a3      	ldr	r3, [r4, #8]
 8014e44:	612b      	str	r3, [r5, #16]
 8014e46:	68e3      	ldr	r3, [r4, #12]
 8014e48:	616b      	str	r3, [r5, #20]
 8014e4a:	2a24      	cmp	r2, #36	; 0x24
 8014e4c:	bf01      	itttt	eq
 8014e4e:	6923      	ldreq	r3, [r4, #16]
 8014e50:	61ab      	streq	r3, [r5, #24]
 8014e52:	6963      	ldreq	r3, [r4, #20]
 8014e54:	61eb      	streq	r3, [r5, #28]
 8014e56:	bf19      	ittee	ne
 8014e58:	3410      	addne	r4, #16
 8014e5a:	f105 0018 	addne.w	r0, r5, #24
 8014e5e:	f105 0020 	addeq.w	r0, r5, #32
 8014e62:	3418      	addeq	r4, #24
 8014e64:	e7e5      	b.n	8014e32 <_realloc_r+0x1fa>
 8014e66:	4621      	mov	r1, r4
 8014e68:	f7ff fe7c 	bl	8014b64 <memmove>
 8014e6c:	e7e7      	b.n	8014e3e <_realloc_r+0x206>
 8014e6e:	45d8      	cmp	r8, fp
 8014e70:	dc31      	bgt.n	8014ed6 <_realloc_r+0x29e>
 8014e72:	4628      	mov	r0, r5
 8014e74:	68eb      	ldr	r3, [r5, #12]
 8014e76:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014e7a:	60d3      	str	r3, [r2, #12]
 8014e7c:	609a      	str	r2, [r3, #8]
 8014e7e:	1f32      	subs	r2, r6, #4
 8014e80:	2a24      	cmp	r2, #36	; 0x24
 8014e82:	d824      	bhi.n	8014ece <_realloc_r+0x296>
 8014e84:	2a13      	cmp	r2, #19
 8014e86:	d908      	bls.n	8014e9a <_realloc_r+0x262>
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	60ab      	str	r3, [r5, #8]
 8014e8c:	6863      	ldr	r3, [r4, #4]
 8014e8e:	60eb      	str	r3, [r5, #12]
 8014e90:	2a1b      	cmp	r2, #27
 8014e92:	d80a      	bhi.n	8014eaa <_realloc_r+0x272>
 8014e94:	3408      	adds	r4, #8
 8014e96:	f105 0010 	add.w	r0, r5, #16
 8014e9a:	6823      	ldr	r3, [r4, #0]
 8014e9c:	6003      	str	r3, [r0, #0]
 8014e9e:	6863      	ldr	r3, [r4, #4]
 8014ea0:	6043      	str	r3, [r0, #4]
 8014ea2:	68a3      	ldr	r3, [r4, #8]
 8014ea4:	6083      	str	r3, [r0, #8]
 8014ea6:	465f      	mov	r7, fp
 8014ea8:	e7c9      	b.n	8014e3e <_realloc_r+0x206>
 8014eaa:	68a3      	ldr	r3, [r4, #8]
 8014eac:	612b      	str	r3, [r5, #16]
 8014eae:	68e3      	ldr	r3, [r4, #12]
 8014eb0:	616b      	str	r3, [r5, #20]
 8014eb2:	2a24      	cmp	r2, #36	; 0x24
 8014eb4:	bf01      	itttt	eq
 8014eb6:	6923      	ldreq	r3, [r4, #16]
 8014eb8:	61ab      	streq	r3, [r5, #24]
 8014eba:	6963      	ldreq	r3, [r4, #20]
 8014ebc:	61eb      	streq	r3, [r5, #28]
 8014ebe:	bf19      	ittee	ne
 8014ec0:	3410      	addne	r4, #16
 8014ec2:	f105 0018 	addne.w	r0, r5, #24
 8014ec6:	f105 0020 	addeq.w	r0, r5, #32
 8014eca:	3418      	addeq	r4, #24
 8014ecc:	e7e5      	b.n	8014e9a <_realloc_r+0x262>
 8014ece:	4621      	mov	r1, r4
 8014ed0:	f7ff fe48 	bl	8014b64 <memmove>
 8014ed4:	e7e7      	b.n	8014ea6 <_realloc_r+0x26e>
 8014ed6:	4611      	mov	r1, r2
 8014ed8:	4650      	mov	r0, sl
 8014eda:	f7ff fbf3 	bl	80146c4 <_malloc_r>
 8014ede:	4683      	mov	fp, r0
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	f43f af6f 	beq.w	8014dc4 <_realloc_r+0x18c>
 8014ee6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014eea:	f023 0301 	bic.w	r3, r3, #1
 8014eee:	444b      	add	r3, r9
 8014ef0:	f1a0 0208 	sub.w	r2, r0, #8
 8014ef4:	4293      	cmp	r3, r2
 8014ef6:	d105      	bne.n	8014f04 <_realloc_r+0x2cc>
 8014ef8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8014efc:	f027 0703 	bic.w	r7, r7, #3
 8014f00:	4437      	add	r7, r6
 8014f02:	e6fb      	b.n	8014cfc <_realloc_r+0xc4>
 8014f04:	1f32      	subs	r2, r6, #4
 8014f06:	2a24      	cmp	r2, #36	; 0x24
 8014f08:	d82f      	bhi.n	8014f6a <_realloc_r+0x332>
 8014f0a:	2a13      	cmp	r2, #19
 8014f0c:	d92a      	bls.n	8014f64 <_realloc_r+0x32c>
 8014f0e:	6823      	ldr	r3, [r4, #0]
 8014f10:	6003      	str	r3, [r0, #0]
 8014f12:	6863      	ldr	r3, [r4, #4]
 8014f14:	6043      	str	r3, [r0, #4]
 8014f16:	2a1b      	cmp	r2, #27
 8014f18:	d810      	bhi.n	8014f3c <_realloc_r+0x304>
 8014f1a:	f104 0208 	add.w	r2, r4, #8
 8014f1e:	f100 0308 	add.w	r3, r0, #8
 8014f22:	6811      	ldr	r1, [r2, #0]
 8014f24:	6019      	str	r1, [r3, #0]
 8014f26:	6851      	ldr	r1, [r2, #4]
 8014f28:	6059      	str	r1, [r3, #4]
 8014f2a:	6892      	ldr	r2, [r2, #8]
 8014f2c:	609a      	str	r2, [r3, #8]
 8014f2e:	4621      	mov	r1, r4
 8014f30:	4650      	mov	r0, sl
 8014f32:	f002 fb5f 	bl	80175f4 <_free_r>
 8014f36:	e745      	b.n	8014dc4 <_realloc_r+0x18c>
 8014f38:	20000460 	.word	0x20000460
 8014f3c:	68a3      	ldr	r3, [r4, #8]
 8014f3e:	6083      	str	r3, [r0, #8]
 8014f40:	68e3      	ldr	r3, [r4, #12]
 8014f42:	60c3      	str	r3, [r0, #12]
 8014f44:	2a24      	cmp	r2, #36	; 0x24
 8014f46:	bf01      	itttt	eq
 8014f48:	6923      	ldreq	r3, [r4, #16]
 8014f4a:	6103      	streq	r3, [r0, #16]
 8014f4c:	6961      	ldreq	r1, [r4, #20]
 8014f4e:	6141      	streq	r1, [r0, #20]
 8014f50:	bf19      	ittee	ne
 8014f52:	f104 0210 	addne.w	r2, r4, #16
 8014f56:	f100 0310 	addne.w	r3, r0, #16
 8014f5a:	f104 0218 	addeq.w	r2, r4, #24
 8014f5e:	f100 0318 	addeq.w	r3, r0, #24
 8014f62:	e7de      	b.n	8014f22 <_realloc_r+0x2ea>
 8014f64:	4603      	mov	r3, r0
 8014f66:	4622      	mov	r2, r4
 8014f68:	e7db      	b.n	8014f22 <_realloc_r+0x2ea>
 8014f6a:	4621      	mov	r1, r4
 8014f6c:	f7ff fdfa 	bl	8014b64 <memmove>
 8014f70:	e7dd      	b.n	8014f2e <_realloc_r+0x2f6>
 8014f72:	4637      	mov	r7, r6
 8014f74:	e6c2      	b.n	8014cfc <_realloc_r+0xc4>
 8014f76:	4317      	orrs	r7, r2
 8014f78:	f8c9 7004 	str.w	r7, [r9, #4]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	f042 0201 	orr.w	r2, r2, #1
 8014f82:	605a      	str	r2, [r3, #4]
 8014f84:	e6d6      	b.n	8014d34 <_realloc_r+0xfc>
 8014f86:	bf00      	nop

08014f88 <_sbrk_r>:
 8014f88:	b538      	push	{r3, r4, r5, lr}
 8014f8a:	4c06      	ldr	r4, [pc, #24]	; (8014fa4 <_sbrk_r+0x1c>)
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	4605      	mov	r5, r0
 8014f90:	4608      	mov	r0, r1
 8014f92:	6023      	str	r3, [r4, #0]
 8014f94:	f003 f99a 	bl	80182cc <_sbrk>
 8014f98:	1c43      	adds	r3, r0, #1
 8014f9a:	d102      	bne.n	8014fa2 <_sbrk_r+0x1a>
 8014f9c:	6823      	ldr	r3, [r4, #0]
 8014f9e:	b103      	cbz	r3, 8014fa2 <_sbrk_r+0x1a>
 8014fa0:	602b      	str	r3, [r5, #0]
 8014fa2:	bd38      	pop	{r3, r4, r5, pc}
 8014fa4:	20033064 	.word	0x20033064

08014fa8 <_raise_r>:
 8014fa8:	291f      	cmp	r1, #31
 8014faa:	b538      	push	{r3, r4, r5, lr}
 8014fac:	4604      	mov	r4, r0
 8014fae:	460d      	mov	r5, r1
 8014fb0:	d904      	bls.n	8014fbc <_raise_r+0x14>
 8014fb2:	2316      	movs	r3, #22
 8014fb4:	6003      	str	r3, [r0, #0]
 8014fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fba:	bd38      	pop	{r3, r4, r5, pc}
 8014fbc:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8014fc0:	b112      	cbz	r2, 8014fc8 <_raise_r+0x20>
 8014fc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014fc6:	b94b      	cbnz	r3, 8014fdc <_raise_r+0x34>
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f000 f831 	bl	8015030 <_getpid_r>
 8014fce:	462a      	mov	r2, r5
 8014fd0:	4601      	mov	r1, r0
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fd8:	f000 b818 	b.w	801500c <_kill_r>
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d00a      	beq.n	8014ff6 <_raise_r+0x4e>
 8014fe0:	1c59      	adds	r1, r3, #1
 8014fe2:	d103      	bne.n	8014fec <_raise_r+0x44>
 8014fe4:	2316      	movs	r3, #22
 8014fe6:	6003      	str	r3, [r0, #0]
 8014fe8:	2001      	movs	r0, #1
 8014fea:	e7e6      	b.n	8014fba <_raise_r+0x12>
 8014fec:	2400      	movs	r4, #0
 8014fee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ff2:	4628      	mov	r0, r5
 8014ff4:	4798      	blx	r3
 8014ff6:	2000      	movs	r0, #0
 8014ff8:	e7df      	b.n	8014fba <_raise_r+0x12>
	...

08014ffc <raise>:
 8014ffc:	4b02      	ldr	r3, [pc, #8]	; (8015008 <raise+0xc>)
 8014ffe:	4601      	mov	r1, r0
 8015000:	6818      	ldr	r0, [r3, #0]
 8015002:	f7ff bfd1 	b.w	8014fa8 <_raise_r>
 8015006:	bf00      	nop
 8015008:	20000030 	.word	0x20000030

0801500c <_kill_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	4c07      	ldr	r4, [pc, #28]	; (801502c <_kill_r+0x20>)
 8015010:	2300      	movs	r3, #0
 8015012:	4605      	mov	r5, r0
 8015014:	4608      	mov	r0, r1
 8015016:	4611      	mov	r1, r2
 8015018:	6023      	str	r3, [r4, #0]
 801501a:	f003 f94f 	bl	80182bc <_kill>
 801501e:	1c43      	adds	r3, r0, #1
 8015020:	d102      	bne.n	8015028 <_kill_r+0x1c>
 8015022:	6823      	ldr	r3, [r4, #0]
 8015024:	b103      	cbz	r3, 8015028 <_kill_r+0x1c>
 8015026:	602b      	str	r3, [r5, #0]
 8015028:	bd38      	pop	{r3, r4, r5, pc}
 801502a:	bf00      	nop
 801502c:	20033064 	.word	0x20033064

08015030 <_getpid_r>:
 8015030:	f003 b93c 	b.w	80182ac <_getpid>

08015034 <sprintf>:
 8015034:	b40e      	push	{r1, r2, r3}
 8015036:	b500      	push	{lr}
 8015038:	b09c      	sub	sp, #112	; 0x70
 801503a:	ab1d      	add	r3, sp, #116	; 0x74
 801503c:	9002      	str	r0, [sp, #8]
 801503e:	9006      	str	r0, [sp, #24]
 8015040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015044:	4809      	ldr	r0, [pc, #36]	; (801506c <sprintf+0x38>)
 8015046:	9107      	str	r1, [sp, #28]
 8015048:	9104      	str	r1, [sp, #16]
 801504a:	4909      	ldr	r1, [pc, #36]	; (8015070 <sprintf+0x3c>)
 801504c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015050:	9105      	str	r1, [sp, #20]
 8015052:	6800      	ldr	r0, [r0, #0]
 8015054:	9301      	str	r3, [sp, #4]
 8015056:	a902      	add	r1, sp, #8
 8015058:	f000 f81e 	bl	8015098 <_svfprintf_r>
 801505c:	9b02      	ldr	r3, [sp, #8]
 801505e:	2200      	movs	r2, #0
 8015060:	701a      	strb	r2, [r3, #0]
 8015062:	b01c      	add	sp, #112	; 0x70
 8015064:	f85d eb04 	ldr.w	lr, [sp], #4
 8015068:	b003      	add	sp, #12
 801506a:	4770      	bx	lr
 801506c:	20000030 	.word	0x20000030
 8015070:	ffff0208 	.word	0xffff0208

08015074 <strncmp>:
 8015074:	b510      	push	{r4, lr}
 8015076:	b16a      	cbz	r2, 8015094 <strncmp+0x20>
 8015078:	3901      	subs	r1, #1
 801507a:	1884      	adds	r4, r0, r2
 801507c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015080:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015084:	4293      	cmp	r3, r2
 8015086:	d103      	bne.n	8015090 <strncmp+0x1c>
 8015088:	42a0      	cmp	r0, r4
 801508a:	d001      	beq.n	8015090 <strncmp+0x1c>
 801508c:	2b00      	cmp	r3, #0
 801508e:	d1f5      	bne.n	801507c <strncmp+0x8>
 8015090:	1a98      	subs	r0, r3, r2
 8015092:	bd10      	pop	{r4, pc}
 8015094:	4610      	mov	r0, r2
 8015096:	e7fc      	b.n	8015092 <strncmp+0x1e>

08015098 <_svfprintf_r>:
 8015098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509c:	b0d3      	sub	sp, #332	; 0x14c
 801509e:	4688      	mov	r8, r1
 80150a0:	4693      	mov	fp, r2
 80150a2:	461e      	mov	r6, r3
 80150a4:	9003      	str	r0, [sp, #12]
 80150a6:	f002 fb7f 	bl	80177a8 <_localeconv_r>
 80150aa:	6803      	ldr	r3, [r0, #0]
 80150ac:	9316      	str	r3, [sp, #88]	; 0x58
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f1 fe78 	bl	8006da4 <strlen>
 80150b4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80150b8:	900d      	str	r0, [sp, #52]	; 0x34
 80150ba:	0618      	lsls	r0, r3, #24
 80150bc:	d518      	bpl.n	80150f0 <_svfprintf_r+0x58>
 80150be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80150c2:	b9ab      	cbnz	r3, 80150f0 <_svfprintf_r+0x58>
 80150c4:	2140      	movs	r1, #64	; 0x40
 80150c6:	9803      	ldr	r0, [sp, #12]
 80150c8:	f7ff fafc 	bl	80146c4 <_malloc_r>
 80150cc:	f8c8 0000 	str.w	r0, [r8]
 80150d0:	f8c8 0010 	str.w	r0, [r8, #16]
 80150d4:	b948      	cbnz	r0, 80150ea <_svfprintf_r+0x52>
 80150d6:	9a03      	ldr	r2, [sp, #12]
 80150d8:	230c      	movs	r3, #12
 80150da:	6013      	str	r3, [r2, #0]
 80150dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80150e0:	930e      	str	r3, [sp, #56]	; 0x38
 80150e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80150e4:	b053      	add	sp, #332	; 0x14c
 80150e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ea:	2340      	movs	r3, #64	; 0x40
 80150ec:	f8c8 3014 	str.w	r3, [r8, #20]
 80150f0:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8015418 <_svfprintf_r+0x380>
 80150f4:	2300      	movs	r3, #0
 80150f6:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 80150fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80150fe:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8015102:	ac29      	add	r4, sp, #164	; 0xa4
 8015104:	9426      	str	r4, [sp, #152]	; 0x98
 8015106:	9304      	str	r3, [sp, #16]
 8015108:	9309      	str	r3, [sp, #36]	; 0x24
 801510a:	9312      	str	r3, [sp, #72]	; 0x48
 801510c:	9319      	str	r3, [sp, #100]	; 0x64
 801510e:	930e      	str	r3, [sp, #56]	; 0x38
 8015110:	465d      	mov	r5, fp
 8015112:	462b      	mov	r3, r5
 8015114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015118:	b112      	cbz	r2, 8015120 <_svfprintf_r+0x88>
 801511a:	2a25      	cmp	r2, #37	; 0x25
 801511c:	f040 80e4 	bne.w	80152e8 <_svfprintf_r+0x250>
 8015120:	ebb5 070b 	subs.w	r7, r5, fp
 8015124:	d00e      	beq.n	8015144 <_svfprintf_r+0xac>
 8015126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015128:	443b      	add	r3, r7
 801512a:	9328      	str	r3, [sp, #160]	; 0xa0
 801512c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801512e:	3301      	adds	r3, #1
 8015130:	2b07      	cmp	r3, #7
 8015132:	e9c4 b700 	strd	fp, r7, [r4]
 8015136:	9327      	str	r3, [sp, #156]	; 0x9c
 8015138:	f300 80d8 	bgt.w	80152ec <_svfprintf_r+0x254>
 801513c:	3408      	adds	r4, #8
 801513e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015140:	443b      	add	r3, r7
 8015142:	930e      	str	r3, [sp, #56]	; 0x38
 8015144:	782b      	ldrb	r3, [r5, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	f001 81b4 	beq.w	80164b4 <_svfprintf_r+0x141c>
 801514c:	1c6b      	adds	r3, r5, #1
 801514e:	930c      	str	r3, [sp, #48]	; 0x30
 8015150:	2300      	movs	r3, #0
 8015152:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015156:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801515a:	930f      	str	r3, [sp, #60]	; 0x3c
 801515c:	469a      	mov	sl, r3
 801515e:	270a      	movs	r7, #10
 8015160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	9306      	str	r3, [sp, #24]
 8015166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015168:	3301      	adds	r3, #1
 801516a:	930c      	str	r3, [sp, #48]	; 0x30
 801516c:	9b06      	ldr	r3, [sp, #24]
 801516e:	3b20      	subs	r3, #32
 8015170:	2b5a      	cmp	r3, #90	; 0x5a
 8015172:	f200 8624 	bhi.w	8015dbe <_svfprintf_r+0xd26>
 8015176:	a201      	add	r2, pc, #4	; (adr r2, 801517c <_svfprintf_r+0xe4>)
 8015178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801517c:	0801537f 	.word	0x0801537f
 8015180:	08015dbf 	.word	0x08015dbf
 8015184:	08015dbf 	.word	0x08015dbf
 8015188:	08015391 	.word	0x08015391
 801518c:	08015dbf 	.word	0x08015dbf
 8015190:	08015dbf 	.word	0x08015dbf
 8015194:	08015dbf 	.word	0x08015dbf
 8015198:	08015345 	.word	0x08015345
 801519c:	08015dbf 	.word	0x08015dbf
 80151a0:	08015dbf 	.word	0x08015dbf
 80151a4:	08015397 	.word	0x08015397
 80151a8:	080153af 	.word	0x080153af
 80151ac:	08015dbf 	.word	0x08015dbf
 80151b0:	080153a9 	.word	0x080153a9
 80151b4:	080153b3 	.word	0x080153b3
 80151b8:	08015dbf 	.word	0x08015dbf
 80151bc:	080153e7 	.word	0x080153e7
 80151c0:	080153ed 	.word	0x080153ed
 80151c4:	080153ed 	.word	0x080153ed
 80151c8:	080153ed 	.word	0x080153ed
 80151cc:	080153ed 	.word	0x080153ed
 80151d0:	080153ed 	.word	0x080153ed
 80151d4:	080153ed 	.word	0x080153ed
 80151d8:	080153ed 	.word	0x080153ed
 80151dc:	080153ed 	.word	0x080153ed
 80151e0:	080153ed 	.word	0x080153ed
 80151e4:	08015dbf 	.word	0x08015dbf
 80151e8:	08015dbf 	.word	0x08015dbf
 80151ec:	08015dbf 	.word	0x08015dbf
 80151f0:	08015dbf 	.word	0x08015dbf
 80151f4:	08015dbf 	.word	0x08015dbf
 80151f8:	08015dbf 	.word	0x08015dbf
 80151fc:	08015dbf 	.word	0x08015dbf
 8015200:	080154ef 	.word	0x080154ef
 8015204:	08015dbf 	.word	0x08015dbf
 8015208:	08015459 	.word	0x08015459
 801520c:	0801547b 	.word	0x0801547b
 8015210:	080154ef 	.word	0x080154ef
 8015214:	080154ef 	.word	0x080154ef
 8015218:	080154ef 	.word	0x080154ef
 801521c:	08015dbf 	.word	0x08015dbf
 8015220:	08015dbf 	.word	0x08015dbf
 8015224:	08015dbf 	.word	0x08015dbf
 8015228:	08015dbf 	.word	0x08015dbf
 801522c:	0801540d 	.word	0x0801540d
 8015230:	08015dbf 	.word	0x08015dbf
 8015234:	08015dbf 	.word	0x08015dbf
 8015238:	080159c1 	.word	0x080159c1
 801523c:	08015dbf 	.word	0x08015dbf
 8015240:	08015dbf 	.word	0x08015dbf
 8015244:	08015dbf 	.word	0x08015dbf
 8015248:	08015a4d 	.word	0x08015a4d
 801524c:	08015dbf 	.word	0x08015dbf
 8015250:	08015c2f 	.word	0x08015c2f
 8015254:	08015dbf 	.word	0x08015dbf
 8015258:	08015dbf 	.word	0x08015dbf
 801525c:	08015305 	.word	0x08015305
 8015260:	08015dbf 	.word	0x08015dbf
 8015264:	08015dbf 	.word	0x08015dbf
 8015268:	08015dbf 	.word	0x08015dbf
 801526c:	08015dbf 	.word	0x08015dbf
 8015270:	08015dbf 	.word	0x08015dbf
 8015274:	08015dbf 	.word	0x08015dbf
 8015278:	08015dbf 	.word	0x08015dbf
 801527c:	08015dbf 	.word	0x08015dbf
 8015280:	080154ef 	.word	0x080154ef
 8015284:	08015dbf 	.word	0x08015dbf
 8015288:	08015459 	.word	0x08015459
 801528c:	0801547f 	.word	0x0801547f
 8015290:	080154ef 	.word	0x080154ef
 8015294:	080154ef 	.word	0x080154ef
 8015298:	080154ef 	.word	0x080154ef
 801529c:	08015425 	.word	0x08015425
 80152a0:	0801547f 	.word	0x0801547f
 80152a4:	0801544d 	.word	0x0801544d
 80152a8:	08015dbf 	.word	0x08015dbf
 80152ac:	0801543f 	.word	0x0801543f
 80152b0:	08015dbf 	.word	0x08015dbf
 80152b4:	0801597b 	.word	0x0801597b
 80152b8:	080159c5 	.word	0x080159c5
 80152bc:	08015a2d 	.word	0x08015a2d
 80152c0:	0801544d 	.word	0x0801544d
 80152c4:	08015dbf 	.word	0x08015dbf
 80152c8:	08015a4d 	.word	0x08015a4d
 80152cc:	08015161 	.word	0x08015161
 80152d0:	08015c33 	.word	0x08015c33
 80152d4:	08015dbf 	.word	0x08015dbf
 80152d8:	08015dbf 	.word	0x08015dbf
 80152dc:	08015c71 	.word	0x08015c71
 80152e0:	08015dbf 	.word	0x08015dbf
 80152e4:	08015161 	.word	0x08015161
 80152e8:	461d      	mov	r5, r3
 80152ea:	e712      	b.n	8015112 <_svfprintf_r+0x7a>
 80152ec:	aa26      	add	r2, sp, #152	; 0x98
 80152ee:	4641      	mov	r1, r8
 80152f0:	9803      	ldr	r0, [sp, #12]
 80152f2:	f002 fe11 	bl	8017f18 <__ssprint_r>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	f040 8166 	bne.w	80155c8 <_svfprintf_r+0x530>
 80152fc:	ac29      	add	r4, sp, #164	; 0xa4
 80152fe:	e71e      	b.n	801513e <_svfprintf_r+0xa6>
 8015300:	461e      	mov	r6, r3
 8015302:	e72d      	b.n	8015160 <_svfprintf_r+0xc8>
 8015304:	4b46      	ldr	r3, [pc, #280]	; (8015420 <_svfprintf_r+0x388>)
 8015306:	9318      	str	r3, [sp, #96]	; 0x60
 8015308:	f01a 0f20 	tst.w	sl, #32
 801530c:	f000 84b3 	beq.w	8015c76 <_svfprintf_r+0xbde>
 8015310:	3607      	adds	r6, #7
 8015312:	f026 0607 	bic.w	r6, r6, #7
 8015316:	f106 0308 	add.w	r3, r6, #8
 801531a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801531e:	9308      	str	r3, [sp, #32]
 8015320:	f01a 0f01 	tst.w	sl, #1
 8015324:	d00a      	beq.n	801533c <_svfprintf_r+0x2a4>
 8015326:	ea56 0307 	orrs.w	r3, r6, r7
 801532a:	d007      	beq.n	801533c <_svfprintf_r+0x2a4>
 801532c:	2330      	movs	r3, #48	; 0x30
 801532e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8015332:	9b06      	ldr	r3, [sp, #24]
 8015334:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8015338:	f04a 0a02 	orr.w	sl, sl, #2
 801533c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8015340:	2302      	movs	r3, #2
 8015342:	e34d      	b.n	80159e0 <_svfprintf_r+0x948>
 8015344:	9803      	ldr	r0, [sp, #12]
 8015346:	f002 fa2f 	bl	80177a8 <_localeconv_r>
 801534a:	6843      	ldr	r3, [r0, #4]
 801534c:	9319      	str	r3, [sp, #100]	; 0x64
 801534e:	4618      	mov	r0, r3
 8015350:	f7f1 fd28 	bl	8006da4 <strlen>
 8015354:	9012      	str	r0, [sp, #72]	; 0x48
 8015356:	9803      	ldr	r0, [sp, #12]
 8015358:	f002 fa26 	bl	80177a8 <_localeconv_r>
 801535c:	6883      	ldr	r3, [r0, #8]
 801535e:	9309      	str	r3, [sp, #36]	; 0x24
 8015360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015362:	2b00      	cmp	r3, #0
 8015364:	f43f aefc 	beq.w	8015160 <_svfprintf_r+0xc8>
 8015368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801536a:	2b00      	cmp	r3, #0
 801536c:	f43f aef8 	beq.w	8015160 <_svfprintf_r+0xc8>
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	f43f aef4 	beq.w	8015160 <_svfprintf_r+0xc8>
 8015378:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801537c:	e6f0      	b.n	8015160 <_svfprintf_r+0xc8>
 801537e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8015382:	2b00      	cmp	r3, #0
 8015384:	f47f aeec 	bne.w	8015160 <_svfprintf_r+0xc8>
 8015388:	2320      	movs	r3, #32
 801538a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801538e:	e6e7      	b.n	8015160 <_svfprintf_r+0xc8>
 8015390:	f04a 0a01 	orr.w	sl, sl, #1
 8015394:	e6e4      	b.n	8015160 <_svfprintf_r+0xc8>
 8015396:	6832      	ldr	r2, [r6, #0]
 8015398:	920f      	str	r2, [sp, #60]	; 0x3c
 801539a:	2a00      	cmp	r2, #0
 801539c:	f106 0304 	add.w	r3, r6, #4
 80153a0:	daae      	bge.n	8015300 <_svfprintf_r+0x268>
 80153a2:	4252      	negs	r2, r2
 80153a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80153a6:	461e      	mov	r6, r3
 80153a8:	f04a 0a04 	orr.w	sl, sl, #4
 80153ac:	e6d8      	b.n	8015160 <_svfprintf_r+0xc8>
 80153ae:	232b      	movs	r3, #43	; 0x2b
 80153b0:	e7eb      	b.n	801538a <_svfprintf_r+0x2f2>
 80153b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153b6:	7812      	ldrb	r2, [r2, #0]
 80153b8:	9206      	str	r2, [sp, #24]
 80153ba:	2a2a      	cmp	r2, #42	; 0x2a
 80153bc:	f103 0301 	add.w	r3, r3, #1
 80153c0:	d10f      	bne.n	80153e2 <_svfprintf_r+0x34a>
 80153c2:	6835      	ldr	r5, [r6, #0]
 80153c4:	930c      	str	r3, [sp, #48]	; 0x30
 80153c6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80153ca:	3604      	adds	r6, #4
 80153cc:	e6c8      	b.n	8015160 <_svfprintf_r+0xc8>
 80153ce:	fb07 2505 	mla	r5, r7, r5, r2
 80153d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153d6:	9206      	str	r2, [sp, #24]
 80153d8:	9a06      	ldr	r2, [sp, #24]
 80153da:	3a30      	subs	r2, #48	; 0x30
 80153dc:	2a09      	cmp	r2, #9
 80153de:	d9f6      	bls.n	80153ce <_svfprintf_r+0x336>
 80153e0:	e6c3      	b.n	801516a <_svfprintf_r+0xd2>
 80153e2:	2500      	movs	r5, #0
 80153e4:	e7f8      	b.n	80153d8 <_svfprintf_r+0x340>
 80153e6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80153ea:	e6b9      	b.n	8015160 <_svfprintf_r+0xc8>
 80153ec:	2200      	movs	r2, #0
 80153ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80153f2:	9a06      	ldr	r2, [sp, #24]
 80153f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80153f6:	3a30      	subs	r2, #48	; 0x30
 80153f8:	fb07 2201 	mla	r2, r7, r1, r2
 80153fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80153fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015402:	9206      	str	r2, [sp, #24]
 8015404:	3a30      	subs	r2, #48	; 0x30
 8015406:	2a09      	cmp	r2, #9
 8015408:	d9f3      	bls.n	80153f2 <_svfprintf_r+0x35a>
 801540a:	e6ae      	b.n	801516a <_svfprintf_r+0xd2>
 801540c:	f04a 0a08 	orr.w	sl, sl, #8
 8015410:	e6a6      	b.n	8015160 <_svfprintf_r+0xc8>
 8015412:	bf00      	nop
 8015414:	f3af 8000 	nop.w
	...
 8015420:	0801b719 	.word	0x0801b719
 8015424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	2b68      	cmp	r3, #104	; 0x68
 801542a:	bf01      	itttt	eq
 801542c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 801542e:	3301      	addeq	r3, #1
 8015430:	930c      	streq	r3, [sp, #48]	; 0x30
 8015432:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8015436:	bf18      	it	ne
 8015438:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801543c:	e690      	b.n	8015160 <_svfprintf_r+0xc8>
 801543e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	2b6c      	cmp	r3, #108	; 0x6c
 8015444:	d105      	bne.n	8015452 <_svfprintf_r+0x3ba>
 8015446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015448:	3301      	adds	r3, #1
 801544a:	930c      	str	r3, [sp, #48]	; 0x30
 801544c:	f04a 0a20 	orr.w	sl, sl, #32
 8015450:	e686      	b.n	8015160 <_svfprintf_r+0xc8>
 8015452:	f04a 0a10 	orr.w	sl, sl, #16
 8015456:	e683      	b.n	8015160 <_svfprintf_r+0xc8>
 8015458:	1d33      	adds	r3, r6, #4
 801545a:	9308      	str	r3, [sp, #32]
 801545c:	2000      	movs	r0, #0
 801545e:	6833      	ldr	r3, [r6, #0]
 8015460:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8015464:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8015468:	4681      	mov	r9, r0
 801546a:	2501      	movs	r5, #1
 801546c:	9010      	str	r0, [sp, #64]	; 0x40
 801546e:	4607      	mov	r7, r0
 8015470:	9007      	str	r0, [sp, #28]
 8015472:	4606      	mov	r6, r0
 8015474:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8015478:	e301      	b.n	8015a7e <_svfprintf_r+0x9e6>
 801547a:	f04a 0a10 	orr.w	sl, sl, #16
 801547e:	f01a 0f20 	tst.w	sl, #32
 8015482:	d021      	beq.n	80154c8 <_svfprintf_r+0x430>
 8015484:	3607      	adds	r6, #7
 8015486:	f026 0607 	bic.w	r6, r6, #7
 801548a:	f106 0308 	add.w	r3, r6, #8
 801548e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8015492:	9308      	str	r3, [sp, #32]
 8015494:	2e00      	cmp	r6, #0
 8015496:	f177 0300 	sbcs.w	r3, r7, #0
 801549a:	da06      	bge.n	80154aa <_svfprintf_r+0x412>
 801549c:	4276      	negs	r6, r6
 801549e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80154a2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80154a6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80154aa:	1c6b      	adds	r3, r5, #1
 80154ac:	f040 83f6 	bne.w	8015c9c <_svfprintf_r+0xc04>
 80154b0:	2f00      	cmp	r7, #0
 80154b2:	bf08      	it	eq
 80154b4:	2e0a      	cmpeq	r6, #10
 80154b6:	f080 8427 	bcs.w	8015d08 <_svfprintf_r+0xc70>
 80154ba:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80154be:	3630      	adds	r6, #48	; 0x30
 80154c0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80154c4:	f000 bc0d 	b.w	8015ce2 <_svfprintf_r+0xc4a>
 80154c8:	1d33      	adds	r3, r6, #4
 80154ca:	f01a 0f10 	tst.w	sl, #16
 80154ce:	9308      	str	r3, [sp, #32]
 80154d0:	d002      	beq.n	80154d8 <_svfprintf_r+0x440>
 80154d2:	6836      	ldr	r6, [r6, #0]
 80154d4:	17f7      	asrs	r7, r6, #31
 80154d6:	e7dd      	b.n	8015494 <_svfprintf_r+0x3fc>
 80154d8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80154dc:	6836      	ldr	r6, [r6, #0]
 80154de:	d001      	beq.n	80154e4 <_svfprintf_r+0x44c>
 80154e0:	b236      	sxth	r6, r6
 80154e2:	e7f7      	b.n	80154d4 <_svfprintf_r+0x43c>
 80154e4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80154e8:	bf18      	it	ne
 80154ea:	b276      	sxtbne	r6, r6
 80154ec:	e7f2      	b.n	80154d4 <_svfprintf_r+0x43c>
 80154ee:	3607      	adds	r6, #7
 80154f0:	f026 0607 	bic.w	r6, r6, #7
 80154f4:	ed96 7b00 	vldr	d7, [r6]
 80154f8:	f106 0308 	add.w	r3, r6, #8
 80154fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015500:	9308      	str	r3, [sp, #32]
 8015502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015504:	931a      	str	r3, [sp, #104]	; 0x68
 8015506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801550c:	931b      	str	r3, [sp, #108]	; 0x6c
 801550e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015512:	4bb2      	ldr	r3, [pc, #712]	; (80157dc <_svfprintf_r+0x744>)
 8015514:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8015518:	f7f2 f8a2 	bl	8007660 <__aeabi_dcmpun>
 801551c:	bb00      	cbnz	r0, 8015560 <_svfprintf_r+0x4c8>
 801551e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015522:	4bae      	ldr	r3, [pc, #696]	; (80157dc <_svfprintf_r+0x744>)
 8015524:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8015528:	f7f2 f87c 	bl	8007624 <__aeabi_dcmple>
 801552c:	b9c0      	cbnz	r0, 8015560 <_svfprintf_r+0x4c8>
 801552e:	2200      	movs	r2, #0
 8015530:	2300      	movs	r3, #0
 8015532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015536:	f7f2 f86b 	bl	8007610 <__aeabi_dcmplt>
 801553a:	b110      	cbz	r0, 8015542 <_svfprintf_r+0x4aa>
 801553c:	232d      	movs	r3, #45	; 0x2d
 801553e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015542:	4aa7      	ldr	r2, [pc, #668]	; (80157e0 <_svfprintf_r+0x748>)
 8015544:	4ba7      	ldr	r3, [pc, #668]	; (80157e4 <_svfprintf_r+0x74c>)
 8015546:	9906      	ldr	r1, [sp, #24]
 8015548:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801554c:	2947      	cmp	r1, #71	; 0x47
 801554e:	bfcc      	ite	gt
 8015550:	4693      	movgt	fp, r2
 8015552:	469b      	movle	fp, r3
 8015554:	f04f 0900 	mov.w	r9, #0
 8015558:	2503      	movs	r5, #3
 801555a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801555e:	e3c6      	b.n	8015cee <_svfprintf_r+0xc56>
 8015560:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015564:	4610      	mov	r0, r2
 8015566:	4619      	mov	r1, r3
 8015568:	f7f2 f87a 	bl	8007660 <__aeabi_dcmpun>
 801556c:	4681      	mov	r9, r0
 801556e:	b140      	cbz	r0, 8015582 <_svfprintf_r+0x4ea>
 8015570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015572:	4a9d      	ldr	r2, [pc, #628]	; (80157e8 <_svfprintf_r+0x750>)
 8015574:	2b00      	cmp	r3, #0
 8015576:	bfbc      	itt	lt
 8015578:	232d      	movlt	r3, #45	; 0x2d
 801557a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801557e:	4b9b      	ldr	r3, [pc, #620]	; (80157ec <_svfprintf_r+0x754>)
 8015580:	e7e1      	b.n	8015546 <_svfprintf_r+0x4ae>
 8015582:	9b06      	ldr	r3, [sp, #24]
 8015584:	f023 0320 	bic.w	r3, r3, #32
 8015588:	2b41      	cmp	r3, #65	; 0x41
 801558a:	9307      	str	r3, [sp, #28]
 801558c:	d125      	bne.n	80155da <_svfprintf_r+0x542>
 801558e:	2330      	movs	r3, #48	; 0x30
 8015590:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8015594:	9b06      	ldr	r3, [sp, #24]
 8015596:	2b61      	cmp	r3, #97	; 0x61
 8015598:	bf14      	ite	ne
 801559a:	2358      	movne	r3, #88	; 0x58
 801559c:	2378      	moveq	r3, #120	; 0x78
 801559e:	2d63      	cmp	r5, #99	; 0x63
 80155a0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80155a4:	f04a 0a02 	orr.w	sl, sl, #2
 80155a8:	f340 8108 	ble.w	80157bc <_svfprintf_r+0x724>
 80155ac:	1c69      	adds	r1, r5, #1
 80155ae:	9803      	ldr	r0, [sp, #12]
 80155b0:	f7ff f888 	bl	80146c4 <_malloc_r>
 80155b4:	4683      	mov	fp, r0
 80155b6:	2800      	cmp	r0, #0
 80155b8:	f040 8103 	bne.w	80157c2 <_svfprintf_r+0x72a>
 80155bc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80155c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155c4:	f8a8 300c 	strh.w	r3, [r8, #12]
 80155c8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80155cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80155d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155d2:	bf18      	it	ne
 80155d4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80155d8:	e582      	b.n	80150e0 <_svfprintf_r+0x48>
 80155da:	1c69      	adds	r1, r5, #1
 80155dc:	f000 80f3 	beq.w	80157c6 <_svfprintf_r+0x72e>
 80155e0:	9b07      	ldr	r3, [sp, #28]
 80155e2:	2b47      	cmp	r3, #71	; 0x47
 80155e4:	d102      	bne.n	80155ec <_svfprintf_r+0x554>
 80155e6:	2d00      	cmp	r5, #0
 80155e8:	f000 80ef 	beq.w	80157ca <_svfprintf_r+0x732>
 80155ec:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80155f0:	9310      	str	r3, [sp, #64]	; 0x40
 80155f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	f280 80eb 	bge.w	80157d0 <_svfprintf_r+0x738>
 80155fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155fc:	9314      	str	r3, [sp, #80]	; 0x50
 80155fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015600:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015604:	9315      	str	r3, [sp, #84]	; 0x54
 8015606:	232d      	movs	r3, #45	; 0x2d
 8015608:	9313      	str	r3, [sp, #76]	; 0x4c
 801560a:	9b07      	ldr	r3, [sp, #28]
 801560c:	2b41      	cmp	r3, #65	; 0x41
 801560e:	f040 8105 	bne.w	801581c <_svfprintf_r+0x784>
 8015612:	a820      	add	r0, sp, #128	; 0x80
 8015614:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8015618:	f002 fbf0 	bl	8017dfc <frexp>
 801561c:	2200      	movs	r2, #0
 801561e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015622:	ec51 0b10 	vmov	r0, r1, d0
 8015626:	f7f1 fd81 	bl	800712c <__aeabi_dmul>
 801562a:	2200      	movs	r2, #0
 801562c:	2300      	movs	r3, #0
 801562e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015632:	f7f1 ffe3 	bl	80075fc <__aeabi_dcmpeq>
 8015636:	b108      	cbz	r0, 801563c <_svfprintf_r+0x5a4>
 8015638:	2301      	movs	r3, #1
 801563a:	9320      	str	r3, [sp, #128]	; 0x80
 801563c:	4f6c      	ldr	r7, [pc, #432]	; (80157f0 <_svfprintf_r+0x758>)
 801563e:	4b6d      	ldr	r3, [pc, #436]	; (80157f4 <_svfprintf_r+0x75c>)
 8015640:	9a06      	ldr	r2, [sp, #24]
 8015642:	2a61      	cmp	r2, #97	; 0x61
 8015644:	bf08      	it	eq
 8015646:	461f      	moveq	r7, r3
 8015648:	9711      	str	r7, [sp, #68]	; 0x44
 801564a:	465e      	mov	r6, fp
 801564c:	1e6f      	subs	r7, r5, #1
 801564e:	2200      	movs	r2, #0
 8015650:	4b69      	ldr	r3, [pc, #420]	; (80157f8 <_svfprintf_r+0x760>)
 8015652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015656:	f7f1 fd69 	bl	800712c <__aeabi_dmul>
 801565a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801565e:	f7f2 f815 	bl	800768c <__aeabi_d2iz>
 8015662:	901c      	str	r0, [sp, #112]	; 0x70
 8015664:	f7f1 fcf8 	bl	8007058 <__aeabi_i2d>
 8015668:	4602      	mov	r2, r0
 801566a:	460b      	mov	r3, r1
 801566c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015670:	f7f1 fba4 	bl	8006dbc <__aeabi_dsub>
 8015674:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015678:	971d      	str	r7, [sp, #116]	; 0x74
 801567a:	5c9b      	ldrb	r3, [r3, r2]
 801567c:	f806 3b01 	strb.w	r3, [r6], #1
 8015680:	1c7a      	adds	r2, r7, #1
 8015682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015686:	d006      	beq.n	8015696 <_svfprintf_r+0x5fe>
 8015688:	2200      	movs	r2, #0
 801568a:	2300      	movs	r3, #0
 801568c:	3f01      	subs	r7, #1
 801568e:	f7f1 ffb5 	bl	80075fc <__aeabi_dcmpeq>
 8015692:	2800      	cmp	r0, #0
 8015694:	d0db      	beq.n	801564e <_svfprintf_r+0x5b6>
 8015696:	2200      	movs	r2, #0
 8015698:	4b58      	ldr	r3, [pc, #352]	; (80157fc <_svfprintf_r+0x764>)
 801569a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801569e:	f7f1 ffd5 	bl	800764c <__aeabi_dcmpgt>
 80156a2:	b960      	cbnz	r0, 80156be <_svfprintf_r+0x626>
 80156a4:	2200      	movs	r2, #0
 80156a6:	4b55      	ldr	r3, [pc, #340]	; (80157fc <_svfprintf_r+0x764>)
 80156a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156ac:	f7f1 ffa6 	bl	80075fc <__aeabi_dcmpeq>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	f000 80ae 	beq.w	8015812 <_svfprintf_r+0x77a>
 80156b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80156b8:	07db      	lsls	r3, r3, #31
 80156ba:	f140 80aa 	bpl.w	8015812 <_svfprintf_r+0x77a>
 80156be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156c0:	9624      	str	r6, [sp, #144]	; 0x90
 80156c2:	7bd9      	ldrb	r1, [r3, #15]
 80156c4:	2030      	movs	r0, #48	; 0x30
 80156c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80156c8:	1e53      	subs	r3, r2, #1
 80156ca:	9324      	str	r3, [sp, #144]	; 0x90
 80156cc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80156d0:	428b      	cmp	r3, r1
 80156d2:	f000 8095 	beq.w	8015800 <_svfprintf_r+0x768>
 80156d6:	2b39      	cmp	r3, #57	; 0x39
 80156d8:	bf0b      	itete	eq
 80156da:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 80156dc:	3301      	addne	r3, #1
 80156de:	7a9b      	ldrbeq	r3, [r3, #10]
 80156e0:	b2db      	uxtbne	r3, r3
 80156e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80156e6:	4633      	mov	r3, r6
 80156e8:	eba3 030b 	sub.w	r3, r3, fp
 80156ec:	9304      	str	r3, [sp, #16]
 80156ee:	9b07      	ldr	r3, [sp, #28]
 80156f0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80156f2:	2b47      	cmp	r3, #71	; 0x47
 80156f4:	f040 80d7 	bne.w	80158a6 <_svfprintf_r+0x80e>
 80156f8:	1cf7      	adds	r7, r6, #3
 80156fa:	db02      	blt.n	8015702 <_svfprintf_r+0x66a>
 80156fc:	42b5      	cmp	r5, r6
 80156fe:	f280 80fd 	bge.w	80158fc <_svfprintf_r+0x864>
 8015702:	9b06      	ldr	r3, [sp, #24]
 8015704:	3b02      	subs	r3, #2
 8015706:	9306      	str	r3, [sp, #24]
 8015708:	9906      	ldr	r1, [sp, #24]
 801570a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801570e:	f021 0120 	bic.w	r1, r1, #32
 8015712:	2941      	cmp	r1, #65	; 0x41
 8015714:	bf08      	it	eq
 8015716:	320f      	addeq	r2, #15
 8015718:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 801571c:	bf06      	itte	eq
 801571e:	b2d2      	uxtbeq	r2, r2
 8015720:	2101      	moveq	r1, #1
 8015722:	2100      	movne	r1, #0
 8015724:	2b00      	cmp	r3, #0
 8015726:	9320      	str	r3, [sp, #128]	; 0x80
 8015728:	bfb8      	it	lt
 801572a:	f1c6 0301 	rsblt	r3, r6, #1
 801572e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8015732:	bfb4      	ite	lt
 8015734:	222d      	movlt	r2, #45	; 0x2d
 8015736:	222b      	movge	r2, #43	; 0x2b
 8015738:	2b09      	cmp	r3, #9
 801573a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801573e:	f340 80c9 	ble.w	80158d4 <_svfprintf_r+0x83c>
 8015742:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8015746:	250a      	movs	r5, #10
 8015748:	fb93 f0f5 	sdiv	r0, r3, r5
 801574c:	fb05 3310 	mls	r3, r5, r0, r3
 8015750:	3330      	adds	r3, #48	; 0x30
 8015752:	2809      	cmp	r0, #9
 8015754:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015758:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 801575c:	4603      	mov	r3, r0
 801575e:	f300 80b2 	bgt.w	80158c6 <_svfprintf_r+0x82e>
 8015762:	3330      	adds	r3, #48	; 0x30
 8015764:	f801 3c01 	strb.w	r3, [r1, #-1]
 8015768:	3a02      	subs	r2, #2
 801576a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801576e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8015772:	4282      	cmp	r2, r0
 8015774:	4619      	mov	r1, r3
 8015776:	f0c0 80a8 	bcc.w	80158ca <_svfprintf_r+0x832>
 801577a:	9a04      	ldr	r2, [sp, #16]
 801577c:	ab22      	add	r3, sp, #136	; 0x88
 801577e:	1acb      	subs	r3, r1, r3
 8015780:	2a01      	cmp	r2, #1
 8015782:	9317      	str	r3, [sp, #92]	; 0x5c
 8015784:	eb03 0502 	add.w	r5, r3, r2
 8015788:	dc02      	bgt.n	8015790 <_svfprintf_r+0x6f8>
 801578a:	f01a 0f01 	tst.w	sl, #1
 801578e:	d001      	beq.n	8015794 <_svfprintf_r+0x6fc>
 8015790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015792:	441d      	add	r5, r3
 8015794:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8015798:	2700      	movs	r7, #0
 801579a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801579e:	9310      	str	r3, [sp, #64]	; 0x40
 80157a0:	9707      	str	r7, [sp, #28]
 80157a2:	463e      	mov	r6, r7
 80157a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f000 8315 	beq.w	8015dd6 <_svfprintf_r+0xd3e>
 80157ac:	232d      	movs	r3, #45	; 0x2d
 80157ae:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80157b2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80157b6:	2300      	movs	r3, #0
 80157b8:	9310      	str	r3, [sp, #64]	; 0x40
 80157ba:	e160      	b.n	8015a7e <_svfprintf_r+0x9e6>
 80157bc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80157c0:	e714      	b.n	80155ec <_svfprintf_r+0x554>
 80157c2:	4681      	mov	r9, r0
 80157c4:	e712      	b.n	80155ec <_svfprintf_r+0x554>
 80157c6:	2506      	movs	r5, #6
 80157c8:	e710      	b.n	80155ec <_svfprintf_r+0x554>
 80157ca:	46a9      	mov	r9, r5
 80157cc:	2501      	movs	r5, #1
 80157ce:	e70d      	b.n	80155ec <_svfprintf_r+0x554>
 80157d0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80157d4:	2300      	movs	r3, #0
 80157d6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80157da:	e715      	b.n	8015608 <_svfprintf_r+0x570>
 80157dc:	7fefffff 	.word	0x7fefffff
 80157e0:	0801b6fc 	.word	0x0801b6fc
 80157e4:	0801b6f8 	.word	0x0801b6f8
 80157e8:	0801b704 	.word	0x0801b704
 80157ec:	0801b700 	.word	0x0801b700
 80157f0:	0801b719 	.word	0x0801b719
 80157f4:	0801b708 	.word	0x0801b708
 80157f8:	40300000 	.word	0x40300000
 80157fc:	3fe00000 	.word	0x3fe00000
 8015800:	f802 0c01 	strb.w	r0, [r2, #-1]
 8015804:	e75f      	b.n	80156c6 <_svfprintf_r+0x62e>
 8015806:	f803 1b01 	strb.w	r1, [r3], #1
 801580a:	1af2      	subs	r2, r6, r3
 801580c:	2a00      	cmp	r2, #0
 801580e:	dafa      	bge.n	8015806 <_svfprintf_r+0x76e>
 8015810:	e76a      	b.n	80156e8 <_svfprintf_r+0x650>
 8015812:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015814:	4633      	mov	r3, r6
 8015816:	2130      	movs	r1, #48	; 0x30
 8015818:	4416      	add	r6, r2
 801581a:	e7f6      	b.n	801580a <_svfprintf_r+0x772>
 801581c:	9b07      	ldr	r3, [sp, #28]
 801581e:	2b46      	cmp	r3, #70	; 0x46
 8015820:	d004      	beq.n	801582c <_svfprintf_r+0x794>
 8015822:	2b45      	cmp	r3, #69	; 0x45
 8015824:	d13a      	bne.n	801589c <_svfprintf_r+0x804>
 8015826:	1c6e      	adds	r6, r5, #1
 8015828:	2102      	movs	r1, #2
 801582a:	e001      	b.n	8015830 <_svfprintf_r+0x798>
 801582c:	462e      	mov	r6, r5
 801582e:	2103      	movs	r1, #3
 8015830:	ab24      	add	r3, sp, #144	; 0x90
 8015832:	9301      	str	r3, [sp, #4]
 8015834:	ab21      	add	r3, sp, #132	; 0x84
 8015836:	9300      	str	r3, [sp, #0]
 8015838:	4632      	mov	r2, r6
 801583a:	ab20      	add	r3, sp, #128	; 0x80
 801583c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8015840:	9803      	ldr	r0, [sp, #12]
 8015842:	f000 ffa5 	bl	8016790 <_dtoa_r>
 8015846:	9b07      	ldr	r3, [sp, #28]
 8015848:	2b47      	cmp	r3, #71	; 0x47
 801584a:	4683      	mov	fp, r0
 801584c:	d102      	bne.n	8015854 <_svfprintf_r+0x7bc>
 801584e:	f01a 0f01 	tst.w	sl, #1
 8015852:	d026      	beq.n	80158a2 <_svfprintf_r+0x80a>
 8015854:	9b07      	ldr	r3, [sp, #28]
 8015856:	2b46      	cmp	r3, #70	; 0x46
 8015858:	eb0b 0706 	add.w	r7, fp, r6
 801585c:	d10f      	bne.n	801587e <_svfprintf_r+0x7e6>
 801585e:	f89b 3000 	ldrb.w	r3, [fp]
 8015862:	2b30      	cmp	r3, #48	; 0x30
 8015864:	d109      	bne.n	801587a <_svfprintf_r+0x7e2>
 8015866:	2200      	movs	r2, #0
 8015868:	2300      	movs	r3, #0
 801586a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801586e:	f7f1 fec5 	bl	80075fc <__aeabi_dcmpeq>
 8015872:	b910      	cbnz	r0, 801587a <_svfprintf_r+0x7e2>
 8015874:	f1c6 0601 	rsb	r6, r6, #1
 8015878:	9620      	str	r6, [sp, #128]	; 0x80
 801587a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801587c:	441f      	add	r7, r3
 801587e:	2200      	movs	r2, #0
 8015880:	2300      	movs	r3, #0
 8015882:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8015886:	f7f1 feb9 	bl	80075fc <__aeabi_dcmpeq>
 801588a:	b948      	cbnz	r0, 80158a0 <_svfprintf_r+0x808>
 801588c:	2230      	movs	r2, #48	; 0x30
 801588e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015890:	429f      	cmp	r7, r3
 8015892:	d906      	bls.n	80158a2 <_svfprintf_r+0x80a>
 8015894:	1c59      	adds	r1, r3, #1
 8015896:	9124      	str	r1, [sp, #144]	; 0x90
 8015898:	701a      	strb	r2, [r3, #0]
 801589a:	e7f8      	b.n	801588e <_svfprintf_r+0x7f6>
 801589c:	462e      	mov	r6, r5
 801589e:	e7c3      	b.n	8015828 <_svfprintf_r+0x790>
 80158a0:	9724      	str	r7, [sp, #144]	; 0x90
 80158a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80158a4:	e720      	b.n	80156e8 <_svfprintf_r+0x650>
 80158a6:	9b07      	ldr	r3, [sp, #28]
 80158a8:	2b46      	cmp	r3, #70	; 0x46
 80158aa:	f47f af2d 	bne.w	8015708 <_svfprintf_r+0x670>
 80158ae:	2e00      	cmp	r6, #0
 80158b0:	dd1d      	ble.n	80158ee <_svfprintf_r+0x856>
 80158b2:	b915      	cbnz	r5, 80158ba <_svfprintf_r+0x822>
 80158b4:	f01a 0f01 	tst.w	sl, #1
 80158b8:	d034      	beq.n	8015924 <_svfprintf_r+0x88c>
 80158ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158bc:	18f3      	adds	r3, r6, r3
 80158be:	441d      	add	r5, r3
 80158c0:	2366      	movs	r3, #102	; 0x66
 80158c2:	9306      	str	r3, [sp, #24]
 80158c4:	e033      	b.n	801592e <_svfprintf_r+0x896>
 80158c6:	460a      	mov	r2, r1
 80158c8:	e73e      	b.n	8015748 <_svfprintf_r+0x6b0>
 80158ca:	f812 1b01 	ldrb.w	r1, [r2], #1
 80158ce:	f803 1b01 	strb.w	r1, [r3], #1
 80158d2:	e74e      	b.n	8015772 <_svfprintf_r+0x6da>
 80158d4:	b941      	cbnz	r1, 80158e8 <_svfprintf_r+0x850>
 80158d6:	2230      	movs	r2, #48	; 0x30
 80158d8:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80158dc:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80158e0:	3330      	adds	r3, #48	; 0x30
 80158e2:	1c51      	adds	r1, r2, #1
 80158e4:	7013      	strb	r3, [r2, #0]
 80158e6:	e748      	b.n	801577a <_svfprintf_r+0x6e2>
 80158e8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80158ec:	e7f8      	b.n	80158e0 <_svfprintf_r+0x848>
 80158ee:	b915      	cbnz	r5, 80158f6 <_svfprintf_r+0x85e>
 80158f0:	f01a 0f01 	tst.w	sl, #1
 80158f4:	d018      	beq.n	8015928 <_svfprintf_r+0x890>
 80158f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158f8:	3301      	adds	r3, #1
 80158fa:	e7e0      	b.n	80158be <_svfprintf_r+0x826>
 80158fc:	9b04      	ldr	r3, [sp, #16]
 80158fe:	42b3      	cmp	r3, r6
 8015900:	dc06      	bgt.n	8015910 <_svfprintf_r+0x878>
 8015902:	f01a 0f01 	tst.w	sl, #1
 8015906:	d025      	beq.n	8015954 <_svfprintf_r+0x8bc>
 8015908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801590a:	18f5      	adds	r5, r6, r3
 801590c:	2367      	movs	r3, #103	; 0x67
 801590e:	e7d8      	b.n	80158c2 <_svfprintf_r+0x82a>
 8015910:	9b04      	ldr	r3, [sp, #16]
 8015912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015914:	2e00      	cmp	r6, #0
 8015916:	eb03 0502 	add.w	r5, r3, r2
 801591a:	dcf7      	bgt.n	801590c <_svfprintf_r+0x874>
 801591c:	f1c6 0301 	rsb	r3, r6, #1
 8015920:	441d      	add	r5, r3
 8015922:	e7f3      	b.n	801590c <_svfprintf_r+0x874>
 8015924:	4635      	mov	r5, r6
 8015926:	e7cb      	b.n	80158c0 <_svfprintf_r+0x828>
 8015928:	2366      	movs	r3, #102	; 0x66
 801592a:	9306      	str	r3, [sp, #24]
 801592c:	2501      	movs	r5, #1
 801592e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8015932:	9307      	str	r3, [sp, #28]
 8015934:	d01f      	beq.n	8015976 <_svfprintf_r+0x8de>
 8015936:	2700      	movs	r7, #0
 8015938:	2e00      	cmp	r6, #0
 801593a:	9707      	str	r7, [sp, #28]
 801593c:	f77f af32 	ble.w	80157a4 <_svfprintf_r+0x70c>
 8015940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	2bff      	cmp	r3, #255	; 0xff
 8015946:	d107      	bne.n	8015958 <_svfprintf_r+0x8c0>
 8015948:	9b07      	ldr	r3, [sp, #28]
 801594a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801594c:	443b      	add	r3, r7
 801594e:	fb02 5503 	mla	r5, r2, r3, r5
 8015952:	e727      	b.n	80157a4 <_svfprintf_r+0x70c>
 8015954:	4635      	mov	r5, r6
 8015956:	e7d9      	b.n	801590c <_svfprintf_r+0x874>
 8015958:	42b3      	cmp	r3, r6
 801595a:	daf5      	bge.n	8015948 <_svfprintf_r+0x8b0>
 801595c:	1af6      	subs	r6, r6, r3
 801595e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015960:	785b      	ldrb	r3, [r3, #1]
 8015962:	b133      	cbz	r3, 8015972 <_svfprintf_r+0x8da>
 8015964:	9b07      	ldr	r3, [sp, #28]
 8015966:	3301      	adds	r3, #1
 8015968:	9307      	str	r3, [sp, #28]
 801596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596c:	3301      	adds	r3, #1
 801596e:	9309      	str	r3, [sp, #36]	; 0x24
 8015970:	e7e6      	b.n	8015940 <_svfprintf_r+0x8a8>
 8015972:	3701      	adds	r7, #1
 8015974:	e7e4      	b.n	8015940 <_svfprintf_r+0x8a8>
 8015976:	9f07      	ldr	r7, [sp, #28]
 8015978:	e714      	b.n	80157a4 <_svfprintf_r+0x70c>
 801597a:	4632      	mov	r2, r6
 801597c:	f01a 0f20 	tst.w	sl, #32
 8015980:	f852 3b04 	ldr.w	r3, [r2], #4
 8015984:	9208      	str	r2, [sp, #32]
 8015986:	d009      	beq.n	801599c <_svfprintf_r+0x904>
 8015988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801598a:	4610      	mov	r0, r2
 801598c:	17d1      	asrs	r1, r2, #31
 801598e:	e9c3 0100 	strd	r0, r1, [r3]
 8015992:	9e08      	ldr	r6, [sp, #32]
 8015994:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8015998:	f7ff bbba 	b.w	8015110 <_svfprintf_r+0x78>
 801599c:	f01a 0f10 	tst.w	sl, #16
 80159a0:	d002      	beq.n	80159a8 <_svfprintf_r+0x910>
 80159a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159a4:	601a      	str	r2, [r3, #0]
 80159a6:	e7f4      	b.n	8015992 <_svfprintf_r+0x8fa>
 80159a8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80159ac:	d002      	beq.n	80159b4 <_svfprintf_r+0x91c>
 80159ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159b0:	801a      	strh	r2, [r3, #0]
 80159b2:	e7ee      	b.n	8015992 <_svfprintf_r+0x8fa>
 80159b4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80159b8:	d0f3      	beq.n	80159a2 <_svfprintf_r+0x90a>
 80159ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159bc:	701a      	strb	r2, [r3, #0]
 80159be:	e7e8      	b.n	8015992 <_svfprintf_r+0x8fa>
 80159c0:	f04a 0a10 	orr.w	sl, sl, #16
 80159c4:	f01a 0f20 	tst.w	sl, #32
 80159c8:	d01e      	beq.n	8015a08 <_svfprintf_r+0x970>
 80159ca:	3607      	adds	r6, #7
 80159cc:	f026 0607 	bic.w	r6, r6, #7
 80159d0:	f106 0308 	add.w	r3, r6, #8
 80159d4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80159d8:	9308      	str	r3, [sp, #32]
 80159da:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80159de:	2300      	movs	r3, #0
 80159e0:	2200      	movs	r2, #0
 80159e2:	1c69      	adds	r1, r5, #1
 80159e4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80159e8:	f000 815b 	beq.w	8015ca2 <_svfprintf_r+0xc0a>
 80159ec:	4652      	mov	r2, sl
 80159ee:	ea56 0107 	orrs.w	r1, r6, r7
 80159f2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80159f6:	f040 8154 	bne.w	8015ca2 <_svfprintf_r+0xc0a>
 80159fa:	2d00      	cmp	r5, #0
 80159fc:	f000 81d5 	beq.w	8015daa <_svfprintf_r+0xd12>
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	f040 8151 	bne.w	8015ca8 <_svfprintf_r+0xc10>
 8015a06:	e558      	b.n	80154ba <_svfprintf_r+0x422>
 8015a08:	1d33      	adds	r3, r6, #4
 8015a0a:	f01a 0f10 	tst.w	sl, #16
 8015a0e:	9308      	str	r3, [sp, #32]
 8015a10:	d001      	beq.n	8015a16 <_svfprintf_r+0x97e>
 8015a12:	6836      	ldr	r6, [r6, #0]
 8015a14:	e003      	b.n	8015a1e <_svfprintf_r+0x986>
 8015a16:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8015a1a:	d002      	beq.n	8015a22 <_svfprintf_r+0x98a>
 8015a1c:	8836      	ldrh	r6, [r6, #0]
 8015a1e:	2700      	movs	r7, #0
 8015a20:	e7db      	b.n	80159da <_svfprintf_r+0x942>
 8015a22:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8015a26:	d0f4      	beq.n	8015a12 <_svfprintf_r+0x97a>
 8015a28:	7836      	ldrb	r6, [r6, #0]
 8015a2a:	e7f8      	b.n	8015a1e <_svfprintf_r+0x986>
 8015a2c:	1d33      	adds	r3, r6, #4
 8015a2e:	9308      	str	r3, [sp, #32]
 8015a30:	f647 0330 	movw	r3, #30768	; 0x7830
 8015a34:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8015a38:	2278      	movs	r2, #120	; 0x78
 8015a3a:	4bb0      	ldr	r3, [pc, #704]	; (8015cfc <_svfprintf_r+0xc64>)
 8015a3c:	9318      	str	r3, [sp, #96]	; 0x60
 8015a3e:	6836      	ldr	r6, [r6, #0]
 8015a40:	9206      	str	r2, [sp, #24]
 8015a42:	2700      	movs	r7, #0
 8015a44:	f04a 0a02 	orr.w	sl, sl, #2
 8015a48:	2302      	movs	r3, #2
 8015a4a:	e7c9      	b.n	80159e0 <_svfprintf_r+0x948>
 8015a4c:	1d33      	adds	r3, r6, #4
 8015a4e:	f8d6 b000 	ldr.w	fp, [r6]
 8015a52:	9308      	str	r3, [sp, #32]
 8015a54:	2600      	movs	r6, #0
 8015a56:	1c68      	adds	r0, r5, #1
 8015a58:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8015a5c:	f000 80e1 	beq.w	8015c22 <_svfprintf_r+0xb8a>
 8015a60:	462a      	mov	r2, r5
 8015a62:	4631      	mov	r1, r6
 8015a64:	4658      	mov	r0, fp
 8015a66:	f7f1 f943 	bl	8006cf0 <memchr>
 8015a6a:	4681      	mov	r9, r0
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	f43f ad74 	beq.w	801555a <_svfprintf_r+0x4c2>
 8015a72:	eba0 050b 	sub.w	r5, r0, fp
 8015a76:	46b1      	mov	r9, r6
 8015a78:	9610      	str	r6, [sp, #64]	; 0x40
 8015a7a:	4637      	mov	r7, r6
 8015a7c:	9607      	str	r6, [sp, #28]
 8015a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a80:	42ab      	cmp	r3, r5
 8015a82:	bfb8      	it	lt
 8015a84:	462b      	movlt	r3, r5
 8015a86:	9311      	str	r3, [sp, #68]	; 0x44
 8015a88:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8015a8c:	b113      	cbz	r3, 8015a94 <_svfprintf_r+0x9fc>
 8015a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015a90:	3301      	adds	r3, #1
 8015a92:	9311      	str	r3, [sp, #68]	; 0x44
 8015a94:	f01a 0302 	ands.w	r3, sl, #2
 8015a98:	931c      	str	r3, [sp, #112]	; 0x70
 8015a9a:	bf1e      	ittt	ne
 8015a9c:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8015a9e:	3302      	addne	r3, #2
 8015aa0:	9311      	strne	r3, [sp, #68]	; 0x44
 8015aa2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8015aa6:	931d      	str	r3, [sp, #116]	; 0x74
 8015aa8:	d122      	bne.n	8015af0 <_svfprintf_r+0xa58>
 8015aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015aac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015aae:	1a9b      	subs	r3, r3, r2
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ab4:	dd1c      	ble.n	8015af0 <_svfprintf_r+0xa58>
 8015ab6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015ab8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8015abc:	2810      	cmp	r0, #16
 8015abe:	4890      	ldr	r0, [pc, #576]	; (8015d00 <_svfprintf_r+0xc68>)
 8015ac0:	6020      	str	r0, [r4, #0]
 8015ac2:	f102 0201 	add.w	r2, r2, #1
 8015ac6:	f104 0108 	add.w	r1, r4, #8
 8015aca:	f300 8188 	bgt.w	8015dde <_svfprintf_r+0xd46>
 8015ace:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015ad0:	6060      	str	r0, [r4, #4]
 8015ad2:	4403      	add	r3, r0
 8015ad4:	2a07      	cmp	r2, #7
 8015ad6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015ada:	f340 8195 	ble.w	8015e08 <_svfprintf_r+0xd70>
 8015ade:	aa26      	add	r2, sp, #152	; 0x98
 8015ae0:	4641      	mov	r1, r8
 8015ae2:	9803      	ldr	r0, [sp, #12]
 8015ae4:	f002 fa18 	bl	8017f18 <__ssprint_r>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	f040 84c1 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015aee:	ac29      	add	r4, sp, #164	; 0xa4
 8015af0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8015af4:	b173      	cbz	r3, 8015b14 <_svfprintf_r+0xa7c>
 8015af6:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8015afa:	6023      	str	r3, [r4, #0]
 8015afc:	2301      	movs	r3, #1
 8015afe:	6063      	str	r3, [r4, #4]
 8015b00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015b02:	3301      	adds	r3, #1
 8015b04:	9328      	str	r3, [sp, #160]	; 0xa0
 8015b06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015b08:	3301      	adds	r3, #1
 8015b0a:	2b07      	cmp	r3, #7
 8015b0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8015b0e:	f300 817d 	bgt.w	8015e0c <_svfprintf_r+0xd74>
 8015b12:	3408      	adds	r4, #8
 8015b14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015b16:	b16b      	cbz	r3, 8015b34 <_svfprintf_r+0xa9c>
 8015b18:	ab1f      	add	r3, sp, #124	; 0x7c
 8015b1a:	6023      	str	r3, [r4, #0]
 8015b1c:	2302      	movs	r3, #2
 8015b1e:	6063      	str	r3, [r4, #4]
 8015b20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015b22:	3302      	adds	r3, #2
 8015b24:	9328      	str	r3, [sp, #160]	; 0xa0
 8015b26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015b28:	3301      	adds	r3, #1
 8015b2a:	2b07      	cmp	r3, #7
 8015b2c:	9327      	str	r3, [sp, #156]	; 0x9c
 8015b2e:	f300 8177 	bgt.w	8015e20 <_svfprintf_r+0xd88>
 8015b32:	3408      	adds	r4, #8
 8015b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b36:	2b80      	cmp	r3, #128	; 0x80
 8015b38:	d122      	bne.n	8015b80 <_svfprintf_r+0xae8>
 8015b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b3e:	1a9b      	subs	r3, r3, r2
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b44:	dd1c      	ble.n	8015b80 <_svfprintf_r+0xae8>
 8015b46:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015b48:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8015b4c:	2810      	cmp	r0, #16
 8015b4e:	486d      	ldr	r0, [pc, #436]	; (8015d04 <_svfprintf_r+0xc6c>)
 8015b50:	6020      	str	r0, [r4, #0]
 8015b52:	f102 0201 	add.w	r2, r2, #1
 8015b56:	f104 0108 	add.w	r1, r4, #8
 8015b5a:	f300 816b 	bgt.w	8015e34 <_svfprintf_r+0xd9c>
 8015b5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015b60:	6060      	str	r0, [r4, #4]
 8015b62:	4403      	add	r3, r0
 8015b64:	2a07      	cmp	r2, #7
 8015b66:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015b6a:	f340 8178 	ble.w	8015e5e <_svfprintf_r+0xdc6>
 8015b6e:	aa26      	add	r2, sp, #152	; 0x98
 8015b70:	4641      	mov	r1, r8
 8015b72:	9803      	ldr	r0, [sp, #12]
 8015b74:	f002 f9d0 	bl	8017f18 <__ssprint_r>
 8015b78:	2800      	cmp	r0, #0
 8015b7a:	f040 8479 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015b7e:	ac29      	add	r4, sp, #164	; 0xa4
 8015b80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b82:	1b5b      	subs	r3, r3, r5
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	9310      	str	r3, [sp, #64]	; 0x40
 8015b88:	dd1c      	ble.n	8015bc4 <_svfprintf_r+0xb2c>
 8015b8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015b8c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8015b90:	2810      	cmp	r0, #16
 8015b92:	485c      	ldr	r0, [pc, #368]	; (8015d04 <_svfprintf_r+0xc6c>)
 8015b94:	6020      	str	r0, [r4, #0]
 8015b96:	f102 0201 	add.w	r2, r2, #1
 8015b9a:	f104 0108 	add.w	r1, r4, #8
 8015b9e:	f300 8160 	bgt.w	8015e62 <_svfprintf_r+0xdca>
 8015ba2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015ba4:	6060      	str	r0, [r4, #4]
 8015ba6:	4403      	add	r3, r0
 8015ba8:	2a07      	cmp	r2, #7
 8015baa:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015bae:	f340 816d 	ble.w	8015e8c <_svfprintf_r+0xdf4>
 8015bb2:	aa26      	add	r2, sp, #152	; 0x98
 8015bb4:	4641      	mov	r1, r8
 8015bb6:	9803      	ldr	r0, [sp, #12]
 8015bb8:	f002 f9ae 	bl	8017f18 <__ssprint_r>
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	f040 8457 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015bc2:	ac29      	add	r4, sp, #164	; 0xa4
 8015bc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015bc6:	9310      	str	r3, [sp, #64]	; 0x40
 8015bc8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015bcc:	f040 8160 	bne.w	8015e90 <_svfprintf_r+0xdf8>
 8015bd0:	e9c4 b500 	strd	fp, r5, [r4]
 8015bd4:	441d      	add	r5, r3
 8015bd6:	9528      	str	r5, [sp, #160]	; 0xa0
 8015bd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015bda:	3301      	adds	r3, #1
 8015bdc:	2b07      	cmp	r3, #7
 8015bde:	9327      	str	r3, [sp, #156]	; 0x9c
 8015be0:	f300 819c 	bgt.w	8015f1c <_svfprintf_r+0xe84>
 8015be4:	3408      	adds	r4, #8
 8015be6:	f01a 0f04 	tst.w	sl, #4
 8015bea:	f040 8423 	bne.w	8016434 <_svfprintf_r+0x139c>
 8015bee:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8015bf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015bf4:	428a      	cmp	r2, r1
 8015bf6:	bfac      	ite	ge
 8015bf8:	189b      	addge	r3, r3, r2
 8015bfa:	185b      	addlt	r3, r3, r1
 8015bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8015bfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015c00:	b13b      	cbz	r3, 8015c12 <_svfprintf_r+0xb7a>
 8015c02:	aa26      	add	r2, sp, #152	; 0x98
 8015c04:	4641      	mov	r1, r8
 8015c06:	9803      	ldr	r0, [sp, #12]
 8015c08:	f002 f986 	bl	8017f18 <__ssprint_r>
 8015c0c:	2800      	cmp	r0, #0
 8015c0e:	f040 842f 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015c12:	2300      	movs	r3, #0
 8015c14:	9327      	str	r3, [sp, #156]	; 0x9c
 8015c16:	f1b9 0f00 	cmp.w	r9, #0
 8015c1a:	f040 8445 	bne.w	80164a8 <_svfprintf_r+0x1410>
 8015c1e:	ac29      	add	r4, sp, #164	; 0xa4
 8015c20:	e6b7      	b.n	8015992 <_svfprintf_r+0x8fa>
 8015c22:	4658      	mov	r0, fp
 8015c24:	f7f1 f8be 	bl	8006da4 <strlen>
 8015c28:	46b1      	mov	r9, r6
 8015c2a:	4605      	mov	r5, r0
 8015c2c:	e495      	b.n	801555a <_svfprintf_r+0x4c2>
 8015c2e:	f04a 0a10 	orr.w	sl, sl, #16
 8015c32:	f01a 0f20 	tst.w	sl, #32
 8015c36:	d009      	beq.n	8015c4c <_svfprintf_r+0xbb4>
 8015c38:	3607      	adds	r6, #7
 8015c3a:	f026 0607 	bic.w	r6, r6, #7
 8015c3e:	f106 0308 	add.w	r3, r6, #8
 8015c42:	e9d6 6700 	ldrd	r6, r7, [r6]
 8015c46:	9308      	str	r3, [sp, #32]
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e6c9      	b.n	80159e0 <_svfprintf_r+0x948>
 8015c4c:	1d33      	adds	r3, r6, #4
 8015c4e:	f01a 0f10 	tst.w	sl, #16
 8015c52:	9308      	str	r3, [sp, #32]
 8015c54:	d001      	beq.n	8015c5a <_svfprintf_r+0xbc2>
 8015c56:	6836      	ldr	r6, [r6, #0]
 8015c58:	e003      	b.n	8015c62 <_svfprintf_r+0xbca>
 8015c5a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8015c5e:	d002      	beq.n	8015c66 <_svfprintf_r+0xbce>
 8015c60:	8836      	ldrh	r6, [r6, #0]
 8015c62:	2700      	movs	r7, #0
 8015c64:	e7f0      	b.n	8015c48 <_svfprintf_r+0xbb0>
 8015c66:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8015c6a:	d0f4      	beq.n	8015c56 <_svfprintf_r+0xbbe>
 8015c6c:	7836      	ldrb	r6, [r6, #0]
 8015c6e:	e7f8      	b.n	8015c62 <_svfprintf_r+0xbca>
 8015c70:	4b22      	ldr	r3, [pc, #136]	; (8015cfc <_svfprintf_r+0xc64>)
 8015c72:	f7ff bb48 	b.w	8015306 <_svfprintf_r+0x26e>
 8015c76:	1d33      	adds	r3, r6, #4
 8015c78:	f01a 0f10 	tst.w	sl, #16
 8015c7c:	9308      	str	r3, [sp, #32]
 8015c7e:	d001      	beq.n	8015c84 <_svfprintf_r+0xbec>
 8015c80:	6836      	ldr	r6, [r6, #0]
 8015c82:	e003      	b.n	8015c8c <_svfprintf_r+0xbf4>
 8015c84:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8015c88:	d003      	beq.n	8015c92 <_svfprintf_r+0xbfa>
 8015c8a:	8836      	ldrh	r6, [r6, #0]
 8015c8c:	2700      	movs	r7, #0
 8015c8e:	f7ff bb47 	b.w	8015320 <_svfprintf_r+0x288>
 8015c92:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8015c96:	d0f3      	beq.n	8015c80 <_svfprintf_r+0xbe8>
 8015c98:	7836      	ldrb	r6, [r6, #0]
 8015c9a:	e7f7      	b.n	8015c8c <_svfprintf_r+0xbf4>
 8015c9c:	4652      	mov	r2, sl
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	e6a5      	b.n	80159ee <_svfprintf_r+0x956>
 8015ca2:	2b01      	cmp	r3, #1
 8015ca4:	f43f ac04 	beq.w	80154b0 <_svfprintf_r+0x418>
 8015ca8:	2b02      	cmp	r3, #2
 8015caa:	d06c      	beq.n	8015d86 <_svfprintf_r+0xcee>
 8015cac:	ab52      	add	r3, sp, #328	; 0x148
 8015cae:	08f1      	lsrs	r1, r6, #3
 8015cb0:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8015cb4:	08f8      	lsrs	r0, r7, #3
 8015cb6:	f006 0207 	and.w	r2, r6, #7
 8015cba:	4607      	mov	r7, r0
 8015cbc:	460e      	mov	r6, r1
 8015cbe:	3230      	adds	r2, #48	; 0x30
 8015cc0:	ea56 0107 	orrs.w	r1, r6, r7
 8015cc4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8015cc8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015ccc:	d114      	bne.n	8015cf8 <_svfprintf_r+0xc60>
 8015cce:	f01a 0f01 	tst.w	sl, #1
 8015cd2:	d006      	beq.n	8015ce2 <_svfprintf_r+0xc4a>
 8015cd4:	2a30      	cmp	r2, #48	; 0x30
 8015cd6:	d004      	beq.n	8015ce2 <_svfprintf_r+0xc4a>
 8015cd8:	2230      	movs	r2, #48	; 0x30
 8015cda:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8015cde:	f1a3 0b02 	sub.w	fp, r3, #2
 8015ce2:	ab52      	add	r3, sp, #328	; 0x148
 8015ce4:	9510      	str	r5, [sp, #64]	; 0x40
 8015ce6:	f04f 0900 	mov.w	r9, #0
 8015cea:	eba3 050b 	sub.w	r5, r3, fp
 8015cee:	464f      	mov	r7, r9
 8015cf0:	f8cd 901c 	str.w	r9, [sp, #28]
 8015cf4:	464e      	mov	r6, r9
 8015cf6:	e6c2      	b.n	8015a7e <_svfprintf_r+0x9e6>
 8015cf8:	465b      	mov	r3, fp
 8015cfa:	e7d8      	b.n	8015cae <_svfprintf_r+0xc16>
 8015cfc:	0801b708 	.word	0x0801b708
 8015d00:	0801b72c 	.word	0x0801b72c
 8015d04:	0801b73c 	.word	0x0801b73c
 8015d08:	2300      	movs	r3, #0
 8015d0a:	9304      	str	r3, [sp, #16]
 8015d0c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8015d10:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8015d14:	9307      	str	r3, [sp, #28]
 8015d16:	220a      	movs	r2, #10
 8015d18:	2300      	movs	r3, #0
 8015d1a:	4630      	mov	r0, r6
 8015d1c:	4639      	mov	r1, r7
 8015d1e:	f7f1 fcdd 	bl	80076dc <__aeabi_uldivmod>
 8015d22:	9b04      	ldr	r3, [sp, #16]
 8015d24:	3301      	adds	r3, #1
 8015d26:	9304      	str	r3, [sp, #16]
 8015d28:	9b07      	ldr	r3, [sp, #28]
 8015d2a:	3230      	adds	r2, #48	; 0x30
 8015d2c:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8015d30:	f809 2c01 	strb.w	r2, [r9, #-1]
 8015d34:	b1d3      	cbz	r3, 8015d6c <_svfprintf_r+0xcd4>
 8015d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d38:	9a04      	ldr	r2, [sp, #16]
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d115      	bne.n	8015d6c <_svfprintf_r+0xcd4>
 8015d40:	2aff      	cmp	r2, #255	; 0xff
 8015d42:	d013      	beq.n	8015d6c <_svfprintf_r+0xcd4>
 8015d44:	2f00      	cmp	r7, #0
 8015d46:	bf08      	it	eq
 8015d48:	2e0a      	cmpeq	r6, #10
 8015d4a:	d30f      	bcc.n	8015d6c <_svfprintf_r+0xcd4>
 8015d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d4e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015d50:	ebab 0b03 	sub.w	fp, fp, r3
 8015d54:	461a      	mov	r2, r3
 8015d56:	4658      	mov	r0, fp
 8015d58:	f002 f8c9 	bl	8017eee <strncpy>
 8015d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d5e:	785b      	ldrb	r3, [r3, #1]
 8015d60:	b11b      	cbz	r3, 8015d6a <_svfprintf_r+0xcd2>
 8015d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d64:	3301      	adds	r3, #1
 8015d66:	9309      	str	r3, [sp, #36]	; 0x24
 8015d68:	2300      	movs	r3, #0
 8015d6a:	9304      	str	r3, [sp, #16]
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	4630      	mov	r0, r6
 8015d70:	4639      	mov	r1, r7
 8015d72:	220a      	movs	r2, #10
 8015d74:	f7f1 fcb2 	bl	80076dc <__aeabi_uldivmod>
 8015d78:	4606      	mov	r6, r0
 8015d7a:	460f      	mov	r7, r1
 8015d7c:	ea56 0307 	orrs.w	r3, r6, r7
 8015d80:	d0af      	beq.n	8015ce2 <_svfprintf_r+0xc4a>
 8015d82:	46d9      	mov	r9, fp
 8015d84:	e7c7      	b.n	8015d16 <_svfprintf_r+0xc7e>
 8015d86:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8015d8a:	f006 030f 	and.w	r3, r6, #15
 8015d8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d90:	5cd3      	ldrb	r3, [r2, r3]
 8015d92:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8015d96:	0933      	lsrs	r3, r6, #4
 8015d98:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8015d9c:	093a      	lsrs	r2, r7, #4
 8015d9e:	461e      	mov	r6, r3
 8015da0:	4617      	mov	r7, r2
 8015da2:	ea56 0307 	orrs.w	r3, r6, r7
 8015da6:	d1f0      	bne.n	8015d8a <_svfprintf_r+0xcf2>
 8015da8:	e79b      	b.n	8015ce2 <_svfprintf_r+0xc4a>
 8015daa:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d197      	bne.n	8015ce2 <_svfprintf_r+0xc4a>
 8015db2:	07d2      	lsls	r2, r2, #31
 8015db4:	bf44      	itt	mi
 8015db6:	2330      	movmi	r3, #48	; 0x30
 8015db8:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8015dbc:	e791      	b.n	8015ce2 <_svfprintf_r+0xc4a>
 8015dbe:	9b06      	ldr	r3, [sp, #24]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	f000 8377 	beq.w	80164b4 <_svfprintf_r+0x141c>
 8015dc6:	2000      	movs	r0, #0
 8015dc8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8015dcc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8015dd0:	9608      	str	r6, [sp, #32]
 8015dd2:	f7ff bb49 	b.w	8015468 <_svfprintf_r+0x3d0>
 8015dd6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8015dda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ddc:	e4ec      	b.n	80157b8 <_svfprintf_r+0x720>
 8015dde:	2010      	movs	r0, #16
 8015de0:	4403      	add	r3, r0
 8015de2:	2a07      	cmp	r2, #7
 8015de4:	6060      	str	r0, [r4, #4]
 8015de6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015dea:	dd08      	ble.n	8015dfe <_svfprintf_r+0xd66>
 8015dec:	aa26      	add	r2, sp, #152	; 0x98
 8015dee:	4641      	mov	r1, r8
 8015df0:	9803      	ldr	r0, [sp, #12]
 8015df2:	f002 f891 	bl	8017f18 <__ssprint_r>
 8015df6:	2800      	cmp	r0, #0
 8015df8:	f040 833a 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015dfc:	a929      	add	r1, sp, #164	; 0xa4
 8015dfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e00:	3b10      	subs	r3, #16
 8015e02:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e04:	460c      	mov	r4, r1
 8015e06:	e656      	b.n	8015ab6 <_svfprintf_r+0xa1e>
 8015e08:	460c      	mov	r4, r1
 8015e0a:	e671      	b.n	8015af0 <_svfprintf_r+0xa58>
 8015e0c:	aa26      	add	r2, sp, #152	; 0x98
 8015e0e:	4641      	mov	r1, r8
 8015e10:	9803      	ldr	r0, [sp, #12]
 8015e12:	f002 f881 	bl	8017f18 <__ssprint_r>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	f040 832a 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015e1c:	ac29      	add	r4, sp, #164	; 0xa4
 8015e1e:	e679      	b.n	8015b14 <_svfprintf_r+0xa7c>
 8015e20:	aa26      	add	r2, sp, #152	; 0x98
 8015e22:	4641      	mov	r1, r8
 8015e24:	9803      	ldr	r0, [sp, #12]
 8015e26:	f002 f877 	bl	8017f18 <__ssprint_r>
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	f040 8320 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015e30:	ac29      	add	r4, sp, #164	; 0xa4
 8015e32:	e67f      	b.n	8015b34 <_svfprintf_r+0xa9c>
 8015e34:	2010      	movs	r0, #16
 8015e36:	4403      	add	r3, r0
 8015e38:	2a07      	cmp	r2, #7
 8015e3a:	6060      	str	r0, [r4, #4]
 8015e3c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015e40:	dd08      	ble.n	8015e54 <_svfprintf_r+0xdbc>
 8015e42:	aa26      	add	r2, sp, #152	; 0x98
 8015e44:	4641      	mov	r1, r8
 8015e46:	9803      	ldr	r0, [sp, #12]
 8015e48:	f002 f866 	bl	8017f18 <__ssprint_r>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	f040 830f 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015e52:	a929      	add	r1, sp, #164	; 0xa4
 8015e54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e56:	3b10      	subs	r3, #16
 8015e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e5a:	460c      	mov	r4, r1
 8015e5c:	e673      	b.n	8015b46 <_svfprintf_r+0xaae>
 8015e5e:	460c      	mov	r4, r1
 8015e60:	e68e      	b.n	8015b80 <_svfprintf_r+0xae8>
 8015e62:	2010      	movs	r0, #16
 8015e64:	4403      	add	r3, r0
 8015e66:	2a07      	cmp	r2, #7
 8015e68:	6060      	str	r0, [r4, #4]
 8015e6a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015e6e:	dd08      	ble.n	8015e82 <_svfprintf_r+0xdea>
 8015e70:	aa26      	add	r2, sp, #152	; 0x98
 8015e72:	4641      	mov	r1, r8
 8015e74:	9803      	ldr	r0, [sp, #12]
 8015e76:	f002 f84f 	bl	8017f18 <__ssprint_r>
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	f040 82f8 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015e80:	a929      	add	r1, sp, #164	; 0xa4
 8015e82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e84:	3b10      	subs	r3, #16
 8015e86:	9310      	str	r3, [sp, #64]	; 0x40
 8015e88:	460c      	mov	r4, r1
 8015e8a:	e67e      	b.n	8015b8a <_svfprintf_r+0xaf2>
 8015e8c:	460c      	mov	r4, r1
 8015e8e:	e699      	b.n	8015bc4 <_svfprintf_r+0xb2c>
 8015e90:	9b06      	ldr	r3, [sp, #24]
 8015e92:	2b65      	cmp	r3, #101	; 0x65
 8015e94:	f340 8234 	ble.w	8016300 <_svfprintf_r+0x1268>
 8015e98:	2200      	movs	r2, #0
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015ea0:	f7f1 fbac 	bl	80075fc <__aeabi_dcmpeq>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	d069      	beq.n	8015f7c <_svfprintf_r+0xee4>
 8015ea8:	4b6e      	ldr	r3, [pc, #440]	; (8016064 <_svfprintf_r+0xfcc>)
 8015eaa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	2301      	movs	r3, #1
 8015eb0:	441d      	add	r5, r3
 8015eb2:	6063      	str	r3, [r4, #4]
 8015eb4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015eb6:	9528      	str	r5, [sp, #160]	; 0xa0
 8015eb8:	3301      	adds	r3, #1
 8015eba:	2b07      	cmp	r3, #7
 8015ebc:	9327      	str	r3, [sp, #156]	; 0x9c
 8015ebe:	dc37      	bgt.n	8015f30 <_svfprintf_r+0xe98>
 8015ec0:	3408      	adds	r4, #8
 8015ec2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015ec4:	9a04      	ldr	r2, [sp, #16]
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	db03      	blt.n	8015ed2 <_svfprintf_r+0xe3a>
 8015eca:	f01a 0f01 	tst.w	sl, #1
 8015ece:	f43f ae8a 	beq.w	8015be6 <_svfprintf_r+0xb4e>
 8015ed2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015ed4:	6023      	str	r3, [r4, #0]
 8015ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ed8:	6063      	str	r3, [r4, #4]
 8015eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015edc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015ede:	4413      	add	r3, r2
 8015ee0:	9328      	str	r3, [sp, #160]	; 0xa0
 8015ee2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	2b07      	cmp	r3, #7
 8015ee8:	9327      	str	r3, [sp, #156]	; 0x9c
 8015eea:	dc2b      	bgt.n	8015f44 <_svfprintf_r+0xeac>
 8015eec:	3408      	adds	r4, #8
 8015eee:	9b04      	ldr	r3, [sp, #16]
 8015ef0:	1e5d      	subs	r5, r3, #1
 8015ef2:	2d00      	cmp	r5, #0
 8015ef4:	f77f ae77 	ble.w	8015be6 <_svfprintf_r+0xb4e>
 8015ef8:	4e5b      	ldr	r6, [pc, #364]	; (8016068 <_svfprintf_r+0xfd0>)
 8015efa:	2710      	movs	r7, #16
 8015efc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015f00:	2d10      	cmp	r5, #16
 8015f02:	f103 0301 	add.w	r3, r3, #1
 8015f06:	f104 0108 	add.w	r1, r4, #8
 8015f0a:	6026      	str	r6, [r4, #0]
 8015f0c:	dc24      	bgt.n	8015f58 <_svfprintf_r+0xec0>
 8015f0e:	6065      	str	r5, [r4, #4]
 8015f10:	2b07      	cmp	r3, #7
 8015f12:	4415      	add	r5, r2
 8015f14:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8015f18:	f340 8289 	ble.w	801642e <_svfprintf_r+0x1396>
 8015f1c:	aa26      	add	r2, sp, #152	; 0x98
 8015f1e:	4641      	mov	r1, r8
 8015f20:	9803      	ldr	r0, [sp, #12]
 8015f22:	f001 fff9 	bl	8017f18 <__ssprint_r>
 8015f26:	2800      	cmp	r0, #0
 8015f28:	f040 82a2 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015f2c:	ac29      	add	r4, sp, #164	; 0xa4
 8015f2e:	e65a      	b.n	8015be6 <_svfprintf_r+0xb4e>
 8015f30:	aa26      	add	r2, sp, #152	; 0x98
 8015f32:	4641      	mov	r1, r8
 8015f34:	9803      	ldr	r0, [sp, #12]
 8015f36:	f001 ffef 	bl	8017f18 <__ssprint_r>
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	f040 8298 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015f40:	ac29      	add	r4, sp, #164	; 0xa4
 8015f42:	e7be      	b.n	8015ec2 <_svfprintf_r+0xe2a>
 8015f44:	aa26      	add	r2, sp, #152	; 0x98
 8015f46:	4641      	mov	r1, r8
 8015f48:	9803      	ldr	r0, [sp, #12]
 8015f4a:	f001 ffe5 	bl	8017f18 <__ssprint_r>
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	f040 828e 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015f54:	ac29      	add	r4, sp, #164	; 0xa4
 8015f56:	e7ca      	b.n	8015eee <_svfprintf_r+0xe56>
 8015f58:	3210      	adds	r2, #16
 8015f5a:	2b07      	cmp	r3, #7
 8015f5c:	6067      	str	r7, [r4, #4]
 8015f5e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015f62:	dd08      	ble.n	8015f76 <_svfprintf_r+0xede>
 8015f64:	aa26      	add	r2, sp, #152	; 0x98
 8015f66:	4641      	mov	r1, r8
 8015f68:	9803      	ldr	r0, [sp, #12]
 8015f6a:	f001 ffd5 	bl	8017f18 <__ssprint_r>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	f040 827e 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8015f74:	a929      	add	r1, sp, #164	; 0xa4
 8015f76:	3d10      	subs	r5, #16
 8015f78:	460c      	mov	r4, r1
 8015f7a:	e7bf      	b.n	8015efc <_svfprintf_r+0xe64>
 8015f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	dc74      	bgt.n	801606c <_svfprintf_r+0xfd4>
 8015f82:	4b38      	ldr	r3, [pc, #224]	; (8016064 <_svfprintf_r+0xfcc>)
 8015f84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015f86:	6023      	str	r3, [r4, #0]
 8015f88:	2301      	movs	r3, #1
 8015f8a:	441d      	add	r5, r3
 8015f8c:	6063      	str	r3, [r4, #4]
 8015f8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015f90:	9528      	str	r5, [sp, #160]	; 0xa0
 8015f92:	3301      	adds	r3, #1
 8015f94:	2b07      	cmp	r3, #7
 8015f96:	9327      	str	r3, [sp, #156]	; 0x9c
 8015f98:	dc3e      	bgt.n	8016018 <_svfprintf_r+0xf80>
 8015f9a:	3408      	adds	r4, #8
 8015f9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f9e:	b92b      	cbnz	r3, 8015fac <_svfprintf_r+0xf14>
 8015fa0:	9b04      	ldr	r3, [sp, #16]
 8015fa2:	b91b      	cbnz	r3, 8015fac <_svfprintf_r+0xf14>
 8015fa4:	f01a 0f01 	tst.w	sl, #1
 8015fa8:	f43f ae1d 	beq.w	8015be6 <_svfprintf_r+0xb4e>
 8015fac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fae:	6023      	str	r3, [r4, #0]
 8015fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fb2:	6063      	str	r3, [r4, #4]
 8015fb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015fb8:	4413      	add	r3, r2
 8015fba:	9328      	str	r3, [sp, #160]	; 0xa0
 8015fbc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	2b07      	cmp	r3, #7
 8015fc2:	9327      	str	r3, [sp, #156]	; 0x9c
 8015fc4:	dc32      	bgt.n	801602c <_svfprintf_r+0xf94>
 8015fc6:	3408      	adds	r4, #8
 8015fc8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015fca:	2d00      	cmp	r5, #0
 8015fcc:	da1b      	bge.n	8016006 <_svfprintf_r+0xf6e>
 8015fce:	4e26      	ldr	r6, [pc, #152]	; (8016068 <_svfprintf_r+0xfd0>)
 8015fd0:	426d      	negs	r5, r5
 8015fd2:	4623      	mov	r3, r4
 8015fd4:	2710      	movs	r7, #16
 8015fd6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8015fda:	2d10      	cmp	r5, #16
 8015fdc:	f102 0201 	add.w	r2, r2, #1
 8015fe0:	f104 0408 	add.w	r4, r4, #8
 8015fe4:	601e      	str	r6, [r3, #0]
 8015fe6:	dc2b      	bgt.n	8016040 <_svfprintf_r+0xfa8>
 8015fe8:	605d      	str	r5, [r3, #4]
 8015fea:	2a07      	cmp	r2, #7
 8015fec:	440d      	add	r5, r1
 8015fee:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8015ff2:	dd08      	ble.n	8016006 <_svfprintf_r+0xf6e>
 8015ff4:	aa26      	add	r2, sp, #152	; 0x98
 8015ff6:	4641      	mov	r1, r8
 8015ff8:	9803      	ldr	r0, [sp, #12]
 8015ffa:	f001 ff8d 	bl	8017f18 <__ssprint_r>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f040 8236 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8016004:	ac29      	add	r4, sp, #164	; 0xa4
 8016006:	9b04      	ldr	r3, [sp, #16]
 8016008:	6063      	str	r3, [r4, #4]
 801600a:	9a04      	ldr	r2, [sp, #16]
 801600c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801600e:	f8c4 b000 	str.w	fp, [r4]
 8016012:	4413      	add	r3, r2
 8016014:	9328      	str	r3, [sp, #160]	; 0xa0
 8016016:	e5df      	b.n	8015bd8 <_svfprintf_r+0xb40>
 8016018:	aa26      	add	r2, sp, #152	; 0x98
 801601a:	4641      	mov	r1, r8
 801601c:	9803      	ldr	r0, [sp, #12]
 801601e:	f001 ff7b 	bl	8017f18 <__ssprint_r>
 8016022:	2800      	cmp	r0, #0
 8016024:	f040 8224 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8016028:	ac29      	add	r4, sp, #164	; 0xa4
 801602a:	e7b7      	b.n	8015f9c <_svfprintf_r+0xf04>
 801602c:	aa26      	add	r2, sp, #152	; 0x98
 801602e:	4641      	mov	r1, r8
 8016030:	9803      	ldr	r0, [sp, #12]
 8016032:	f001 ff71 	bl	8017f18 <__ssprint_r>
 8016036:	2800      	cmp	r0, #0
 8016038:	f040 821a 	bne.w	8016470 <_svfprintf_r+0x13d8>
 801603c:	ac29      	add	r4, sp, #164	; 0xa4
 801603e:	e7c3      	b.n	8015fc8 <_svfprintf_r+0xf30>
 8016040:	3110      	adds	r1, #16
 8016042:	2a07      	cmp	r2, #7
 8016044:	605f      	str	r7, [r3, #4]
 8016046:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801604a:	dd08      	ble.n	801605e <_svfprintf_r+0xfc6>
 801604c:	aa26      	add	r2, sp, #152	; 0x98
 801604e:	4641      	mov	r1, r8
 8016050:	9803      	ldr	r0, [sp, #12]
 8016052:	f001 ff61 	bl	8017f18 <__ssprint_r>
 8016056:	2800      	cmp	r0, #0
 8016058:	f040 820a 	bne.w	8016470 <_svfprintf_r+0x13d8>
 801605c:	ac29      	add	r4, sp, #164	; 0xa4
 801605e:	3d10      	subs	r5, #16
 8016060:	4623      	mov	r3, r4
 8016062:	e7b8      	b.n	8015fd6 <_svfprintf_r+0xf3e>
 8016064:	0801b72a 	.word	0x0801b72a
 8016068:	0801b73c 	.word	0x0801b73c
 801606c:	9b04      	ldr	r3, [sp, #16]
 801606e:	42b3      	cmp	r3, r6
 8016070:	bfa8      	it	ge
 8016072:	4633      	movge	r3, r6
 8016074:	2b00      	cmp	r3, #0
 8016076:	461d      	mov	r5, r3
 8016078:	dd0b      	ble.n	8016092 <_svfprintf_r+0xffa>
 801607a:	e9c4 b300 	strd	fp, r3, [r4]
 801607e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016080:	442b      	add	r3, r5
 8016082:	9328      	str	r3, [sp, #160]	; 0xa0
 8016084:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016086:	3301      	adds	r3, #1
 8016088:	2b07      	cmp	r3, #7
 801608a:	9327      	str	r3, [sp, #156]	; 0x9c
 801608c:	f300 8086 	bgt.w	801619c <_svfprintf_r+0x1104>
 8016090:	3408      	adds	r4, #8
 8016092:	2d00      	cmp	r5, #0
 8016094:	bfac      	ite	ge
 8016096:	1b75      	subge	r5, r6, r5
 8016098:	4635      	movlt	r5, r6
 801609a:	2d00      	cmp	r5, #0
 801609c:	dd19      	ble.n	80160d2 <_svfprintf_r+0x103a>
 801609e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80160a2:	4896      	ldr	r0, [pc, #600]	; (80162fc <_svfprintf_r+0x1264>)
 80160a4:	6020      	str	r0, [r4, #0]
 80160a6:	2d10      	cmp	r5, #16
 80160a8:	f103 0301 	add.w	r3, r3, #1
 80160ac:	f104 0108 	add.w	r1, r4, #8
 80160b0:	dc7e      	bgt.n	80161b0 <_svfprintf_r+0x1118>
 80160b2:	6065      	str	r5, [r4, #4]
 80160b4:	2b07      	cmp	r3, #7
 80160b6:	4415      	add	r5, r2
 80160b8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80160bc:	f340 808b 	ble.w	80161d6 <_svfprintf_r+0x113e>
 80160c0:	aa26      	add	r2, sp, #152	; 0x98
 80160c2:	4641      	mov	r1, r8
 80160c4:	9803      	ldr	r0, [sp, #12]
 80160c6:	f001 ff27 	bl	8017f18 <__ssprint_r>
 80160ca:	2800      	cmp	r0, #0
 80160cc:	f040 81d0 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80160d0:	ac29      	add	r4, sp, #164	; 0xa4
 80160d2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80160d6:	445e      	add	r6, fp
 80160d8:	d009      	beq.n	80160ee <_svfprintf_r+0x1056>
 80160da:	9b07      	ldr	r3, [sp, #28]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d17c      	bne.n	80161da <_svfprintf_r+0x1142>
 80160e0:	2f00      	cmp	r7, #0
 80160e2:	d17c      	bne.n	80161de <_svfprintf_r+0x1146>
 80160e4:	9b04      	ldr	r3, [sp, #16]
 80160e6:	445b      	add	r3, fp
 80160e8:	429e      	cmp	r6, r3
 80160ea:	bf28      	it	cs
 80160ec:	461e      	movcs	r6, r3
 80160ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160f0:	9a04      	ldr	r2, [sp, #16]
 80160f2:	4293      	cmp	r3, r2
 80160f4:	db02      	blt.n	80160fc <_svfprintf_r+0x1064>
 80160f6:	f01a 0f01 	tst.w	sl, #1
 80160fa:	d00e      	beq.n	801611a <_svfprintf_r+0x1082>
 80160fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80160fe:	6023      	str	r3, [r4, #0]
 8016100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016102:	6063      	str	r3, [r4, #4]
 8016104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016106:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016108:	4413      	add	r3, r2
 801610a:	9328      	str	r3, [sp, #160]	; 0xa0
 801610c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801610e:	3301      	adds	r3, #1
 8016110:	2b07      	cmp	r3, #7
 8016112:	9327      	str	r3, [sp, #156]	; 0x9c
 8016114:	f300 80dd 	bgt.w	80162d2 <_svfprintf_r+0x123a>
 8016118:	3408      	adds	r4, #8
 801611a:	9b04      	ldr	r3, [sp, #16]
 801611c:	9a04      	ldr	r2, [sp, #16]
 801611e:	eb0b 0503 	add.w	r5, fp, r3
 8016122:	1bab      	subs	r3, r5, r6
 8016124:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016126:	1b55      	subs	r5, r2, r5
 8016128:	429d      	cmp	r5, r3
 801612a:	bfa8      	it	ge
 801612c:	461d      	movge	r5, r3
 801612e:	2d00      	cmp	r5, #0
 8016130:	dd0b      	ble.n	801614a <_svfprintf_r+0x10b2>
 8016132:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016134:	442b      	add	r3, r5
 8016136:	9328      	str	r3, [sp, #160]	; 0xa0
 8016138:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801613a:	3301      	adds	r3, #1
 801613c:	2b07      	cmp	r3, #7
 801613e:	e9c4 6500 	strd	r6, r5, [r4]
 8016142:	9327      	str	r3, [sp, #156]	; 0x9c
 8016144:	f300 80cf 	bgt.w	80162e6 <_svfprintf_r+0x124e>
 8016148:	3408      	adds	r4, #8
 801614a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801614c:	9a04      	ldr	r2, [sp, #16]
 801614e:	2d00      	cmp	r5, #0
 8016150:	eba2 0303 	sub.w	r3, r2, r3
 8016154:	bfac      	ite	ge
 8016156:	1b5d      	subge	r5, r3, r5
 8016158:	461d      	movlt	r5, r3
 801615a:	2d00      	cmp	r5, #0
 801615c:	f77f ad43 	ble.w	8015be6 <_svfprintf_r+0xb4e>
 8016160:	4e66      	ldr	r6, [pc, #408]	; (80162fc <_svfprintf_r+0x1264>)
 8016162:	2710      	movs	r7, #16
 8016164:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016168:	2d10      	cmp	r5, #16
 801616a:	f103 0301 	add.w	r3, r3, #1
 801616e:	f104 0108 	add.w	r1, r4, #8
 8016172:	6026      	str	r6, [r4, #0]
 8016174:	f77f aecb 	ble.w	8015f0e <_svfprintf_r+0xe76>
 8016178:	3210      	adds	r2, #16
 801617a:	2b07      	cmp	r3, #7
 801617c:	6067      	str	r7, [r4, #4]
 801617e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016182:	dd08      	ble.n	8016196 <_svfprintf_r+0x10fe>
 8016184:	aa26      	add	r2, sp, #152	; 0x98
 8016186:	4641      	mov	r1, r8
 8016188:	9803      	ldr	r0, [sp, #12]
 801618a:	f001 fec5 	bl	8017f18 <__ssprint_r>
 801618e:	2800      	cmp	r0, #0
 8016190:	f040 816e 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8016194:	a929      	add	r1, sp, #164	; 0xa4
 8016196:	3d10      	subs	r5, #16
 8016198:	460c      	mov	r4, r1
 801619a:	e7e3      	b.n	8016164 <_svfprintf_r+0x10cc>
 801619c:	aa26      	add	r2, sp, #152	; 0x98
 801619e:	4641      	mov	r1, r8
 80161a0:	9803      	ldr	r0, [sp, #12]
 80161a2:	f001 feb9 	bl	8017f18 <__ssprint_r>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	f040 8162 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80161ac:	ac29      	add	r4, sp, #164	; 0xa4
 80161ae:	e770      	b.n	8016092 <_svfprintf_r+0xffa>
 80161b0:	2010      	movs	r0, #16
 80161b2:	4402      	add	r2, r0
 80161b4:	2b07      	cmp	r3, #7
 80161b6:	6060      	str	r0, [r4, #4]
 80161b8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80161bc:	dd08      	ble.n	80161d0 <_svfprintf_r+0x1138>
 80161be:	aa26      	add	r2, sp, #152	; 0x98
 80161c0:	4641      	mov	r1, r8
 80161c2:	9803      	ldr	r0, [sp, #12]
 80161c4:	f001 fea8 	bl	8017f18 <__ssprint_r>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	f040 8151 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80161ce:	a929      	add	r1, sp, #164	; 0xa4
 80161d0:	3d10      	subs	r5, #16
 80161d2:	460c      	mov	r4, r1
 80161d4:	e763      	b.n	801609e <_svfprintf_r+0x1006>
 80161d6:	460c      	mov	r4, r1
 80161d8:	e77b      	b.n	80160d2 <_svfprintf_r+0x103a>
 80161da:	2f00      	cmp	r7, #0
 80161dc:	d049      	beq.n	8016272 <_svfprintf_r+0x11da>
 80161de:	3f01      	subs	r7, #1
 80161e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80161e2:	6023      	str	r3, [r4, #0]
 80161e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80161e6:	6063      	str	r3, [r4, #4]
 80161e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80161ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80161ec:	4413      	add	r3, r2
 80161ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80161f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80161f2:	3301      	adds	r3, #1
 80161f4:	2b07      	cmp	r3, #7
 80161f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80161f8:	dc42      	bgt.n	8016280 <_svfprintf_r+0x11e8>
 80161fa:	3408      	adds	r4, #8
 80161fc:	9b04      	ldr	r3, [sp, #16]
 80161fe:	445b      	add	r3, fp
 8016200:	1b9a      	subs	r2, r3, r6
 8016202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	4293      	cmp	r3, r2
 8016208:	bfa8      	it	ge
 801620a:	4613      	movge	r3, r2
 801620c:	2b00      	cmp	r3, #0
 801620e:	461d      	mov	r5, r3
 8016210:	dd0a      	ble.n	8016228 <_svfprintf_r+0x1190>
 8016212:	e9c4 6300 	strd	r6, r3, [r4]
 8016216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016218:	442b      	add	r3, r5
 801621a:	9328      	str	r3, [sp, #160]	; 0xa0
 801621c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801621e:	3301      	adds	r3, #1
 8016220:	2b07      	cmp	r3, #7
 8016222:	9327      	str	r3, [sp, #156]	; 0x9c
 8016224:	dc36      	bgt.n	8016294 <_svfprintf_r+0x11fc>
 8016226:	3408      	adds	r4, #8
 8016228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	2d00      	cmp	r5, #0
 801622e:	bfac      	ite	ge
 8016230:	1b5d      	subge	r5, r3, r5
 8016232:	461d      	movlt	r5, r3
 8016234:	2d00      	cmp	r5, #0
 8016236:	dd18      	ble.n	801626a <_svfprintf_r+0x11d2>
 8016238:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801623c:	482f      	ldr	r0, [pc, #188]	; (80162fc <_svfprintf_r+0x1264>)
 801623e:	6020      	str	r0, [r4, #0]
 8016240:	2d10      	cmp	r5, #16
 8016242:	f102 0201 	add.w	r2, r2, #1
 8016246:	f104 0108 	add.w	r1, r4, #8
 801624a:	dc2d      	bgt.n	80162a8 <_svfprintf_r+0x1210>
 801624c:	442b      	add	r3, r5
 801624e:	2a07      	cmp	r2, #7
 8016250:	6065      	str	r5, [r4, #4]
 8016252:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016256:	dd3a      	ble.n	80162ce <_svfprintf_r+0x1236>
 8016258:	aa26      	add	r2, sp, #152	; 0x98
 801625a:	4641      	mov	r1, r8
 801625c:	9803      	ldr	r0, [sp, #12]
 801625e:	f001 fe5b 	bl	8017f18 <__ssprint_r>
 8016262:	2800      	cmp	r0, #0
 8016264:	f040 8104 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8016268:	ac29      	add	r4, sp, #164	; 0xa4
 801626a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	441e      	add	r6, r3
 8016270:	e733      	b.n	80160da <_svfprintf_r+0x1042>
 8016272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016274:	3b01      	subs	r3, #1
 8016276:	9309      	str	r3, [sp, #36]	; 0x24
 8016278:	9b07      	ldr	r3, [sp, #28]
 801627a:	3b01      	subs	r3, #1
 801627c:	9307      	str	r3, [sp, #28]
 801627e:	e7af      	b.n	80161e0 <_svfprintf_r+0x1148>
 8016280:	aa26      	add	r2, sp, #152	; 0x98
 8016282:	4641      	mov	r1, r8
 8016284:	9803      	ldr	r0, [sp, #12]
 8016286:	f001 fe47 	bl	8017f18 <__ssprint_r>
 801628a:	2800      	cmp	r0, #0
 801628c:	f040 80f0 	bne.w	8016470 <_svfprintf_r+0x13d8>
 8016290:	ac29      	add	r4, sp, #164	; 0xa4
 8016292:	e7b3      	b.n	80161fc <_svfprintf_r+0x1164>
 8016294:	aa26      	add	r2, sp, #152	; 0x98
 8016296:	4641      	mov	r1, r8
 8016298:	9803      	ldr	r0, [sp, #12]
 801629a:	f001 fe3d 	bl	8017f18 <__ssprint_r>
 801629e:	2800      	cmp	r0, #0
 80162a0:	f040 80e6 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80162a4:	ac29      	add	r4, sp, #164	; 0xa4
 80162a6:	e7bf      	b.n	8016228 <_svfprintf_r+0x1190>
 80162a8:	2010      	movs	r0, #16
 80162aa:	4403      	add	r3, r0
 80162ac:	2a07      	cmp	r2, #7
 80162ae:	6060      	str	r0, [r4, #4]
 80162b0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80162b4:	dd08      	ble.n	80162c8 <_svfprintf_r+0x1230>
 80162b6:	aa26      	add	r2, sp, #152	; 0x98
 80162b8:	4641      	mov	r1, r8
 80162ba:	9803      	ldr	r0, [sp, #12]
 80162bc:	f001 fe2c 	bl	8017f18 <__ssprint_r>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	f040 80d5 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80162c6:	a929      	add	r1, sp, #164	; 0xa4
 80162c8:	3d10      	subs	r5, #16
 80162ca:	460c      	mov	r4, r1
 80162cc:	e7b4      	b.n	8016238 <_svfprintf_r+0x11a0>
 80162ce:	460c      	mov	r4, r1
 80162d0:	e7cb      	b.n	801626a <_svfprintf_r+0x11d2>
 80162d2:	aa26      	add	r2, sp, #152	; 0x98
 80162d4:	4641      	mov	r1, r8
 80162d6:	9803      	ldr	r0, [sp, #12]
 80162d8:	f001 fe1e 	bl	8017f18 <__ssprint_r>
 80162dc:	2800      	cmp	r0, #0
 80162de:	f040 80c7 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80162e2:	ac29      	add	r4, sp, #164	; 0xa4
 80162e4:	e719      	b.n	801611a <_svfprintf_r+0x1082>
 80162e6:	aa26      	add	r2, sp, #152	; 0x98
 80162e8:	4641      	mov	r1, r8
 80162ea:	9803      	ldr	r0, [sp, #12]
 80162ec:	f001 fe14 	bl	8017f18 <__ssprint_r>
 80162f0:	2800      	cmp	r0, #0
 80162f2:	f040 80bd 	bne.w	8016470 <_svfprintf_r+0x13d8>
 80162f6:	ac29      	add	r4, sp, #164	; 0xa4
 80162f8:	e727      	b.n	801614a <_svfprintf_r+0x10b2>
 80162fa:	bf00      	nop
 80162fc:	0801b73c 	.word	0x0801b73c
 8016300:	9a04      	ldr	r2, [sp, #16]
 8016302:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016304:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016306:	2a01      	cmp	r2, #1
 8016308:	f105 0501 	add.w	r5, r5, #1
 801630c:	f103 0301 	add.w	r3, r3, #1
 8016310:	f104 0608 	add.w	r6, r4, #8
 8016314:	dc02      	bgt.n	801631c <_svfprintf_r+0x1284>
 8016316:	f01a 0f01 	tst.w	sl, #1
 801631a:	d07d      	beq.n	8016418 <_svfprintf_r+0x1380>
 801631c:	2201      	movs	r2, #1
 801631e:	2b07      	cmp	r3, #7
 8016320:	f8c4 b000 	str.w	fp, [r4]
 8016324:	6062      	str	r2, [r4, #4]
 8016326:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801632a:	dd08      	ble.n	801633e <_svfprintf_r+0x12a6>
 801632c:	aa26      	add	r2, sp, #152	; 0x98
 801632e:	4641      	mov	r1, r8
 8016330:	9803      	ldr	r0, [sp, #12]
 8016332:	f001 fdf1 	bl	8017f18 <__ssprint_r>
 8016336:	2800      	cmp	r0, #0
 8016338:	f040 809a 	bne.w	8016470 <_svfprintf_r+0x13d8>
 801633c:	ae29      	add	r6, sp, #164	; 0xa4
 801633e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016340:	6033      	str	r3, [r6, #0]
 8016342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016344:	6073      	str	r3, [r6, #4]
 8016346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016348:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801634a:	4413      	add	r3, r2
 801634c:	9328      	str	r3, [sp, #160]	; 0xa0
 801634e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016350:	3301      	adds	r3, #1
 8016352:	2b07      	cmp	r3, #7
 8016354:	9327      	str	r3, [sp, #156]	; 0x9c
 8016356:	dc31      	bgt.n	80163bc <_svfprintf_r+0x1324>
 8016358:	3608      	adds	r6, #8
 801635a:	9b04      	ldr	r3, [sp, #16]
 801635c:	2200      	movs	r2, #0
 801635e:	1e5c      	subs	r4, r3, #1
 8016360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016364:	2300      	movs	r3, #0
 8016366:	f7f1 f949 	bl	80075fc <__aeabi_dcmpeq>
 801636a:	2800      	cmp	r0, #0
 801636c:	d12f      	bne.n	80163ce <_svfprintf_r+0x1336>
 801636e:	f10b 0301 	add.w	r3, fp, #1
 8016372:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016374:	9904      	ldr	r1, [sp, #16]
 8016376:	e9c6 3400 	strd	r3, r4, [r6]
 801637a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801637c:	3201      	adds	r2, #1
 801637e:	3b01      	subs	r3, #1
 8016380:	440b      	add	r3, r1
 8016382:	2a07      	cmp	r2, #7
 8016384:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016388:	dd4f      	ble.n	801642a <_svfprintf_r+0x1392>
 801638a:	aa26      	add	r2, sp, #152	; 0x98
 801638c:	4641      	mov	r1, r8
 801638e:	9803      	ldr	r0, [sp, #12]
 8016390:	f001 fdc2 	bl	8017f18 <__ssprint_r>
 8016394:	2800      	cmp	r0, #0
 8016396:	d16b      	bne.n	8016470 <_svfprintf_r+0x13d8>
 8016398:	ae29      	add	r6, sp, #164	; 0xa4
 801639a:	ab22      	add	r3, sp, #136	; 0x88
 801639c:	6033      	str	r3, [r6, #0]
 801639e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80163a0:	6073      	str	r3, [r6, #4]
 80163a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80163a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80163a6:	4413      	add	r3, r2
 80163a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80163aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80163ac:	3301      	adds	r3, #1
 80163ae:	2b07      	cmp	r3, #7
 80163b0:	9327      	str	r3, [sp, #156]	; 0x9c
 80163b2:	f73f adb3 	bgt.w	8015f1c <_svfprintf_r+0xe84>
 80163b6:	f106 0408 	add.w	r4, r6, #8
 80163ba:	e414      	b.n	8015be6 <_svfprintf_r+0xb4e>
 80163bc:	aa26      	add	r2, sp, #152	; 0x98
 80163be:	4641      	mov	r1, r8
 80163c0:	9803      	ldr	r0, [sp, #12]
 80163c2:	f001 fda9 	bl	8017f18 <__ssprint_r>
 80163c6:	2800      	cmp	r0, #0
 80163c8:	d152      	bne.n	8016470 <_svfprintf_r+0x13d8>
 80163ca:	ae29      	add	r6, sp, #164	; 0xa4
 80163cc:	e7c5      	b.n	801635a <_svfprintf_r+0x12c2>
 80163ce:	2c00      	cmp	r4, #0
 80163d0:	dde3      	ble.n	801639a <_svfprintf_r+0x1302>
 80163d2:	4d3e      	ldr	r5, [pc, #248]	; (80164cc <_svfprintf_r+0x1434>)
 80163d4:	2710      	movs	r7, #16
 80163d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80163da:	2c10      	cmp	r4, #16
 80163dc:	f103 0301 	add.w	r3, r3, #1
 80163e0:	f106 0108 	add.w	r1, r6, #8
 80163e4:	6035      	str	r5, [r6, #0]
 80163e6:	dc07      	bgt.n	80163f8 <_svfprintf_r+0x1360>
 80163e8:	6074      	str	r4, [r6, #4]
 80163ea:	2b07      	cmp	r3, #7
 80163ec:	4414      	add	r4, r2
 80163ee:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80163f2:	dcca      	bgt.n	801638a <_svfprintf_r+0x12f2>
 80163f4:	460e      	mov	r6, r1
 80163f6:	e7d0      	b.n	801639a <_svfprintf_r+0x1302>
 80163f8:	3210      	adds	r2, #16
 80163fa:	2b07      	cmp	r3, #7
 80163fc:	6077      	str	r7, [r6, #4]
 80163fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016402:	dd06      	ble.n	8016412 <_svfprintf_r+0x137a>
 8016404:	aa26      	add	r2, sp, #152	; 0x98
 8016406:	4641      	mov	r1, r8
 8016408:	9803      	ldr	r0, [sp, #12]
 801640a:	f001 fd85 	bl	8017f18 <__ssprint_r>
 801640e:	bb78      	cbnz	r0, 8016470 <_svfprintf_r+0x13d8>
 8016410:	a929      	add	r1, sp, #164	; 0xa4
 8016412:	3c10      	subs	r4, #16
 8016414:	460e      	mov	r6, r1
 8016416:	e7de      	b.n	80163d6 <_svfprintf_r+0x133e>
 8016418:	2201      	movs	r2, #1
 801641a:	2b07      	cmp	r3, #7
 801641c:	f8c4 b000 	str.w	fp, [r4]
 8016420:	6062      	str	r2, [r4, #4]
 8016422:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8016426:	ddb8      	ble.n	801639a <_svfprintf_r+0x1302>
 8016428:	e7af      	b.n	801638a <_svfprintf_r+0x12f2>
 801642a:	3608      	adds	r6, #8
 801642c:	e7b5      	b.n	801639a <_svfprintf_r+0x1302>
 801642e:	460c      	mov	r4, r1
 8016430:	f7ff bbd9 	b.w	8015be6 <_svfprintf_r+0xb4e>
 8016434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016436:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016438:	1a9d      	subs	r5, r3, r2
 801643a:	2d00      	cmp	r5, #0
 801643c:	f77f abd7 	ble.w	8015bee <_svfprintf_r+0xb56>
 8016440:	4e23      	ldr	r6, [pc, #140]	; (80164d0 <_svfprintf_r+0x1438>)
 8016442:	2710      	movs	r7, #16
 8016444:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016448:	2d10      	cmp	r5, #16
 801644a:	f103 0301 	add.w	r3, r3, #1
 801644e:	6026      	str	r6, [r4, #0]
 8016450:	dc18      	bgt.n	8016484 <_svfprintf_r+0x13ec>
 8016452:	6065      	str	r5, [r4, #4]
 8016454:	2b07      	cmp	r3, #7
 8016456:	4415      	add	r5, r2
 8016458:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801645c:	f77f abc7 	ble.w	8015bee <_svfprintf_r+0xb56>
 8016460:	aa26      	add	r2, sp, #152	; 0x98
 8016462:	4641      	mov	r1, r8
 8016464:	9803      	ldr	r0, [sp, #12]
 8016466:	f001 fd57 	bl	8017f18 <__ssprint_r>
 801646a:	2800      	cmp	r0, #0
 801646c:	f43f abbf 	beq.w	8015bee <_svfprintf_r+0xb56>
 8016470:	f1b9 0f00 	cmp.w	r9, #0
 8016474:	f43f a8a8 	beq.w	80155c8 <_svfprintf_r+0x530>
 8016478:	4649      	mov	r1, r9
 801647a:	9803      	ldr	r0, [sp, #12]
 801647c:	f001 f8ba 	bl	80175f4 <_free_r>
 8016480:	f7ff b8a2 	b.w	80155c8 <_svfprintf_r+0x530>
 8016484:	3210      	adds	r2, #16
 8016486:	2b07      	cmp	r3, #7
 8016488:	6067      	str	r7, [r4, #4]
 801648a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801648e:	dc02      	bgt.n	8016496 <_svfprintf_r+0x13fe>
 8016490:	3408      	adds	r4, #8
 8016492:	3d10      	subs	r5, #16
 8016494:	e7d6      	b.n	8016444 <_svfprintf_r+0x13ac>
 8016496:	aa26      	add	r2, sp, #152	; 0x98
 8016498:	4641      	mov	r1, r8
 801649a:	9803      	ldr	r0, [sp, #12]
 801649c:	f001 fd3c 	bl	8017f18 <__ssprint_r>
 80164a0:	2800      	cmp	r0, #0
 80164a2:	d1e5      	bne.n	8016470 <_svfprintf_r+0x13d8>
 80164a4:	ac29      	add	r4, sp, #164	; 0xa4
 80164a6:	e7f4      	b.n	8016492 <_svfprintf_r+0x13fa>
 80164a8:	4649      	mov	r1, r9
 80164aa:	9803      	ldr	r0, [sp, #12]
 80164ac:	f001 f8a2 	bl	80175f4 <_free_r>
 80164b0:	f7ff bbb5 	b.w	8015c1e <_svfprintf_r+0xb86>
 80164b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	f43f a886 	beq.w	80155c8 <_svfprintf_r+0x530>
 80164bc:	aa26      	add	r2, sp, #152	; 0x98
 80164be:	4641      	mov	r1, r8
 80164c0:	9803      	ldr	r0, [sp, #12]
 80164c2:	f001 fd29 	bl	8017f18 <__ssprint_r>
 80164c6:	f7ff b87f 	b.w	80155c8 <_svfprintf_r+0x530>
 80164ca:	bf00      	nop
 80164cc:	0801b73c 	.word	0x0801b73c
 80164d0:	0801b72c 	.word	0x0801b72c

080164d4 <sysconf>:
 80164d4:	2808      	cmp	r0, #8
 80164d6:	b508      	push	{r3, lr}
 80164d8:	d006      	beq.n	80164e8 <sysconf+0x14>
 80164da:	f7fd fea1 	bl	8014220 <__errno>
 80164de:	2316      	movs	r3, #22
 80164e0:	6003      	str	r3, [r0, #0]
 80164e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80164e6:	bd08      	pop	{r3, pc}
 80164e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80164ec:	e7fb      	b.n	80164e6 <sysconf+0x12>

080164ee <__swbuf_r>:
 80164ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f0:	460d      	mov	r5, r1
 80164f2:	4614      	mov	r4, r2
 80164f4:	4606      	mov	r6, r0
 80164f6:	b118      	cbz	r0, 8016500 <__swbuf_r+0x12>
 80164f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80164fa:	b90b      	cbnz	r3, 8016500 <__swbuf_r+0x12>
 80164fc:	f000 ffea 	bl	80174d4 <__sinit>
 8016500:	69a3      	ldr	r3, [r4, #24]
 8016502:	60a3      	str	r3, [r4, #8]
 8016504:	89a3      	ldrh	r3, [r4, #12]
 8016506:	0719      	lsls	r1, r3, #28
 8016508:	d528      	bpl.n	801655c <__swbuf_r+0x6e>
 801650a:	6923      	ldr	r3, [r4, #16]
 801650c:	b333      	cbz	r3, 801655c <__swbuf_r+0x6e>
 801650e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016512:	b2ed      	uxtb	r5, r5
 8016514:	049a      	lsls	r2, r3, #18
 8016516:	462f      	mov	r7, r5
 8016518:	d52a      	bpl.n	8016570 <__swbuf_r+0x82>
 801651a:	6923      	ldr	r3, [r4, #16]
 801651c:	6820      	ldr	r0, [r4, #0]
 801651e:	1ac0      	subs	r0, r0, r3
 8016520:	6963      	ldr	r3, [r4, #20]
 8016522:	4283      	cmp	r3, r0
 8016524:	dc04      	bgt.n	8016530 <__swbuf_r+0x42>
 8016526:	4621      	mov	r1, r4
 8016528:	4630      	mov	r0, r6
 801652a:	f000 ff67 	bl	80173fc <_fflush_r>
 801652e:	b9d8      	cbnz	r0, 8016568 <__swbuf_r+0x7a>
 8016530:	68a3      	ldr	r3, [r4, #8]
 8016532:	3b01      	subs	r3, #1
 8016534:	60a3      	str	r3, [r4, #8]
 8016536:	6823      	ldr	r3, [r4, #0]
 8016538:	1c5a      	adds	r2, r3, #1
 801653a:	6022      	str	r2, [r4, #0]
 801653c:	701d      	strb	r5, [r3, #0]
 801653e:	6963      	ldr	r3, [r4, #20]
 8016540:	3001      	adds	r0, #1
 8016542:	4283      	cmp	r3, r0
 8016544:	d004      	beq.n	8016550 <__swbuf_r+0x62>
 8016546:	89a3      	ldrh	r3, [r4, #12]
 8016548:	07db      	lsls	r3, r3, #31
 801654a:	d50f      	bpl.n	801656c <__swbuf_r+0x7e>
 801654c:	2d0a      	cmp	r5, #10
 801654e:	d10d      	bne.n	801656c <__swbuf_r+0x7e>
 8016550:	4621      	mov	r1, r4
 8016552:	4630      	mov	r0, r6
 8016554:	f000 ff52 	bl	80173fc <_fflush_r>
 8016558:	b140      	cbz	r0, 801656c <__swbuf_r+0x7e>
 801655a:	e005      	b.n	8016568 <__swbuf_r+0x7a>
 801655c:	4621      	mov	r1, r4
 801655e:	4630      	mov	r0, r6
 8016560:	f000 f820 	bl	80165a4 <__swsetup_r>
 8016564:	2800      	cmp	r0, #0
 8016566:	d0d2      	beq.n	801650e <__swbuf_r+0x20>
 8016568:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801656c:	4638      	mov	r0, r7
 801656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016574:	81a3      	strh	r3, [r4, #12]
 8016576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801657c:	6663      	str	r3, [r4, #100]	; 0x64
 801657e:	e7cc      	b.n	801651a <__swbuf_r+0x2c>

08016580 <_write_r>:
 8016580:	b538      	push	{r3, r4, r5, lr}
 8016582:	4c07      	ldr	r4, [pc, #28]	; (80165a0 <_write_r+0x20>)
 8016584:	4605      	mov	r5, r0
 8016586:	4608      	mov	r0, r1
 8016588:	4611      	mov	r1, r2
 801658a:	2200      	movs	r2, #0
 801658c:	6022      	str	r2, [r4, #0]
 801658e:	461a      	mov	r2, r3
 8016590:	f7fc fcf8 	bl	8012f84 <_write>
 8016594:	1c43      	adds	r3, r0, #1
 8016596:	d102      	bne.n	801659e <_write_r+0x1e>
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	b103      	cbz	r3, 801659e <_write_r+0x1e>
 801659c:	602b      	str	r3, [r5, #0]
 801659e:	bd38      	pop	{r3, r4, r5, pc}
 80165a0:	20033064 	.word	0x20033064

080165a4 <__swsetup_r>:
 80165a4:	b538      	push	{r3, r4, r5, lr}
 80165a6:	4b2a      	ldr	r3, [pc, #168]	; (8016650 <__swsetup_r+0xac>)
 80165a8:	4605      	mov	r5, r0
 80165aa:	6818      	ldr	r0, [r3, #0]
 80165ac:	460c      	mov	r4, r1
 80165ae:	b118      	cbz	r0, 80165b8 <__swsetup_r+0x14>
 80165b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80165b2:	b90b      	cbnz	r3, 80165b8 <__swsetup_r+0x14>
 80165b4:	f000 ff8e 	bl	80174d4 <__sinit>
 80165b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165bc:	b29a      	uxth	r2, r3
 80165be:	0711      	lsls	r1, r2, #28
 80165c0:	d422      	bmi.n	8016608 <__swsetup_r+0x64>
 80165c2:	06d0      	lsls	r0, r2, #27
 80165c4:	d407      	bmi.n	80165d6 <__swsetup_r+0x32>
 80165c6:	2209      	movs	r2, #9
 80165c8:	602a      	str	r2, [r5, #0]
 80165ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165ce:	81a3      	strh	r3, [r4, #12]
 80165d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165d4:	e034      	b.n	8016640 <__swsetup_r+0x9c>
 80165d6:	0751      	lsls	r1, r2, #29
 80165d8:	d512      	bpl.n	8016600 <__swsetup_r+0x5c>
 80165da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80165dc:	b141      	cbz	r1, 80165f0 <__swsetup_r+0x4c>
 80165de:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80165e2:	4299      	cmp	r1, r3
 80165e4:	d002      	beq.n	80165ec <__swsetup_r+0x48>
 80165e6:	4628      	mov	r0, r5
 80165e8:	f001 f804 	bl	80175f4 <_free_r>
 80165ec:	2300      	movs	r3, #0
 80165ee:	6323      	str	r3, [r4, #48]	; 0x30
 80165f0:	89a3      	ldrh	r3, [r4, #12]
 80165f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80165f6:	81a3      	strh	r3, [r4, #12]
 80165f8:	2300      	movs	r3, #0
 80165fa:	6063      	str	r3, [r4, #4]
 80165fc:	6923      	ldr	r3, [r4, #16]
 80165fe:	6023      	str	r3, [r4, #0]
 8016600:	89a3      	ldrh	r3, [r4, #12]
 8016602:	f043 0308 	orr.w	r3, r3, #8
 8016606:	81a3      	strh	r3, [r4, #12]
 8016608:	6923      	ldr	r3, [r4, #16]
 801660a:	b94b      	cbnz	r3, 8016620 <__swsetup_r+0x7c>
 801660c:	89a3      	ldrh	r3, [r4, #12]
 801660e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016616:	d003      	beq.n	8016620 <__swsetup_r+0x7c>
 8016618:	4621      	mov	r1, r4
 801661a:	4628      	mov	r0, r5
 801661c:	f001 f8fe 	bl	801781c <__smakebuf_r>
 8016620:	89a2      	ldrh	r2, [r4, #12]
 8016622:	f012 0301 	ands.w	r3, r2, #1
 8016626:	d00c      	beq.n	8016642 <__swsetup_r+0x9e>
 8016628:	2300      	movs	r3, #0
 801662a:	60a3      	str	r3, [r4, #8]
 801662c:	6963      	ldr	r3, [r4, #20]
 801662e:	425b      	negs	r3, r3
 8016630:	61a3      	str	r3, [r4, #24]
 8016632:	6923      	ldr	r3, [r4, #16]
 8016634:	b953      	cbnz	r3, 801664c <__swsetup_r+0xa8>
 8016636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801663a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801663e:	d1c4      	bne.n	80165ca <__swsetup_r+0x26>
 8016640:	bd38      	pop	{r3, r4, r5, pc}
 8016642:	0792      	lsls	r2, r2, #30
 8016644:	bf58      	it	pl
 8016646:	6963      	ldrpl	r3, [r4, #20]
 8016648:	60a3      	str	r3, [r4, #8]
 801664a:	e7f2      	b.n	8016632 <__swsetup_r+0x8e>
 801664c:	2000      	movs	r0, #0
 801664e:	e7f7      	b.n	8016640 <__swsetup_r+0x9c>
 8016650:	20000030 	.word	0x20000030

08016654 <register_fini>:
 8016654:	4b02      	ldr	r3, [pc, #8]	; (8016660 <register_fini+0xc>)
 8016656:	b113      	cbz	r3, 801665e <register_fini+0xa>
 8016658:	4802      	ldr	r0, [pc, #8]	; (8016664 <register_fini+0x10>)
 801665a:	f000 b805 	b.w	8016668 <atexit>
 801665e:	4770      	bx	lr
 8016660:	00000000 	.word	0x00000000
 8016664:	08017525 	.word	0x08017525

08016668 <atexit>:
 8016668:	2300      	movs	r3, #0
 801666a:	4601      	mov	r1, r0
 801666c:	461a      	mov	r2, r3
 801666e:	4618      	mov	r0, r3
 8016670:	f001 bcca 	b.w	8018008 <__register_exitproc>

08016674 <quorem>:
 8016674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016678:	6903      	ldr	r3, [r0, #16]
 801667a:	690c      	ldr	r4, [r1, #16]
 801667c:	42a3      	cmp	r3, r4
 801667e:	4680      	mov	r8, r0
 8016680:	f2c0 8082 	blt.w	8016788 <quorem+0x114>
 8016684:	3c01      	subs	r4, #1
 8016686:	f101 0714 	add.w	r7, r1, #20
 801668a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801668e:	f100 0614 	add.w	r6, r0, #20
 8016692:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016696:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801669a:	eb06 030c 	add.w	r3, r6, ip
 801669e:	3501      	adds	r5, #1
 80166a0:	eb07 090c 	add.w	r9, r7, ip
 80166a4:	9301      	str	r3, [sp, #4]
 80166a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80166aa:	b395      	cbz	r5, 8016712 <quorem+0x9e>
 80166ac:	f04f 0a00 	mov.w	sl, #0
 80166b0:	4638      	mov	r0, r7
 80166b2:	46b6      	mov	lr, r6
 80166b4:	46d3      	mov	fp, sl
 80166b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80166ba:	b293      	uxth	r3, r2
 80166bc:	fb05 a303 	mla	r3, r5, r3, sl
 80166c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	ebab 0303 	sub.w	r3, fp, r3
 80166ca:	0c12      	lsrs	r2, r2, #16
 80166cc:	f8de b000 	ldr.w	fp, [lr]
 80166d0:	fb05 a202 	mla	r2, r5, r2, sl
 80166d4:	fa13 f38b 	uxtah	r3, r3, fp
 80166d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80166dc:	fa1f fb82 	uxth.w	fp, r2
 80166e0:	f8de 2000 	ldr.w	r2, [lr]
 80166e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80166e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80166f2:	4581      	cmp	r9, r0
 80166f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80166f8:	f84e 3b04 	str.w	r3, [lr], #4
 80166fc:	d2db      	bcs.n	80166b6 <quorem+0x42>
 80166fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8016702:	b933      	cbnz	r3, 8016712 <quorem+0x9e>
 8016704:	9b01      	ldr	r3, [sp, #4]
 8016706:	3b04      	subs	r3, #4
 8016708:	429e      	cmp	r6, r3
 801670a:	461a      	mov	r2, r3
 801670c:	d330      	bcc.n	8016770 <quorem+0xfc>
 801670e:	f8c8 4010 	str.w	r4, [r8, #16]
 8016712:	4640      	mov	r0, r8
 8016714:	f001 faac 	bl	8017c70 <__mcmp>
 8016718:	2800      	cmp	r0, #0
 801671a:	db25      	blt.n	8016768 <quorem+0xf4>
 801671c:	3501      	adds	r5, #1
 801671e:	4630      	mov	r0, r6
 8016720:	f04f 0c00 	mov.w	ip, #0
 8016724:	f857 2b04 	ldr.w	r2, [r7], #4
 8016728:	f8d0 e000 	ldr.w	lr, [r0]
 801672c:	b293      	uxth	r3, r2
 801672e:	ebac 0303 	sub.w	r3, ip, r3
 8016732:	0c12      	lsrs	r2, r2, #16
 8016734:	fa13 f38e 	uxtah	r3, r3, lr
 8016738:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801673c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016740:	b29b      	uxth	r3, r3
 8016742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016746:	45b9      	cmp	r9, r7
 8016748:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801674c:	f840 3b04 	str.w	r3, [r0], #4
 8016750:	d2e8      	bcs.n	8016724 <quorem+0xb0>
 8016752:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016756:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801675a:	b92a      	cbnz	r2, 8016768 <quorem+0xf4>
 801675c:	3b04      	subs	r3, #4
 801675e:	429e      	cmp	r6, r3
 8016760:	461a      	mov	r2, r3
 8016762:	d30b      	bcc.n	801677c <quorem+0x108>
 8016764:	f8c8 4010 	str.w	r4, [r8, #16]
 8016768:	4628      	mov	r0, r5
 801676a:	b003      	add	sp, #12
 801676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016770:	6812      	ldr	r2, [r2, #0]
 8016772:	3b04      	subs	r3, #4
 8016774:	2a00      	cmp	r2, #0
 8016776:	d1ca      	bne.n	801670e <quorem+0x9a>
 8016778:	3c01      	subs	r4, #1
 801677a:	e7c5      	b.n	8016708 <quorem+0x94>
 801677c:	6812      	ldr	r2, [r2, #0]
 801677e:	3b04      	subs	r3, #4
 8016780:	2a00      	cmp	r2, #0
 8016782:	d1ef      	bne.n	8016764 <quorem+0xf0>
 8016784:	3c01      	subs	r4, #1
 8016786:	e7ea      	b.n	801675e <quorem+0xea>
 8016788:	2000      	movs	r0, #0
 801678a:	e7ee      	b.n	801676a <quorem+0xf6>
 801678c:	0000      	movs	r0, r0
	...

08016790 <_dtoa_r>:
 8016790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016794:	b097      	sub	sp, #92	; 0x5c
 8016796:	ec57 6b10 	vmov	r6, r7, d0
 801679a:	9106      	str	r1, [sp, #24]
 801679c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801679e:	920b      	str	r2, [sp, #44]	; 0x2c
 80167a0:	4604      	mov	r4, r0
 80167a2:	9312      	str	r3, [sp, #72]	; 0x48
 80167a4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80167a6:	e9cd 6700 	strd	r6, r7, [sp]
 80167aa:	b141      	cbz	r1, 80167be <_dtoa_r+0x2e>
 80167ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80167ae:	604a      	str	r2, [r1, #4]
 80167b0:	2301      	movs	r3, #1
 80167b2:	4093      	lsls	r3, r2
 80167b4:	608b      	str	r3, [r1, #8]
 80167b6:	f001 f896 	bl	80178e6 <_Bfree>
 80167ba:	2300      	movs	r3, #0
 80167bc:	6423      	str	r3, [r4, #64]	; 0x40
 80167be:	1e3b      	subs	r3, r7, #0
 80167c0:	bfb9      	ittee	lt
 80167c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80167c6:	9301      	strlt	r3, [sp, #4]
 80167c8:	2300      	movge	r3, #0
 80167ca:	602b      	strge	r3, [r5, #0]
 80167cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80167d0:	4baf      	ldr	r3, [pc, #700]	; (8016a90 <_dtoa_r+0x300>)
 80167d2:	bfbc      	itt	lt
 80167d4:	2201      	movlt	r2, #1
 80167d6:	602a      	strlt	r2, [r5, #0]
 80167d8:	ea33 0308 	bics.w	r3, r3, r8
 80167dc:	d116      	bne.n	801680c <_dtoa_r+0x7c>
 80167de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80167e4:	6013      	str	r3, [r2, #0]
 80167e6:	9b00      	ldr	r3, [sp, #0]
 80167e8:	b923      	cbnz	r3, 80167f4 <_dtoa_r+0x64>
 80167ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80167ee:	2800      	cmp	r0, #0
 80167f0:	f000 8543 	beq.w	801727a <_dtoa_r+0xaea>
 80167f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80167f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016aa4 <_dtoa_r+0x314>
 80167fa:	b11b      	cbz	r3, 8016804 <_dtoa_r+0x74>
 80167fc:	f10b 0303 	add.w	r3, fp, #3
 8016800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016802:	6013      	str	r3, [r2, #0]
 8016804:	4658      	mov	r0, fp
 8016806:	b017      	add	sp, #92	; 0x5c
 8016808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016810:	2200      	movs	r2, #0
 8016812:	2300      	movs	r3, #0
 8016814:	4630      	mov	r0, r6
 8016816:	4639      	mov	r1, r7
 8016818:	f7f0 fef0 	bl	80075fc <__aeabi_dcmpeq>
 801681c:	4681      	mov	r9, r0
 801681e:	b160      	cbz	r0, 801683a <_dtoa_r+0xaa>
 8016820:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016822:	2301      	movs	r3, #1
 8016824:	6013      	str	r3, [r2, #0]
 8016826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016828:	2b00      	cmp	r3, #0
 801682a:	f000 8522 	beq.w	8017272 <_dtoa_r+0xae2>
 801682e:	4b99      	ldr	r3, [pc, #612]	; (8016a94 <_dtoa_r+0x304>)
 8016830:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016832:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8016836:	6013      	str	r3, [r2, #0]
 8016838:	e7e4      	b.n	8016804 <_dtoa_r+0x74>
 801683a:	aa14      	add	r2, sp, #80	; 0x50
 801683c:	a915      	add	r1, sp, #84	; 0x54
 801683e:	ec47 6b10 	vmov	d0, r6, r7
 8016842:	4620      	mov	r0, r4
 8016844:	f001 fa8b 	bl	8017d5e <__d2b>
 8016848:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801684c:	9004      	str	r0, [sp, #16]
 801684e:	2d00      	cmp	r5, #0
 8016850:	d07c      	beq.n	801694c <_dtoa_r+0x1bc>
 8016852:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016856:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801685a:	46b2      	mov	sl, r6
 801685c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016860:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016864:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016868:	2200      	movs	r2, #0
 801686a:	4b8b      	ldr	r3, [pc, #556]	; (8016a98 <_dtoa_r+0x308>)
 801686c:	4650      	mov	r0, sl
 801686e:	4659      	mov	r1, fp
 8016870:	f7f0 faa4 	bl	8006dbc <__aeabi_dsub>
 8016874:	a380      	add	r3, pc, #512	; (adr r3, 8016a78 <_dtoa_r+0x2e8>)
 8016876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687a:	f7f0 fc57 	bl	800712c <__aeabi_dmul>
 801687e:	a380      	add	r3, pc, #512	; (adr r3, 8016a80 <_dtoa_r+0x2f0>)
 8016880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016884:	f7f0 fa9c 	bl	8006dc0 <__adddf3>
 8016888:	4606      	mov	r6, r0
 801688a:	4628      	mov	r0, r5
 801688c:	460f      	mov	r7, r1
 801688e:	f7f0 fbe3 	bl	8007058 <__aeabi_i2d>
 8016892:	a37d      	add	r3, pc, #500	; (adr r3, 8016a88 <_dtoa_r+0x2f8>)
 8016894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016898:	f7f0 fc48 	bl	800712c <__aeabi_dmul>
 801689c:	4602      	mov	r2, r0
 801689e:	460b      	mov	r3, r1
 80168a0:	4630      	mov	r0, r6
 80168a2:	4639      	mov	r1, r7
 80168a4:	f7f0 fa8c 	bl	8006dc0 <__adddf3>
 80168a8:	4606      	mov	r6, r0
 80168aa:	460f      	mov	r7, r1
 80168ac:	f7f0 feee 	bl	800768c <__aeabi_d2iz>
 80168b0:	2200      	movs	r2, #0
 80168b2:	4682      	mov	sl, r0
 80168b4:	2300      	movs	r3, #0
 80168b6:	4630      	mov	r0, r6
 80168b8:	4639      	mov	r1, r7
 80168ba:	f7f0 fea9 	bl	8007610 <__aeabi_dcmplt>
 80168be:	b148      	cbz	r0, 80168d4 <_dtoa_r+0x144>
 80168c0:	4650      	mov	r0, sl
 80168c2:	f7f0 fbc9 	bl	8007058 <__aeabi_i2d>
 80168c6:	4632      	mov	r2, r6
 80168c8:	463b      	mov	r3, r7
 80168ca:	f7f0 fe97 	bl	80075fc <__aeabi_dcmpeq>
 80168ce:	b908      	cbnz	r0, 80168d4 <_dtoa_r+0x144>
 80168d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80168d4:	f1ba 0f16 	cmp.w	sl, #22
 80168d8:	d859      	bhi.n	801698e <_dtoa_r+0x1fe>
 80168da:	4970      	ldr	r1, [pc, #448]	; (8016a9c <_dtoa_r+0x30c>)
 80168dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80168e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168e8:	f7f0 feb0 	bl	800764c <__aeabi_dcmpgt>
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d050      	beq.n	8016992 <_dtoa_r+0x202>
 80168f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80168f4:	2300      	movs	r3, #0
 80168f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80168f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80168fa:	1b5d      	subs	r5, r3, r5
 80168fc:	f1b5 0801 	subs.w	r8, r5, #1
 8016900:	bf49      	itett	mi
 8016902:	f1c5 0301 	rsbmi	r3, r5, #1
 8016906:	2300      	movpl	r3, #0
 8016908:	9305      	strmi	r3, [sp, #20]
 801690a:	f04f 0800 	movmi.w	r8, #0
 801690e:	bf58      	it	pl
 8016910:	9305      	strpl	r3, [sp, #20]
 8016912:	f1ba 0f00 	cmp.w	sl, #0
 8016916:	db3e      	blt.n	8016996 <_dtoa_r+0x206>
 8016918:	2300      	movs	r3, #0
 801691a:	44d0      	add	r8, sl
 801691c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016920:	9307      	str	r3, [sp, #28]
 8016922:	9b06      	ldr	r3, [sp, #24]
 8016924:	2b09      	cmp	r3, #9
 8016926:	f200 808d 	bhi.w	8016a44 <_dtoa_r+0x2b4>
 801692a:	2b05      	cmp	r3, #5
 801692c:	bfc4      	itt	gt
 801692e:	3b04      	subgt	r3, #4
 8016930:	9306      	strgt	r3, [sp, #24]
 8016932:	9b06      	ldr	r3, [sp, #24]
 8016934:	f1a3 0302 	sub.w	r3, r3, #2
 8016938:	bfcc      	ite	gt
 801693a:	2500      	movgt	r5, #0
 801693c:	2501      	movle	r5, #1
 801693e:	2b03      	cmp	r3, #3
 8016940:	f200 808c 	bhi.w	8016a5c <_dtoa_r+0x2cc>
 8016944:	e8df f003 	tbb	[pc, r3]
 8016948:	6e317c7a 	.word	0x6e317c7a
 801694c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016950:	441d      	add	r5, r3
 8016952:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016956:	2820      	cmp	r0, #32
 8016958:	dd13      	ble.n	8016982 <_dtoa_r+0x1f2>
 801695a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801695e:	9b00      	ldr	r3, [sp, #0]
 8016960:	fa08 f800 	lsl.w	r8, r8, r0
 8016964:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016968:	fa23 f000 	lsr.w	r0, r3, r0
 801696c:	ea48 0000 	orr.w	r0, r8, r0
 8016970:	f7f0 fb62 	bl	8007038 <__aeabi_ui2d>
 8016974:	2301      	movs	r3, #1
 8016976:	4682      	mov	sl, r0
 8016978:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801697c:	3d01      	subs	r5, #1
 801697e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016980:	e772      	b.n	8016868 <_dtoa_r+0xd8>
 8016982:	9b00      	ldr	r3, [sp, #0]
 8016984:	f1c0 0020 	rsb	r0, r0, #32
 8016988:	fa03 f000 	lsl.w	r0, r3, r0
 801698c:	e7f0      	b.n	8016970 <_dtoa_r+0x1e0>
 801698e:	2301      	movs	r3, #1
 8016990:	e7b1      	b.n	80168f6 <_dtoa_r+0x166>
 8016992:	900f      	str	r0, [sp, #60]	; 0x3c
 8016994:	e7b0      	b.n	80168f8 <_dtoa_r+0x168>
 8016996:	9b05      	ldr	r3, [sp, #20]
 8016998:	eba3 030a 	sub.w	r3, r3, sl
 801699c:	9305      	str	r3, [sp, #20]
 801699e:	f1ca 0300 	rsb	r3, sl, #0
 80169a2:	9307      	str	r3, [sp, #28]
 80169a4:	2300      	movs	r3, #0
 80169a6:	930e      	str	r3, [sp, #56]	; 0x38
 80169a8:	e7bb      	b.n	8016922 <_dtoa_r+0x192>
 80169aa:	2301      	movs	r3, #1
 80169ac:	930a      	str	r3, [sp, #40]	; 0x28
 80169ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	dd56      	ble.n	8016a62 <_dtoa_r+0x2d2>
 80169b4:	9302      	str	r3, [sp, #8]
 80169b6:	4699      	mov	r9, r3
 80169b8:	2200      	movs	r2, #0
 80169ba:	6462      	str	r2, [r4, #68]	; 0x44
 80169bc:	2204      	movs	r2, #4
 80169be:	f102 0014 	add.w	r0, r2, #20
 80169c2:	4298      	cmp	r0, r3
 80169c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80169c6:	d951      	bls.n	8016a6c <_dtoa_r+0x2dc>
 80169c8:	4620      	mov	r0, r4
 80169ca:	f000 ff67 	bl	801789c <_Balloc>
 80169ce:	f1b9 0f0e 	cmp.w	r9, #14
 80169d2:	4683      	mov	fp, r0
 80169d4:	6420      	str	r0, [r4, #64]	; 0x40
 80169d6:	f200 80e8 	bhi.w	8016baa <_dtoa_r+0x41a>
 80169da:	2d00      	cmp	r5, #0
 80169dc:	f000 80e5 	beq.w	8016baa <_dtoa_r+0x41a>
 80169e0:	ed9d 7b00 	vldr	d7, [sp]
 80169e4:	f1ba 0f00 	cmp.w	sl, #0
 80169e8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80169ec:	dd76      	ble.n	8016adc <_dtoa_r+0x34c>
 80169ee:	4a2b      	ldr	r2, [pc, #172]	; (8016a9c <_dtoa_r+0x30c>)
 80169f0:	f00a 030f 	and.w	r3, sl, #15
 80169f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80169f8:	ed93 7b00 	vldr	d7, [r3]
 80169fc:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016a00:	06f0      	lsls	r0, r6, #27
 8016a02:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016a06:	d567      	bpl.n	8016ad8 <_dtoa_r+0x348>
 8016a08:	4b25      	ldr	r3, [pc, #148]	; (8016aa0 <_dtoa_r+0x310>)
 8016a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016a0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016a12:	f7f0 fcb5 	bl	8007380 <__aeabi_ddiv>
 8016a16:	e9cd 0100 	strd	r0, r1, [sp]
 8016a1a:	f006 060f 	and.w	r6, r6, #15
 8016a1e:	2503      	movs	r5, #3
 8016a20:	4f1f      	ldr	r7, [pc, #124]	; (8016aa0 <_dtoa_r+0x310>)
 8016a22:	e04e      	b.n	8016ac2 <_dtoa_r+0x332>
 8016a24:	2301      	movs	r3, #1
 8016a26:	930a      	str	r3, [sp, #40]	; 0x28
 8016a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a2a:	4453      	add	r3, sl
 8016a2c:	f103 0901 	add.w	r9, r3, #1
 8016a30:	9302      	str	r3, [sp, #8]
 8016a32:	464b      	mov	r3, r9
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	bfb8      	it	lt
 8016a38:	2301      	movlt	r3, #1
 8016a3a:	e7bd      	b.n	80169b8 <_dtoa_r+0x228>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	e7b5      	b.n	80169ac <_dtoa_r+0x21c>
 8016a40:	2300      	movs	r3, #0
 8016a42:	e7f0      	b.n	8016a26 <_dtoa_r+0x296>
 8016a44:	2501      	movs	r5, #1
 8016a46:	2300      	movs	r3, #0
 8016a48:	9306      	str	r3, [sp, #24]
 8016a4a:	950a      	str	r5, [sp, #40]	; 0x28
 8016a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a50:	9302      	str	r3, [sp, #8]
 8016a52:	4699      	mov	r9, r3
 8016a54:	2200      	movs	r2, #0
 8016a56:	2312      	movs	r3, #18
 8016a58:	920b      	str	r2, [sp, #44]	; 0x2c
 8016a5a:	e7ad      	b.n	80169b8 <_dtoa_r+0x228>
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a60:	e7f4      	b.n	8016a4c <_dtoa_r+0x2bc>
 8016a62:	2301      	movs	r3, #1
 8016a64:	9302      	str	r3, [sp, #8]
 8016a66:	4699      	mov	r9, r3
 8016a68:	461a      	mov	r2, r3
 8016a6a:	e7f5      	b.n	8016a58 <_dtoa_r+0x2c8>
 8016a6c:	3101      	adds	r1, #1
 8016a6e:	6461      	str	r1, [r4, #68]	; 0x44
 8016a70:	0052      	lsls	r2, r2, #1
 8016a72:	e7a4      	b.n	80169be <_dtoa_r+0x22e>
 8016a74:	f3af 8000 	nop.w
 8016a78:	636f4361 	.word	0x636f4361
 8016a7c:	3fd287a7 	.word	0x3fd287a7
 8016a80:	8b60c8b3 	.word	0x8b60c8b3
 8016a84:	3fc68a28 	.word	0x3fc68a28
 8016a88:	509f79fb 	.word	0x509f79fb
 8016a8c:	3fd34413 	.word	0x3fd34413
 8016a90:	7ff00000 	.word	0x7ff00000
 8016a94:	0801b72b 	.word	0x0801b72b
 8016a98:	3ff80000 	.word	0x3ff80000
 8016a9c:	0801b788 	.word	0x0801b788
 8016aa0:	0801b760 	.word	0x0801b760
 8016aa4:	0801b755 	.word	0x0801b755
 8016aa8:	07f1      	lsls	r1, r6, #31
 8016aaa:	d508      	bpl.n	8016abe <_dtoa_r+0x32e>
 8016aac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ab4:	f7f0 fb3a 	bl	800712c <__aeabi_dmul>
 8016ab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016abc:	3501      	adds	r5, #1
 8016abe:	1076      	asrs	r6, r6, #1
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	2e00      	cmp	r6, #0
 8016ac4:	d1f0      	bne.n	8016aa8 <_dtoa_r+0x318>
 8016ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ace:	f7f0 fc57 	bl	8007380 <__aeabi_ddiv>
 8016ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8016ad6:	e01a      	b.n	8016b0e <_dtoa_r+0x37e>
 8016ad8:	2502      	movs	r5, #2
 8016ada:	e7a1      	b.n	8016a20 <_dtoa_r+0x290>
 8016adc:	f000 80a0 	beq.w	8016c20 <_dtoa_r+0x490>
 8016ae0:	f1ca 0600 	rsb	r6, sl, #0
 8016ae4:	4b9f      	ldr	r3, [pc, #636]	; (8016d64 <_dtoa_r+0x5d4>)
 8016ae6:	4fa0      	ldr	r7, [pc, #640]	; (8016d68 <_dtoa_r+0x5d8>)
 8016ae8:	f006 020f 	and.w	r2, r6, #15
 8016aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016af8:	f7f0 fb18 	bl	800712c <__aeabi_dmul>
 8016afc:	e9cd 0100 	strd	r0, r1, [sp]
 8016b00:	1136      	asrs	r6, r6, #4
 8016b02:	2300      	movs	r3, #0
 8016b04:	2502      	movs	r5, #2
 8016b06:	2e00      	cmp	r6, #0
 8016b08:	d17f      	bne.n	8016c0a <_dtoa_r+0x47a>
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d1e1      	bne.n	8016ad2 <_dtoa_r+0x342>
 8016b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	f000 8087 	beq.w	8016c24 <_dtoa_r+0x494>
 8016b16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	4b93      	ldr	r3, [pc, #588]	; (8016d6c <_dtoa_r+0x5dc>)
 8016b1e:	4630      	mov	r0, r6
 8016b20:	4639      	mov	r1, r7
 8016b22:	f7f0 fd75 	bl	8007610 <__aeabi_dcmplt>
 8016b26:	2800      	cmp	r0, #0
 8016b28:	d07c      	beq.n	8016c24 <_dtoa_r+0x494>
 8016b2a:	f1b9 0f00 	cmp.w	r9, #0
 8016b2e:	d079      	beq.n	8016c24 <_dtoa_r+0x494>
 8016b30:	9b02      	ldr	r3, [sp, #8]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	dd35      	ble.n	8016ba2 <_dtoa_r+0x412>
 8016b36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8016b3a:	9308      	str	r3, [sp, #32]
 8016b3c:	4639      	mov	r1, r7
 8016b3e:	2200      	movs	r2, #0
 8016b40:	4b8b      	ldr	r3, [pc, #556]	; (8016d70 <_dtoa_r+0x5e0>)
 8016b42:	4630      	mov	r0, r6
 8016b44:	f7f0 faf2 	bl	800712c <__aeabi_dmul>
 8016b48:	e9cd 0100 	strd	r0, r1, [sp]
 8016b4c:	9f02      	ldr	r7, [sp, #8]
 8016b4e:	3501      	adds	r5, #1
 8016b50:	4628      	mov	r0, r5
 8016b52:	f7f0 fa81 	bl	8007058 <__aeabi_i2d>
 8016b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b5a:	f7f0 fae7 	bl	800712c <__aeabi_dmul>
 8016b5e:	2200      	movs	r2, #0
 8016b60:	4b84      	ldr	r3, [pc, #528]	; (8016d74 <_dtoa_r+0x5e4>)
 8016b62:	f7f0 f92d 	bl	8006dc0 <__adddf3>
 8016b66:	4605      	mov	r5, r0
 8016b68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016b6c:	2f00      	cmp	r7, #0
 8016b6e:	d15d      	bne.n	8016c2c <_dtoa_r+0x49c>
 8016b70:	2200      	movs	r2, #0
 8016b72:	4b81      	ldr	r3, [pc, #516]	; (8016d78 <_dtoa_r+0x5e8>)
 8016b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b78:	f7f0 f920 	bl	8006dbc <__aeabi_dsub>
 8016b7c:	462a      	mov	r2, r5
 8016b7e:	4633      	mov	r3, r6
 8016b80:	e9cd 0100 	strd	r0, r1, [sp]
 8016b84:	f7f0 fd62 	bl	800764c <__aeabi_dcmpgt>
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	f040 8288 	bne.w	801709e <_dtoa_r+0x90e>
 8016b8e:	462a      	mov	r2, r5
 8016b90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b98:	f7f0 fd3a 	bl	8007610 <__aeabi_dcmplt>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	f040 827c 	bne.w	801709a <_dtoa_r+0x90a>
 8016ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8016baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	f2c0 8150 	blt.w	8016e52 <_dtoa_r+0x6c2>
 8016bb2:	f1ba 0f0e 	cmp.w	sl, #14
 8016bb6:	f300 814c 	bgt.w	8016e52 <_dtoa_r+0x6c2>
 8016bba:	4b6a      	ldr	r3, [pc, #424]	; (8016d64 <_dtoa_r+0x5d4>)
 8016bbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016bc0:	ed93 7b00 	vldr	d7, [r3]
 8016bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016bcc:	f280 80d8 	bge.w	8016d80 <_dtoa_r+0x5f0>
 8016bd0:	f1b9 0f00 	cmp.w	r9, #0
 8016bd4:	f300 80d4 	bgt.w	8016d80 <_dtoa_r+0x5f0>
 8016bd8:	f040 825e 	bne.w	8017098 <_dtoa_r+0x908>
 8016bdc:	2200      	movs	r2, #0
 8016bde:	4b66      	ldr	r3, [pc, #408]	; (8016d78 <_dtoa_r+0x5e8>)
 8016be0:	ec51 0b17 	vmov	r0, r1, d7
 8016be4:	f7f0 faa2 	bl	800712c <__aeabi_dmul>
 8016be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016bec:	f7f0 fd24 	bl	8007638 <__aeabi_dcmpge>
 8016bf0:	464f      	mov	r7, r9
 8016bf2:	464e      	mov	r6, r9
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	f040 8234 	bne.w	8017062 <_dtoa_r+0x8d2>
 8016bfa:	2331      	movs	r3, #49	; 0x31
 8016bfc:	f10b 0501 	add.w	r5, fp, #1
 8016c00:	f88b 3000 	strb.w	r3, [fp]
 8016c04:	f10a 0a01 	add.w	sl, sl, #1
 8016c08:	e22f      	b.n	801706a <_dtoa_r+0x8da>
 8016c0a:	07f2      	lsls	r2, r6, #31
 8016c0c:	d505      	bpl.n	8016c1a <_dtoa_r+0x48a>
 8016c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c12:	f7f0 fa8b 	bl	800712c <__aeabi_dmul>
 8016c16:	3501      	adds	r5, #1
 8016c18:	2301      	movs	r3, #1
 8016c1a:	1076      	asrs	r6, r6, #1
 8016c1c:	3708      	adds	r7, #8
 8016c1e:	e772      	b.n	8016b06 <_dtoa_r+0x376>
 8016c20:	2502      	movs	r5, #2
 8016c22:	e774      	b.n	8016b0e <_dtoa_r+0x37e>
 8016c24:	f8cd a020 	str.w	sl, [sp, #32]
 8016c28:	464f      	mov	r7, r9
 8016c2a:	e791      	b.n	8016b50 <_dtoa_r+0x3c0>
 8016c2c:	4b4d      	ldr	r3, [pc, #308]	; (8016d64 <_dtoa_r+0x5d4>)
 8016c2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016c32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d047      	beq.n	8016ccc <_dtoa_r+0x53c>
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	460b      	mov	r3, r1
 8016c40:	2000      	movs	r0, #0
 8016c42:	494e      	ldr	r1, [pc, #312]	; (8016d7c <_dtoa_r+0x5ec>)
 8016c44:	f7f0 fb9c 	bl	8007380 <__aeabi_ddiv>
 8016c48:	462a      	mov	r2, r5
 8016c4a:	4633      	mov	r3, r6
 8016c4c:	f7f0 f8b6 	bl	8006dbc <__aeabi_dsub>
 8016c50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016c54:	465d      	mov	r5, fp
 8016c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c5a:	f7f0 fd17 	bl	800768c <__aeabi_d2iz>
 8016c5e:	4606      	mov	r6, r0
 8016c60:	f7f0 f9fa 	bl	8007058 <__aeabi_i2d>
 8016c64:	4602      	mov	r2, r0
 8016c66:	460b      	mov	r3, r1
 8016c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016c6c:	f7f0 f8a6 	bl	8006dbc <__aeabi_dsub>
 8016c70:	3630      	adds	r6, #48	; 0x30
 8016c72:	f805 6b01 	strb.w	r6, [r5], #1
 8016c76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016c7a:	e9cd 0100 	strd	r0, r1, [sp]
 8016c7e:	f7f0 fcc7 	bl	8007610 <__aeabi_dcmplt>
 8016c82:	2800      	cmp	r0, #0
 8016c84:	d163      	bne.n	8016d4e <_dtoa_r+0x5be>
 8016c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016c8a:	2000      	movs	r0, #0
 8016c8c:	4937      	ldr	r1, [pc, #220]	; (8016d6c <_dtoa_r+0x5dc>)
 8016c8e:	f7f0 f895 	bl	8006dbc <__aeabi_dsub>
 8016c92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016c96:	f7f0 fcbb 	bl	8007610 <__aeabi_dcmplt>
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	f040 80b7 	bne.w	8016e0e <_dtoa_r+0x67e>
 8016ca0:	eba5 030b 	sub.w	r3, r5, fp
 8016ca4:	429f      	cmp	r7, r3
 8016ca6:	f77f af7c 	ble.w	8016ba2 <_dtoa_r+0x412>
 8016caa:	2200      	movs	r2, #0
 8016cac:	4b30      	ldr	r3, [pc, #192]	; (8016d70 <_dtoa_r+0x5e0>)
 8016cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016cb2:	f7f0 fa3b 	bl	800712c <__aeabi_dmul>
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016cbc:	4b2c      	ldr	r3, [pc, #176]	; (8016d70 <_dtoa_r+0x5e0>)
 8016cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cc2:	f7f0 fa33 	bl	800712c <__aeabi_dmul>
 8016cc6:	e9cd 0100 	strd	r0, r1, [sp]
 8016cca:	e7c4      	b.n	8016c56 <_dtoa_r+0x4c6>
 8016ccc:	462a      	mov	r2, r5
 8016cce:	4633      	mov	r3, r6
 8016cd0:	f7f0 fa2c 	bl	800712c <__aeabi_dmul>
 8016cd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016cd8:	eb0b 0507 	add.w	r5, fp, r7
 8016cdc:	465e      	mov	r6, fp
 8016cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ce2:	f7f0 fcd3 	bl	800768c <__aeabi_d2iz>
 8016ce6:	4607      	mov	r7, r0
 8016ce8:	f7f0 f9b6 	bl	8007058 <__aeabi_i2d>
 8016cec:	3730      	adds	r7, #48	; 0x30
 8016cee:	4602      	mov	r2, r0
 8016cf0:	460b      	mov	r3, r1
 8016cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cf6:	f7f0 f861 	bl	8006dbc <__aeabi_dsub>
 8016cfa:	f806 7b01 	strb.w	r7, [r6], #1
 8016cfe:	42ae      	cmp	r6, r5
 8016d00:	e9cd 0100 	strd	r0, r1, [sp]
 8016d04:	f04f 0200 	mov.w	r2, #0
 8016d08:	d126      	bne.n	8016d58 <_dtoa_r+0x5c8>
 8016d0a:	4b1c      	ldr	r3, [pc, #112]	; (8016d7c <_dtoa_r+0x5ec>)
 8016d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016d10:	f7f0 f856 	bl	8006dc0 <__adddf3>
 8016d14:	4602      	mov	r2, r0
 8016d16:	460b      	mov	r3, r1
 8016d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d1c:	f7f0 fc96 	bl	800764c <__aeabi_dcmpgt>
 8016d20:	2800      	cmp	r0, #0
 8016d22:	d174      	bne.n	8016e0e <_dtoa_r+0x67e>
 8016d24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016d28:	2000      	movs	r0, #0
 8016d2a:	4914      	ldr	r1, [pc, #80]	; (8016d7c <_dtoa_r+0x5ec>)
 8016d2c:	f7f0 f846 	bl	8006dbc <__aeabi_dsub>
 8016d30:	4602      	mov	r2, r0
 8016d32:	460b      	mov	r3, r1
 8016d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d38:	f7f0 fc6a 	bl	8007610 <__aeabi_dcmplt>
 8016d3c:	2800      	cmp	r0, #0
 8016d3e:	f43f af30 	beq.w	8016ba2 <_dtoa_r+0x412>
 8016d42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016d46:	2b30      	cmp	r3, #48	; 0x30
 8016d48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8016d4c:	d002      	beq.n	8016d54 <_dtoa_r+0x5c4>
 8016d4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016d52:	e04a      	b.n	8016dea <_dtoa_r+0x65a>
 8016d54:	4615      	mov	r5, r2
 8016d56:	e7f4      	b.n	8016d42 <_dtoa_r+0x5b2>
 8016d58:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <_dtoa_r+0x5e0>)
 8016d5a:	f7f0 f9e7 	bl	800712c <__aeabi_dmul>
 8016d5e:	e9cd 0100 	strd	r0, r1, [sp]
 8016d62:	e7bc      	b.n	8016cde <_dtoa_r+0x54e>
 8016d64:	0801b788 	.word	0x0801b788
 8016d68:	0801b760 	.word	0x0801b760
 8016d6c:	3ff00000 	.word	0x3ff00000
 8016d70:	40240000 	.word	0x40240000
 8016d74:	401c0000 	.word	0x401c0000
 8016d78:	40140000 	.word	0x40140000
 8016d7c:	3fe00000 	.word	0x3fe00000
 8016d80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d84:	465d      	mov	r5, fp
 8016d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016d8a:	4630      	mov	r0, r6
 8016d8c:	4639      	mov	r1, r7
 8016d8e:	f7f0 faf7 	bl	8007380 <__aeabi_ddiv>
 8016d92:	f7f0 fc7b 	bl	800768c <__aeabi_d2iz>
 8016d96:	4680      	mov	r8, r0
 8016d98:	f7f0 f95e 	bl	8007058 <__aeabi_i2d>
 8016d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016da0:	f7f0 f9c4 	bl	800712c <__aeabi_dmul>
 8016da4:	4602      	mov	r2, r0
 8016da6:	460b      	mov	r3, r1
 8016da8:	4630      	mov	r0, r6
 8016daa:	4639      	mov	r1, r7
 8016dac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016db0:	f7f0 f804 	bl	8006dbc <__aeabi_dsub>
 8016db4:	f805 6b01 	strb.w	r6, [r5], #1
 8016db8:	eba5 060b 	sub.w	r6, r5, fp
 8016dbc:	45b1      	cmp	r9, r6
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	d139      	bne.n	8016e38 <_dtoa_r+0x6a8>
 8016dc4:	f7ef fffc 	bl	8006dc0 <__adddf3>
 8016dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016dcc:	4606      	mov	r6, r0
 8016dce:	460f      	mov	r7, r1
 8016dd0:	f7f0 fc3c 	bl	800764c <__aeabi_dcmpgt>
 8016dd4:	b9c8      	cbnz	r0, 8016e0a <_dtoa_r+0x67a>
 8016dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016dda:	4630      	mov	r0, r6
 8016ddc:	4639      	mov	r1, r7
 8016dde:	f7f0 fc0d 	bl	80075fc <__aeabi_dcmpeq>
 8016de2:	b110      	cbz	r0, 8016dea <_dtoa_r+0x65a>
 8016de4:	f018 0f01 	tst.w	r8, #1
 8016de8:	d10f      	bne.n	8016e0a <_dtoa_r+0x67a>
 8016dea:	9904      	ldr	r1, [sp, #16]
 8016dec:	4620      	mov	r0, r4
 8016dee:	f000 fd7a 	bl	80178e6 <_Bfree>
 8016df2:	2300      	movs	r3, #0
 8016df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016df6:	702b      	strb	r3, [r5, #0]
 8016df8:	f10a 0301 	add.w	r3, sl, #1
 8016dfc:	6013      	str	r3, [r2, #0]
 8016dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	f43f acff 	beq.w	8016804 <_dtoa_r+0x74>
 8016e06:	601d      	str	r5, [r3, #0]
 8016e08:	e4fc      	b.n	8016804 <_dtoa_r+0x74>
 8016e0a:	f8cd a020 	str.w	sl, [sp, #32]
 8016e0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016e12:	2a39      	cmp	r2, #57	; 0x39
 8016e14:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8016e18:	d108      	bne.n	8016e2c <_dtoa_r+0x69c>
 8016e1a:	459b      	cmp	fp, r3
 8016e1c:	d10a      	bne.n	8016e34 <_dtoa_r+0x6a4>
 8016e1e:	9b08      	ldr	r3, [sp, #32]
 8016e20:	3301      	adds	r3, #1
 8016e22:	9308      	str	r3, [sp, #32]
 8016e24:	2330      	movs	r3, #48	; 0x30
 8016e26:	f88b 3000 	strb.w	r3, [fp]
 8016e2a:	465b      	mov	r3, fp
 8016e2c:	781a      	ldrb	r2, [r3, #0]
 8016e2e:	3201      	adds	r2, #1
 8016e30:	701a      	strb	r2, [r3, #0]
 8016e32:	e78c      	b.n	8016d4e <_dtoa_r+0x5be>
 8016e34:	461d      	mov	r5, r3
 8016e36:	e7ea      	b.n	8016e0e <_dtoa_r+0x67e>
 8016e38:	2200      	movs	r2, #0
 8016e3a:	4b9b      	ldr	r3, [pc, #620]	; (80170a8 <_dtoa_r+0x918>)
 8016e3c:	f7f0 f976 	bl	800712c <__aeabi_dmul>
 8016e40:	2200      	movs	r2, #0
 8016e42:	2300      	movs	r3, #0
 8016e44:	4606      	mov	r6, r0
 8016e46:	460f      	mov	r7, r1
 8016e48:	f7f0 fbd8 	bl	80075fc <__aeabi_dcmpeq>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	d09a      	beq.n	8016d86 <_dtoa_r+0x5f6>
 8016e50:	e7cb      	b.n	8016dea <_dtoa_r+0x65a>
 8016e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e54:	2a00      	cmp	r2, #0
 8016e56:	f000 808b 	beq.w	8016f70 <_dtoa_r+0x7e0>
 8016e5a:	9a06      	ldr	r2, [sp, #24]
 8016e5c:	2a01      	cmp	r2, #1
 8016e5e:	dc6e      	bgt.n	8016f3e <_dtoa_r+0x7ae>
 8016e60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016e62:	2a00      	cmp	r2, #0
 8016e64:	d067      	beq.n	8016f36 <_dtoa_r+0x7a6>
 8016e66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016e6a:	9f07      	ldr	r7, [sp, #28]
 8016e6c:	9d05      	ldr	r5, [sp, #20]
 8016e6e:	9a05      	ldr	r2, [sp, #20]
 8016e70:	2101      	movs	r1, #1
 8016e72:	441a      	add	r2, r3
 8016e74:	4620      	mov	r0, r4
 8016e76:	9205      	str	r2, [sp, #20]
 8016e78:	4498      	add	r8, r3
 8016e7a:	f000 fdc6 	bl	8017a0a <__i2b>
 8016e7e:	4606      	mov	r6, r0
 8016e80:	2d00      	cmp	r5, #0
 8016e82:	dd0c      	ble.n	8016e9e <_dtoa_r+0x70e>
 8016e84:	f1b8 0f00 	cmp.w	r8, #0
 8016e88:	dd09      	ble.n	8016e9e <_dtoa_r+0x70e>
 8016e8a:	4545      	cmp	r5, r8
 8016e8c:	9a05      	ldr	r2, [sp, #20]
 8016e8e:	462b      	mov	r3, r5
 8016e90:	bfa8      	it	ge
 8016e92:	4643      	movge	r3, r8
 8016e94:	1ad2      	subs	r2, r2, r3
 8016e96:	9205      	str	r2, [sp, #20]
 8016e98:	1aed      	subs	r5, r5, r3
 8016e9a:	eba8 0803 	sub.w	r8, r8, r3
 8016e9e:	9b07      	ldr	r3, [sp, #28]
 8016ea0:	b1eb      	cbz	r3, 8016ede <_dtoa_r+0x74e>
 8016ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d067      	beq.n	8016f78 <_dtoa_r+0x7e8>
 8016ea8:	b18f      	cbz	r7, 8016ece <_dtoa_r+0x73e>
 8016eaa:	4631      	mov	r1, r6
 8016eac:	463a      	mov	r2, r7
 8016eae:	4620      	mov	r0, r4
 8016eb0:	f000 fe4a 	bl	8017b48 <__pow5mult>
 8016eb4:	9a04      	ldr	r2, [sp, #16]
 8016eb6:	4601      	mov	r1, r0
 8016eb8:	4606      	mov	r6, r0
 8016eba:	4620      	mov	r0, r4
 8016ebc:	f000 fdae 	bl	8017a1c <__multiply>
 8016ec0:	9904      	ldr	r1, [sp, #16]
 8016ec2:	9008      	str	r0, [sp, #32]
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	f000 fd0e 	bl	80178e6 <_Bfree>
 8016eca:	9b08      	ldr	r3, [sp, #32]
 8016ecc:	9304      	str	r3, [sp, #16]
 8016ece:	9b07      	ldr	r3, [sp, #28]
 8016ed0:	1bda      	subs	r2, r3, r7
 8016ed2:	d004      	beq.n	8016ede <_dtoa_r+0x74e>
 8016ed4:	9904      	ldr	r1, [sp, #16]
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	f000 fe36 	bl	8017b48 <__pow5mult>
 8016edc:	9004      	str	r0, [sp, #16]
 8016ede:	2101      	movs	r1, #1
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f000 fd92 	bl	8017a0a <__i2b>
 8016ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ee8:	4607      	mov	r7, r0
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	f000 81cf 	beq.w	801728e <_dtoa_r+0xafe>
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	4601      	mov	r1, r0
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f000 fe27 	bl	8017b48 <__pow5mult>
 8016efa:	9b06      	ldr	r3, [sp, #24]
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	4607      	mov	r7, r0
 8016f00:	dc40      	bgt.n	8016f84 <_dtoa_r+0x7f4>
 8016f02:	9b00      	ldr	r3, [sp, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d139      	bne.n	8016f7c <_dtoa_r+0x7ec>
 8016f08:	9b01      	ldr	r3, [sp, #4]
 8016f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d136      	bne.n	8016f80 <_dtoa_r+0x7f0>
 8016f12:	9b01      	ldr	r3, [sp, #4]
 8016f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016f18:	0d1b      	lsrs	r3, r3, #20
 8016f1a:	051b      	lsls	r3, r3, #20
 8016f1c:	b12b      	cbz	r3, 8016f2a <_dtoa_r+0x79a>
 8016f1e:	9b05      	ldr	r3, [sp, #20]
 8016f20:	3301      	adds	r3, #1
 8016f22:	9305      	str	r3, [sp, #20]
 8016f24:	f108 0801 	add.w	r8, r8, #1
 8016f28:	2301      	movs	r3, #1
 8016f2a:	9307      	str	r3, [sp, #28]
 8016f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d12a      	bne.n	8016f88 <_dtoa_r+0x7f8>
 8016f32:	2001      	movs	r0, #1
 8016f34:	e030      	b.n	8016f98 <_dtoa_r+0x808>
 8016f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016f3c:	e795      	b.n	8016e6a <_dtoa_r+0x6da>
 8016f3e:	9b07      	ldr	r3, [sp, #28]
 8016f40:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8016f44:	42bb      	cmp	r3, r7
 8016f46:	bfbf      	itttt	lt
 8016f48:	9b07      	ldrlt	r3, [sp, #28]
 8016f4a:	9707      	strlt	r7, [sp, #28]
 8016f4c:	1afa      	sublt	r2, r7, r3
 8016f4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016f50:	bfbb      	ittet	lt
 8016f52:	189b      	addlt	r3, r3, r2
 8016f54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016f56:	1bdf      	subge	r7, r3, r7
 8016f58:	2700      	movlt	r7, #0
 8016f5a:	f1b9 0f00 	cmp.w	r9, #0
 8016f5e:	bfb5      	itete	lt
 8016f60:	9b05      	ldrlt	r3, [sp, #20]
 8016f62:	9d05      	ldrge	r5, [sp, #20]
 8016f64:	eba3 0509 	sublt.w	r5, r3, r9
 8016f68:	464b      	movge	r3, r9
 8016f6a:	bfb8      	it	lt
 8016f6c:	2300      	movlt	r3, #0
 8016f6e:	e77e      	b.n	8016e6e <_dtoa_r+0x6de>
 8016f70:	9f07      	ldr	r7, [sp, #28]
 8016f72:	9d05      	ldr	r5, [sp, #20]
 8016f74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016f76:	e783      	b.n	8016e80 <_dtoa_r+0x6f0>
 8016f78:	9a07      	ldr	r2, [sp, #28]
 8016f7a:	e7ab      	b.n	8016ed4 <_dtoa_r+0x744>
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	e7d4      	b.n	8016f2a <_dtoa_r+0x79a>
 8016f80:	9b00      	ldr	r3, [sp, #0]
 8016f82:	e7d2      	b.n	8016f2a <_dtoa_r+0x79a>
 8016f84:	2300      	movs	r3, #0
 8016f86:	9307      	str	r3, [sp, #28]
 8016f88:	693b      	ldr	r3, [r7, #16]
 8016f8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016f8e:	6918      	ldr	r0, [r3, #16]
 8016f90:	f000 fced 	bl	801796e <__hi0bits>
 8016f94:	f1c0 0020 	rsb	r0, r0, #32
 8016f98:	4440      	add	r0, r8
 8016f9a:	f010 001f 	ands.w	r0, r0, #31
 8016f9e:	d047      	beq.n	8017030 <_dtoa_r+0x8a0>
 8016fa0:	f1c0 0320 	rsb	r3, r0, #32
 8016fa4:	2b04      	cmp	r3, #4
 8016fa6:	dd3b      	ble.n	8017020 <_dtoa_r+0x890>
 8016fa8:	9b05      	ldr	r3, [sp, #20]
 8016faa:	f1c0 001c 	rsb	r0, r0, #28
 8016fae:	4403      	add	r3, r0
 8016fb0:	9305      	str	r3, [sp, #20]
 8016fb2:	4405      	add	r5, r0
 8016fb4:	4480      	add	r8, r0
 8016fb6:	9b05      	ldr	r3, [sp, #20]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	dd05      	ble.n	8016fc8 <_dtoa_r+0x838>
 8016fbc:	461a      	mov	r2, r3
 8016fbe:	9904      	ldr	r1, [sp, #16]
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	f000 fe01 	bl	8017bc8 <__lshift>
 8016fc6:	9004      	str	r0, [sp, #16]
 8016fc8:	f1b8 0f00 	cmp.w	r8, #0
 8016fcc:	dd05      	ble.n	8016fda <_dtoa_r+0x84a>
 8016fce:	4639      	mov	r1, r7
 8016fd0:	4642      	mov	r2, r8
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	f000 fdf8 	bl	8017bc8 <__lshift>
 8016fd8:	4607      	mov	r7, r0
 8016fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fdc:	b353      	cbz	r3, 8017034 <_dtoa_r+0x8a4>
 8016fde:	4639      	mov	r1, r7
 8016fe0:	9804      	ldr	r0, [sp, #16]
 8016fe2:	f000 fe45 	bl	8017c70 <__mcmp>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	da24      	bge.n	8017034 <_dtoa_r+0x8a4>
 8016fea:	2300      	movs	r3, #0
 8016fec:	220a      	movs	r2, #10
 8016fee:	9904      	ldr	r1, [sp, #16]
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f000 fc81 	bl	80178f8 <__multadd>
 8016ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ff8:	9004      	str	r0, [sp, #16]
 8016ffa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f000 814c 	beq.w	801729c <_dtoa_r+0xb0c>
 8017004:	2300      	movs	r3, #0
 8017006:	4631      	mov	r1, r6
 8017008:	220a      	movs	r2, #10
 801700a:	4620      	mov	r0, r4
 801700c:	f000 fc74 	bl	80178f8 <__multadd>
 8017010:	9b02      	ldr	r3, [sp, #8]
 8017012:	2b00      	cmp	r3, #0
 8017014:	4606      	mov	r6, r0
 8017016:	dc4f      	bgt.n	80170b8 <_dtoa_r+0x928>
 8017018:	9b06      	ldr	r3, [sp, #24]
 801701a:	2b02      	cmp	r3, #2
 801701c:	dd4c      	ble.n	80170b8 <_dtoa_r+0x928>
 801701e:	e011      	b.n	8017044 <_dtoa_r+0x8b4>
 8017020:	d0c9      	beq.n	8016fb6 <_dtoa_r+0x826>
 8017022:	9a05      	ldr	r2, [sp, #20]
 8017024:	331c      	adds	r3, #28
 8017026:	441a      	add	r2, r3
 8017028:	9205      	str	r2, [sp, #20]
 801702a:	441d      	add	r5, r3
 801702c:	4498      	add	r8, r3
 801702e:	e7c2      	b.n	8016fb6 <_dtoa_r+0x826>
 8017030:	4603      	mov	r3, r0
 8017032:	e7f6      	b.n	8017022 <_dtoa_r+0x892>
 8017034:	f1b9 0f00 	cmp.w	r9, #0
 8017038:	dc38      	bgt.n	80170ac <_dtoa_r+0x91c>
 801703a:	9b06      	ldr	r3, [sp, #24]
 801703c:	2b02      	cmp	r3, #2
 801703e:	dd35      	ble.n	80170ac <_dtoa_r+0x91c>
 8017040:	f8cd 9008 	str.w	r9, [sp, #8]
 8017044:	9b02      	ldr	r3, [sp, #8]
 8017046:	b963      	cbnz	r3, 8017062 <_dtoa_r+0x8d2>
 8017048:	4639      	mov	r1, r7
 801704a:	2205      	movs	r2, #5
 801704c:	4620      	mov	r0, r4
 801704e:	f000 fc53 	bl	80178f8 <__multadd>
 8017052:	4601      	mov	r1, r0
 8017054:	4607      	mov	r7, r0
 8017056:	9804      	ldr	r0, [sp, #16]
 8017058:	f000 fe0a 	bl	8017c70 <__mcmp>
 801705c:	2800      	cmp	r0, #0
 801705e:	f73f adcc 	bgt.w	8016bfa <_dtoa_r+0x46a>
 8017062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017064:	465d      	mov	r5, fp
 8017066:	ea6f 0a03 	mvn.w	sl, r3
 801706a:	f04f 0900 	mov.w	r9, #0
 801706e:	4639      	mov	r1, r7
 8017070:	4620      	mov	r0, r4
 8017072:	f000 fc38 	bl	80178e6 <_Bfree>
 8017076:	2e00      	cmp	r6, #0
 8017078:	f43f aeb7 	beq.w	8016dea <_dtoa_r+0x65a>
 801707c:	f1b9 0f00 	cmp.w	r9, #0
 8017080:	d005      	beq.n	801708e <_dtoa_r+0x8fe>
 8017082:	45b1      	cmp	r9, r6
 8017084:	d003      	beq.n	801708e <_dtoa_r+0x8fe>
 8017086:	4649      	mov	r1, r9
 8017088:	4620      	mov	r0, r4
 801708a:	f000 fc2c 	bl	80178e6 <_Bfree>
 801708e:	4631      	mov	r1, r6
 8017090:	4620      	mov	r0, r4
 8017092:	f000 fc28 	bl	80178e6 <_Bfree>
 8017096:	e6a8      	b.n	8016dea <_dtoa_r+0x65a>
 8017098:	2700      	movs	r7, #0
 801709a:	463e      	mov	r6, r7
 801709c:	e7e1      	b.n	8017062 <_dtoa_r+0x8d2>
 801709e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80170a2:	463e      	mov	r6, r7
 80170a4:	e5a9      	b.n	8016bfa <_dtoa_r+0x46a>
 80170a6:	bf00      	nop
 80170a8:	40240000 	.word	0x40240000
 80170ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	f000 80f9 	beq.w	80172aa <_dtoa_r+0xb1a>
 80170b8:	2d00      	cmp	r5, #0
 80170ba:	dd05      	ble.n	80170c8 <_dtoa_r+0x938>
 80170bc:	4631      	mov	r1, r6
 80170be:	462a      	mov	r2, r5
 80170c0:	4620      	mov	r0, r4
 80170c2:	f000 fd81 	bl	8017bc8 <__lshift>
 80170c6:	4606      	mov	r6, r0
 80170c8:	9b07      	ldr	r3, [sp, #28]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d04c      	beq.n	8017168 <_dtoa_r+0x9d8>
 80170ce:	6871      	ldr	r1, [r6, #4]
 80170d0:	4620      	mov	r0, r4
 80170d2:	f000 fbe3 	bl	801789c <_Balloc>
 80170d6:	6932      	ldr	r2, [r6, #16]
 80170d8:	3202      	adds	r2, #2
 80170da:	4605      	mov	r5, r0
 80170dc:	0092      	lsls	r2, r2, #2
 80170de:	f106 010c 	add.w	r1, r6, #12
 80170e2:	300c      	adds	r0, #12
 80170e4:	f7fd fd33 	bl	8014b4e <memcpy>
 80170e8:	2201      	movs	r2, #1
 80170ea:	4629      	mov	r1, r5
 80170ec:	4620      	mov	r0, r4
 80170ee:	f000 fd6b 	bl	8017bc8 <__lshift>
 80170f2:	9b00      	ldr	r3, [sp, #0]
 80170f4:	f8cd b014 	str.w	fp, [sp, #20]
 80170f8:	f003 0301 	and.w	r3, r3, #1
 80170fc:	46b1      	mov	r9, r6
 80170fe:	9307      	str	r3, [sp, #28]
 8017100:	4606      	mov	r6, r0
 8017102:	4639      	mov	r1, r7
 8017104:	9804      	ldr	r0, [sp, #16]
 8017106:	f7ff fab5 	bl	8016674 <quorem>
 801710a:	4649      	mov	r1, r9
 801710c:	4605      	mov	r5, r0
 801710e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017112:	9804      	ldr	r0, [sp, #16]
 8017114:	f000 fdac 	bl	8017c70 <__mcmp>
 8017118:	4632      	mov	r2, r6
 801711a:	9000      	str	r0, [sp, #0]
 801711c:	4639      	mov	r1, r7
 801711e:	4620      	mov	r0, r4
 8017120:	f000 fdc0 	bl	8017ca4 <__mdiff>
 8017124:	68c3      	ldr	r3, [r0, #12]
 8017126:	4602      	mov	r2, r0
 8017128:	bb03      	cbnz	r3, 801716c <_dtoa_r+0x9dc>
 801712a:	4601      	mov	r1, r0
 801712c:	9008      	str	r0, [sp, #32]
 801712e:	9804      	ldr	r0, [sp, #16]
 8017130:	f000 fd9e 	bl	8017c70 <__mcmp>
 8017134:	9a08      	ldr	r2, [sp, #32]
 8017136:	4603      	mov	r3, r0
 8017138:	4611      	mov	r1, r2
 801713a:	4620      	mov	r0, r4
 801713c:	9308      	str	r3, [sp, #32]
 801713e:	f000 fbd2 	bl	80178e6 <_Bfree>
 8017142:	9b08      	ldr	r3, [sp, #32]
 8017144:	b9a3      	cbnz	r3, 8017170 <_dtoa_r+0x9e0>
 8017146:	9a06      	ldr	r2, [sp, #24]
 8017148:	b992      	cbnz	r2, 8017170 <_dtoa_r+0x9e0>
 801714a:	9a07      	ldr	r2, [sp, #28]
 801714c:	b982      	cbnz	r2, 8017170 <_dtoa_r+0x9e0>
 801714e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017152:	d029      	beq.n	80171a8 <_dtoa_r+0xa18>
 8017154:	9b00      	ldr	r3, [sp, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	dd01      	ble.n	801715e <_dtoa_r+0x9ce>
 801715a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801715e:	9b05      	ldr	r3, [sp, #20]
 8017160:	1c5d      	adds	r5, r3, #1
 8017162:	f883 8000 	strb.w	r8, [r3]
 8017166:	e782      	b.n	801706e <_dtoa_r+0x8de>
 8017168:	4630      	mov	r0, r6
 801716a:	e7c2      	b.n	80170f2 <_dtoa_r+0x962>
 801716c:	2301      	movs	r3, #1
 801716e:	e7e3      	b.n	8017138 <_dtoa_r+0x9a8>
 8017170:	9a00      	ldr	r2, [sp, #0]
 8017172:	2a00      	cmp	r2, #0
 8017174:	db04      	blt.n	8017180 <_dtoa_r+0x9f0>
 8017176:	d125      	bne.n	80171c4 <_dtoa_r+0xa34>
 8017178:	9a06      	ldr	r2, [sp, #24]
 801717a:	bb1a      	cbnz	r2, 80171c4 <_dtoa_r+0xa34>
 801717c:	9a07      	ldr	r2, [sp, #28]
 801717e:	bb0a      	cbnz	r2, 80171c4 <_dtoa_r+0xa34>
 8017180:	2b00      	cmp	r3, #0
 8017182:	ddec      	ble.n	801715e <_dtoa_r+0x9ce>
 8017184:	2201      	movs	r2, #1
 8017186:	9904      	ldr	r1, [sp, #16]
 8017188:	4620      	mov	r0, r4
 801718a:	f000 fd1d 	bl	8017bc8 <__lshift>
 801718e:	4639      	mov	r1, r7
 8017190:	9004      	str	r0, [sp, #16]
 8017192:	f000 fd6d 	bl	8017c70 <__mcmp>
 8017196:	2800      	cmp	r0, #0
 8017198:	dc03      	bgt.n	80171a2 <_dtoa_r+0xa12>
 801719a:	d1e0      	bne.n	801715e <_dtoa_r+0x9ce>
 801719c:	f018 0f01 	tst.w	r8, #1
 80171a0:	d0dd      	beq.n	801715e <_dtoa_r+0x9ce>
 80171a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80171a6:	d1d8      	bne.n	801715a <_dtoa_r+0x9ca>
 80171a8:	9b05      	ldr	r3, [sp, #20]
 80171aa:	9a05      	ldr	r2, [sp, #20]
 80171ac:	1c5d      	adds	r5, r3, #1
 80171ae:	2339      	movs	r3, #57	; 0x39
 80171b0:	7013      	strb	r3, [r2, #0]
 80171b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80171b6:	2b39      	cmp	r3, #57	; 0x39
 80171b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80171bc:	d04f      	beq.n	801725e <_dtoa_r+0xace>
 80171be:	3301      	adds	r3, #1
 80171c0:	7013      	strb	r3, [r2, #0]
 80171c2:	e754      	b.n	801706e <_dtoa_r+0x8de>
 80171c4:	9a05      	ldr	r2, [sp, #20]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f102 0501 	add.w	r5, r2, #1
 80171cc:	dd06      	ble.n	80171dc <_dtoa_r+0xa4c>
 80171ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80171d2:	d0e9      	beq.n	80171a8 <_dtoa_r+0xa18>
 80171d4:	f108 0801 	add.w	r8, r8, #1
 80171d8:	9b05      	ldr	r3, [sp, #20]
 80171da:	e7c2      	b.n	8017162 <_dtoa_r+0x9d2>
 80171dc:	9a02      	ldr	r2, [sp, #8]
 80171de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80171e2:	eba5 030b 	sub.w	r3, r5, fp
 80171e6:	4293      	cmp	r3, r2
 80171e8:	d021      	beq.n	801722e <_dtoa_r+0xa9e>
 80171ea:	2300      	movs	r3, #0
 80171ec:	220a      	movs	r2, #10
 80171ee:	9904      	ldr	r1, [sp, #16]
 80171f0:	4620      	mov	r0, r4
 80171f2:	f000 fb81 	bl	80178f8 <__multadd>
 80171f6:	45b1      	cmp	r9, r6
 80171f8:	9004      	str	r0, [sp, #16]
 80171fa:	f04f 0300 	mov.w	r3, #0
 80171fe:	f04f 020a 	mov.w	r2, #10
 8017202:	4649      	mov	r1, r9
 8017204:	4620      	mov	r0, r4
 8017206:	d105      	bne.n	8017214 <_dtoa_r+0xa84>
 8017208:	f000 fb76 	bl	80178f8 <__multadd>
 801720c:	4681      	mov	r9, r0
 801720e:	4606      	mov	r6, r0
 8017210:	9505      	str	r5, [sp, #20]
 8017212:	e776      	b.n	8017102 <_dtoa_r+0x972>
 8017214:	f000 fb70 	bl	80178f8 <__multadd>
 8017218:	4631      	mov	r1, r6
 801721a:	4681      	mov	r9, r0
 801721c:	2300      	movs	r3, #0
 801721e:	220a      	movs	r2, #10
 8017220:	4620      	mov	r0, r4
 8017222:	f000 fb69 	bl	80178f8 <__multadd>
 8017226:	4606      	mov	r6, r0
 8017228:	e7f2      	b.n	8017210 <_dtoa_r+0xa80>
 801722a:	f04f 0900 	mov.w	r9, #0
 801722e:	2201      	movs	r2, #1
 8017230:	9904      	ldr	r1, [sp, #16]
 8017232:	4620      	mov	r0, r4
 8017234:	f000 fcc8 	bl	8017bc8 <__lshift>
 8017238:	4639      	mov	r1, r7
 801723a:	9004      	str	r0, [sp, #16]
 801723c:	f000 fd18 	bl	8017c70 <__mcmp>
 8017240:	2800      	cmp	r0, #0
 8017242:	dcb6      	bgt.n	80171b2 <_dtoa_r+0xa22>
 8017244:	d102      	bne.n	801724c <_dtoa_r+0xabc>
 8017246:	f018 0f01 	tst.w	r8, #1
 801724a:	d1b2      	bne.n	80171b2 <_dtoa_r+0xa22>
 801724c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017250:	2b30      	cmp	r3, #48	; 0x30
 8017252:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8017256:	f47f af0a 	bne.w	801706e <_dtoa_r+0x8de>
 801725a:	4615      	mov	r5, r2
 801725c:	e7f6      	b.n	801724c <_dtoa_r+0xabc>
 801725e:	4593      	cmp	fp, r2
 8017260:	d105      	bne.n	801726e <_dtoa_r+0xade>
 8017262:	2331      	movs	r3, #49	; 0x31
 8017264:	f10a 0a01 	add.w	sl, sl, #1
 8017268:	f88b 3000 	strb.w	r3, [fp]
 801726c:	e6ff      	b.n	801706e <_dtoa_r+0x8de>
 801726e:	4615      	mov	r5, r2
 8017270:	e79f      	b.n	80171b2 <_dtoa_r+0xa22>
 8017272:	f8df b064 	ldr.w	fp, [pc, #100]	; 80172d8 <_dtoa_r+0xb48>
 8017276:	f7ff bac5 	b.w	8016804 <_dtoa_r+0x74>
 801727a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801727c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80172dc <_dtoa_r+0xb4c>
 8017280:	2b00      	cmp	r3, #0
 8017282:	f43f aabf 	beq.w	8016804 <_dtoa_r+0x74>
 8017286:	f10b 0308 	add.w	r3, fp, #8
 801728a:	f7ff bab9 	b.w	8016800 <_dtoa_r+0x70>
 801728e:	9b06      	ldr	r3, [sp, #24]
 8017290:	2b01      	cmp	r3, #1
 8017292:	f77f ae36 	ble.w	8016f02 <_dtoa_r+0x772>
 8017296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017298:	9307      	str	r3, [sp, #28]
 801729a:	e64a      	b.n	8016f32 <_dtoa_r+0x7a2>
 801729c:	9b02      	ldr	r3, [sp, #8]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	dc03      	bgt.n	80172aa <_dtoa_r+0xb1a>
 80172a2:	9b06      	ldr	r3, [sp, #24]
 80172a4:	2b02      	cmp	r3, #2
 80172a6:	f73f aecd 	bgt.w	8017044 <_dtoa_r+0x8b4>
 80172aa:	465d      	mov	r5, fp
 80172ac:	4639      	mov	r1, r7
 80172ae:	9804      	ldr	r0, [sp, #16]
 80172b0:	f7ff f9e0 	bl	8016674 <quorem>
 80172b4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80172b8:	f805 8b01 	strb.w	r8, [r5], #1
 80172bc:	9a02      	ldr	r2, [sp, #8]
 80172be:	eba5 030b 	sub.w	r3, r5, fp
 80172c2:	429a      	cmp	r2, r3
 80172c4:	ddb1      	ble.n	801722a <_dtoa_r+0xa9a>
 80172c6:	2300      	movs	r3, #0
 80172c8:	220a      	movs	r2, #10
 80172ca:	9904      	ldr	r1, [sp, #16]
 80172cc:	4620      	mov	r0, r4
 80172ce:	f000 fb13 	bl	80178f8 <__multadd>
 80172d2:	9004      	str	r0, [sp, #16]
 80172d4:	e7ea      	b.n	80172ac <_dtoa_r+0xb1c>
 80172d6:	bf00      	nop
 80172d8:	0801b72a 	.word	0x0801b72a
 80172dc:	0801b74c 	.word	0x0801b74c

080172e0 <__sflush_r>:
 80172e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80172e4:	b293      	uxth	r3, r2
 80172e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172ea:	4605      	mov	r5, r0
 80172ec:	0718      	lsls	r0, r3, #28
 80172ee:	460c      	mov	r4, r1
 80172f0:	d45f      	bmi.n	80173b2 <__sflush_r+0xd2>
 80172f2:	684b      	ldr	r3, [r1, #4]
 80172f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	818a      	strh	r2, [r1, #12]
 80172fc:	dc05      	bgt.n	801730a <__sflush_r+0x2a>
 80172fe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8017300:	2b00      	cmp	r3, #0
 8017302:	dc02      	bgt.n	801730a <__sflush_r+0x2a>
 8017304:	2000      	movs	r0, #0
 8017306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801730a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801730c:	2e00      	cmp	r6, #0
 801730e:	d0f9      	beq.n	8017304 <__sflush_r+0x24>
 8017310:	2300      	movs	r3, #0
 8017312:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017316:	682f      	ldr	r7, [r5, #0]
 8017318:	69e1      	ldr	r1, [r4, #28]
 801731a:	602b      	str	r3, [r5, #0]
 801731c:	d036      	beq.n	801738c <__sflush_r+0xac>
 801731e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017320:	89a3      	ldrh	r3, [r4, #12]
 8017322:	075a      	lsls	r2, r3, #29
 8017324:	d505      	bpl.n	8017332 <__sflush_r+0x52>
 8017326:	6863      	ldr	r3, [r4, #4]
 8017328:	1ac0      	subs	r0, r0, r3
 801732a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801732c:	b10b      	cbz	r3, 8017332 <__sflush_r+0x52>
 801732e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017330:	1ac0      	subs	r0, r0, r3
 8017332:	2300      	movs	r3, #0
 8017334:	4602      	mov	r2, r0
 8017336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017338:	69e1      	ldr	r1, [r4, #28]
 801733a:	4628      	mov	r0, r5
 801733c:	47b0      	blx	r6
 801733e:	1c43      	adds	r3, r0, #1
 8017340:	89a3      	ldrh	r3, [r4, #12]
 8017342:	d106      	bne.n	8017352 <__sflush_r+0x72>
 8017344:	6829      	ldr	r1, [r5, #0]
 8017346:	291d      	cmp	r1, #29
 8017348:	d84c      	bhi.n	80173e4 <__sflush_r+0x104>
 801734a:	4a2b      	ldr	r2, [pc, #172]	; (80173f8 <__sflush_r+0x118>)
 801734c:	40ca      	lsrs	r2, r1
 801734e:	07d6      	lsls	r6, r2, #31
 8017350:	d548      	bpl.n	80173e4 <__sflush_r+0x104>
 8017352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017356:	b21b      	sxth	r3, r3
 8017358:	2200      	movs	r2, #0
 801735a:	6062      	str	r2, [r4, #4]
 801735c:	04d9      	lsls	r1, r3, #19
 801735e:	6922      	ldr	r2, [r4, #16]
 8017360:	81a3      	strh	r3, [r4, #12]
 8017362:	6022      	str	r2, [r4, #0]
 8017364:	d504      	bpl.n	8017370 <__sflush_r+0x90>
 8017366:	1c42      	adds	r2, r0, #1
 8017368:	d101      	bne.n	801736e <__sflush_r+0x8e>
 801736a:	682b      	ldr	r3, [r5, #0]
 801736c:	b903      	cbnz	r3, 8017370 <__sflush_r+0x90>
 801736e:	6520      	str	r0, [r4, #80]	; 0x50
 8017370:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017372:	602f      	str	r7, [r5, #0]
 8017374:	2900      	cmp	r1, #0
 8017376:	d0c5      	beq.n	8017304 <__sflush_r+0x24>
 8017378:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801737c:	4299      	cmp	r1, r3
 801737e:	d002      	beq.n	8017386 <__sflush_r+0xa6>
 8017380:	4628      	mov	r0, r5
 8017382:	f000 f937 	bl	80175f4 <_free_r>
 8017386:	2000      	movs	r0, #0
 8017388:	6320      	str	r0, [r4, #48]	; 0x30
 801738a:	e7bc      	b.n	8017306 <__sflush_r+0x26>
 801738c:	2301      	movs	r3, #1
 801738e:	4628      	mov	r0, r5
 8017390:	47b0      	blx	r6
 8017392:	1c41      	adds	r1, r0, #1
 8017394:	d1c4      	bne.n	8017320 <__sflush_r+0x40>
 8017396:	682b      	ldr	r3, [r5, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d0c1      	beq.n	8017320 <__sflush_r+0x40>
 801739c:	2b1d      	cmp	r3, #29
 801739e:	d001      	beq.n	80173a4 <__sflush_r+0xc4>
 80173a0:	2b16      	cmp	r3, #22
 80173a2:	d101      	bne.n	80173a8 <__sflush_r+0xc8>
 80173a4:	602f      	str	r7, [r5, #0]
 80173a6:	e7ad      	b.n	8017304 <__sflush_r+0x24>
 80173a8:	89a3      	ldrh	r3, [r4, #12]
 80173aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173ae:	81a3      	strh	r3, [r4, #12]
 80173b0:	e7a9      	b.n	8017306 <__sflush_r+0x26>
 80173b2:	690f      	ldr	r7, [r1, #16]
 80173b4:	2f00      	cmp	r7, #0
 80173b6:	d0a5      	beq.n	8017304 <__sflush_r+0x24>
 80173b8:	079b      	lsls	r3, r3, #30
 80173ba:	680e      	ldr	r6, [r1, #0]
 80173bc:	bf08      	it	eq
 80173be:	694b      	ldreq	r3, [r1, #20]
 80173c0:	600f      	str	r7, [r1, #0]
 80173c2:	bf18      	it	ne
 80173c4:	2300      	movne	r3, #0
 80173c6:	eba6 0807 	sub.w	r8, r6, r7
 80173ca:	608b      	str	r3, [r1, #8]
 80173cc:	f1b8 0f00 	cmp.w	r8, #0
 80173d0:	dd98      	ble.n	8017304 <__sflush_r+0x24>
 80173d2:	4643      	mov	r3, r8
 80173d4:	463a      	mov	r2, r7
 80173d6:	69e1      	ldr	r1, [r4, #28]
 80173d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80173da:	4628      	mov	r0, r5
 80173dc:	47b0      	blx	r6
 80173de:	2800      	cmp	r0, #0
 80173e0:	dc06      	bgt.n	80173f0 <__sflush_r+0x110>
 80173e2:	89a3      	ldrh	r3, [r4, #12]
 80173e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173e8:	81a3      	strh	r3, [r4, #12]
 80173ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80173ee:	e78a      	b.n	8017306 <__sflush_r+0x26>
 80173f0:	4407      	add	r7, r0
 80173f2:	eba8 0800 	sub.w	r8, r8, r0
 80173f6:	e7e9      	b.n	80173cc <__sflush_r+0xec>
 80173f8:	20400001 	.word	0x20400001

080173fc <_fflush_r>:
 80173fc:	b538      	push	{r3, r4, r5, lr}
 80173fe:	460c      	mov	r4, r1
 8017400:	4605      	mov	r5, r0
 8017402:	b118      	cbz	r0, 801740c <_fflush_r+0x10>
 8017404:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017406:	b90b      	cbnz	r3, 801740c <_fflush_r+0x10>
 8017408:	f000 f864 	bl	80174d4 <__sinit>
 801740c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8017410:	b1b8      	cbz	r0, 8017442 <_fflush_r+0x46>
 8017412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017414:	07db      	lsls	r3, r3, #31
 8017416:	d404      	bmi.n	8017422 <_fflush_r+0x26>
 8017418:	0581      	lsls	r1, r0, #22
 801741a:	d402      	bmi.n	8017422 <_fflush_r+0x26>
 801741c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801741e:	f7fd f93f 	bl	80146a0 <__retarget_lock_acquire_recursive>
 8017422:	4628      	mov	r0, r5
 8017424:	4621      	mov	r1, r4
 8017426:	f7ff ff5b 	bl	80172e0 <__sflush_r>
 801742a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801742c:	07da      	lsls	r2, r3, #31
 801742e:	4605      	mov	r5, r0
 8017430:	d405      	bmi.n	801743e <_fflush_r+0x42>
 8017432:	89a3      	ldrh	r3, [r4, #12]
 8017434:	059b      	lsls	r3, r3, #22
 8017436:	d402      	bmi.n	801743e <_fflush_r+0x42>
 8017438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801743a:	f7fd f932 	bl	80146a2 <__retarget_lock_release_recursive>
 801743e:	4628      	mov	r0, r5
 8017440:	bd38      	pop	{r3, r4, r5, pc}
 8017442:	4605      	mov	r5, r0
 8017444:	e7fb      	b.n	801743e <_fflush_r+0x42>
	...

08017448 <std>:
 8017448:	2300      	movs	r3, #0
 801744a:	b510      	push	{r4, lr}
 801744c:	4604      	mov	r4, r0
 801744e:	e9c0 3300 	strd	r3, r3, [r0]
 8017452:	6083      	str	r3, [r0, #8]
 8017454:	8181      	strh	r1, [r0, #12]
 8017456:	6643      	str	r3, [r0, #100]	; 0x64
 8017458:	81c2      	strh	r2, [r0, #14]
 801745a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801745e:	6183      	str	r3, [r0, #24]
 8017460:	4619      	mov	r1, r3
 8017462:	2208      	movs	r2, #8
 8017464:	305c      	adds	r0, #92	; 0x5c
 8017466:	f7fd fb96 	bl	8014b96 <memset>
 801746a:	4b07      	ldr	r3, [pc, #28]	; (8017488 <std+0x40>)
 801746c:	6223      	str	r3, [r4, #32]
 801746e:	4b07      	ldr	r3, [pc, #28]	; (801748c <std+0x44>)
 8017470:	6263      	str	r3, [r4, #36]	; 0x24
 8017472:	4b07      	ldr	r3, [pc, #28]	; (8017490 <std+0x48>)
 8017474:	62a3      	str	r3, [r4, #40]	; 0x28
 8017476:	4b07      	ldr	r3, [pc, #28]	; (8017494 <std+0x4c>)
 8017478:	61e4      	str	r4, [r4, #28]
 801747a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801747c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017484:	f7fd b90a 	b.w	801469c <__retarget_lock_init_recursive>
 8017488:	08017e69 	.word	0x08017e69
 801748c:	08017e8b 	.word	0x08017e8b
 8017490:	08017ec3 	.word	0x08017ec3
 8017494:	08017ee7 	.word	0x08017ee7

08017498 <_cleanup_r>:
 8017498:	4901      	ldr	r1, [pc, #4]	; (80174a0 <_cleanup_r+0x8>)
 801749a:	f000 b967 	b.w	801776c <_fwalk_reent>
 801749e:	bf00      	nop
 80174a0:	08018131 	.word	0x08018131

080174a4 <__sfp_lock_acquire>:
 80174a4:	4801      	ldr	r0, [pc, #4]	; (80174ac <__sfp_lock_acquire+0x8>)
 80174a6:	f7fd b8fb 	b.w	80146a0 <__retarget_lock_acquire_recursive>
 80174aa:	bf00      	nop
 80174ac:	20033060 	.word	0x20033060

080174b0 <__sfp_lock_release>:
 80174b0:	4801      	ldr	r0, [pc, #4]	; (80174b8 <__sfp_lock_release+0x8>)
 80174b2:	f7fd b8f6 	b.w	80146a2 <__retarget_lock_release_recursive>
 80174b6:	bf00      	nop
 80174b8:	20033060 	.word	0x20033060

080174bc <__sinit_lock_acquire>:
 80174bc:	4801      	ldr	r0, [pc, #4]	; (80174c4 <__sinit_lock_acquire+0x8>)
 80174be:	f7fd b8ef 	b.w	80146a0 <__retarget_lock_acquire_recursive>
 80174c2:	bf00      	nop
 80174c4:	2003305b 	.word	0x2003305b

080174c8 <__sinit_lock_release>:
 80174c8:	4801      	ldr	r0, [pc, #4]	; (80174d0 <__sinit_lock_release+0x8>)
 80174ca:	f7fd b8ea 	b.w	80146a2 <__retarget_lock_release_recursive>
 80174ce:	bf00      	nop
 80174d0:	2003305b 	.word	0x2003305b

080174d4 <__sinit>:
 80174d4:	b510      	push	{r4, lr}
 80174d6:	4604      	mov	r4, r0
 80174d8:	f7ff fff0 	bl	80174bc <__sinit_lock_acquire>
 80174dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80174de:	b11a      	cbz	r2, 80174e8 <__sinit+0x14>
 80174e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174e4:	f7ff bff0 	b.w	80174c8 <__sinit_lock_release>
 80174e8:	4b0d      	ldr	r3, [pc, #52]	; (8017520 <__sinit+0x4c>)
 80174ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80174ec:	2303      	movs	r3, #3
 80174ee:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80174f2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80174f6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80174fa:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80174fe:	2104      	movs	r1, #4
 8017500:	6860      	ldr	r0, [r4, #4]
 8017502:	f7ff ffa1 	bl	8017448 <std>
 8017506:	2201      	movs	r2, #1
 8017508:	2109      	movs	r1, #9
 801750a:	68a0      	ldr	r0, [r4, #8]
 801750c:	f7ff ff9c 	bl	8017448 <std>
 8017510:	2202      	movs	r2, #2
 8017512:	2112      	movs	r1, #18
 8017514:	68e0      	ldr	r0, [r4, #12]
 8017516:	f7ff ff97 	bl	8017448 <std>
 801751a:	2301      	movs	r3, #1
 801751c:	63a3      	str	r3, [r4, #56]	; 0x38
 801751e:	e7df      	b.n	80174e0 <__sinit+0xc>
 8017520:	08017499 	.word	0x08017499

08017524 <__libc_fini_array>:
 8017524:	b538      	push	{r3, r4, r5, lr}
 8017526:	4d07      	ldr	r5, [pc, #28]	; (8017544 <__libc_fini_array+0x20>)
 8017528:	4c07      	ldr	r4, [pc, #28]	; (8017548 <__libc_fini_array+0x24>)
 801752a:	1b64      	subs	r4, r4, r5
 801752c:	10a4      	asrs	r4, r4, #2
 801752e:	b91c      	cbnz	r4, 8017538 <__libc_fini_array+0x14>
 8017530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017534:	f000 bede 	b.w	80182f4 <_fini>
 8017538:	3c01      	subs	r4, #1
 801753a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801753e:	4798      	blx	r3
 8017540:	e7f5      	b.n	801752e <__libc_fini_array+0xa>
 8017542:	bf00      	nop
 8017544:	0801bbf4 	.word	0x0801bbf4
 8017548:	0801bbfc 	.word	0x0801bbfc

0801754c <_malloc_trim_r>:
 801754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017550:	4605      	mov	r5, r0
 8017552:	2008      	movs	r0, #8
 8017554:	460c      	mov	r4, r1
 8017556:	f7fe ffbd 	bl	80164d4 <sysconf>
 801755a:	4f23      	ldr	r7, [pc, #140]	; (80175e8 <_malloc_trim_r+0x9c>)
 801755c:	4680      	mov	r8, r0
 801755e:	4628      	mov	r0, r5
 8017560:	f7fd fb22 	bl	8014ba8 <__malloc_lock>
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	685e      	ldr	r6, [r3, #4]
 8017568:	f026 0603 	bic.w	r6, r6, #3
 801756c:	1b34      	subs	r4, r6, r4
 801756e:	3c11      	subs	r4, #17
 8017570:	4444      	add	r4, r8
 8017572:	fbb4 f4f8 	udiv	r4, r4, r8
 8017576:	3c01      	subs	r4, #1
 8017578:	fb08 f404 	mul.w	r4, r8, r4
 801757c:	45a0      	cmp	r8, r4
 801757e:	dd05      	ble.n	801758c <_malloc_trim_r+0x40>
 8017580:	4628      	mov	r0, r5
 8017582:	f7fd fb17 	bl	8014bb4 <__malloc_unlock>
 8017586:	2000      	movs	r0, #0
 8017588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801758c:	2100      	movs	r1, #0
 801758e:	4628      	mov	r0, r5
 8017590:	f7fd fcfa 	bl	8014f88 <_sbrk_r>
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	4433      	add	r3, r6
 8017598:	4298      	cmp	r0, r3
 801759a:	d1f1      	bne.n	8017580 <_malloc_trim_r+0x34>
 801759c:	4261      	negs	r1, r4
 801759e:	4628      	mov	r0, r5
 80175a0:	f7fd fcf2 	bl	8014f88 <_sbrk_r>
 80175a4:	3001      	adds	r0, #1
 80175a6:	d110      	bne.n	80175ca <_malloc_trim_r+0x7e>
 80175a8:	2100      	movs	r1, #0
 80175aa:	4628      	mov	r0, r5
 80175ac:	f7fd fcec 	bl	8014f88 <_sbrk_r>
 80175b0:	68ba      	ldr	r2, [r7, #8]
 80175b2:	1a83      	subs	r3, r0, r2
 80175b4:	2b0f      	cmp	r3, #15
 80175b6:	dde3      	ble.n	8017580 <_malloc_trim_r+0x34>
 80175b8:	490c      	ldr	r1, [pc, #48]	; (80175ec <_malloc_trim_r+0xa0>)
 80175ba:	6809      	ldr	r1, [r1, #0]
 80175bc:	1a40      	subs	r0, r0, r1
 80175be:	490c      	ldr	r1, [pc, #48]	; (80175f0 <_malloc_trim_r+0xa4>)
 80175c0:	f043 0301 	orr.w	r3, r3, #1
 80175c4:	6008      	str	r0, [r1, #0]
 80175c6:	6053      	str	r3, [r2, #4]
 80175c8:	e7da      	b.n	8017580 <_malloc_trim_r+0x34>
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	4a08      	ldr	r2, [pc, #32]	; (80175f0 <_malloc_trim_r+0xa4>)
 80175ce:	1b36      	subs	r6, r6, r4
 80175d0:	f046 0601 	orr.w	r6, r6, #1
 80175d4:	605e      	str	r6, [r3, #4]
 80175d6:	6813      	ldr	r3, [r2, #0]
 80175d8:	4628      	mov	r0, r5
 80175da:	1b1c      	subs	r4, r3, r4
 80175dc:	6014      	str	r4, [r2, #0]
 80175de:	f7fd fae9 	bl	8014bb4 <__malloc_unlock>
 80175e2:	2001      	movs	r0, #1
 80175e4:	e7d0      	b.n	8017588 <_malloc_trim_r+0x3c>
 80175e6:	bf00      	nop
 80175e8:	20000460 	.word	0x20000460
 80175ec:	20000868 	.word	0x20000868
 80175f0:	20032ffc 	.word	0x20032ffc

080175f4 <_free_r>:
 80175f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f8:	4604      	mov	r4, r0
 80175fa:	4688      	mov	r8, r1
 80175fc:	2900      	cmp	r1, #0
 80175fe:	f000 80ab 	beq.w	8017758 <_free_r+0x164>
 8017602:	f7fd fad1 	bl	8014ba8 <__malloc_lock>
 8017606:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801760a:	4d54      	ldr	r5, [pc, #336]	; (801775c <_free_r+0x168>)
 801760c:	f022 0001 	bic.w	r0, r2, #1
 8017610:	f1a8 0308 	sub.w	r3, r8, #8
 8017614:	181f      	adds	r7, r3, r0
 8017616:	68a9      	ldr	r1, [r5, #8]
 8017618:	687e      	ldr	r6, [r7, #4]
 801761a:	42b9      	cmp	r1, r7
 801761c:	f026 0603 	bic.w	r6, r6, #3
 8017620:	f002 0201 	and.w	r2, r2, #1
 8017624:	d11b      	bne.n	801765e <_free_r+0x6a>
 8017626:	4430      	add	r0, r6
 8017628:	b93a      	cbnz	r2, 801763a <_free_r+0x46>
 801762a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801762e:	1a9b      	subs	r3, r3, r2
 8017630:	4410      	add	r0, r2
 8017632:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8017636:	60ca      	str	r2, [r1, #12]
 8017638:	6091      	str	r1, [r2, #8]
 801763a:	f040 0201 	orr.w	r2, r0, #1
 801763e:	605a      	str	r2, [r3, #4]
 8017640:	60ab      	str	r3, [r5, #8]
 8017642:	4b47      	ldr	r3, [pc, #284]	; (8017760 <_free_r+0x16c>)
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	4283      	cmp	r3, r0
 8017648:	d804      	bhi.n	8017654 <_free_r+0x60>
 801764a:	4b46      	ldr	r3, [pc, #280]	; (8017764 <_free_r+0x170>)
 801764c:	4620      	mov	r0, r4
 801764e:	6819      	ldr	r1, [r3, #0]
 8017650:	f7ff ff7c 	bl	801754c <_malloc_trim_r>
 8017654:	4620      	mov	r0, r4
 8017656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801765a:	f7fd baab 	b.w	8014bb4 <__malloc_unlock>
 801765e:	607e      	str	r6, [r7, #4]
 8017660:	2a00      	cmp	r2, #0
 8017662:	d139      	bne.n	80176d8 <_free_r+0xe4>
 8017664:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8017668:	1a5b      	subs	r3, r3, r1
 801766a:	4408      	add	r0, r1
 801766c:	6899      	ldr	r1, [r3, #8]
 801766e:	f105 0c08 	add.w	ip, r5, #8
 8017672:	4561      	cmp	r1, ip
 8017674:	d032      	beq.n	80176dc <_free_r+0xe8>
 8017676:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801767a:	f8c1 c00c 	str.w	ip, [r1, #12]
 801767e:	f8cc 1008 	str.w	r1, [ip, #8]
 8017682:	19b9      	adds	r1, r7, r6
 8017684:	6849      	ldr	r1, [r1, #4]
 8017686:	07c9      	lsls	r1, r1, #31
 8017688:	d40a      	bmi.n	80176a0 <_free_r+0xac>
 801768a:	4430      	add	r0, r6
 801768c:	68b9      	ldr	r1, [r7, #8]
 801768e:	bb3a      	cbnz	r2, 80176e0 <_free_r+0xec>
 8017690:	4e35      	ldr	r6, [pc, #212]	; (8017768 <_free_r+0x174>)
 8017692:	42b1      	cmp	r1, r6
 8017694:	d124      	bne.n	80176e0 <_free_r+0xec>
 8017696:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801769a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801769e:	2201      	movs	r2, #1
 80176a0:	f040 0101 	orr.w	r1, r0, #1
 80176a4:	6059      	str	r1, [r3, #4]
 80176a6:	5018      	str	r0, [r3, r0]
 80176a8:	2a00      	cmp	r2, #0
 80176aa:	d1d3      	bne.n	8017654 <_free_r+0x60>
 80176ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80176b0:	d21a      	bcs.n	80176e8 <_free_r+0xf4>
 80176b2:	08c0      	lsrs	r0, r0, #3
 80176b4:	1081      	asrs	r1, r0, #2
 80176b6:	2201      	movs	r2, #1
 80176b8:	408a      	lsls	r2, r1
 80176ba:	6869      	ldr	r1, [r5, #4]
 80176bc:	3001      	adds	r0, #1
 80176be:	430a      	orrs	r2, r1
 80176c0:	606a      	str	r2, [r5, #4]
 80176c2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80176c6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80176ca:	3a08      	subs	r2, #8
 80176cc:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80176d0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80176d4:	60cb      	str	r3, [r1, #12]
 80176d6:	e7bd      	b.n	8017654 <_free_r+0x60>
 80176d8:	2200      	movs	r2, #0
 80176da:	e7d2      	b.n	8017682 <_free_r+0x8e>
 80176dc:	2201      	movs	r2, #1
 80176de:	e7d0      	b.n	8017682 <_free_r+0x8e>
 80176e0:	68fe      	ldr	r6, [r7, #12]
 80176e2:	60ce      	str	r6, [r1, #12]
 80176e4:	60b1      	str	r1, [r6, #8]
 80176e6:	e7db      	b.n	80176a0 <_free_r+0xac>
 80176e8:	0a42      	lsrs	r2, r0, #9
 80176ea:	2a04      	cmp	r2, #4
 80176ec:	d813      	bhi.n	8017716 <_free_r+0x122>
 80176ee:	0982      	lsrs	r2, r0, #6
 80176f0:	3238      	adds	r2, #56	; 0x38
 80176f2:	1c51      	adds	r1, r2, #1
 80176f4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80176f8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80176fc:	428e      	cmp	r6, r1
 80176fe:	d124      	bne.n	801774a <_free_r+0x156>
 8017700:	2001      	movs	r0, #1
 8017702:	1092      	asrs	r2, r2, #2
 8017704:	fa00 f202 	lsl.w	r2, r0, r2
 8017708:	6868      	ldr	r0, [r5, #4]
 801770a:	4302      	orrs	r2, r0
 801770c:	606a      	str	r2, [r5, #4]
 801770e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8017712:	60b3      	str	r3, [r6, #8]
 8017714:	e7de      	b.n	80176d4 <_free_r+0xe0>
 8017716:	2a14      	cmp	r2, #20
 8017718:	d801      	bhi.n	801771e <_free_r+0x12a>
 801771a:	325b      	adds	r2, #91	; 0x5b
 801771c:	e7e9      	b.n	80176f2 <_free_r+0xfe>
 801771e:	2a54      	cmp	r2, #84	; 0x54
 8017720:	d802      	bhi.n	8017728 <_free_r+0x134>
 8017722:	0b02      	lsrs	r2, r0, #12
 8017724:	326e      	adds	r2, #110	; 0x6e
 8017726:	e7e4      	b.n	80176f2 <_free_r+0xfe>
 8017728:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801772c:	d802      	bhi.n	8017734 <_free_r+0x140>
 801772e:	0bc2      	lsrs	r2, r0, #15
 8017730:	3277      	adds	r2, #119	; 0x77
 8017732:	e7de      	b.n	80176f2 <_free_r+0xfe>
 8017734:	f240 5154 	movw	r1, #1364	; 0x554
 8017738:	428a      	cmp	r2, r1
 801773a:	bf9a      	itte	ls
 801773c:	0c82      	lsrls	r2, r0, #18
 801773e:	327c      	addls	r2, #124	; 0x7c
 8017740:	227e      	movhi	r2, #126	; 0x7e
 8017742:	e7d6      	b.n	80176f2 <_free_r+0xfe>
 8017744:	6889      	ldr	r1, [r1, #8]
 8017746:	428e      	cmp	r6, r1
 8017748:	d004      	beq.n	8017754 <_free_r+0x160>
 801774a:	684a      	ldr	r2, [r1, #4]
 801774c:	f022 0203 	bic.w	r2, r2, #3
 8017750:	4282      	cmp	r2, r0
 8017752:	d8f7      	bhi.n	8017744 <_free_r+0x150>
 8017754:	68ce      	ldr	r6, [r1, #12]
 8017756:	e7da      	b.n	801770e <_free_r+0x11a>
 8017758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801775c:	20000460 	.word	0x20000460
 8017760:	2000086c 	.word	0x2000086c
 8017764:	2003302c 	.word	0x2003302c
 8017768:	20000468 	.word	0x20000468

0801776c <_fwalk_reent>:
 801776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017770:	4680      	mov	r8, r0
 8017772:	4689      	mov	r9, r1
 8017774:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8017778:	2600      	movs	r6, #0
 801777a:	b914      	cbnz	r4, 8017782 <_fwalk_reent+0x16>
 801777c:	4630      	mov	r0, r6
 801777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017782:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017786:	3f01      	subs	r7, #1
 8017788:	d501      	bpl.n	801778e <_fwalk_reent+0x22>
 801778a:	6824      	ldr	r4, [r4, #0]
 801778c:	e7f5      	b.n	801777a <_fwalk_reent+0xe>
 801778e:	89ab      	ldrh	r3, [r5, #12]
 8017790:	2b01      	cmp	r3, #1
 8017792:	d907      	bls.n	80177a4 <_fwalk_reent+0x38>
 8017794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017798:	3301      	adds	r3, #1
 801779a:	d003      	beq.n	80177a4 <_fwalk_reent+0x38>
 801779c:	4629      	mov	r1, r5
 801779e:	4640      	mov	r0, r8
 80177a0:	47c8      	blx	r9
 80177a2:	4306      	orrs	r6, r0
 80177a4:	3568      	adds	r5, #104	; 0x68
 80177a6:	e7ee      	b.n	8017786 <_fwalk_reent+0x1a>

080177a8 <_localeconv_r>:
 80177a8:	4b04      	ldr	r3, [pc, #16]	; (80177bc <_localeconv_r+0x14>)
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80177ae:	4b04      	ldr	r3, [pc, #16]	; (80177c0 <_localeconv_r+0x18>)
 80177b0:	2800      	cmp	r0, #0
 80177b2:	bf08      	it	eq
 80177b4:	4618      	moveq	r0, r3
 80177b6:	30f0      	adds	r0, #240	; 0xf0
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop
 80177bc:	20000030 	.word	0x20000030
 80177c0:	20000874 	.word	0x20000874

080177c4 <__swhatbuf_r>:
 80177c4:	b570      	push	{r4, r5, r6, lr}
 80177c6:	460e      	mov	r6, r1
 80177c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177cc:	2900      	cmp	r1, #0
 80177ce:	b096      	sub	sp, #88	; 0x58
 80177d0:	4614      	mov	r4, r2
 80177d2:	461d      	mov	r5, r3
 80177d4:	da09      	bge.n	80177ea <__swhatbuf_r+0x26>
 80177d6:	89b3      	ldrh	r3, [r6, #12]
 80177d8:	2200      	movs	r2, #0
 80177da:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80177de:	602a      	str	r2, [r5, #0]
 80177e0:	d116      	bne.n	8017810 <__swhatbuf_r+0x4c>
 80177e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177e6:	6023      	str	r3, [r4, #0]
 80177e8:	e015      	b.n	8017816 <__swhatbuf_r+0x52>
 80177ea:	466a      	mov	r2, sp
 80177ec:	f000 fcf8 	bl	80181e0 <_fstat_r>
 80177f0:	2800      	cmp	r0, #0
 80177f2:	dbf0      	blt.n	80177d6 <__swhatbuf_r+0x12>
 80177f4:	9a01      	ldr	r2, [sp, #4]
 80177f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80177fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80177fe:	425a      	negs	r2, r3
 8017800:	415a      	adcs	r2, r3
 8017802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017806:	602a      	str	r2, [r5, #0]
 8017808:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801780c:	6023      	str	r3, [r4, #0]
 801780e:	e002      	b.n	8017816 <__swhatbuf_r+0x52>
 8017810:	2340      	movs	r3, #64	; 0x40
 8017812:	6023      	str	r3, [r4, #0]
 8017814:	4610      	mov	r0, r2
 8017816:	b016      	add	sp, #88	; 0x58
 8017818:	bd70      	pop	{r4, r5, r6, pc}
	...

0801781c <__smakebuf_r>:
 801781c:	898b      	ldrh	r3, [r1, #12]
 801781e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017820:	079d      	lsls	r5, r3, #30
 8017822:	4606      	mov	r6, r0
 8017824:	460c      	mov	r4, r1
 8017826:	d507      	bpl.n	8017838 <__smakebuf_r+0x1c>
 8017828:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	6123      	str	r3, [r4, #16]
 8017830:	2301      	movs	r3, #1
 8017832:	6163      	str	r3, [r4, #20]
 8017834:	b002      	add	sp, #8
 8017836:	bd70      	pop	{r4, r5, r6, pc}
 8017838:	ab01      	add	r3, sp, #4
 801783a:	466a      	mov	r2, sp
 801783c:	f7ff ffc2 	bl	80177c4 <__swhatbuf_r>
 8017840:	9900      	ldr	r1, [sp, #0]
 8017842:	4605      	mov	r5, r0
 8017844:	4630      	mov	r0, r6
 8017846:	f7fc ff3d 	bl	80146c4 <_malloc_r>
 801784a:	b948      	cbnz	r0, 8017860 <__smakebuf_r+0x44>
 801784c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017850:	059a      	lsls	r2, r3, #22
 8017852:	d4ef      	bmi.n	8017834 <__smakebuf_r+0x18>
 8017854:	f023 0303 	bic.w	r3, r3, #3
 8017858:	f043 0302 	orr.w	r3, r3, #2
 801785c:	81a3      	strh	r3, [r4, #12]
 801785e:	e7e3      	b.n	8017828 <__smakebuf_r+0xc>
 8017860:	4b0d      	ldr	r3, [pc, #52]	; (8017898 <__smakebuf_r+0x7c>)
 8017862:	63f3      	str	r3, [r6, #60]	; 0x3c
 8017864:	89a3      	ldrh	r3, [r4, #12]
 8017866:	6020      	str	r0, [r4, #0]
 8017868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801786c:	81a3      	strh	r3, [r4, #12]
 801786e:	9b00      	ldr	r3, [sp, #0]
 8017870:	6163      	str	r3, [r4, #20]
 8017872:	9b01      	ldr	r3, [sp, #4]
 8017874:	6120      	str	r0, [r4, #16]
 8017876:	b15b      	cbz	r3, 8017890 <__smakebuf_r+0x74>
 8017878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801787c:	4630      	mov	r0, r6
 801787e:	f000 fcc1 	bl	8018204 <_isatty_r>
 8017882:	b128      	cbz	r0, 8017890 <__smakebuf_r+0x74>
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	f023 0303 	bic.w	r3, r3, #3
 801788a:	f043 0301 	orr.w	r3, r3, #1
 801788e:	81a3      	strh	r3, [r4, #12]
 8017890:	89a3      	ldrh	r3, [r4, #12]
 8017892:	431d      	orrs	r5, r3
 8017894:	81a5      	strh	r5, [r4, #12]
 8017896:	e7cd      	b.n	8017834 <__smakebuf_r+0x18>
 8017898:	08017499 	.word	0x08017499

0801789c <_Balloc>:
 801789c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801789e:	b570      	push	{r4, r5, r6, lr}
 80178a0:	4605      	mov	r5, r0
 80178a2:	460c      	mov	r4, r1
 80178a4:	b17b      	cbz	r3, 80178c6 <_Balloc+0x2a>
 80178a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80178a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80178ac:	b9a0      	cbnz	r0, 80178d8 <_Balloc+0x3c>
 80178ae:	2101      	movs	r1, #1
 80178b0:	fa01 f604 	lsl.w	r6, r1, r4
 80178b4:	1d72      	adds	r2, r6, #5
 80178b6:	0092      	lsls	r2, r2, #2
 80178b8:	4628      	mov	r0, r5
 80178ba:	f000 fbfb 	bl	80180b4 <_calloc_r>
 80178be:	b148      	cbz	r0, 80178d4 <_Balloc+0x38>
 80178c0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80178c4:	e00b      	b.n	80178de <_Balloc+0x42>
 80178c6:	2221      	movs	r2, #33	; 0x21
 80178c8:	2104      	movs	r1, #4
 80178ca:	f000 fbf3 	bl	80180b4 <_calloc_r>
 80178ce:	64e8      	str	r0, [r5, #76]	; 0x4c
 80178d0:	2800      	cmp	r0, #0
 80178d2:	d1e8      	bne.n	80178a6 <_Balloc+0xa>
 80178d4:	2000      	movs	r0, #0
 80178d6:	bd70      	pop	{r4, r5, r6, pc}
 80178d8:	6802      	ldr	r2, [r0, #0]
 80178da:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80178de:	2300      	movs	r3, #0
 80178e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80178e4:	e7f7      	b.n	80178d6 <_Balloc+0x3a>

080178e6 <_Bfree>:
 80178e6:	b131      	cbz	r1, 80178f6 <_Bfree+0x10>
 80178e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80178ea:	684a      	ldr	r2, [r1, #4]
 80178ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80178f0:	6008      	str	r0, [r1, #0]
 80178f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80178f6:	4770      	bx	lr

080178f8 <__multadd>:
 80178f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178fc:	690d      	ldr	r5, [r1, #16]
 80178fe:	461f      	mov	r7, r3
 8017900:	4606      	mov	r6, r0
 8017902:	460c      	mov	r4, r1
 8017904:	f101 0c14 	add.w	ip, r1, #20
 8017908:	2300      	movs	r3, #0
 801790a:	f8dc 0000 	ldr.w	r0, [ip]
 801790e:	b281      	uxth	r1, r0
 8017910:	fb02 7101 	mla	r1, r2, r1, r7
 8017914:	0c0f      	lsrs	r7, r1, #16
 8017916:	0c00      	lsrs	r0, r0, #16
 8017918:	fb02 7000 	mla	r0, r2, r0, r7
 801791c:	b289      	uxth	r1, r1
 801791e:	3301      	adds	r3, #1
 8017920:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017924:	429d      	cmp	r5, r3
 8017926:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801792a:	f84c 1b04 	str.w	r1, [ip], #4
 801792e:	dcec      	bgt.n	801790a <__multadd+0x12>
 8017930:	b1d7      	cbz	r7, 8017968 <__multadd+0x70>
 8017932:	68a3      	ldr	r3, [r4, #8]
 8017934:	42ab      	cmp	r3, r5
 8017936:	dc12      	bgt.n	801795e <__multadd+0x66>
 8017938:	6861      	ldr	r1, [r4, #4]
 801793a:	4630      	mov	r0, r6
 801793c:	3101      	adds	r1, #1
 801793e:	f7ff ffad 	bl	801789c <_Balloc>
 8017942:	6922      	ldr	r2, [r4, #16]
 8017944:	3202      	adds	r2, #2
 8017946:	f104 010c 	add.w	r1, r4, #12
 801794a:	4680      	mov	r8, r0
 801794c:	0092      	lsls	r2, r2, #2
 801794e:	300c      	adds	r0, #12
 8017950:	f7fd f8fd 	bl	8014b4e <memcpy>
 8017954:	4621      	mov	r1, r4
 8017956:	4630      	mov	r0, r6
 8017958:	f7ff ffc5 	bl	80178e6 <_Bfree>
 801795c:	4644      	mov	r4, r8
 801795e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017962:	3501      	adds	r5, #1
 8017964:	615f      	str	r7, [r3, #20]
 8017966:	6125      	str	r5, [r4, #16]
 8017968:	4620      	mov	r0, r4
 801796a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801796e <__hi0bits>:
 801796e:	0c02      	lsrs	r2, r0, #16
 8017970:	0412      	lsls	r2, r2, #16
 8017972:	4603      	mov	r3, r0
 8017974:	b9b2      	cbnz	r2, 80179a4 <__hi0bits+0x36>
 8017976:	0403      	lsls	r3, r0, #16
 8017978:	2010      	movs	r0, #16
 801797a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801797e:	bf04      	itt	eq
 8017980:	021b      	lsleq	r3, r3, #8
 8017982:	3008      	addeq	r0, #8
 8017984:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017988:	bf04      	itt	eq
 801798a:	011b      	lsleq	r3, r3, #4
 801798c:	3004      	addeq	r0, #4
 801798e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017992:	bf04      	itt	eq
 8017994:	009b      	lsleq	r3, r3, #2
 8017996:	3002      	addeq	r0, #2
 8017998:	2b00      	cmp	r3, #0
 801799a:	db06      	blt.n	80179aa <__hi0bits+0x3c>
 801799c:	005b      	lsls	r3, r3, #1
 801799e:	d503      	bpl.n	80179a8 <__hi0bits+0x3a>
 80179a0:	3001      	adds	r0, #1
 80179a2:	4770      	bx	lr
 80179a4:	2000      	movs	r0, #0
 80179a6:	e7e8      	b.n	801797a <__hi0bits+0xc>
 80179a8:	2020      	movs	r0, #32
 80179aa:	4770      	bx	lr

080179ac <__lo0bits>:
 80179ac:	6803      	ldr	r3, [r0, #0]
 80179ae:	f013 0207 	ands.w	r2, r3, #7
 80179b2:	4601      	mov	r1, r0
 80179b4:	d00b      	beq.n	80179ce <__lo0bits+0x22>
 80179b6:	07da      	lsls	r2, r3, #31
 80179b8:	d423      	bmi.n	8017a02 <__lo0bits+0x56>
 80179ba:	0798      	lsls	r0, r3, #30
 80179bc:	bf49      	itett	mi
 80179be:	085b      	lsrmi	r3, r3, #1
 80179c0:	089b      	lsrpl	r3, r3, #2
 80179c2:	2001      	movmi	r0, #1
 80179c4:	600b      	strmi	r3, [r1, #0]
 80179c6:	bf5c      	itt	pl
 80179c8:	600b      	strpl	r3, [r1, #0]
 80179ca:	2002      	movpl	r0, #2
 80179cc:	4770      	bx	lr
 80179ce:	b298      	uxth	r0, r3
 80179d0:	b9a8      	cbnz	r0, 80179fe <__lo0bits+0x52>
 80179d2:	0c1b      	lsrs	r3, r3, #16
 80179d4:	2010      	movs	r0, #16
 80179d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80179da:	bf04      	itt	eq
 80179dc:	0a1b      	lsreq	r3, r3, #8
 80179de:	3008      	addeq	r0, #8
 80179e0:	071a      	lsls	r2, r3, #28
 80179e2:	bf04      	itt	eq
 80179e4:	091b      	lsreq	r3, r3, #4
 80179e6:	3004      	addeq	r0, #4
 80179e8:	079a      	lsls	r2, r3, #30
 80179ea:	bf04      	itt	eq
 80179ec:	089b      	lsreq	r3, r3, #2
 80179ee:	3002      	addeq	r0, #2
 80179f0:	07da      	lsls	r2, r3, #31
 80179f2:	d402      	bmi.n	80179fa <__lo0bits+0x4e>
 80179f4:	085b      	lsrs	r3, r3, #1
 80179f6:	d006      	beq.n	8017a06 <__lo0bits+0x5a>
 80179f8:	3001      	adds	r0, #1
 80179fa:	600b      	str	r3, [r1, #0]
 80179fc:	4770      	bx	lr
 80179fe:	4610      	mov	r0, r2
 8017a00:	e7e9      	b.n	80179d6 <__lo0bits+0x2a>
 8017a02:	2000      	movs	r0, #0
 8017a04:	4770      	bx	lr
 8017a06:	2020      	movs	r0, #32
 8017a08:	4770      	bx	lr

08017a0a <__i2b>:
 8017a0a:	b510      	push	{r4, lr}
 8017a0c:	460c      	mov	r4, r1
 8017a0e:	2101      	movs	r1, #1
 8017a10:	f7ff ff44 	bl	801789c <_Balloc>
 8017a14:	2201      	movs	r2, #1
 8017a16:	6144      	str	r4, [r0, #20]
 8017a18:	6102      	str	r2, [r0, #16]
 8017a1a:	bd10      	pop	{r4, pc}

08017a1c <__multiply>:
 8017a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a20:	4614      	mov	r4, r2
 8017a22:	690a      	ldr	r2, [r1, #16]
 8017a24:	6923      	ldr	r3, [r4, #16]
 8017a26:	429a      	cmp	r2, r3
 8017a28:	bfb8      	it	lt
 8017a2a:	460b      	movlt	r3, r1
 8017a2c:	4688      	mov	r8, r1
 8017a2e:	bfbc      	itt	lt
 8017a30:	46a0      	movlt	r8, r4
 8017a32:	461c      	movlt	r4, r3
 8017a34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017a38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a44:	eb07 0609 	add.w	r6, r7, r9
 8017a48:	42b3      	cmp	r3, r6
 8017a4a:	bfb8      	it	lt
 8017a4c:	3101      	addlt	r1, #1
 8017a4e:	f7ff ff25 	bl	801789c <_Balloc>
 8017a52:	f100 0514 	add.w	r5, r0, #20
 8017a56:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017a5a:	462b      	mov	r3, r5
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	4573      	cmp	r3, lr
 8017a60:	d316      	bcc.n	8017a90 <__multiply+0x74>
 8017a62:	f104 0214 	add.w	r2, r4, #20
 8017a66:	f108 0114 	add.w	r1, r8, #20
 8017a6a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017a6e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017a72:	9300      	str	r3, [sp, #0]
 8017a74:	9b00      	ldr	r3, [sp, #0]
 8017a76:	9201      	str	r2, [sp, #4]
 8017a78:	4293      	cmp	r3, r2
 8017a7a:	d80c      	bhi.n	8017a96 <__multiply+0x7a>
 8017a7c:	2e00      	cmp	r6, #0
 8017a7e:	dd03      	ble.n	8017a88 <__multiply+0x6c>
 8017a80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d05d      	beq.n	8017b44 <__multiply+0x128>
 8017a88:	6106      	str	r6, [r0, #16]
 8017a8a:	b003      	add	sp, #12
 8017a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a90:	f843 2b04 	str.w	r2, [r3], #4
 8017a94:	e7e3      	b.n	8017a5e <__multiply+0x42>
 8017a96:	f8b2 b000 	ldrh.w	fp, [r2]
 8017a9a:	f1bb 0f00 	cmp.w	fp, #0
 8017a9e:	d023      	beq.n	8017ae8 <__multiply+0xcc>
 8017aa0:	4689      	mov	r9, r1
 8017aa2:	46ac      	mov	ip, r5
 8017aa4:	f04f 0800 	mov.w	r8, #0
 8017aa8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017aac:	f8dc a000 	ldr.w	sl, [ip]
 8017ab0:	b2a3      	uxth	r3, r4
 8017ab2:	fa1f fa8a 	uxth.w	sl, sl
 8017ab6:	fb0b a303 	mla	r3, fp, r3, sl
 8017aba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017abe:	f8dc 4000 	ldr.w	r4, [ip]
 8017ac2:	4443      	add	r3, r8
 8017ac4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017ac8:	fb0b 840a 	mla	r4, fp, sl, r8
 8017acc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017ad0:	46e2      	mov	sl, ip
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017ad8:	454f      	cmp	r7, r9
 8017ada:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017ade:	f84a 3b04 	str.w	r3, [sl], #4
 8017ae2:	d82b      	bhi.n	8017b3c <__multiply+0x120>
 8017ae4:	f8cc 8004 	str.w	r8, [ip, #4]
 8017ae8:	9b01      	ldr	r3, [sp, #4]
 8017aea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017aee:	3204      	adds	r2, #4
 8017af0:	f1ba 0f00 	cmp.w	sl, #0
 8017af4:	d020      	beq.n	8017b38 <__multiply+0x11c>
 8017af6:	682b      	ldr	r3, [r5, #0]
 8017af8:	4689      	mov	r9, r1
 8017afa:	46a8      	mov	r8, r5
 8017afc:	f04f 0b00 	mov.w	fp, #0
 8017b00:	f8b9 c000 	ldrh.w	ip, [r9]
 8017b04:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017b08:	fb0a 440c 	mla	r4, sl, ip, r4
 8017b0c:	445c      	add	r4, fp
 8017b0e:	46c4      	mov	ip, r8
 8017b10:	b29b      	uxth	r3, r3
 8017b12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b16:	f84c 3b04 	str.w	r3, [ip], #4
 8017b1a:	f859 3b04 	ldr.w	r3, [r9], #4
 8017b1e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017b22:	0c1b      	lsrs	r3, r3, #16
 8017b24:	fb0a b303 	mla	r3, sl, r3, fp
 8017b28:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017b2c:	454f      	cmp	r7, r9
 8017b2e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017b32:	d805      	bhi.n	8017b40 <__multiply+0x124>
 8017b34:	f8c8 3004 	str.w	r3, [r8, #4]
 8017b38:	3504      	adds	r5, #4
 8017b3a:	e79b      	b.n	8017a74 <__multiply+0x58>
 8017b3c:	46d4      	mov	ip, sl
 8017b3e:	e7b3      	b.n	8017aa8 <__multiply+0x8c>
 8017b40:	46e0      	mov	r8, ip
 8017b42:	e7dd      	b.n	8017b00 <__multiply+0xe4>
 8017b44:	3e01      	subs	r6, #1
 8017b46:	e799      	b.n	8017a7c <__multiply+0x60>

08017b48 <__pow5mult>:
 8017b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b4c:	4615      	mov	r5, r2
 8017b4e:	f012 0203 	ands.w	r2, r2, #3
 8017b52:	4606      	mov	r6, r0
 8017b54:	460f      	mov	r7, r1
 8017b56:	d007      	beq.n	8017b68 <__pow5mult+0x20>
 8017b58:	3a01      	subs	r2, #1
 8017b5a:	4c1a      	ldr	r4, [pc, #104]	; (8017bc4 <__pow5mult+0x7c>)
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b62:	f7ff fec9 	bl	80178f8 <__multadd>
 8017b66:	4607      	mov	r7, r0
 8017b68:	10ad      	asrs	r5, r5, #2
 8017b6a:	d027      	beq.n	8017bbc <__pow5mult+0x74>
 8017b6c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8017b6e:	b944      	cbnz	r4, 8017b82 <__pow5mult+0x3a>
 8017b70:	f240 2171 	movw	r1, #625	; 0x271
 8017b74:	4630      	mov	r0, r6
 8017b76:	f7ff ff48 	bl	8017a0a <__i2b>
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	64b0      	str	r0, [r6, #72]	; 0x48
 8017b7e:	4604      	mov	r4, r0
 8017b80:	6003      	str	r3, [r0, #0]
 8017b82:	f04f 0800 	mov.w	r8, #0
 8017b86:	07eb      	lsls	r3, r5, #31
 8017b88:	d50a      	bpl.n	8017ba0 <__pow5mult+0x58>
 8017b8a:	4639      	mov	r1, r7
 8017b8c:	4622      	mov	r2, r4
 8017b8e:	4630      	mov	r0, r6
 8017b90:	f7ff ff44 	bl	8017a1c <__multiply>
 8017b94:	4639      	mov	r1, r7
 8017b96:	4681      	mov	r9, r0
 8017b98:	4630      	mov	r0, r6
 8017b9a:	f7ff fea4 	bl	80178e6 <_Bfree>
 8017b9e:	464f      	mov	r7, r9
 8017ba0:	106d      	asrs	r5, r5, #1
 8017ba2:	d00b      	beq.n	8017bbc <__pow5mult+0x74>
 8017ba4:	6820      	ldr	r0, [r4, #0]
 8017ba6:	b938      	cbnz	r0, 8017bb8 <__pow5mult+0x70>
 8017ba8:	4622      	mov	r2, r4
 8017baa:	4621      	mov	r1, r4
 8017bac:	4630      	mov	r0, r6
 8017bae:	f7ff ff35 	bl	8017a1c <__multiply>
 8017bb2:	6020      	str	r0, [r4, #0]
 8017bb4:	f8c0 8000 	str.w	r8, [r0]
 8017bb8:	4604      	mov	r4, r0
 8017bba:	e7e4      	b.n	8017b86 <__pow5mult+0x3e>
 8017bbc:	4638      	mov	r0, r7
 8017bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bc2:	bf00      	nop
 8017bc4:	0801b850 	.word	0x0801b850

08017bc8 <__lshift>:
 8017bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bcc:	460c      	mov	r4, r1
 8017bce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017bd2:	6923      	ldr	r3, [r4, #16]
 8017bd4:	6849      	ldr	r1, [r1, #4]
 8017bd6:	eb0a 0903 	add.w	r9, sl, r3
 8017bda:	68a3      	ldr	r3, [r4, #8]
 8017bdc:	4607      	mov	r7, r0
 8017bde:	4616      	mov	r6, r2
 8017be0:	f109 0501 	add.w	r5, r9, #1
 8017be4:	42ab      	cmp	r3, r5
 8017be6:	db32      	blt.n	8017c4e <__lshift+0x86>
 8017be8:	4638      	mov	r0, r7
 8017bea:	f7ff fe57 	bl	801789c <_Balloc>
 8017bee:	2300      	movs	r3, #0
 8017bf0:	4680      	mov	r8, r0
 8017bf2:	f100 0114 	add.w	r1, r0, #20
 8017bf6:	461a      	mov	r2, r3
 8017bf8:	4553      	cmp	r3, sl
 8017bfa:	db2b      	blt.n	8017c54 <__lshift+0x8c>
 8017bfc:	6920      	ldr	r0, [r4, #16]
 8017bfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017c02:	f104 0314 	add.w	r3, r4, #20
 8017c06:	f016 021f 	ands.w	r2, r6, #31
 8017c0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017c12:	d025      	beq.n	8017c60 <__lshift+0x98>
 8017c14:	f1c2 0e20 	rsb	lr, r2, #32
 8017c18:	2000      	movs	r0, #0
 8017c1a:	681e      	ldr	r6, [r3, #0]
 8017c1c:	468a      	mov	sl, r1
 8017c1e:	4096      	lsls	r6, r2
 8017c20:	4330      	orrs	r0, r6
 8017c22:	f84a 0b04 	str.w	r0, [sl], #4
 8017c26:	f853 0b04 	ldr.w	r0, [r3], #4
 8017c2a:	459c      	cmp	ip, r3
 8017c2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8017c30:	d814      	bhi.n	8017c5c <__lshift+0x94>
 8017c32:	6048      	str	r0, [r1, #4]
 8017c34:	b108      	cbz	r0, 8017c3a <__lshift+0x72>
 8017c36:	f109 0502 	add.w	r5, r9, #2
 8017c3a:	3d01      	subs	r5, #1
 8017c3c:	4638      	mov	r0, r7
 8017c3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8017c42:	4621      	mov	r1, r4
 8017c44:	f7ff fe4f 	bl	80178e6 <_Bfree>
 8017c48:	4640      	mov	r0, r8
 8017c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c4e:	3101      	adds	r1, #1
 8017c50:	005b      	lsls	r3, r3, #1
 8017c52:	e7c7      	b.n	8017be4 <__lshift+0x1c>
 8017c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	e7cd      	b.n	8017bf8 <__lshift+0x30>
 8017c5c:	4651      	mov	r1, sl
 8017c5e:	e7dc      	b.n	8017c1a <__lshift+0x52>
 8017c60:	3904      	subs	r1, #4
 8017c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c66:	f841 2f04 	str.w	r2, [r1, #4]!
 8017c6a:	459c      	cmp	ip, r3
 8017c6c:	d8f9      	bhi.n	8017c62 <__lshift+0x9a>
 8017c6e:	e7e4      	b.n	8017c3a <__lshift+0x72>

08017c70 <__mcmp>:
 8017c70:	6903      	ldr	r3, [r0, #16]
 8017c72:	690a      	ldr	r2, [r1, #16]
 8017c74:	1a9b      	subs	r3, r3, r2
 8017c76:	b530      	push	{r4, r5, lr}
 8017c78:	d10c      	bne.n	8017c94 <__mcmp+0x24>
 8017c7a:	0092      	lsls	r2, r2, #2
 8017c7c:	3014      	adds	r0, #20
 8017c7e:	3114      	adds	r1, #20
 8017c80:	1884      	adds	r4, r0, r2
 8017c82:	4411      	add	r1, r2
 8017c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017c8c:	4295      	cmp	r5, r2
 8017c8e:	d003      	beq.n	8017c98 <__mcmp+0x28>
 8017c90:	d305      	bcc.n	8017c9e <__mcmp+0x2e>
 8017c92:	2301      	movs	r3, #1
 8017c94:	4618      	mov	r0, r3
 8017c96:	bd30      	pop	{r4, r5, pc}
 8017c98:	42a0      	cmp	r0, r4
 8017c9a:	d3f3      	bcc.n	8017c84 <__mcmp+0x14>
 8017c9c:	e7fa      	b.n	8017c94 <__mcmp+0x24>
 8017c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ca2:	e7f7      	b.n	8017c94 <__mcmp+0x24>

08017ca4 <__mdiff>:
 8017ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca8:	460d      	mov	r5, r1
 8017caa:	4607      	mov	r7, r0
 8017cac:	4611      	mov	r1, r2
 8017cae:	4628      	mov	r0, r5
 8017cb0:	4614      	mov	r4, r2
 8017cb2:	f7ff ffdd 	bl	8017c70 <__mcmp>
 8017cb6:	1e06      	subs	r6, r0, #0
 8017cb8:	d108      	bne.n	8017ccc <__mdiff+0x28>
 8017cba:	4631      	mov	r1, r6
 8017cbc:	4638      	mov	r0, r7
 8017cbe:	f7ff fded 	bl	801789c <_Balloc>
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ccc:	bfa4      	itt	ge
 8017cce:	4623      	movge	r3, r4
 8017cd0:	462c      	movge	r4, r5
 8017cd2:	4638      	mov	r0, r7
 8017cd4:	6861      	ldr	r1, [r4, #4]
 8017cd6:	bfa6      	itte	ge
 8017cd8:	461d      	movge	r5, r3
 8017cda:	2600      	movge	r6, #0
 8017cdc:	2601      	movlt	r6, #1
 8017cde:	f7ff fddd 	bl	801789c <_Balloc>
 8017ce2:	692b      	ldr	r3, [r5, #16]
 8017ce4:	60c6      	str	r6, [r0, #12]
 8017ce6:	6926      	ldr	r6, [r4, #16]
 8017ce8:	f105 0914 	add.w	r9, r5, #20
 8017cec:	f104 0214 	add.w	r2, r4, #20
 8017cf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017cf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017cf8:	f100 0514 	add.w	r5, r0, #20
 8017cfc:	f04f 0e00 	mov.w	lr, #0
 8017d00:	f852 ab04 	ldr.w	sl, [r2], #4
 8017d04:	f859 4b04 	ldr.w	r4, [r9], #4
 8017d08:	fa1e f18a 	uxtah	r1, lr, sl
 8017d0c:	b2a3      	uxth	r3, r4
 8017d0e:	1ac9      	subs	r1, r1, r3
 8017d10:	0c23      	lsrs	r3, r4, #16
 8017d12:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017d16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017d1a:	b289      	uxth	r1, r1
 8017d1c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017d20:	45c8      	cmp	r8, r9
 8017d22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017d26:	4694      	mov	ip, r2
 8017d28:	f845 3b04 	str.w	r3, [r5], #4
 8017d2c:	d8e8      	bhi.n	8017d00 <__mdiff+0x5c>
 8017d2e:	45bc      	cmp	ip, r7
 8017d30:	d304      	bcc.n	8017d3c <__mdiff+0x98>
 8017d32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017d36:	b183      	cbz	r3, 8017d5a <__mdiff+0xb6>
 8017d38:	6106      	str	r6, [r0, #16]
 8017d3a:	e7c5      	b.n	8017cc8 <__mdiff+0x24>
 8017d3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017d40:	fa1e f381 	uxtah	r3, lr, r1
 8017d44:	141a      	asrs	r2, r3, #16
 8017d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d4a:	b29b      	uxth	r3, r3
 8017d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017d54:	f845 3b04 	str.w	r3, [r5], #4
 8017d58:	e7e9      	b.n	8017d2e <__mdiff+0x8a>
 8017d5a:	3e01      	subs	r6, #1
 8017d5c:	e7e9      	b.n	8017d32 <__mdiff+0x8e>

08017d5e <__d2b>:
 8017d5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d62:	460e      	mov	r6, r1
 8017d64:	2101      	movs	r1, #1
 8017d66:	ec59 8b10 	vmov	r8, r9, d0
 8017d6a:	4615      	mov	r5, r2
 8017d6c:	f7ff fd96 	bl	801789c <_Balloc>
 8017d70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017d74:	4607      	mov	r7, r0
 8017d76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d7a:	bb34      	cbnz	r4, 8017dca <__d2b+0x6c>
 8017d7c:	9301      	str	r3, [sp, #4]
 8017d7e:	f1b8 0300 	subs.w	r3, r8, #0
 8017d82:	d027      	beq.n	8017dd4 <__d2b+0x76>
 8017d84:	a802      	add	r0, sp, #8
 8017d86:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017d8a:	f7ff fe0f 	bl	80179ac <__lo0bits>
 8017d8e:	9900      	ldr	r1, [sp, #0]
 8017d90:	b1f0      	cbz	r0, 8017dd0 <__d2b+0x72>
 8017d92:	9a01      	ldr	r2, [sp, #4]
 8017d94:	f1c0 0320 	rsb	r3, r0, #32
 8017d98:	fa02 f303 	lsl.w	r3, r2, r3
 8017d9c:	430b      	orrs	r3, r1
 8017d9e:	40c2      	lsrs	r2, r0
 8017da0:	617b      	str	r3, [r7, #20]
 8017da2:	9201      	str	r2, [sp, #4]
 8017da4:	9b01      	ldr	r3, [sp, #4]
 8017da6:	61bb      	str	r3, [r7, #24]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	bf14      	ite	ne
 8017dac:	2102      	movne	r1, #2
 8017dae:	2101      	moveq	r1, #1
 8017db0:	6139      	str	r1, [r7, #16]
 8017db2:	b1c4      	cbz	r4, 8017de6 <__d2b+0x88>
 8017db4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017db8:	4404      	add	r4, r0
 8017dba:	6034      	str	r4, [r6, #0]
 8017dbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017dc0:	6028      	str	r0, [r5, #0]
 8017dc2:	4638      	mov	r0, r7
 8017dc4:	b003      	add	sp, #12
 8017dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017dce:	e7d5      	b.n	8017d7c <__d2b+0x1e>
 8017dd0:	6179      	str	r1, [r7, #20]
 8017dd2:	e7e7      	b.n	8017da4 <__d2b+0x46>
 8017dd4:	a801      	add	r0, sp, #4
 8017dd6:	f7ff fde9 	bl	80179ac <__lo0bits>
 8017dda:	9b01      	ldr	r3, [sp, #4]
 8017ddc:	617b      	str	r3, [r7, #20]
 8017dde:	2101      	movs	r1, #1
 8017de0:	6139      	str	r1, [r7, #16]
 8017de2:	3020      	adds	r0, #32
 8017de4:	e7e5      	b.n	8017db2 <__d2b+0x54>
 8017de6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017dea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017dee:	6030      	str	r0, [r6, #0]
 8017df0:	6918      	ldr	r0, [r3, #16]
 8017df2:	f7ff fdbc 	bl	801796e <__hi0bits>
 8017df6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017dfa:	e7e1      	b.n	8017dc0 <__d2b+0x62>

08017dfc <frexp>:
 8017dfc:	b570      	push	{r4, r5, r6, lr}
 8017dfe:	2100      	movs	r1, #0
 8017e00:	ec55 4b10 	vmov	r4, r5, d0
 8017e04:	6001      	str	r1, [r0, #0]
 8017e06:	4916      	ldr	r1, [pc, #88]	; (8017e60 <frexp+0x64>)
 8017e08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017e0c:	428b      	cmp	r3, r1
 8017e0e:	4606      	mov	r6, r0
 8017e10:	462a      	mov	r2, r5
 8017e12:	dc22      	bgt.n	8017e5a <frexp+0x5e>
 8017e14:	ee10 1a10 	vmov	r1, s0
 8017e18:	4319      	orrs	r1, r3
 8017e1a:	d01e      	beq.n	8017e5a <frexp+0x5e>
 8017e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017e20:	da0d      	bge.n	8017e3e <frexp+0x42>
 8017e22:	2200      	movs	r2, #0
 8017e24:	4b0f      	ldr	r3, [pc, #60]	; (8017e64 <frexp+0x68>)
 8017e26:	ee10 0a10 	vmov	r0, s0
 8017e2a:	4629      	mov	r1, r5
 8017e2c:	f7ef f97e 	bl	800712c <__aeabi_dmul>
 8017e30:	460a      	mov	r2, r1
 8017e32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017e36:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8017e3a:	4604      	mov	r4, r0
 8017e3c:	6031      	str	r1, [r6, #0]
 8017e3e:	6831      	ldr	r1, [r6, #0]
 8017e40:	151b      	asrs	r3, r3, #20
 8017e42:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017e46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017e4a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8017e4e:	440b      	add	r3, r1
 8017e50:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8017e54:	6033      	str	r3, [r6, #0]
 8017e56:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8017e5a:	ec45 4b10 	vmov	d0, r4, r5
 8017e5e:	bd70      	pop	{r4, r5, r6, pc}
 8017e60:	7fefffff 	.word	0x7fefffff
 8017e64:	43500000 	.word	0x43500000

08017e68 <__sread>:
 8017e68:	b510      	push	{r4, lr}
 8017e6a:	460c      	mov	r4, r1
 8017e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e70:	f000 f9fc 	bl	801826c <_read_r>
 8017e74:	2800      	cmp	r0, #0
 8017e76:	bfab      	itete	ge
 8017e78:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8017e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8017e7c:	181b      	addge	r3, r3, r0
 8017e7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017e82:	bfac      	ite	ge
 8017e84:	6523      	strge	r3, [r4, #80]	; 0x50
 8017e86:	81a3      	strhlt	r3, [r4, #12]
 8017e88:	bd10      	pop	{r4, pc}

08017e8a <__swrite>:
 8017e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e8e:	461f      	mov	r7, r3
 8017e90:	898b      	ldrh	r3, [r1, #12]
 8017e92:	05db      	lsls	r3, r3, #23
 8017e94:	4605      	mov	r5, r0
 8017e96:	460c      	mov	r4, r1
 8017e98:	4616      	mov	r6, r2
 8017e9a:	d505      	bpl.n	8017ea8 <__swrite+0x1e>
 8017e9c:	2302      	movs	r3, #2
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ea4:	f000 f9be 	bl	8018224 <_lseek_r>
 8017ea8:	89a3      	ldrh	r3, [r4, #12]
 8017eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017eae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	4632      	mov	r2, r6
 8017eb6:	463b      	mov	r3, r7
 8017eb8:	4628      	mov	r0, r5
 8017eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ebe:	f7fe bb5f 	b.w	8016580 <_write_r>

08017ec2 <__sseek>:
 8017ec2:	b510      	push	{r4, lr}
 8017ec4:	460c      	mov	r4, r1
 8017ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eca:	f000 f9ab 	bl	8018224 <_lseek_r>
 8017ece:	1c43      	adds	r3, r0, #1
 8017ed0:	89a3      	ldrh	r3, [r4, #12]
 8017ed2:	bf15      	itete	ne
 8017ed4:	6520      	strne	r0, [r4, #80]	; 0x50
 8017ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ede:	81a3      	strheq	r3, [r4, #12]
 8017ee0:	bf18      	it	ne
 8017ee2:	81a3      	strhne	r3, [r4, #12]
 8017ee4:	bd10      	pop	{r4, pc}

08017ee6 <__sclose>:
 8017ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eea:	f000 b911 	b.w	8018110 <_close_r>

08017eee <strncpy>:
 8017eee:	b570      	push	{r4, r5, r6, lr}
 8017ef0:	3901      	subs	r1, #1
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	b902      	cbnz	r2, 8017ef8 <strncpy+0xa>
 8017ef6:	bd70      	pop	{r4, r5, r6, pc}
 8017ef8:	4623      	mov	r3, r4
 8017efa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017efe:	f803 5b01 	strb.w	r5, [r3], #1
 8017f02:	1e56      	subs	r6, r2, #1
 8017f04:	b92d      	cbnz	r5, 8017f12 <strncpy+0x24>
 8017f06:	4414      	add	r4, r2
 8017f08:	42a3      	cmp	r3, r4
 8017f0a:	d0f4      	beq.n	8017ef6 <strncpy+0x8>
 8017f0c:	f803 5b01 	strb.w	r5, [r3], #1
 8017f10:	e7fa      	b.n	8017f08 <strncpy+0x1a>
 8017f12:	461c      	mov	r4, r3
 8017f14:	4632      	mov	r2, r6
 8017f16:	e7ed      	b.n	8017ef4 <strncpy+0x6>

08017f18 <__ssprint_r>:
 8017f18:	6893      	ldr	r3, [r2, #8]
 8017f1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f1e:	4681      	mov	r9, r0
 8017f20:	460c      	mov	r4, r1
 8017f22:	4616      	mov	r6, r2
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d05e      	beq.n	8017fe6 <__ssprint_r+0xce>
 8017f28:	f04f 0b00 	mov.w	fp, #0
 8017f2c:	f8d2 a000 	ldr.w	sl, [r2]
 8017f30:	465f      	mov	r7, fp
 8017f32:	b357      	cbz	r7, 8017f8a <__ssprint_r+0x72>
 8017f34:	68a3      	ldr	r3, [r4, #8]
 8017f36:	429f      	cmp	r7, r3
 8017f38:	d340      	bcc.n	8017fbc <__ssprint_r+0xa4>
 8017f3a:	89a2      	ldrh	r2, [r4, #12]
 8017f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f40:	d03c      	beq.n	8017fbc <__ssprint_r+0xa4>
 8017f42:	6825      	ldr	r5, [r4, #0]
 8017f44:	6921      	ldr	r1, [r4, #16]
 8017f46:	eba5 0801 	sub.w	r8, r5, r1
 8017f4a:	6965      	ldr	r5, [r4, #20]
 8017f4c:	2302      	movs	r3, #2
 8017f4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f52:	fb95 f5f3 	sdiv	r5, r5, r3
 8017f56:	f108 0301 	add.w	r3, r8, #1
 8017f5a:	443b      	add	r3, r7
 8017f5c:	429d      	cmp	r5, r3
 8017f5e:	bf38      	it	cc
 8017f60:	461d      	movcc	r5, r3
 8017f62:	0553      	lsls	r3, r2, #21
 8017f64:	d544      	bpl.n	8017ff0 <__ssprint_r+0xd8>
 8017f66:	4629      	mov	r1, r5
 8017f68:	4648      	mov	r0, r9
 8017f6a:	f7fc fbab 	bl	80146c4 <_malloc_r>
 8017f6e:	b988      	cbnz	r0, 8017f94 <__ssprint_r+0x7c>
 8017f70:	230c      	movs	r3, #12
 8017f72:	f8c9 3000 	str.w	r3, [r9]
 8017f76:	89a3      	ldrh	r3, [r4, #12]
 8017f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f7c:	81a3      	strh	r3, [r4, #12]
 8017f7e:	2300      	movs	r3, #0
 8017f80:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f88:	e02f      	b.n	8017fea <__ssprint_r+0xd2>
 8017f8a:	e9da b700 	ldrd	fp, r7, [sl]
 8017f8e:	f10a 0a08 	add.w	sl, sl, #8
 8017f92:	e7ce      	b.n	8017f32 <__ssprint_r+0x1a>
 8017f94:	4642      	mov	r2, r8
 8017f96:	6921      	ldr	r1, [r4, #16]
 8017f98:	9001      	str	r0, [sp, #4]
 8017f9a:	f7fc fdd8 	bl	8014b4e <memcpy>
 8017f9e:	89a2      	ldrh	r2, [r4, #12]
 8017fa0:	9b01      	ldr	r3, [sp, #4]
 8017fa2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8017fa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017faa:	81a2      	strh	r2, [r4, #12]
 8017fac:	6123      	str	r3, [r4, #16]
 8017fae:	6165      	str	r5, [r4, #20]
 8017fb0:	4443      	add	r3, r8
 8017fb2:	eba5 0508 	sub.w	r5, r5, r8
 8017fb6:	6023      	str	r3, [r4, #0]
 8017fb8:	60a5      	str	r5, [r4, #8]
 8017fba:	463b      	mov	r3, r7
 8017fbc:	42bb      	cmp	r3, r7
 8017fbe:	bf28      	it	cs
 8017fc0:	463b      	movcs	r3, r7
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	4659      	mov	r1, fp
 8017fc6:	6820      	ldr	r0, [r4, #0]
 8017fc8:	9301      	str	r3, [sp, #4]
 8017fca:	f7fc fdcb 	bl	8014b64 <memmove>
 8017fce:	68a2      	ldr	r2, [r4, #8]
 8017fd0:	9b01      	ldr	r3, [sp, #4]
 8017fd2:	1ad2      	subs	r2, r2, r3
 8017fd4:	60a2      	str	r2, [r4, #8]
 8017fd6:	6822      	ldr	r2, [r4, #0]
 8017fd8:	4413      	add	r3, r2
 8017fda:	6023      	str	r3, [r4, #0]
 8017fdc:	68b3      	ldr	r3, [r6, #8]
 8017fde:	1bdf      	subs	r7, r3, r7
 8017fe0:	60b7      	str	r7, [r6, #8]
 8017fe2:	2f00      	cmp	r7, #0
 8017fe4:	d1d1      	bne.n	8017f8a <__ssprint_r+0x72>
 8017fe6:	2000      	movs	r0, #0
 8017fe8:	6070      	str	r0, [r6, #4]
 8017fea:	b003      	add	sp, #12
 8017fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff0:	462a      	mov	r2, r5
 8017ff2:	4648      	mov	r0, r9
 8017ff4:	f7fc fe20 	bl	8014c38 <_realloc_r>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	2800      	cmp	r0, #0
 8017ffc:	d1d6      	bne.n	8017fac <__ssprint_r+0x94>
 8017ffe:	6921      	ldr	r1, [r4, #16]
 8018000:	4648      	mov	r0, r9
 8018002:	f7ff faf7 	bl	80175f4 <_free_r>
 8018006:	e7b3      	b.n	8017f70 <__ssprint_r+0x58>

08018008 <__register_exitproc>:
 8018008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801800c:	4c26      	ldr	r4, [pc, #152]	; (80180a8 <__register_exitproc+0xa0>)
 801800e:	4606      	mov	r6, r0
 8018010:	6820      	ldr	r0, [r4, #0]
 8018012:	4698      	mov	r8, r3
 8018014:	460f      	mov	r7, r1
 8018016:	4691      	mov	r9, r2
 8018018:	f7fc fb42 	bl	80146a0 <__retarget_lock_acquire_recursive>
 801801c:	4b23      	ldr	r3, [pc, #140]	; (80180ac <__register_exitproc+0xa4>)
 801801e:	681d      	ldr	r5, [r3, #0]
 8018020:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8018024:	b918      	cbnz	r0, 801802e <__register_exitproc+0x26>
 8018026:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 801802a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 801802e:	6843      	ldr	r3, [r0, #4]
 8018030:	2b1f      	cmp	r3, #31
 8018032:	dd19      	ble.n	8018068 <__register_exitproc+0x60>
 8018034:	4b1e      	ldr	r3, [pc, #120]	; (80180b0 <__register_exitproc+0xa8>)
 8018036:	b933      	cbnz	r3, 8018046 <__register_exitproc+0x3e>
 8018038:	6820      	ldr	r0, [r4, #0]
 801803a:	f7fc fb32 	bl	80146a2 <__retarget_lock_release_recursive>
 801803e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018046:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801804a:	f7fc fb2b 	bl	80146a4 <malloc>
 801804e:	2800      	cmp	r0, #0
 8018050:	d0f2      	beq.n	8018038 <__register_exitproc+0x30>
 8018052:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8018056:	6003      	str	r3, [r0, #0]
 8018058:	2200      	movs	r2, #0
 801805a:	6042      	str	r2, [r0, #4]
 801805c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8018060:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8018064:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8018068:	6843      	ldr	r3, [r0, #4]
 801806a:	b19e      	cbz	r6, 8018094 <__register_exitproc+0x8c>
 801806c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8018070:	2201      	movs	r2, #1
 8018072:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8018076:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 801807a:	409a      	lsls	r2, r3
 801807c:	4311      	orrs	r1, r2
 801807e:	2e02      	cmp	r6, #2
 8018080:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8018084:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8018088:	bf02      	ittt	eq
 801808a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 801808e:	430a      	orreq	r2, r1
 8018090:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8018094:	1c5a      	adds	r2, r3, #1
 8018096:	3302      	adds	r3, #2
 8018098:	6042      	str	r2, [r0, #4]
 801809a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 801809e:	6820      	ldr	r0, [r4, #0]
 80180a0:	f7fc faff 	bl	80146a2 <__retarget_lock_release_recursive>
 80180a4:	2000      	movs	r0, #0
 80180a6:	e7cc      	b.n	8018042 <__register_exitproc+0x3a>
 80180a8:	20000870 	.word	0x20000870
 80180ac:	0801b6f4 	.word	0x0801b6f4
 80180b0:	080146a5 	.word	0x080146a5

080180b4 <_calloc_r>:
 80180b4:	b510      	push	{r4, lr}
 80180b6:	4351      	muls	r1, r2
 80180b8:	f7fc fb04 	bl	80146c4 <_malloc_r>
 80180bc:	4604      	mov	r4, r0
 80180be:	b198      	cbz	r0, 80180e8 <_calloc_r+0x34>
 80180c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80180c4:	f022 0203 	bic.w	r2, r2, #3
 80180c8:	3a04      	subs	r2, #4
 80180ca:	2a24      	cmp	r2, #36	; 0x24
 80180cc:	d81b      	bhi.n	8018106 <_calloc_r+0x52>
 80180ce:	2a13      	cmp	r2, #19
 80180d0:	d917      	bls.n	8018102 <_calloc_r+0x4e>
 80180d2:	2100      	movs	r1, #0
 80180d4:	2a1b      	cmp	r2, #27
 80180d6:	e9c0 1100 	strd	r1, r1, [r0]
 80180da:	d807      	bhi.n	80180ec <_calloc_r+0x38>
 80180dc:	f100 0308 	add.w	r3, r0, #8
 80180e0:	2200      	movs	r2, #0
 80180e2:	e9c3 2200 	strd	r2, r2, [r3]
 80180e6:	609a      	str	r2, [r3, #8]
 80180e8:	4620      	mov	r0, r4
 80180ea:	bd10      	pop	{r4, pc}
 80180ec:	2a24      	cmp	r2, #36	; 0x24
 80180ee:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80180f2:	bf11      	iteee	ne
 80180f4:	f100 0310 	addne.w	r3, r0, #16
 80180f8:	6101      	streq	r1, [r0, #16]
 80180fa:	f100 0318 	addeq.w	r3, r0, #24
 80180fe:	6141      	streq	r1, [r0, #20]
 8018100:	e7ee      	b.n	80180e0 <_calloc_r+0x2c>
 8018102:	4603      	mov	r3, r0
 8018104:	e7ec      	b.n	80180e0 <_calloc_r+0x2c>
 8018106:	2100      	movs	r1, #0
 8018108:	f7fc fd45 	bl	8014b96 <memset>
 801810c:	e7ec      	b.n	80180e8 <_calloc_r+0x34>
	...

08018110 <_close_r>:
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4c06      	ldr	r4, [pc, #24]	; (801812c <_close_r+0x1c>)
 8018114:	2300      	movs	r3, #0
 8018116:	4605      	mov	r5, r0
 8018118:	4608      	mov	r0, r1
 801811a:	6023      	str	r3, [r4, #0]
 801811c:	f7fa ff6b 	bl	8012ff6 <_close>
 8018120:	1c43      	adds	r3, r0, #1
 8018122:	d102      	bne.n	801812a <_close_r+0x1a>
 8018124:	6823      	ldr	r3, [r4, #0]
 8018126:	b103      	cbz	r3, 801812a <_close_r+0x1a>
 8018128:	602b      	str	r3, [r5, #0]
 801812a:	bd38      	pop	{r3, r4, r5, pc}
 801812c:	20033064 	.word	0x20033064

08018130 <_fclose_r>:
 8018130:	b570      	push	{r4, r5, r6, lr}
 8018132:	4606      	mov	r6, r0
 8018134:	460c      	mov	r4, r1
 8018136:	b911      	cbnz	r1, 801813e <_fclose_r+0xe>
 8018138:	2500      	movs	r5, #0
 801813a:	4628      	mov	r0, r5
 801813c:	bd70      	pop	{r4, r5, r6, pc}
 801813e:	b118      	cbz	r0, 8018148 <_fclose_r+0x18>
 8018140:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018142:	b90b      	cbnz	r3, 8018148 <_fclose_r+0x18>
 8018144:	f7ff f9c6 	bl	80174d4 <__sinit>
 8018148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801814a:	07d8      	lsls	r0, r3, #31
 801814c:	d405      	bmi.n	801815a <_fclose_r+0x2a>
 801814e:	89a3      	ldrh	r3, [r4, #12]
 8018150:	0599      	lsls	r1, r3, #22
 8018152:	d402      	bmi.n	801815a <_fclose_r+0x2a>
 8018154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018156:	f7fc faa3 	bl	80146a0 <__retarget_lock_acquire_recursive>
 801815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801815e:	b93b      	cbnz	r3, 8018170 <_fclose_r+0x40>
 8018160:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8018162:	f015 0501 	ands.w	r5, r5, #1
 8018166:	d1e7      	bne.n	8018138 <_fclose_r+0x8>
 8018168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801816a:	f7fc fa9a 	bl	80146a2 <__retarget_lock_release_recursive>
 801816e:	e7e4      	b.n	801813a <_fclose_r+0xa>
 8018170:	4621      	mov	r1, r4
 8018172:	4630      	mov	r0, r6
 8018174:	f7ff f8b4 	bl	80172e0 <__sflush_r>
 8018178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801817a:	4605      	mov	r5, r0
 801817c:	b133      	cbz	r3, 801818c <_fclose_r+0x5c>
 801817e:	69e1      	ldr	r1, [r4, #28]
 8018180:	4630      	mov	r0, r6
 8018182:	4798      	blx	r3
 8018184:	2800      	cmp	r0, #0
 8018186:	bfb8      	it	lt
 8018188:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 801818c:	89a3      	ldrh	r3, [r4, #12]
 801818e:	061a      	lsls	r2, r3, #24
 8018190:	d503      	bpl.n	801819a <_fclose_r+0x6a>
 8018192:	6921      	ldr	r1, [r4, #16]
 8018194:	4630      	mov	r0, r6
 8018196:	f7ff fa2d 	bl	80175f4 <_free_r>
 801819a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801819c:	b141      	cbz	r1, 80181b0 <_fclose_r+0x80>
 801819e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80181a2:	4299      	cmp	r1, r3
 80181a4:	d002      	beq.n	80181ac <_fclose_r+0x7c>
 80181a6:	4630      	mov	r0, r6
 80181a8:	f7ff fa24 	bl	80175f4 <_free_r>
 80181ac:	2300      	movs	r3, #0
 80181ae:	6323      	str	r3, [r4, #48]	; 0x30
 80181b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80181b2:	b121      	cbz	r1, 80181be <_fclose_r+0x8e>
 80181b4:	4630      	mov	r0, r6
 80181b6:	f7ff fa1d 	bl	80175f4 <_free_r>
 80181ba:	2300      	movs	r3, #0
 80181bc:	6463      	str	r3, [r4, #68]	; 0x44
 80181be:	f7ff f971 	bl	80174a4 <__sfp_lock_acquire>
 80181c2:	2300      	movs	r3, #0
 80181c4:	81a3      	strh	r3, [r4, #12]
 80181c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80181c8:	07db      	lsls	r3, r3, #31
 80181ca:	d402      	bmi.n	80181d2 <_fclose_r+0xa2>
 80181cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181ce:	f7fc fa68 	bl	80146a2 <__retarget_lock_release_recursive>
 80181d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181d4:	f7fc fa63 	bl	801469e <__retarget_lock_close_recursive>
 80181d8:	f7ff f96a 	bl	80174b0 <__sfp_lock_release>
 80181dc:	e7ad      	b.n	801813a <_fclose_r+0xa>
	...

080181e0 <_fstat_r>:
 80181e0:	b538      	push	{r3, r4, r5, lr}
 80181e2:	4c07      	ldr	r4, [pc, #28]	; (8018200 <_fstat_r+0x20>)
 80181e4:	2300      	movs	r3, #0
 80181e6:	4605      	mov	r5, r0
 80181e8:	4608      	mov	r0, r1
 80181ea:	4611      	mov	r1, r2
 80181ec:	6023      	str	r3, [r4, #0]
 80181ee:	f7fa ff0e 	bl	801300e <_fstat>
 80181f2:	1c43      	adds	r3, r0, #1
 80181f4:	d102      	bne.n	80181fc <_fstat_r+0x1c>
 80181f6:	6823      	ldr	r3, [r4, #0]
 80181f8:	b103      	cbz	r3, 80181fc <_fstat_r+0x1c>
 80181fa:	602b      	str	r3, [r5, #0]
 80181fc:	bd38      	pop	{r3, r4, r5, pc}
 80181fe:	bf00      	nop
 8018200:	20033064 	.word	0x20033064

08018204 <_isatty_r>:
 8018204:	b538      	push	{r3, r4, r5, lr}
 8018206:	4c06      	ldr	r4, [pc, #24]	; (8018220 <_isatty_r+0x1c>)
 8018208:	2300      	movs	r3, #0
 801820a:	4605      	mov	r5, r0
 801820c:	4608      	mov	r0, r1
 801820e:	6023      	str	r3, [r4, #0]
 8018210:	f7fa ff0a 	bl	8013028 <_isatty>
 8018214:	1c43      	adds	r3, r0, #1
 8018216:	d102      	bne.n	801821e <_isatty_r+0x1a>
 8018218:	6823      	ldr	r3, [r4, #0]
 801821a:	b103      	cbz	r3, 801821e <_isatty_r+0x1a>
 801821c:	602b      	str	r3, [r5, #0]
 801821e:	bd38      	pop	{r3, r4, r5, pc}
 8018220:	20033064 	.word	0x20033064

08018224 <_lseek_r>:
 8018224:	b538      	push	{r3, r4, r5, lr}
 8018226:	4c07      	ldr	r4, [pc, #28]	; (8018244 <_lseek_r+0x20>)
 8018228:	4605      	mov	r5, r0
 801822a:	4608      	mov	r0, r1
 801822c:	4611      	mov	r1, r2
 801822e:	2200      	movs	r2, #0
 8018230:	6022      	str	r2, [r4, #0]
 8018232:	461a      	mov	r2, r3
 8018234:	f7fa ff04 	bl	8013040 <_lseek>
 8018238:	1c43      	adds	r3, r0, #1
 801823a:	d102      	bne.n	8018242 <_lseek_r+0x1e>
 801823c:	6823      	ldr	r3, [r4, #0]
 801823e:	b103      	cbz	r3, 8018242 <_lseek_r+0x1e>
 8018240:	602b      	str	r3, [r5, #0]
 8018242:	bd38      	pop	{r3, r4, r5, pc}
 8018244:	20033064 	.word	0x20033064

08018248 <__ascii_mbtowc>:
 8018248:	b082      	sub	sp, #8
 801824a:	b901      	cbnz	r1, 801824e <__ascii_mbtowc+0x6>
 801824c:	a901      	add	r1, sp, #4
 801824e:	b142      	cbz	r2, 8018262 <__ascii_mbtowc+0x1a>
 8018250:	b14b      	cbz	r3, 8018266 <__ascii_mbtowc+0x1e>
 8018252:	7813      	ldrb	r3, [r2, #0]
 8018254:	600b      	str	r3, [r1, #0]
 8018256:	7812      	ldrb	r2, [r2, #0]
 8018258:	1c10      	adds	r0, r2, #0
 801825a:	bf18      	it	ne
 801825c:	2001      	movne	r0, #1
 801825e:	b002      	add	sp, #8
 8018260:	4770      	bx	lr
 8018262:	4610      	mov	r0, r2
 8018264:	e7fb      	b.n	801825e <__ascii_mbtowc+0x16>
 8018266:	f06f 0001 	mvn.w	r0, #1
 801826a:	e7f8      	b.n	801825e <__ascii_mbtowc+0x16>

0801826c <_read_r>:
 801826c:	b538      	push	{r3, r4, r5, lr}
 801826e:	4c07      	ldr	r4, [pc, #28]	; (801828c <_read_r+0x20>)
 8018270:	4605      	mov	r5, r0
 8018272:	4608      	mov	r0, r1
 8018274:	4611      	mov	r1, r2
 8018276:	2200      	movs	r2, #0
 8018278:	6022      	str	r2, [r4, #0]
 801827a:	461a      	mov	r2, r3
 801827c:	f7fa fe9e 	bl	8012fbc <_read>
 8018280:	1c43      	adds	r3, r0, #1
 8018282:	d102      	bne.n	801828a <_read_r+0x1e>
 8018284:	6823      	ldr	r3, [r4, #0]
 8018286:	b103      	cbz	r3, 801828a <_read_r+0x1e>
 8018288:	602b      	str	r3, [r5, #0]
 801828a:	bd38      	pop	{r3, r4, r5, pc}
 801828c:	20033064 	.word	0x20033064

08018290 <__ascii_wctomb>:
 8018290:	b149      	cbz	r1, 80182a6 <__ascii_wctomb+0x16>
 8018292:	2aff      	cmp	r2, #255	; 0xff
 8018294:	bf85      	ittet	hi
 8018296:	238a      	movhi	r3, #138	; 0x8a
 8018298:	6003      	strhi	r3, [r0, #0]
 801829a:	700a      	strbls	r2, [r1, #0]
 801829c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80182a0:	bf98      	it	ls
 80182a2:	2001      	movls	r0, #1
 80182a4:	4770      	bx	lr
 80182a6:	4608      	mov	r0, r1
 80182a8:	4770      	bx	lr
	...

080182ac <_getpid>:
 80182ac:	4b02      	ldr	r3, [pc, #8]	; (80182b8 <_getpid+0xc>)
 80182ae:	2258      	movs	r2, #88	; 0x58
 80182b0:	601a      	str	r2, [r3, #0]
 80182b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182b6:	4770      	bx	lr
 80182b8:	20033064 	.word	0x20033064

080182bc <_kill>:
 80182bc:	4b02      	ldr	r3, [pc, #8]	; (80182c8 <_kill+0xc>)
 80182be:	2258      	movs	r2, #88	; 0x58
 80182c0:	601a      	str	r2, [r3, #0]
 80182c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182c6:	4770      	bx	lr
 80182c8:	20033064 	.word	0x20033064

080182cc <_sbrk>:
 80182cc:	4b04      	ldr	r3, [pc, #16]	; (80182e0 <_sbrk+0x14>)
 80182ce:	6819      	ldr	r1, [r3, #0]
 80182d0:	4602      	mov	r2, r0
 80182d2:	b909      	cbnz	r1, 80182d8 <_sbrk+0xc>
 80182d4:	4903      	ldr	r1, [pc, #12]	; (80182e4 <_sbrk+0x18>)
 80182d6:	6019      	str	r1, [r3, #0]
 80182d8:	6818      	ldr	r0, [r3, #0]
 80182da:	4402      	add	r2, r0
 80182dc:	601a      	str	r2, [r3, #0]
 80182de:	4770      	bx	lr
 80182e0:	20033030 	.word	0x20033030
 80182e4:	20033068 	.word	0x20033068

080182e8 <_init>:
 80182e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ea:	bf00      	nop
 80182ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182ee:	bc08      	pop	{r3}
 80182f0:	469e      	mov	lr, r3
 80182f2:	4770      	bx	lr

080182f4 <_fini>:
 80182f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182f6:	bf00      	nop
 80182f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182fa:	bc08      	pop	{r3}
 80182fc:	469e      	mov	lr, r3
 80182fe:	4770      	bx	lr
